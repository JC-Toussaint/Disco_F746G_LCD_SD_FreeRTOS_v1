
Disco_F746G_LCD_SD_FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002540  08011ac0  08011ac0  00021ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014000  08014000  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08014000  08014000  00024000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014008  08014008  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014008  08014008  00024008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801400c  0801400c  0002400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08014010  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c94  20000090  080140a0  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20004d24  080140a0  00034d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003351f  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006558  00000000  00000000  000635df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002978  00000000  00000000  00069b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026d0  00000000  00000000  0006c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e11  00000000  00000000  0006eb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000302b0  00000000  00000000  0009f991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c9fd  00000000  00000000  000cfc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ec63e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b794  00000000  00000000  001ec694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011aa8 	.word	0x08011aa8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08011aa8 	.word	0x08011aa8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000ac 	.word	0x200000ac
 800060c:	20000104 	.word	0x20000104

08000610 <_write>:
// /* USER CODE END Defines */
#define PRINTF

// WARNING UART6 is connected to st-link
int _write(int file, char *ptr, int len)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	b29a      	uxth	r2, r3
 8000620:	230a      	movs	r3, #10
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <_write+0x24>)
 8000626:	f009 fe63 	bl	800a2f0 <HAL_UART_Transmit>
	return len;
 800062a:	687b      	ldr	r3, [r7, #4]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000f7c 	.word	0x20000f7c

08000638 <LCD_Config>:

static void LCD_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/* LCD Initialization */
	BSP_LCD_Init();
 800063c:	f002 fb36 	bl	8002cac <BSP_LCD_Init>

	/* LCD Initialization */
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000640:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000644:	2000      	movs	r0, #0
 8000646:	f002 fbc9 	bl	8002ddc <BSP_LCD_LayerDefaultInit>

	/* Enable the LCD */
	BSP_LCD_DisplayOn();
 800064a:	f002 fe65 	bl	8003318 <BSP_LCD_DisplayOn>

	/* Select the LCD Background Layer  */
	BSP_LCD_SelectLayer(0);
 800064e:	2000      	movs	r0, #0
 8000650:	f002 fc24 	bl	8002e9c <BSP_LCD_SelectLayer>

	/* Clear the Background Layer */
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000654:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000658:	f002 fce2 	bl	8003020 <BSP_LCD_Clear>

	/* Configure the transparency for background */
	BSP_LCD_SetTransparency(0, 100);
 800065c:	2164      	movs	r1, #100	; 0x64
 800065e:	2000      	movs	r0, #0
 8000660:	f002 fc6a 	bl	8002f38 <BSP_LCD_SetTransparency>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <Screen_Init>:

	/* Enable D-Cache */
	SCB_EnableDCache();
}

static void Screen_Init(Screen *screen) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

	LCD_Config();
 8000670:	f7ff ffe2 	bl	8000638 <LCD_Config>

	screen->width  = BSP_LCD_GetXSize();
 8000674:	f002 fb8a 	bl	8002d8c <BSP_LCD_GetXSize>
 8000678:	4602      	mov	r2, r0
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	609a      	str	r2, [r3, #8]
	screen->height = BSP_LCD_GetYSize();
 800067e:	f002 fb99 	bl	8002db4 <BSP_LCD_GetYSize>
 8000682:	4602      	mov	r2, r0
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	60da      	str	r2, [r3, #12]
	screen->addr[0] = LCD_FB_START_ADDRESS;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800068e:	601a      	str	r2, [r3, #0]
	screen->addr[1] = LCD_FB_START_ADDRESS + screen->width * screen->height * 4;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	68d2      	ldr	r2, [r2, #12]
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80006a0:	009a      	lsls	r2, r3, #2
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	605a      	str	r2, [r3, #4]
	screen->front = 1;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	611a      	str	r2, [r3, #16]

	BSP_LCD_LayerDefaultInit(0, screen->addr[0]);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2000      	movs	r0, #0
 80006b4:	f002 fb92 	bl	8002ddc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, screen->addr[1]);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	f002 fb8c 	bl	8002ddc <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SetLayerVisible(0, DISABLE);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2000      	movs	r0, #0
 80006c8:	f002 fbf8 	bl	8002ebc <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(1, ENABLE);
 80006cc:	2101      	movs	r1, #1
 80006ce:	2001      	movs	r0, #1
 80006d0:	f002 fbf4 	bl	8002ebc <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(0);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f002 fbe1 	bl	8002e9c <BSP_LCD_SelectLayer>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Screen_Flip_Buffers>:

void Screen_Flip_Buffers(Screen *screen) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	// wait for VSYNC
	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS)) { };
 80006ec:	bf00      	nop
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <Screen_Flip_Buffers+0x50>)
 80006f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f9      	beq.n	80006ee <Screen_Flip_Buffers+0xa>

	BSP_LCD_SetLayerVisible(screen->front, DISABLE);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fbdb 	bl	8002ebc <BSP_LCD_SetLayerVisible>
	screen->front ^= 1;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	f083 0201 	eor.w	r2, r3, #1
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	611a      	str	r2, [r3, #16]
	BSP_LCD_SetLayerVisible(screen->front, ENABLE);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	2101      	movs	r1, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fbcf 	bl	8002ebc <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(1-screen->front);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	f1c3 0301 	rsb	r3, r3, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fbb8 	bl	8002e9c <BSP_LCD_SelectLayer>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40016800 	.word	0x40016800

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f003 fba3 	bl	8003e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f83d 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 fdab 	bl	80012a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800074a:	f000 fd33 	bl	80011b4 <MX_DMA_Init>
  MX_ADC3_Init();
 800074e:	f000 f8e7 	bl	8000920 <MX_ADC3_Init>
  MX_CRC_Init();
 8000752:	f000 f937 	bl	80009c4 <MX_CRC_Init>
  MX_FMC_Init();
 8000756:	f000 fd53 	bl	8001200 <MX_FMC_Init>
  MX_LTDC_Init();
 800075a:	f000 f987 	bl	8000a6c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800075e:	f000 fa3d 	bl	8000bdc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000762:	f000 fa67 	bl	8000c34 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000766:	f000 fb0b 	bl	8000d80 <MX_SDMMC1_SD_Init>
  MX_TIM3_Init();
 800076a:	f000 fb39 	bl	8000de0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800076e:	f000 fbaf 	bl	8000ed0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000772:	f000 fc25 	bl	8000fc0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000776:	f000 fc77 	bl	8001068 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800077a:	f000 fcbb 	bl	80010f4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800077e:	f000 fce9 	bl	8001154 <MX_USART6_UART_Init>
  MX_DMA2D_Init();
 8000782:	f000 f941 	bl	8000a08 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

	printf("Start in progress\n");
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <main+0x7c>)
 8000788:	f010 fa90 	bl	8010cac <puts>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uSDThread */
  osThreadDef(uSDThread, StartuSDThread, osPriorityNormal, 0, 4096);
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <main+0x80>)
 800078e:	1d3c      	adds	r4, r7, #4
 8000790:	461d      	mov	r5, r3
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000796:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800079a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uSDThreadHandle = osThreadCreate(osThread(uSDThread), NULL);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00d fb09 	bl	800ddba <osThreadCreate>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a04      	ldr	r2, [pc, #16]	; (80007bc <main+0x84>)
 80007ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007ae:	f00d fae1 	bl	800dd74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80007b2:	e7fe      	b.n	80007b2 <main+0x7a>
 80007b4:	08011acc 	.word	0x08011acc
 80007b8:	08011ae0 	.word	0x08011ae0
 80007bc:	20001084 	.word	0x20001084

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0b4      	sub	sp, #208	; 0xd0
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f010 f94c 	bl	8010a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2284      	movs	r2, #132	; 0x84
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f010 f93d 	bl	8010a6c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f2:	f005 fd7b 	bl	80062ec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b47      	ldr	r3, [pc, #284]	; (8000914 <SystemClock_Config+0x154>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a46      	ldr	r2, [pc, #280]	; (8000914 <SystemClock_Config+0x154>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b44      	ldr	r3, [pc, #272]	; (8000914 <SystemClock_Config+0x154>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <SystemClock_Config+0x158>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a41      	ldr	r2, [pc, #260]	; (8000918 <SystemClock_Config+0x158>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <SystemClock_Config+0x158>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000826:	2309      	movs	r3, #9
 8000828:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000848:	2319      	movs	r3, #25
 800084a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800084e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000852:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800085c:	2309      	movs	r3, #9
 800085e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fe62 	bl	8006530 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000872:	f001 fa6d 	bl	8001d50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000876:	f005 fd49 	bl	800630c <HAL_PWREx_EnableOverDrive>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000880:	f001 fa66 	bl	8001d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800089a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008aa:	2106      	movs	r1, #6
 80008ac:	4618      	mov	r0, r3
 80008ae:	f006 f8e3 	bl	8006a78 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008b8:	f001 fa4a 	bl	8001d50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <SystemClock_Config+0x15c>)
 80008be:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80008c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80008c6:	2305      	movs	r3, #5
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80008ce:	2303      	movs	r3, #3
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008e2:	2300      	movs	r3, #0
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80008e6:	2300      	movs	r3, #0
 80008e8:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80008ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 fa91 	bl	8006e24 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000908:	f001 fa22 	bl	8001d50 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	37d0      	adds	r7, #208	; 0xd0
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000
 800091c:	00a00868 	.word	0x00a00868

08000920 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <MX_ADC3_Init+0x9c>)
 8000936:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_ADC3_Init+0x98>)
 800093a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800093e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_ADC3_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_ADC3_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000962:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <MX_ADC3_Init+0xa0>)
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_ADC3_Init+0x98>)
 800096e:	2201      	movs	r2, #1
 8000970:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_ADC3_Init+0x98>)
 800097c:	2201      	movs	r2, #1
 800097e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000982:	f003 fb03 	bl	8003f8c <HAL_ADC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800098c:	f001 f9e0 	bl	8001d50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000990:	2304      	movs	r3, #4
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000994:	2301      	movs	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_ADC3_Init+0x98>)
 80009a2:	f003 fb37 	bl	8004014 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009ac:	f001 f9d0 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000f34 	.word	0x20000f34
 80009bc:	40012200 	.word	0x40012200
 80009c0:	0f000001 	.word	0x0f000001

080009c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <MX_CRC_Init+0x40>)
 80009cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009ee:	f003 fe67 	bl	80046c0 <HAL_CRC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009f8:	f001 f9aa 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000938 	.word	0x20000938
 8000a04:	40023000 	.word	0x40023000

08000a08 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_DMA2D_Init+0x60>)
 8000a10:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a3e:	f004 fb2d 	bl	800509c <HAL_DMA2D_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a48:	f001 f982 	bl	8001d50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a50:	f004 fd92 	bl	8005578 <HAL_DMA2D_ConfigLayer>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a5a:	f001 f979 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200015f8 	.word	0x200015f8
 8000a68:	4002b000 	.word	0x4002b000

08000a6c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09a      	sub	sp, #104	; 0x68
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a76:	2234      	movs	r2, #52	; 0x34
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f00f fff6 	bl	8010a6c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2234      	movs	r2, #52	; 0x34
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00f fff0 	bl	8010a6c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a8c:	4b51      	ldr	r3, [pc, #324]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000a8e:	4a52      	ldr	r2, [pc, #328]	; (8000bd8 <MX_LTDC_Init+0x16c>)
 8000a90:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a92:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a98:	4b4e      	ldr	r3, [pc, #312]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aa4:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000aaa:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000aac:	2228      	movs	r2, #40	; 0x28
 8000aae:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ab0:	4b48      	ldr	r3, [pc, #288]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ab2:	2209      	movs	r2, #9
 8000ab4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ab6:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ab8:	2235      	movs	r2, #53	; 0x35
 8000aba:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000abc:	4b45      	ldr	r3, [pc, #276]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000abe:	220b      	movs	r2, #11
 8000ac0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ac4:	f240 2215 	movw	r2, #533	; 0x215
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000acc:	f240 121b 	movw	r2, #283	; 0x11b
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ad2:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ad4:	f240 2235 	movw	r2, #565	; 0x235
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ada:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000adc:	f240 121d 	movw	r2, #285	; 0x11d
 8000ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000afa:	4836      	ldr	r0, [pc, #216]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000afc:	f005 f848 	bl	8005b90 <HAL_LTDC_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b06:	f001 f923 	bl	8001d50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000b0e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000b18:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b1c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000b22:	23ff      	movs	r3, #255	; 0xff
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b2e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b30:	2307      	movs	r3, #7
 8000b32:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b34:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b38:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000b3a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000b40:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b44:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000b62:	f005 f9a7 	bl	8005eb4 <HAL_LTDC_ConfigLayer>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000b6c:	f001 f8f0 	bl	8001d50 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b92:	2305      	movs	r3, #5
 8000b94:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000bbc:	f005 f97a 	bl	8005eb4 <HAL_LTDC_ConfigLayer>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_LTDC_Init+0x15e>
  {
    Error_Handler();
 8000bc6:	f001 f8c3 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3768      	adds	r7, #104	; 0x68
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000a8c 	.word	0x20000a8c
 8000bd8:	40016800 	.word	0x40016800

08000bdc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <MX_QUADSPI_Init+0x54>)
 8000be4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bfa:	2218      	movs	r2, #24
 8000bfc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c00:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c04:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c1a:	f005 fbc7 	bl	80063ac <HAL_QSPI_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c24:	f001 f894 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20004b18 	.word	0x20004b18
 8000c30:	a0001000 	.word	0xa0001000

08000c34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b092      	sub	sp, #72	; 0x48
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	222c      	movs	r2, #44	; 0x2c
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00f ff08 	bl	8010a6c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c5c:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c5e:	4a47      	ldr	r2, [pc, #284]	; (8000d7c <MX_RTC_Init+0x148>)
 8000c60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c62:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c6a:	227f      	movs	r2, #127	; 0x7f
 8000c6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c70:	22ff      	movs	r2, #255	; 0xff
 8000c72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c74:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c7a:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c80:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c86:	483c      	ldr	r0, [pc, #240]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c88:	f006 fcbc 	bl	8007604 <HAL_RTC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000c92:	f001 f85d 	bl	8001d50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	482f      	ldr	r0, [pc, #188]	; (8000d78 <MX_RTC_Init+0x144>)
 8000cba:	f006 fd35 	bl	8007728 <HAL_RTC_SetTime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000cc4:	f001 f844 	bl	8001d50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <MX_RTC_Init+0x144>)
 8000cea:	f006 fddb 	bl	80078a4 <HAL_RTC_SetDate>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000cf4:	f001 f82c 	bl	8001d50 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4812      	ldr	r0, [pc, #72]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d30:	f006 fe60 	bl	80079f4 <HAL_RTC_SetAlarm>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000d3a:	f001 f809 	bl	8001d50 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	2201      	movs	r2, #1
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d4c:	f006 fe52 	bl	80079f4 <HAL_RTC_SetAlarm>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d56:	f000 fffb 	bl	8001d50 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d60:	f006 ffd2 	bl	8007d08 <HAL_RTCEx_SetTimeStamp>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000d6a:	f000 fff1 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3748      	adds	r7, #72	; 0x48
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20001088 	.word	0x20001088
 8000d7c:	40002800 	.word	0x40002800

08000d80 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <MX_SDMMC1_SD_Init+0x5c>)
 8000d88:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000dae:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000db0:	f007 f800 	bl	8007db4 <HAL_SD_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000dba:	f000 ffc9 	bl	8001d50 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000dc4:	f007 fdc4 	bl	8008950 <HAL_SD_ConfigWideBusOperation>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000dce:	f000 ffbf 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000970 	.word	0x20000970
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e14:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <MX_TIM3_Init+0xec>)
 8000e16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e38:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e3a:	f008 fb61 	bl	8009500 <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e44:	f000 ff84 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e52:	4619      	mov	r1, r3
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e56:	f008 fd11 	bl	800987c <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e60:	f000 ff76 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e66:	f008 fba2 	bl	80095ae <HAL_TIM_PWM_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e70:	f000 ff6e 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e84:	f009 f958 	bl	800a138 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e8e:	f000 ff5f 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e92:	2360      	movs	r3, #96	; 0x60
 8000e94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000eaa:	f008 fbd7 	bl	800965c <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000eb4:	f000 ff4c 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000eba:	f001 fc45 	bl	8002748 <HAL_TIM_MspPostInit>

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	; 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000a40 	.word	0x20000a40
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f04:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <MX_TIM5_Init+0xec>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f16:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f28:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f2a:	f008 fae9 	bl	8009500 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000f34:	f000 ff0c 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f42:	4619      	mov	r1, r3
 8000f44:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f46:	f008 fc99 	bl	800987c <HAL_TIM_ConfigClockSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000f50:	f000 fefe 	bl	8001d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f54:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f56:	f008 fb2a 	bl	80095ae <HAL_TIM_PWM_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000f60:	f000 fef6 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f74:	f009 f8e0 	bl	800a138 <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000f7e:	f000 fee7 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f82:	2360      	movs	r3, #96	; 0x60
 8000f84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	220c      	movs	r2, #12
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f9a:	f008 fb5f 	bl	800965c <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000fa4:	f000 fed4 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000faa:	f001 fbcd 	bl	8002748 <HAL_TIM_MspPostInit>

}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	; 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200009f4 	.word	0x200009f4
 8000fbc:	40000c00 	.word	0x40000c00

08000fc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <MX_TIM8_Init+0xa4>)
 8000fe2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_TIM8_Init+0xa0>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_TIM8_Init+0xa0>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800100a:	4815      	ldr	r0, [pc, #84]	; (8001060 <MX_TIM8_Init+0xa0>)
 800100c:	f008 fa78 	bl	8009500 <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001016:	f000 fe9b 	bl	8001d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <MX_TIM8_Init+0xa0>)
 8001028:	f008 fc28 	bl	800987c <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001032:	f000 fe8d 	bl	8001d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_TIM8_Init+0xa0>)
 8001048:	f009 f876 	bl	800a138 <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001052:	f000 fe7d 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200008ec 	.word	0x200008ec
 8001064:	40010400 	.word	0x40010400

08001068 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_TIM12_Init+0x84>)
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_TIM12_Init+0x88>)
 8001084:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_TIM12_Init+0x84>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_TIM12_Init+0x84>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_TIM12_Init+0x84>)
 8001094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001098:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_TIM12_Init+0x84>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_TIM12_Init+0x84>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010a6:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_TIM12_Init+0x84>)
 80010a8:	f008 fa81 	bl	80095ae <HAL_TIM_PWM_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80010b2:	f000 fe4d 	bl	8001d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	; 0x60
 80010b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM12_Init+0x84>)
 80010ce:	f008 fac5 	bl	800965c <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80010d8:	f000 fe3a 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM12_Init+0x84>)
 80010de:	f001 fb33 	bl	8002748 <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001638 	.word	0x20001638
 80010f0:	40001800 	.word	0x40001800

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART1_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <MX_USART1_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_USART1_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART1_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001138:	f009 f88c 	bl	800a254 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 fe05 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000f7c 	.word	0x20000f7c
 8001150:	40011000 	.word	0x40011000

08001154 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_USART6_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001198:	f009 f85c 	bl	800a254 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f000 fdd5 	bl	8001d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20001574 	.word	0x20001574
 80011b0:	40011400 	.word	0x40011400

080011b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_DMA_Init+0x48>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <MX_DMA_Init+0x48>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <MX_DMA_Init+0x48>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2106      	movs	r1, #6
 80011d6:	203b      	movs	r0, #59	; 0x3b
 80011d8:	f003 fa3b 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011dc:	203b      	movs	r0, #59	; 0x3b
 80011de:	f003 fa54 	bl	800468a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2106      	movs	r1, #6
 80011e6:	2045      	movs	r0, #69	; 0x45
 80011e8:	f003 fa33 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80011ec:	2045      	movs	r0, #69	; 0x45
 80011ee:	f003 fa4c 	bl	800468a <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_FMC_Init+0x98>)
 800121a:	4a20      	ldr	r2, [pc, #128]	; (800129c <MX_FMC_Init+0x9c>)
 800121c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_FMC_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_FMC_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_FMC_Init+0x98>)
 800122c:	2204      	movs	r2, #4
 800122e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_FMC_Init+0x98>)
 8001232:	2210      	movs	r2, #16
 8001234:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_FMC_Init+0x98>)
 8001238:	2240      	movs	r2, #64	; 0x40
 800123a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_FMC_Init+0x98>)
 800123e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001242:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_FMC_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_FMC_Init+0x98>)
 800124c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001250:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_FMC_Init+0x98>)
 8001254:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_FMC_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001264:	2307      	movs	r3, #7
 8001266:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800126c:	2307      	movs	r3, #7
 800126e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001270:	2303      	movs	r3, #3
 8001272:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_FMC_Init+0x98>)
 8001282:	f008 f8be 	bl	8009402 <HAL_SDRAM_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800128c:	f000 fd60 	bl	8001d50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001290:	bf00      	nop
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20001684 	.word	0x20001684
 800129c:	a0000140 	.word	0xa0000140

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b090      	sub	sp, #64	; 0x40
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b6:	4bae      	ldr	r3, [pc, #696]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4aad      	ldr	r2, [pc, #692]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4bab      	ldr	r3, [pc, #684]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ce:	4ba8      	ldr	r3, [pc, #672]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4aa7      	ldr	r2, [pc, #668]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4ba5      	ldr	r3, [pc, #660]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4ba2      	ldr	r3, [pc, #648]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4aa1      	ldr	r2, [pc, #644]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b9f      	ldr	r3, [pc, #636]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b9c      	ldr	r3, [pc, #624]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a9b      	ldr	r2, [pc, #620]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b99      	ldr	r3, [pc, #612]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b96      	ldr	r3, [pc, #600]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a95      	ldr	r2, [pc, #596]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b93      	ldr	r3, [pc, #588]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a8f      	ldr	r2, [pc, #572]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001346:	4b8a      	ldr	r3, [pc, #552]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a89      	ldr	r2, [pc, #548]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800134c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b87      	ldr	r3, [pc, #540]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800135e:	4b84      	ldr	r3, [pc, #528]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a83      	ldr	r2, [pc, #524]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b81      	ldr	r3, [pc, #516]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001376:	4b7e      	ldr	r3, [pc, #504]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a7d      	ldr	r2, [pc, #500]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800137c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a77      	ldr	r2, [pc, #476]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b75      	ldr	r3, [pc, #468]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	4b72      	ldr	r3, [pc, #456]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a71      	ldr	r2, [pc, #452]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2120      	movs	r1, #32
 80013c2:	486c      	ldr	r0, [pc, #432]	; (8001574 <MX_GPIO_Init+0x2d4>)
 80013c4:	f004 fbca 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	210c      	movs	r1, #12
 80013cc:	486a      	ldr	r0, [pc, #424]	; (8001578 <MX_GPIO_Init+0x2d8>)
 80013ce:	f004 fbc5 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2108      	movs	r1, #8
 80013d6:	4869      	ldr	r0, [pc, #420]	; (800157c <MX_GPIO_Init+0x2dc>)
 80013d8:	f004 fbc0 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	4865      	ldr	r0, [pc, #404]	; (8001578 <MX_GPIO_Init+0x2d8>)
 80013e4:	f004 fbba 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ee:	4864      	ldr	r0, [pc, #400]	; (8001580 <MX_GPIO_Init+0x2e0>)
 80013f0:	f004 fbb4 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	21c8      	movs	r1, #200	; 0xc8
 80013f8:	4862      	ldr	r0, [pc, #392]	; (8001584 <MX_GPIO_Init+0x2e4>)
 80013fa:	f004 fbaf 	bl	8005b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80013fe:	2308      	movs	r3, #8
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140e:	4619      	mov	r1, r3
 8001410:	485d      	ldr	r0, [pc, #372]	; (8001588 <MX_GPIO_Init+0x2e8>)
 8001412:	f004 f9df 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001416:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001428:	230b      	movs	r3, #11
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001430:	4619      	mov	r1, r3
 8001432:	4854      	ldr	r0, [pc, #336]	; (8001584 <MX_GPIO_Init+0x2e4>)
 8001434:	f004 f9ce 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001438:	f44f 7340 	mov.w	r3, #768	; 0x300
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143e:	2312      	movs	r3, #18
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001442:	2301      	movs	r3, #1
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144a:	2304      	movs	r3, #4
 800144c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001452:	4619      	mov	r1, r3
 8001454:	484d      	ldr	r0, [pc, #308]	; (800158c <MX_GPIO_Init+0x2ec>)
 8001456:	f004 f9bd 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800145a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800146c:	230a      	movs	r3, #10
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001474:	4619      	mov	r1, r3
 8001476:	4845      	ldr	r0, [pc, #276]	; (800158c <MX_GPIO_Init+0x2ec>)
 8001478:	f004 f9ac 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800148c:	2308      	movs	r3, #8
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001494:	4619      	mov	r1, r3
 8001496:	4837      	ldr	r0, [pc, #220]	; (8001574 <MX_GPIO_Init+0x2d4>)
 8001498:	f004 f99c 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800149c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ae:	2301      	movs	r3, #1
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b6:	4619      	mov	r1, r3
 80014b8:	4835      	ldr	r0, [pc, #212]	; (8001590 <MX_GPIO_Init+0x2f0>)
 80014ba:	f004 f98b 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80014be:	2360      	movs	r3, #96	; 0x60
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014ce:	230d      	movs	r3, #13
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d6:	4619      	mov	r1, r3
 80014d8:	482b      	ldr	r0, [pc, #172]	; (8001588 <MX_GPIO_Init+0x2e8>)
 80014da:	f004 f97b 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	4619      	mov	r1, r3
 80014f2:	4828      	ldr	r0, [pc, #160]	; (8001594 <MX_GPIO_Init+0x2f4>)
 80014f4:	f004 f96e 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80014f8:	2340      	movs	r3, #64	; 0x40
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <MX_GPIO_Init+0x2f8>)
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001508:	4619      	mov	r1, r3
 800150a:	481a      	ldr	r0, [pc, #104]	; (8001574 <MX_GPIO_Init+0x2d4>)
 800150c:	f004 f962 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001510:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001522:	230a      	movs	r3, #10
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152a:	4619      	mov	r1, r3
 800152c:	4818      	ldr	r0, [pc, #96]	; (8001590 <MX_GPIO_Init+0x2f0>)
 800152e:	f004 f951 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001532:	23f0      	movs	r3, #240	; 0xf0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001542:	230a      	movs	r3, #10
 8001544:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154a:	4619      	mov	r1, r3
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <MX_GPIO_Init+0x2d8>)
 800154e:	f004 f941 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001564:	230a      	movs	r3, #10
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156c:	4619      	mov	r1, r3
 800156e:	e015      	b.n	800159c <MX_GPIO_Init+0x2fc>
 8001570:	40023800 	.word	0x40023800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40022000 	.word	0x40022000
 800157c:	40022800 	.word	0x40022800
 8001580:	40021c00 	.word	0x40021c00
 8001584:	40021800 	.word	0x40021800
 8001588:	40021000 	.word	0x40021000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020000 	.word	0x40020000
 8001594:	40022400 	.word	0x40022400
 8001598:	10120000 	.word	0x10120000
 800159c:	48b1      	ldr	r0, [pc, #708]	; (8001864 <MX_GPIO_Init+0x5c4>)
 800159e:	f004 f919 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015a2:	2320      	movs	r3, #32
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b6:	4619      	mov	r1, r3
 80015b8:	48ab      	ldr	r0, [pc, #684]	; (8001868 <MX_GPIO_Init+0x5c8>)
 80015ba:	f004 f90b 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80015be:	2308      	movs	r3, #8
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015ce:	230d      	movs	r3, #13
 80015d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d6:	4619      	mov	r1, r3
 80015d8:	48a3      	ldr	r0, [pc, #652]	; (8001868 <MX_GPIO_Init+0x5c8>)
 80015da:	f004 f8fb 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80015de:	f241 030c 	movw	r3, #4108	; 0x100c
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f4:	4619      	mov	r1, r3
 80015f6:	489d      	ldr	r0, [pc, #628]	; (800186c <MX_GPIO_Init+0x5cc>)
 80015f8:	f004 f8ec 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160e:	4619      	mov	r1, r3
 8001610:	4897      	ldr	r0, [pc, #604]	; (8001870 <MX_GPIO_Init+0x5d0>)
 8001612:	f004 f8df 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001616:	2308      	movs	r3, #8
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	4891      	ldr	r0, [pc, #580]	; (8001874 <MX_GPIO_Init+0x5d4>)
 800162e:	f004 f8d1 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001644:	230d      	movs	r3, #13
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164c:	4619      	mov	r1, r3
 800164e:	4885      	ldr	r0, [pc, #532]	; (8001864 <MX_GPIO_Init+0x5c4>)
 8001650:	f004 f8c0 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001654:	2310      	movs	r3, #16
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001664:	4619      	mov	r1, r3
 8001666:	4880      	ldr	r0, [pc, #512]	; (8001868 <MX_GPIO_Init+0x5c8>)
 8001668:	f004 f8b4 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800166c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800167a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167e:	4619      	mov	r1, r3
 8001680:	487d      	ldr	r0, [pc, #500]	; (8001878 <MX_GPIO_Init+0x5d8>)
 8001682:	f004 f8a7 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001686:	2302      	movs	r3, #2
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001696:	2305      	movs	r3, #5
 8001698:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	4872      	ldr	r0, [pc, #456]	; (800186c <MX_GPIO_Init+0x5cc>)
 80016a2:	f004 f897 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016bc:	4619      	mov	r1, r3
 80016be:	486e      	ldr	r0, [pc, #440]	; (8001878 <MX_GPIO_Init+0x5d8>)
 80016c0:	f004 f888 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80016c4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016d6:	230d      	movs	r3, #13
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016de:	4619      	mov	r1, r3
 80016e0:	4865      	ldr	r0, [pc, #404]	; (8001878 <MX_GPIO_Init+0x5d8>)
 80016e2:	f004 f877 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001700:	4619      	mov	r1, r3
 8001702:	485e      	ldr	r0, [pc, #376]	; (800187c <MX_GPIO_Init+0x5dc>)
 8001704:	f004 f866 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800170e:	4b5c      	ldr	r3, [pc, #368]	; (8001880 <MX_GPIO_Init+0x5e0>)
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171a:	4619      	mov	r1, r3
 800171c:	4853      	ldr	r0, [pc, #332]	; (800186c <MX_GPIO_Init+0x5cc>)
 800171e:	f004 f859 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001722:	2310      	movs	r3, #16
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001732:	230a      	movs	r3, #10
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	484e      	ldr	r0, [pc, #312]	; (8001878 <MX_GPIO_Init+0x5d8>)
 800173e:	f004 f849 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001742:	23c8      	movs	r3, #200	; 0xc8
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001756:	4619      	mov	r1, r3
 8001758:	4842      	ldr	r0, [pc, #264]	; (8001864 <MX_GPIO_Init+0x5c4>)
 800175a:	f004 f83b 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800175e:	2305      	movs	r3, #5
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800176e:	230a      	movs	r3, #10
 8001770:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	483d      	ldr	r0, [pc, #244]	; (8001870 <MX_GPIO_Init+0x5d0>)
 800177a:	f004 f82b 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800177e:	2332      	movs	r3, #50	; 0x32
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800178e:	230b      	movs	r3, #11
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	4835      	ldr	r0, [pc, #212]	; (8001870 <MX_GPIO_Init+0x5d0>)
 800179a:	f004 f81b 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800179e:	2304      	movs	r3, #4
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	4619      	mov	r1, r3
 80017b0:	482c      	ldr	r0, [pc, #176]	; (8001864 <MX_GPIO_Init+0x5c4>)
 80017b2:	f004 f80f 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017b6:	2386      	movs	r3, #134	; 0x86
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017c6:	230b      	movs	r3, #11
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	482a      	ldr	r0, [pc, #168]	; (800187c <MX_GPIO_Init+0x5dc>)
 80017d2:	f003 ffff 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80017d6:	2350      	movs	r3, #80	; 0x50
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017e6:	230d      	movs	r3, #13
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ee:	4619      	mov	r1, r3
 80017f0:	4822      	ldr	r0, [pc, #136]	; (800187c <MX_GPIO_Init+0x5dc>)
 80017f2:	f003 ffef 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80017f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fc:	2312      	movs	r3, #18
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001800:	2301      	movs	r3, #1
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001808:	2304      	movs	r3, #4
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	4819      	ldr	r0, [pc, #100]	; (8001878 <MX_GPIO_Init+0x5d8>)
 8001814:	f003 ffde 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001818:	2328      	movs	r3, #40	; 0x28
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001828:	230a      	movs	r3, #10
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001830:	4619      	mov	r1, r3
 8001832:	4812      	ldr	r0, [pc, #72]	; (800187c <MX_GPIO_Init+0x5dc>)
 8001834:	f003 ffce 	bl	80057d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001838:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184a:	2305      	movs	r3, #5
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	4619      	mov	r1, r3
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <MX_GPIO_Init+0x5e4>)
 8001856:	f003 ffbd 	bl	80057d4 <HAL_GPIO_Init>

}
 800185a:	bf00      	nop
 800185c:	3740      	adds	r7, #64	; 0x40
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021800 	.word	0x40021800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40022000 	.word	0x40022000
 8001870:	40020800 	.word	0x40020800
 8001874:	40022800 	.word	0x40022800
 8001878:	40021c00 	.word	0x40021c00
 800187c:	40020000 	.word	0x40020000
 8001880:	10120000 	.word	0x10120000
 8001884:	40020400 	.word	0x40020400

08001888 <scan_files>:

/* USER CODE BEGIN 4 */
FRESULT scan_files (char* path, DIR* items, UINT *items_sz)        /* Start node to be scanned (***also used as work area***) */
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b0b4      	sub	sp, #208	; 0xd0
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
	DIR dir;
	UINT i;
	static FILINFO fno;
	char buffer[128];

	res = f_opendir(&dir, path);                       /* Open the directory */
 8001894:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	4618      	mov	r0, r3
 800189c:	f00b ffaa 	bl	800d7f4 <f_opendir>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	if (res == FR_OK) {
 80018a6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d16e      	bne.n	800198c <scan_files+0x104>
		items[*items_sz]=dir;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2234      	movs	r2, #52	; 0x34
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	4413      	add	r3, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	602b      	str	r3, [r5, #0]
		(*items_sz)++;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
		for (;;) {
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80018dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018e0:	492d      	ldr	r1, [pc, #180]	; (8001998 <scan_files+0x110>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00c f83f 	bl	800d966 <f_readdir>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

			if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80018ee:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d145      	bne.n	8001982 <scan_files+0xfa>
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <scan_files+0x110>)
 80018f8:	7d9b      	ldrb	r3, [r3, #22]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d041      	beq.n	8001982 <scan_files+0xfa>
//				res = scan_files(path, items, items_sz);     /* Enter the directory */
//				if (res != FR_OK) break;
//				path[i] = 0;
//			} else
			{                                       /* It is a file. */
				snprintf(buffer, sizeof(buffer), "%s/%s\n", path, fno.fname);
 80018fe:	f107 0010 	add.w	r0, r7, #16
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <scan_files+0x114>)
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <scan_files+0x118>)
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	f00f f9d6 	bl	8010cbc <sniprintf>
				printf("%s\n", buffer);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f00f f9c9 	bl	8010cac <puts>
				if (*items_sz>255) break;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d82e      	bhi.n	8001980 <scan_files+0xf8>
				items[*items_sz]=dir;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2234      	movs	r2, #52	; 0x34
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	4413      	add	r3, r2
 8001930:	461d      	mov	r5, r3
 8001932:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	602b      	str	r3, [r5, #0]

				snprintf(buffer, sizeof(buffer), "DIR.dir pointer %x %x\n", dir.dir, items[*items_sz].dir);
 8001946:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2234      	movs	r2, #52	; 0x34
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	4413      	add	r3, r2
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	f107 0010 	add.w	r0, r7, #16
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	460b      	mov	r3, r1
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <scan_files+0x11c>)
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	f00f f9a9 	bl	8010cbc <sniprintf>
				printf("%s\n", buffer);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4618      	mov	r0, r3
 8001970:	f00f f99c 	bl	8010cac <puts>
				(*items_sz)++;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800197e:	e7ad      	b.n	80018dc <scan_files+0x54>
				if (*items_sz>255) break;
 8001980:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8001982:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001986:	4618      	mov	r0, r3
 8001988:	f00b ffc2 	bl	800d910 <f_closedir>
	}

	return res;
 800198c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8001990:	4618      	mov	r0, r3
 8001992:	37c8      	adds	r7, #200	; 0xc8
 8001994:	46bd      	mov	sp, r7
 8001996:	bdb0      	pop	{r4, r5, r7, pc}
 8001998:	20000308 	.word	0x20000308
 800199c:	2000031e 	.word	0x2000031e
 80019a0:	08011afc 	.word	0x08011afc
 80019a4:	08011b04 	.word	0x08011b04

080019a8 <read_filename>:

FRESULT read_filename(char* path, DIR target_dir, char* fname)        /* Start node to be scanned (***also used as work area***) */
{
 80019a8:	b084      	sub	sp, #16
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b0b2      	sub	sp, #200	; 0xc8
 80019ae:	af02      	add	r7, sp, #8
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 80019b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	DIR dir;
	UINT i;
	static FILINFO fno;
	char buffer[STRING_SZ];

	res = f_opendir(&dir, path);                       /* Open the directory */
 80019ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00b ff17 	bl	800d7f4 <f_opendir>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	if (res == FR_OK) {
 80019cc:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d135      	bne.n	8001a40 <read_filename+0x98>
		res = f_readdir(&target_dir, &fno);                   /* Read a directory item */
 80019d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d8:	4920      	ldr	r1, [pc, #128]	; (8001a5c <read_filename+0xb4>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f00b ffc3 	bl	800d966 <f_readdir>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if (res != FR_OK || fno.fname[0] == 0) {
 80019e6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d103      	bne.n	80019f6 <read_filename+0x4e>
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <read_filename+0xb4>)
 80019f0:	7d9b      	ldrb	r3, [r3, #22]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <read_filename+0x64>
			fname[0]=0;
 80019f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 80019fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00b ff84 	bl	800d910 <f_closedir>
			return FR_INT_ERR;  /* Break on error or end of dir */
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e020      	b.n	8001a4e <read_filename+0xa6>
		}
		if (fno.fattrib & AM_DIR) {
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <read_filename+0xb4>)
 8001a0e:	7a1b      	ldrb	r3, [r3, #8]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <read_filename+0x86>
			fname[0]=0;
 8001a18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 8001a20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00b ff73 	bl	800d910 <f_closedir>
			return FR_INT_ERR;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e00f      	b.n	8001a4e <read_filename+0xa6>
		}

		snprintf(fname, STRING_SZ, "%s/%s", path, fno.fname);
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <read_filename+0xb8>)
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <read_filename+0xbc>)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001a3c:	f00f f93e 	bl	8010cbc <sniprintf>
	}
	f_closedir(&dir);
 8001a40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00b ff63 	bl	800d910 <f_closedir>

	return res;
 8001a4a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	37c0      	adds	r7, #192	; 0xc0
 8001a52:	46bd      	mov	sp, r7
 8001a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a58:	b004      	add	sp, #16
 8001a5a:	4770      	bx	lr
 8001a5c:	20000420 	.word	0x20000420
 8001a60:	20000436 	.word	0x20000436
 8001a64:	08011b1c 	.word	0x08011b1c

08001a68 <StartuSDThread>:
 * @retval None
 */

/* USER CODE END Header_StartuSDThread */
void StartuSDThread(void const * argument)
{
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	b09b      	sub	sp, #108	; 0x6c
 8001a6c:	af0c      	add	r7, sp, #48	; 0x30
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	sFONT *font= (sFONT*) malloc(sizeof(sFONT));
 8001a70:	2008      	movs	r0, #8
 8001a72:	f00e ffdd 	bl	8010a30 <malloc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
	if (!font) Error_Handler();
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <StartuSDThread+0x1c>
 8001a80:	f000 f966 	bl	8001d50 <Error_Handler>
	BSP_LED_Off(LED1);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f001 f8f9 	bl	8002c7c <BSP_LED_Off>

	Screen_Init(&screen);
 8001a8a:	48a5      	ldr	r0, [pc, #660]	; (8001d20 <StartuSDThread+0x2b8>)
 8001a8c:	f7fe fdec 	bl	8000668 <Screen_Init>
//
	Screen_Flip_Buffers(&screen);
 8001a90:	48a3      	ldr	r0, [pc, #652]	; (8001d20 <StartuSDThread+0x2b8>)
 8001a92:	f7fe fe27 	bl	80006e4 <Screen_Flip_Buffers>
	BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001a96:	48a3      	ldr	r0, [pc, #652]	; (8001d24 <StartuSDThread+0x2bc>)
 8001a98:	f001 fac2 	bl	8003020 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001a9c:	48a2      	ldr	r0, [pc, #648]	; (8001d28 <StartuSDThread+0x2c0>)
 8001a9e:	f001 fa75 	bl	8002f8c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa6:	f001 fa59 	bl	8002f5c <BSP_LCD_SetTextColor>
//
	Screen_Flip_Buffers(&screen);
 8001aaa:	489d      	ldr	r0, [pc, #628]	; (8001d20 <StartuSDThread+0x2b8>)
 8001aac:	f7fe fe1a 	bl	80006e4 <Screen_Flip_Buffers>
	BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001ab0:	489c      	ldr	r0, [pc, #624]	; (8001d24 <StartuSDThread+0x2bc>)
 8001ab2:	f001 fab5 	bl	8003020 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001ab6:	489c      	ldr	r0, [pc, #624]	; (8001d28 <StartuSDThread+0x2c0>)
 8001ab8:	f001 fa68 	bl	8002f8c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f001 fa4c 	bl	8002f5c <BSP_LCD_SetTextColor>

    uint32_t SX=BSP_LCD_GetXSize();
 8001ac4:	f001 f962 	bl	8002d8c <BSP_LCD_GetXSize>
 8001ac8:	6238      	str	r0, [r7, #32]
	uint32_t SY=BSP_LCD_GetYSize();
 8001aca:	f001 f973 	bl	8002db4 <BSP_LCD_GetYSize>
 8001ace:	61f8      	str	r0, [r7, #28]

	/*##-1- Link the micro SD disk I/O driver ##################################*/
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001ad0:	4996      	ldr	r1, [pc, #600]	; (8001d2c <StartuSDThread+0x2c4>)
 8001ad2:	4897      	ldr	r0, [pc, #604]	; (8001d30 <StartuSDThread+0x2c8>)
 8001ad4:	f00b ffec 	bl	800dab0 <FATFS_LinkDriver>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 809b 	bne.w	8001c16 <StartuSDThread+0x1ae>
	{
		/*##-2- Register the file system object to the FatFs module ##############*/
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4992      	ldr	r1, [pc, #584]	; (8001d2c <StartuSDThread+0x2c4>)
 8001ae4:	4893      	ldr	r0, [pc, #588]	; (8001d34 <StartuSDThread+0x2cc>)
 8001ae6:	f00b fe21 	bl	800d72c <f_mount>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <StartuSDThread+0x8c>
		{
			/* FatFs Initialization Error */
			Error_Handler();
 8001af0:	f000 f92e 	bl	8001d50 <Error_Handler>
		}
		/*##-3- Create a FAT file system (format) on the logical drive #########*/
		char path[2]="/";
 8001af4:	232f      	movs	r3, #47	; 0x2f
 8001af6:	823b      	strh	r3, [r7, #16]
		FRESULT res = scan_files(path, items, &items_sz);
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4a8e      	ldr	r2, [pc, #568]	; (8001d38 <StartuSDThread+0x2d0>)
 8001afe:	498f      	ldr	r1, [pc, #572]	; (8001d3c <StartuSDThread+0x2d4>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fec1 	bl	8001888 <scan_files>
 8001b06:	4603      	mov	r3, r0
 8001b08:	76fb      	strb	r3, [r7, #27]
		snprintf(buffer, sizeof(buffer), "==============================================");
 8001b0a:	4a8d      	ldr	r2, [pc, #564]	; (8001d40 <StartuSDThread+0x2d8>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	488d      	ldr	r0, [pc, #564]	; (8001d44 <StartuSDThread+0x2dc>)
 8001b10:	f00f f8d4 	bl	8010cbc <sniprintf>
		printf("%s\n", buffer);
 8001b14:	488b      	ldr	r0, [pc, #556]	; (8001d44 <StartuSDThread+0x2dc>)
 8001b16:	f00f f8c9 	bl	8010cac <puts>

		for (UINT it=0; it<items_sz; it++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1e:	e036      	b.n	8001b8e <StartuSDThread+0x126>
			snprintf(buffer, sizeof(buffer), "dir %x", items[it].dir);
 8001b20:	4a86      	ldr	r2, [pc, #536]	; (8001d3c <StartuSDThread+0x2d4>)
 8001b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b24:	2134      	movs	r1, #52	; 0x34
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3320      	adds	r3, #32
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a85      	ldr	r2, [pc, #532]	; (8001d48 <StartuSDThread+0x2e0>)
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	4883      	ldr	r0, [pc, #524]	; (8001d44 <StartuSDThread+0x2dc>)
 8001b36:	f00f f8c1 	bl	8010cbc <sniprintf>
			printf("%s\n", buffer);
 8001b3a:	4882      	ldr	r0, [pc, #520]	; (8001d44 <StartuSDThread+0x2dc>)
 8001b3c:	f00f f8b6 	bl	8010cac <puts>
			FRESULT res = read_filename(path, items[it], buffer);
 8001b40:	4a7e      	ldr	r2, [pc, #504]	; (8001d3c <StartuSDThread+0x2d4>)
 8001b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b44:	2134      	movs	r1, #52	; 0x34
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	18d6      	adds	r6, r2, r3
 8001b4c:	f107 0c10 	add.w	ip, r7, #16
 8001b50:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <StartuSDThread+0x2dc>)
 8001b52:	930a      	str	r3, [sp, #40]	; 0x28
 8001b54:	466d      	mov	r5, sp
 8001b56:	f106 040c 	add.w	r4, r6, #12
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b66:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b6a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b6e:	4660      	mov	r0, ip
 8001b70:	f7ff ff1a 	bl	80019a8 <read_filename>
 8001b74:	4603      	mov	r3, r0
 8001b76:	767b      	strb	r3, [r7, #25]
			if (res != FR_OK) continue;
 8001b78:	7e7b      	ldrb	r3, [r7, #25]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d103      	bne.n	8001b86 <StartuSDThread+0x11e>
			printf("%s\n", buffer);
 8001b7e:	4871      	ldr	r0, [pc, #452]	; (8001d44 <StartuSDThread+0x2dc>)
 8001b80:	f00f f894 	bl	8010cac <puts>
 8001b84:	e000      	b.n	8001b88 <StartuSDThread+0x120>
			if (res != FR_OK) continue;
 8001b86:	bf00      	nop
		for (UINT it=0; it<items_sz; it++){
 8001b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <StartuSDThread+0x2d0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3c3      	bcc.n	8001b20 <StartuSDThread+0xb8>
		}

		snprintf(buffer, sizeof(buffer), "==============================================");
 8001b98:	4a69      	ldr	r2, [pc, #420]	; (8001d40 <StartuSDThread+0x2d8>)
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	4869      	ldr	r0, [pc, #420]	; (8001d44 <StartuSDThread+0x2dc>)
 8001b9e:	f00f f88d 	bl	8010cbc <sniprintf>
		printf("%s\n", buffer);
 8001ba2:	4868      	ldr	r0, [pc, #416]	; (8001d44 <StartuSDThread+0x2dc>)
 8001ba4:	f00f f882 	bl	8010cac <puts>

		for (UINT it=0; it<items_sz; it++){
 8001ba8:	2300      	movs	r3, #0
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
 8001bac:	e026      	b.n	8001bfc <StartuSDThread+0x194>
			FRESULT res = read_filename(path, items[it], buffer);
 8001bae:	4a63      	ldr	r2, [pc, #396]	; (8001d3c <StartuSDThread+0x2d4>)
 8001bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb2:	2134      	movs	r1, #52	; 0x34
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	18d6      	adds	r6, r2, r3
 8001bba:	f107 0c10 	add.w	ip, r7, #16
 8001bbe:	4b61      	ldr	r3, [pc, #388]	; (8001d44 <StartuSDThread+0x2dc>)
 8001bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8001bc2:	466d      	mov	r5, sp
 8001bc4:	f106 040c 	add.w	r4, r6, #12
 8001bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bd8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001bdc:	4660      	mov	r0, ip
 8001bde:	f7ff fee3 	bl	80019a8 <read_filename>
 8001be2:	4603      	mov	r3, r0
 8001be4:	76bb      	strb	r3, [r7, #26]
			if (res != FR_OK) continue;
 8001be6:	7ebb      	ldrb	r3, [r7, #26]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <StartuSDThread+0x18c>
			printf("%s\n", buffer);
 8001bec:	4855      	ldr	r0, [pc, #340]	; (8001d44 <StartuSDThread+0x2dc>)
 8001bee:	f00f f85d 	bl	8010cac <puts>
 8001bf2:	e000      	b.n	8001bf6 <StartuSDThread+0x18e>
			if (res != FR_OK) continue;
 8001bf4:	bf00      	nop
		for (UINT it=0; it<items_sz; it++){
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8001bfc:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <StartuSDThread+0x2d0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3d3      	bcc.n	8001bae <StartuSDThread+0x146>
		}

		snprintf(buffer, sizeof(buffer), "==============================================");
 8001c06:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <StartuSDThread+0x2d8>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	484e      	ldr	r0, [pc, #312]	; (8001d44 <StartuSDThread+0x2dc>)
 8001c0c:	f00f f856 	bl	8010cbc <sniprintf>
		printf("%s\n", buffer);
 8001c10:	484c      	ldr	r0, [pc, #304]	; (8001d44 <StartuSDThread+0x2dc>)
 8001c12:	f00f f84b 	bl	8010cac <puts>
	}

	BSP_LCD_SetFont(&Font12);
 8001c16:	484d      	ldr	r0, [pc, #308]	; (8001d4c <StartuSDThread+0x2e4>)
 8001c18:	f001 f9d2 	bl	8002fc0 <BSP_LCD_SetFont>
	font = BSP_LCD_GetFont();
 8001c1c:	f001 f9ea 	bl	8002ff4 <BSP_LCD_GetFont>
 8001c20:	6278      	str	r0, [r7, #36]	; 0x24
	uint16_t Height = font->Height;
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	88db      	ldrh	r3, [r3, #6]
 8001c26:	82fb      	strh	r3, [r7, #22]

	/* Infinite Loop */
	for( ;; )
	{
		osDelay(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f00c f912 	bl	800de52 <osDelay>

		BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001c2e:	483d      	ldr	r0, [pc, #244]	; (8001d24 <StartuSDThread+0x2bc>)
 8001c30:	f001 f9f6 	bl	8003020 <BSP_LCD_Clear>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001c34:	483c      	ldr	r0, [pc, #240]	; (8001d28 <StartuSDThread+0x2c0>)
 8001c36:	f001 f9a9 	bl	8002f8c <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3e:	f001 f98d 	bl	8002f5c <BSP_LCD_SetTextColor>

		for (UINT it=0, offset=0; it<items_sz; it++){
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c4a:	e05c      	b.n	8001d06 <StartuSDThread+0x29e>
			char path[2]="/";
 8001c4c:	232f      	movs	r3, #47	; 0x2f
 8001c4e:	81bb      	strh	r3, [r7, #12]
			FRESULT res = read_filename(path, items[it], buffer);
 8001c50:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <StartuSDThread+0x2d4>)
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	2134      	movs	r1, #52	; 0x34
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	18d6      	adds	r6, r2, r3
 8001c5c:	f107 0c0c 	add.w	ip, r7, #12
 8001c60:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <StartuSDThread+0x2dc>)
 8001c62:	930a      	str	r3, [sp, #40]	; 0x28
 8001c64:	466d      	mov	r5, sp
 8001c66:	f106 040c 	add.w	r4, r6, #12
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c7a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c7e:	4660      	mov	r0, ip
 8001c80:	f7ff fe92 	bl	80019a8 <read_filename>
 8001c84:	4603      	mov	r3, r0
 8001c86:	757b      	strb	r3, [r7, #21]
			if (res != FR_OK) continue;
 8001c88:	7d7b      	ldrb	r3, [r7, #21]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d137      	bne.n	8001cfe <StartuSDThread+0x296>

			BSP_LCD_SetFont(&Font12);
 8001c8e:	482f      	ldr	r0, [pc, #188]	; (8001d4c <StartuSDThread+0x2e4>)
 8001c90:	f001 f996 	bl	8002fc0 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, Height*(offset%(SY/Height))+5, (uint8_t*)buffer, LEFT_MODE);
 8001c94:	8afb      	ldrh	r3, [r7, #22]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ca2:	fb02 f201 	mul.w	r2, r2, r1
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	8afa      	ldrh	r2, [r7, #22]
 8001cac:	fb12 f303 	smulbb	r3, r2, r3
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3305      	adds	r3, #5
 8001cb4:	b299      	uxth	r1, r3
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	4a22      	ldr	r2, [pc, #136]	; (8001d44 <StartuSDThread+0x2dc>)
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f001 fa1c 	bl	80030f8 <BSP_LCD_DisplayStringAt>
			if ((offset%(SY/Height))==SY/Height-1){
 8001cc0:	8afb      	ldrh	r3, [r7, #22]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cce:	fb02 f201 	mul.w	r2, r2, r1
 8001cd2:	1a9a      	subs	r2, r3, r2
 8001cd4:	8afb      	ldrh	r3, [r7, #22]
 8001cd6:	69f9      	ldr	r1, [r7, #28]
 8001cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d109      	bne.n	8001cf6 <StartuSDThread+0x28e>
			   Screen_Flip_Buffers(&screen);
 8001ce2:	480f      	ldr	r0, [pc, #60]	; (8001d20 <StartuSDThread+0x2b8>)
 8001ce4:	f7fe fcfe 	bl	80006e4 <Screen_Flip_Buffers>
			   BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001ce8:	480e      	ldr	r0, [pc, #56]	; (8001d24 <StartuSDThread+0x2bc>)
 8001cea:	f001 f999 	bl	8003020 <BSP_LCD_Clear>
			   osDelay(1000);
 8001cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf2:	f00c f8ae 	bl	800de52 <osDelay>
			}
			offset++;
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfc:	e000      	b.n	8001d00 <StartuSDThread+0x298>
			if (res != FR_OK) continue;
 8001cfe:	bf00      	nop
		for (UINT it=0, offset=0; it<items_sz; it++){
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	3301      	adds	r3, #1
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <StartuSDThread+0x2d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d39d      	bcc.n	8001c4c <StartuSDThread+0x1e4>
		}
		Screen_Flip_Buffers(&screen);
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <StartuSDThread+0x2b8>)
 8001d12:	f7fe fce7 	bl	80006e4 <Screen_Flip_Buffers>
		osDelay(1000);
 8001d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d1a:	f00c f89a 	bl	800de52 <osDelay>
		osDelay(1);
 8001d1e:	e783      	b.n	8001c28 <StartuSDThread+0x1c0>
 8001d20:	2000095c 	.word	0x2000095c
 8001d24:	ffff0000 	.word	0xffff0000
 8001d28:	ff0000ff 	.word	0xff0000ff
 8001d2c:	20001080 	.word	0x20001080
 8001d30:	08011bc8 	.word	0x08011bc8
 8001d34:	200010a8 	.word	0x200010a8
 8001d38:	20000304 	.word	0x20000304
 8001d3c:	20001718 	.word	0x20001718
 8001d40:	08011b24 	.word	0x08011b24
 8001d44:	20001000 	.word	0x20001000
 8001d48:	08011b54 	.word	0x08011b54
 8001d4c:	20000010 	.word	0x20000010

08001d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d54:	b672      	cpsid	i
}
 8001d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d58:	e7fe      	b.n	8001d58 <Error_Handler+0x8>
	...

08001d5c <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <SD_CheckStatus+0x38>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8001d6c:	f001 fe92 	bl	8003a94 <BSP_SD_GetCardState>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d107      	bne.n	8001d86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <SD_CheckStatus+0x38>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SD_CheckStatus+0x38>)
 8001d84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001d86:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <SD_CheckStatus+0x38>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000000 	.word	0x20000000

08001d98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <SD_initialize+0x6c>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8001da8:	f00b ffeb 	bl	800dd82 <osKernelRunning>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d020      	beq.n	8001df4 <SD_initialize+0x5c>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8001db2:	f001 fcc9 	bl	8003748 <BSP_SD_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ffcc 	bl	8001d5c <SD_CheckStatus>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <SD_initialize+0x6c>)
 8001dca:	701a      	strb	r2, [r3, #0]

    /*
     * if the SD is correctly initialized, create the operation queue
     */

    if (Stat != STA_NOINIT)
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <SD_initialize+0x6c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d00e      	beq.n	8001df4 <SD_initialize+0x5c>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <SD_initialize+0x70>)
 8001dd8:	f107 0408 	add.w	r4, r7, #8
 8001ddc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f00c f91c 	bl	800e026 <osMessageCreate>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <SD_initialize+0x74>)
 8001df2:	6013      	str	r3, [r2, #0]
    }
  }

  return Stat;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <SD_initialize+0x6c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000
 8001e08:	08011b68 	.word	0x08011b68
 8001e0c:	20000538 	.word	0x20000538

08001e10 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff9d 	bl	8001d5c <SD_CheckStatus>
 8001e22:	4603      	mov	r3, r0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t timer;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	68b8      	ldr	r0, [r7, #8]
 8001e48:	f001 fce0 	bl	800380c <BSP_SD_ReadBlocks_DMA>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d125      	bne.n	8001e9e <SD_read+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <SD_read+0x80>)
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f00c f94a 	bl	800e0f8 <osMessageGet>

    if (event.status == osEventMessage)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d119      	bne.n	8001e9e <SD_read+0x72>
    {
      if (event.value.v == READ_CPLT_MSG)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d116      	bne.n	8001e9e <SD_read+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8001e70:	f00b ff93 	bl	800dd9a <osKernelSysTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f247 5330 	movw	r3, #30000	; 0x7530
 8001e7a:	4413      	add	r3, r2
 8001e7c:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 8001e7e:	e008      	b.n	8001e92 <SD_read+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001e80:	f001 fe08 	bl	8003a94 <BSP_SD_GetCardState>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <SD_read+0x66>
          {
            res = RES_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8001e90:	e005      	b.n	8001e9e <SD_read+0x72>
        while(timer > osKernelSysTick())
 8001e92:	f00b ff82 	bl	800dd9a <osKernelSysTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d8f0      	bhi.n	8001e80 <SD_read+0x54>
        }
      }
    }
  }

  return res;
 8001e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3728      	adds	r7, #40	; 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000538 	.word	0x20000538

08001eb0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73fb      	strb	r3, [r7, #15]
  osEvent event;
  DRESULT res = RES_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif


  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	68b8      	ldr	r0, [r7, #8]
 8001ecc:	f001 fcb6 	bl	800383c <BSP_SD_WriteBlocks_DMA>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d125      	bne.n	8001f22 <SD_write+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <SD_write+0x80>)
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	f247 5230 	movw	r2, #30000	; 0x7530
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00c f908 	bl	800e0f8 <osMessageGet>

    if (event.status == osEventMessage)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d119      	bne.n	8001f22 <SD_write+0x72>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d116      	bne.n	8001f22 <SD_write+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8001ef4:	f00b ff51 	bl	800dd9a <osKernelSysTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f247 5330 	movw	r3, #30000	; 0x7530
 8001efe:	4413      	add	r3, r2
 8001f00:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 8001f02:	e008      	b.n	8001f16 <SD_write+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001f04:	f001 fdc6 	bl	8003a94 <BSP_SD_GetCardState>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <SD_write+0x66>
          {
            res = RES_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001f14:	e005      	b.n	8001f22 <SD_write+0x72>
        while(timer > osKernelSysTick())
 8001f16:	f00b ff40 	bl	800dd9a <osKernelSysTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d8f0      	bhi.n	8001f04 <SD_write+0x54>
        }
      }
    }
  }

  return res;
 8001f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000538 	.word	0x20000538

08001f34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08c      	sub	sp, #48	; 0x30
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	603a      	str	r2, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
 8001f40:	460b      	mov	r3, r1
 8001f42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <SD_ioctl+0xac>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SD_ioctl+0x28>
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e03c      	b.n	8001fd6 <SD_ioctl+0xa2>

  switch (cmd)
 8001f5c:	79bb      	ldrb	r3, [r7, #6]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d834      	bhi.n	8001fcc <SD_ioctl+0x98>
 8001f62:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <SD_ioctl+0x34>)
 8001f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	08001f81 	.word	0x08001f81
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	08001fb3 	.word	0x08001fb3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f7e:	e028      	b.n	8001fd2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fd95 	bl	8003ab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f96:	e01c      	b.n	8001fd2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f001 fd89 	bl	8003ab4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001fb0:	e00f      	b.n	8001fd2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 fd7c 	bl	8003ab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8001fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbe:	0a5a      	lsrs	r2, r3, #9
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001fca:	e002      	b.n	8001fd2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3730      	adds	r7, #48	; 0x30
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000000 	.word	0x20000000

08001fe4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <BSP_SD_WriteCpltCallback+0x18>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f00c f840 	bl	800e078 <osMessagePut>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000538 	.word	0x20000538

08002000 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <BSP_SD_ReadCpltCallback+0x18>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	2101      	movs	r1, #1
 800200e:	4618      	mov	r0, r3
 8002010:	f00c f832 	bl	800e078 <osMessagePut>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000538 	.word	0x20000538

0800201c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_MspInit+0x4c>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_MspInit+0x4c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_MspInit+0x4c>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_MspInit+0x4c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	210f      	movs	r1, #15
 8002056:	f06f 0001 	mvn.w	r0, #1
 800205a:	f002 fafa 	bl	8004652 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a21      	ldr	r2, [pc, #132]	; (8002110 <HAL_ADC_MspInit+0xa4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d13c      	bne.n	8002108 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 8002094:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 80020ac:	f043 0320 	orr.w	r3, r3, #32
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_ADC_MspInit+0xa8>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80020d6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80020da:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020dc:	2303      	movs	r3, #3
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_ADC_MspInit+0xac>)
 80020ec:	f003 fb72 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80020f0:	2301      	movs	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f4:	2303      	movs	r3, #3
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <HAL_ADC_MspInit+0xb0>)
 8002104:	f003 fb66 	bl	80057d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40012200 	.word	0x40012200
 8002114:	40023800 	.word	0x40023800
 8002118:	40021400 	.word	0x40021400
 800211c:	40020000 	.word	0x40020000

08002120 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_CRC_MspInit+0x38>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10b      	bne.n	800214a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_CRC_MspInit+0x3c>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_CRC_MspInit+0x3c>)
 8002138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_CRC_MspInit+0x3c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023000 	.word	0x40023000
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_DMA2D_MspInit+0x44>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_DMA2D_MspInit+0x48>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2105      	movs	r1, #5
 800218e:	205a      	movs	r0, #90	; 0x5a
 8002190:	f002 fa5f 	bl	8004652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002194:	205a      	movs	r0, #90	; 0x5a
 8002196:	f002 fa78 	bl	800468a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	4002b000 	.word	0x4002b000
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08e      	sub	sp, #56	; 0x38
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a55      	ldr	r2, [pc, #340]	; (8002320 <HAL_LTDC_MspInit+0x174>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	f040 80a3 	bne.w	8002316 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80021d0:	4b54      	ldr	r3, [pc, #336]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	4a53      	ldr	r2, [pc, #332]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 80021d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021da:	6453      	str	r3, [r2, #68]	; 0x44
 80021dc:	4b51      	ldr	r3, [pc, #324]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e4:	623b      	str	r3, [r7, #32]
 80021e6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e8:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002200:	4b48      	ldr	r3, [pc, #288]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4a47      	ldr	r2, [pc, #284]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 8002206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220a:	6313      	str	r3, [r2, #48]	; 0x30
 800220c:	4b45      	ldr	r3, [pc, #276]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002218:	4b42      	ldr	r3, [pc, #264]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	4a41      	ldr	r2, [pc, #260]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 800221e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002222:	6313      	str	r3, [r2, #48]	; 0x30
 8002224:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 8002236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223a:	6313      	str	r3, [r2, #48]	; 0x30
 800223c:	4b39      	ldr	r3, [pc, #228]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	4a35      	ldr	r2, [pc, #212]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6313      	str	r3, [r2, #48]	; 0x30
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_LTDC_MspInit+0x178>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002260:	2310      	movs	r3, #16
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002270:	230e      	movs	r3, #14
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	4619      	mov	r1, r3
 800227a:	482b      	ldr	r0, [pc, #172]	; (8002328 <HAL_LTDC_MspInit+0x17c>)
 800227c:	f003 faaa 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002280:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002292:	230e      	movs	r3, #14
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	4619      	mov	r1, r3
 800229c:	4823      	ldr	r0, [pc, #140]	; (800232c <HAL_LTDC_MspInit+0x180>)
 800229e:	f003 fa99 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80022a2:	23f7      	movs	r3, #247	; 0xf7
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022b2:	230e      	movs	r3, #14
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80022b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ba:	4619      	mov	r1, r3
 80022bc:	481c      	ldr	r0, [pc, #112]	; (8002330 <HAL_LTDC_MspInit+0x184>)
 80022be:	f003 fa89 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80022c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022d4:	2309      	movs	r3, #9
 80022d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80022d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022dc:	4619      	mov	r1, r3
 80022de:	4815      	ldr	r0, [pc, #84]	; (8002334 <HAL_LTDC_MspInit+0x188>)
 80022e0:	f003 fa78 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80022e4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022f6:	230e      	movs	r3, #14
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	4619      	mov	r1, r3
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <HAL_LTDC_MspInit+0x18c>)
 8002302:	f003 fa67 	bl	80057d4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2105      	movs	r1, #5
 800230a:	2058      	movs	r0, #88	; 0x58
 800230c:	f002 f9a1 	bl	8004652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002310:	2058      	movs	r0, #88	; 0x58
 8002312:	f002 f9ba 	bl	800468a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002316:	bf00      	nop
 8002318:	3738      	adds	r7, #56	; 0x38
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40016800 	.word	0x40016800
 8002324:	40023800 	.word	0x40023800
 8002328:	40021000 	.word	0x40021000
 800232c:	40022400 	.word	0x40022400
 8002330:	40022800 	.word	0x40022800
 8002334:	40021800 	.word	0x40021800
 8002338:	40022000 	.word	0x40022000

0800233c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08c      	sub	sp, #48	; 0x30
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a3b      	ldr	r2, [pc, #236]	; (8002448 <HAL_QSPI_MspInit+0x10c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d170      	bne.n	8002440 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_QSPI_MspInit+0x110>)
 8002360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002362:	4a3a      	ldr	r2, [pc, #232]	; (800244c <HAL_QSPI_MspInit+0x110>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	6393      	str	r3, [r2, #56]	; 0x38
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <HAL_QSPI_MspInit+0x110>)
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <HAL_QSPI_MspInit+0x110>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a34      	ldr	r2, [pc, #208]	; (800244c <HAL_QSPI_MspInit+0x110>)
 800237c:	f043 0310 	orr.w	r3, r3, #16
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b32      	ldr	r3, [pc, #200]	; (800244c <HAL_QSPI_MspInit+0x110>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_QSPI_MspInit+0x110>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a2e      	ldr	r2, [pc, #184]	; (800244c <HAL_QSPI_MspInit+0x110>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b2c      	ldr	r3, [pc, #176]	; (800244c <HAL_QSPI_MspInit+0x110>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_QSPI_MspInit+0x110>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a28      	ldr	r2, [pc, #160]	; (800244c <HAL_QSPI_MspInit+0x110>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_QSPI_MspInit+0x110>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80023be:	2304      	movs	r3, #4
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c2:	2302      	movs	r3, #2
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023ce:	2309      	movs	r3, #9
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80023d2:	f107 031c 	add.w	r3, r7, #28
 80023d6:	4619      	mov	r1, r3
 80023d8:	481d      	ldr	r0, [pc, #116]	; (8002450 <HAL_QSPI_MspInit+0x114>)
 80023da:	f003 f9fb 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80023de:	2340      	movs	r3, #64	; 0x40
 80023e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ea:	2303      	movs	r3, #3
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80023ee:	230a      	movs	r3, #10
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4619      	mov	r1, r3
 80023f8:	4816      	ldr	r0, [pc, #88]	; (8002454 <HAL_QSPI_MspInit+0x118>)
 80023fa:	f003 f9eb 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023fe:	2304      	movs	r3, #4
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800240e:	2309      	movs	r3, #9
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	480e      	ldr	r0, [pc, #56]	; (8002454 <HAL_QSPI_MspInit+0x118>)
 800241a:	f003 f9db 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800241e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002430:	2309      	movs	r3, #9
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4807      	ldr	r0, [pc, #28]	; (8002458 <HAL_QSPI_MspInit+0x11c>)
 800243c:	f003 f9ca 	bl	80057d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002440:	bf00      	nop
 8002442:	3730      	adds	r7, #48	; 0x30
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	a0001000 	.word	0xa0001000
 800244c:	40023800 	.word	0x40023800
 8002450:	40021000 	.word	0x40021000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020c00 	.word	0x40020c00

0800245c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_RTC_MspInit+0x2c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d105      	bne.n	800247a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_RTC_MspInit+0x30>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_RTC_MspInit+0x30>)
 8002474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40002800 	.word	0x40002800
 800248c:	40023800 	.word	0x40023800

08002490 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6a      	ldr	r2, [pc, #424]	; (8002658 <HAL_SD_MspInit+0x1c8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	f040 80ce 	bne.w	8002650 <HAL_SD_MspInit+0x1c0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	4a68      	ldr	r2, [pc, #416]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024be:	6453      	str	r3, [r2, #68]	; 0x44
 80024c0:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024cc:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a62      	ldr	r2, [pc, #392]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b60      	ldr	r3, [pc, #384]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e4:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	4a5c      	ldr	r2, [pc, #368]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	6313      	str	r3, [r2, #48]	; 0x30
 80024f0:	4b5a      	ldr	r3, [pc, #360]	; (800265c <HAL_SD_MspInit+0x1cc>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin;
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800250e:	230c      	movs	r3, #12
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CK_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	4851      	ldr	r0, [pc, #324]	; (8002660 <HAL_SD_MspInit+0x1d0>)
 800251a:	f003 f95b 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9|GPIO_PIN_8;
 800251e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002528:	2301      	movs	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002530:	230c      	movs	r3, #12
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	4849      	ldr	r0, [pc, #292]	; (8002660 <HAL_SD_MspInit+0x1d0>)
 800253c:	f003 f94a 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002540:	2304      	movs	r3, #4
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002550:	230c      	movs	r3, #12
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	4842      	ldr	r0, [pc, #264]	; (8002664 <HAL_SD_MspInit+0x1d4>)
 800255c:	f003 f93a 	bl	80057d4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002560:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 8002562:	4a42      	ldr	r2, [pc, #264]	; (800266c <HAL_SD_MspInit+0x1dc>)
 8002564:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002566:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 8002568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800256c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256e:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002574:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 800257c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002580:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002582:	4b39      	ldr	r3, [pc, #228]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 8002584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002588:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 800258c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002590:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002592:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 8002594:	2220      	movs	r2, #32
 8002596:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002598:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 800259a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800259e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025a0:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 80025a2:	2204      	movs	r2, #4
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 80025a8:	2203      	movs	r2, #3
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 80025ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 80025b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80025bc:	482a      	ldr	r0, [pc, #168]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 80025be:	f002 f969 	bl	8004894 <HAL_DMA_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_SD_MspInit+0x13c>
    {
      Error_Handler();
 80025c8:	f7ff fbc2 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a26      	ldr	r2, [pc, #152]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
 80025d2:	4a25      	ldr	r2, [pc, #148]	; (8002668 <HAL_SD_MspInit+0x1d8>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <HAL_SD_MspInit+0x1e4>)
 80025dc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80025de:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 80025e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e6:	4b22      	ldr	r3, [pc, #136]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 80025f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 80025fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002600:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 8002604:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002608:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 800260c:	2220      	movs	r2, #32
 800260e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002610:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 8002612:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002616:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 800261a:	2204      	movs	r2, #4
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 8002620:	2203      	movs	r2, #3
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 8002626:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800262c:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 800262e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002634:	480e      	ldr	r0, [pc, #56]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 8002636:	f002 f92d 	bl	8004894 <HAL_DMA_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_SD_MspInit+0x1b4>
    {
      Error_Handler();
 8002640:	f7ff fb86 	bl	8001d50 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_SD_MspInit+0x1e0>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	; 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40023800 	.word	0x40023800
 8002660:	40020800 	.word	0x40020800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	20001514 	.word	0x20001514
 800266c:	40026458 	.word	0x40026458
 8002670:	200016b8 	.word	0x200016b8
 8002674:	400264a0 	.word	0x400264a0

08002678 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <HAL_TIM_Base_MspInit+0x80>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d10c      	bne.n	80026a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800268a:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026a2:	e022      	b.n	80026ea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_TIM_Base_MspInit+0x88>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10c      	bne.n	80026c8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
}
 80026c6:	e010      	b.n	80026ea <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <HAL_TIM_Base_MspInit+0x8c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10b      	bne.n	80026ea <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	6453      	str	r3, [r2, #68]	; 0x44
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_TIM_Base_MspInit+0x84>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40000400 	.word	0x40000400
 80026fc:	40023800 	.word	0x40023800
 8002700:	40000c00 	.word	0x40000c00
 8002704:	40010400 	.word	0x40010400

08002708 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_TIM_PWM_MspInit+0x38>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d10b      	bne.n	8002732 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_TIM_PWM_MspInit+0x3c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_TIM_PWM_MspInit+0x3c>)
 8002720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_TIM_PWM_MspInit+0x3c>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40001800 	.word	0x40001800
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a33      	ldr	r2, [pc, #204]	; (8002834 <HAL_TIM_MspPostInit+0xec>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d11c      	bne.n	80027a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276a:	4b33      	ldr	r3, [pc, #204]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a32      	ldr	r2, [pc, #200]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002782:	2310      	movs	r3, #16
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002792:	2302      	movs	r3, #2
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4827      	ldr	r0, [pc, #156]	; (800283c <HAL_TIM_MspPostInit+0xf4>)
 800279e:	f003 f819 	bl	80057d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80027a2:	e042      	b.n	800282a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM5)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a25      	ldr	r2, [pc, #148]	; (8002840 <HAL_TIM_MspPostInit+0xf8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d11c      	bne.n	80027e8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a21      	ldr	r2, [pc, #132]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80027c6:	2301      	movs	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027d6:	2302      	movs	r3, #2
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4619      	mov	r1, r3
 80027e0:	4818      	ldr	r0, [pc, #96]	; (8002844 <HAL_TIM_MspPostInit+0xfc>)
 80027e2:	f002 fff7 	bl	80057d4 <HAL_GPIO_Init>
}
 80027e6:	e020      	b.n	800282a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM12)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a16      	ldr	r2, [pc, #88]	; (8002848 <HAL_TIM_MspPostInit+0x100>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d11b      	bne.n	800282a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 80027f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_TIM_MspPostInit+0xf0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800280a:	2340      	movs	r3, #64	; 0x40
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800281a:	2309      	movs	r3, #9
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	4809      	ldr	r0, [pc, #36]	; (800284c <HAL_TIM_MspPostInit+0x104>)
 8002826:	f002 ffd5 	bl	80057d4 <HAL_GPIO_Init>
}
 800282a:	bf00      	nop
 800282c:	3728      	adds	r7, #40	; 0x28
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40000400 	.word	0x40000400
 8002838:	40023800 	.word	0x40023800
 800283c:	40020400 	.word	0x40020400
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40022000 	.word	0x40022000
 8002848:	40001800 	.word	0x40001800
 800284c:	40021c00 	.word	0x40021c00

08002850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	; 0x30
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <HAL_UART_MspInit+0x110>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d145      	bne.n	80028fe <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <HAL_UART_MspInit+0x114>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a3b      	ldr	r2, [pc, #236]	; (8002964 <HAL_UART_MspInit+0x114>)
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b39      	ldr	r3, [pc, #228]	; (8002964 <HAL_UART_MspInit+0x114>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_UART_MspInit+0x114>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a35      	ldr	r2, [pc, #212]	; (8002964 <HAL_UART_MspInit+0x114>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b33      	ldr	r3, [pc, #204]	; (8002964 <HAL_UART_MspInit+0x114>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_UART_MspInit+0x114>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <HAL_UART_MspInit+0x114>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_UART_MspInit+0x114>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ca:	2307      	movs	r3, #7
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80028ce:	f107 031c 	add.w	r3, r7, #28
 80028d2:	4619      	mov	r1, r3
 80028d4:	4824      	ldr	r0, [pc, #144]	; (8002968 <HAL_UART_MspInit+0x118>)
 80028d6:	f002 ff7d 	bl	80057d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80028da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ec:	2307      	movs	r3, #7
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	4619      	mov	r1, r3
 80028f6:	481d      	ldr	r0, [pc, #116]	; (800296c <HAL_UART_MspInit+0x11c>)
 80028f8:	f002 ff6c 	bl	80057d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028fc:	e02c      	b.n	8002958 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_UART_MspInit+0x120>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d127      	bne.n	8002958 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <HAL_UART_MspInit+0x114>)
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	4a15      	ldr	r2, [pc, #84]	; (8002964 <HAL_UART_MspInit+0x114>)
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	6453      	str	r3, [r2, #68]	; 0x44
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <HAL_UART_MspInit+0x114>)
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_UART_MspInit+0x114>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <HAL_UART_MspInit+0x114>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_UART_MspInit+0x114>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002938:	23c0      	movs	r3, #192	; 0xc0
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002948:	2308      	movs	r3, #8
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	4619      	mov	r1, r3
 8002952:	4808      	ldr	r0, [pc, #32]	; (8002974 <HAL_UART_MspInit+0x124>)
 8002954:	f002 ff3e 	bl	80057d4 <HAL_GPIO_Init>
}
 8002958:	bf00      	nop
 800295a:	3730      	adds	r7, #48	; 0x30
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40011000 	.word	0x40011000
 8002964:	40023800 	.word	0x40023800
 8002968:	40020400 	.word	0x40020400
 800296c:	40020000 	.word	0x40020000
 8002970:	40011400 	.word	0x40011400
 8002974:	40020800 	.word	0x40020800

08002978 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800298c:	4b3a      	ldr	r3, [pc, #232]	; (8002a78 <HAL_FMC_MspInit+0x100>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d16d      	bne.n	8002a70 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002994:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_FMC_MspInit+0x100>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_FMC_MspInit+0x104>)
 800299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299e:	4a37      	ldr	r2, [pc, #220]	; (8002a7c <HAL_FMC_MspInit+0x104>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	6393      	str	r3, [r2, #56]	; 0x38
 80029a6:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <HAL_FMC_MspInit+0x104>)
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80029b2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029b6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029c4:	230c      	movs	r3, #12
 80029c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	482c      	ldr	r0, [pc, #176]	; (8002a80 <HAL_FMC_MspInit+0x108>)
 80029ce:	f002 ff01 	bl	80057d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80029d2:	f248 1333 	movw	r3, #33075	; 0x8133
 80029d6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	2303      	movs	r3, #3
 80029e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029e4:	230c      	movs	r3, #12
 80029e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	4825      	ldr	r0, [pc, #148]	; (8002a84 <HAL_FMC_MspInit+0x10c>)
 80029ee:	f002 fef1 	bl	80057d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80029f2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029f6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a04:	230c      	movs	r3, #12
 8002a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a08:	1d3b      	adds	r3, r7, #4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	481e      	ldr	r0, [pc, #120]	; (8002a88 <HAL_FMC_MspInit+0x110>)
 8002a0e:	f002 fee1 	bl	80057d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002a12:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a16:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a24:	230c      	movs	r3, #12
 8002a26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4817      	ldr	r0, [pc, #92]	; (8002a8c <HAL_FMC_MspInit+0x114>)
 8002a2e:	f002 fed1 	bl	80057d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a32:	2328      	movs	r3, #40	; 0x28
 8002a34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a42:	230c      	movs	r3, #12
 8002a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4811      	ldr	r0, [pc, #68]	; (8002a90 <HAL_FMC_MspInit+0x118>)
 8002a4c:	f002 fec2 	bl	80057d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002a50:	2308      	movs	r3, #8
 8002a52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a60:	230c      	movs	r3, #12
 8002a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	480a      	ldr	r0, [pc, #40]	; (8002a94 <HAL_FMC_MspInit+0x11c>)
 8002a6a:	f002 feb3 	bl	80057d4 <HAL_GPIO_Init>
 8002a6e:	e000      	b.n	8002a72 <HAL_FMC_MspInit+0xfa>
    return;
 8002a70:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	2000053c 	.word	0x2000053c
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40021800 	.word	0x40021800
 8002a88:	40020c00 	.word	0x40020c00
 8002a8c:	40021400 	.word	0x40021400
 8002a90:	40021c00 	.word	0x40021c00
 8002a94:	40020800 	.word	0x40020800

08002a98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002aa0:	f7ff ff6a 	bl	8002978 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <NMI_Handler+0x4>

08002ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <HardFault_Handler+0x4>

08002ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <MemManage_Handler+0x4>

08002abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <BusFault_Handler+0x4>

08002ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ac8:	e7fe      	b.n	8002ac8 <UsageFault_Handler+0x4>

08002aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002adc:	f001 fa12 	bl	8003f04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002ae0:	f00d fa5c 	bl	800ff9c <xTaskGetSchedulerState>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d001      	beq.n	8002aee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002aea:	f00d fe3d 	bl	8010768 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <LTDC_IRQHandler+0x10>)
 8002afa:	f003 f919 	bl	8005d30 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000a8c 	.word	0x20000a8c

08002b08 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <DMA2D_IRQHandler+0x10>)
 8002b0e:	f002 fc23 	bl	8005358 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200015f8 	.word	0x200015f8

08002b1c <SDMMC1_IRQHandler>:
  * @brief  This function handles SDMMC1 global interrupt request.
  * @param  None
  * @retval None
  */
void BSP_SDMMC_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&uSdHandle);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <SDMMC1_IRQHandler+0x10>)
 8002b22:	f005 fbc5 	bl	80082b0 <HAL_SD_IRQHandler>
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20004c0c 	.word	0x20004c0c

08002b30 <DMA2_Stream6_IRQHandler>:
* @brief  This function handles DMA2 Stream 6 interrupt request.
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Tx_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <DMA2_Stream6_IRQHandler+0x14>)
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 f839 	bl	8004bb0 <HAL_DMA_IRQHandler>
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20004c0c 	.word	0x20004c0c

08002b48 <DMA2_Stream3_IRQHandler>:
* @brief  This function handles DMA2 Stream 3 interrupt request.
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Rx_IRQHandler(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <DMA2_Stream3_IRQHandler+0x14>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 f82d 	bl	8004bb0 <HAL_DMA_IRQHandler>
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20004c0c 	.word	0x20004c0c

08002b60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e00a      	b.n	8002b88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b72:	f3af 8000 	nop.w
 8002b76:	4601      	mov	r1, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	60ba      	str	r2, [r7, #8]
 8002b7e:	b2ca      	uxtb	r2, r1
 8002b80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	dbf0      	blt.n	8002b72 <_read+0x12>
	}

return len;
 8002b90:	687b      	ldr	r3, [r7, #4]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_isatty>:

int _isatty(int file)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <SystemInit+0x20>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <SystemInit+0x20>)
 8002c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c2c:	480d      	ldr	r0, [pc, #52]	; (8002c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c2e:	490e      	ldr	r1, [pc, #56]	; (8002c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c30:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c34:	e002      	b.n	8002c3c <LoopCopyDataInit>

08002c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3a:	3304      	adds	r3, #4

08002c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c40:	d3f9      	bcc.n	8002c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c42:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c44:	4c0b      	ldr	r4, [pc, #44]	; (8002c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c48:	e001      	b.n	8002c4e <LoopFillZerobss>

08002c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c4c:	3204      	adds	r2, #4

08002c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c50:	d3fb      	bcc.n	8002c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c52:	f7ff ffd7 	bl	8002c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c56:	f00d fec7 	bl	80109e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c5a:	f7fd fd6d 	bl	8000738 <main>
  bx  lr    
 8002c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c60:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c68:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002c6c:	08014010 	.word	0x08014010
  ldr r2, =_sbss
 8002c70:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002c74:	20004d24 	.word	0x20004d24

08002c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c78:	e7fe      	b.n	8002c78 <ADC_IRQHandler>
	...

08002c7c <BSP_LED_Off>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d108      	bne.n	8002c9e <BSP_LED_Off+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <BSP_LED_Off+0x2c>)
 8002c8e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8002c90:	2302      	movs	r3, #2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	4619      	mov	r1, r3
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f002 ff5f 	bl	8005b5c <HAL_GPIO_WritePin>
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40022000 	.word	0x40022000

08002cac <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cb2:	2228      	movs	r2, #40	; 0x28
 8002cb4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002cb6:	4b30      	ldr	r3, [pc, #192]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cb8:	2209      	movs	r2, #9
 8002cba:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cbe:	2235      	movs	r2, #53	; 0x35
 8002cc0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cc4:	220b      	movs	r2, #11
 8002cc6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cca:	f240 121b 	movw	r2, #283	; 0x11b
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002cd0:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cd2:	f240 2215 	movw	r2, #533	; 0x215
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cda:	f240 121d 	movw	r2, #285	; 0x11d
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002ce2:	f240 2235 	movw	r2, #565	; 0x235
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4823      	ldr	r0, [pc, #140]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cec:	f000 fc0c 	bl	8003508 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cf2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002cf6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002cfa:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002cfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <BSP_LCD_Init+0xd0>)
 8002d34:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002d36:	4810      	ldr	r0, [pc, #64]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d38:	f003 f930 	bl	8005f9c <HAL_LTDC_GetState>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002d42:	2100      	movs	r1, #0
 8002d44:	480c      	ldr	r0, [pc, #48]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d46:	f000 fb05 	bl	8003354 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002d4a:	480b      	ldr	r0, [pc, #44]	; (8002d78 <BSP_LCD_Init+0xcc>)
 8002d4c:	f002 ff20 	bl	8005b90 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002d50:	2201      	movs	r2, #1
 8002d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d56:	480a      	ldr	r0, [pc, #40]	; (8002d80 <BSP_LCD_Init+0xd4>)
 8002d58:	f002 ff00 	bl	8005b5c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	2108      	movs	r1, #8
 8002d60:	4808      	ldr	r0, [pc, #32]	; (8002d84 <BSP_LCD_Init+0xd8>)
 8002d62:	f002 fefb 	bl	8005b5c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002d66:	f000 fed9 	bl	8003b1c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002d6a:	4807      	ldr	r0, [pc, #28]	; (8002d88 <BSP_LCD_Init+0xdc>)
 8002d6c:	f000 f928 	bl	8002fc0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20004b64 	.word	0x20004b64
 8002d7c:	40016800 	.word	0x40016800
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40022800 	.word	0x40022800
 8002d88:	20000008 	.word	0x20000008

08002d8c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <BSP_LCD_GetXSize+0x20>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a06      	ldr	r2, [pc, #24]	; (8002db0 <BSP_LCD_GetXSize+0x24>)
 8002d96:	2134      	movs	r1, #52	; 0x34
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3360      	adds	r3, #96	; 0x60
 8002da0:	681b      	ldr	r3, [r3, #0]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	20000580 	.word	0x20000580
 8002db0:	20004b64 	.word	0x20004b64

08002db4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <BSP_LCD_GetYSize+0x20>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a06      	ldr	r2, [pc, #24]	; (8002dd8 <BSP_LCD_GetYSize+0x24>)
 8002dbe:	2134      	movs	r1, #52	; 0x34
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3364      	adds	r3, #100	; 0x64
 8002dc8:	681b      	ldr	r3, [r3, #0]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	20000580 	.word	0x20000580
 8002dd8:	20004b64 	.word	0x20004b64

08002ddc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b090      	sub	sp, #64	; 0x40
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002dec:	f7ff ffce 	bl	8002d8c <BSP_LCD_GetXSize>
 8002df0:	4603      	mov	r3, r0
 8002df2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002df8:	f7ff ffdc 	bl	8002db4 <BSP_LCD_GetYSize>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002e08:	23ff      	movs	r3, #255	; 0xff
 8002e0a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e28:	2307      	movs	r3, #7
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002e2c:	f7ff ffae 	bl	8002d8c <BSP_LCD_GetXSize>
 8002e30:	4603      	mov	r3, r0
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002e34:	f7ff ffbe 	bl	8002db4 <BSP_LCD_GetYSize>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002e3c:	88fa      	ldrh	r2, [r7, #6]
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	4619      	mov	r1, r3
 8002e44:	4812      	ldr	r0, [pc, #72]	; (8002e90 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002e46:	f003 f835 	bl	8005eb4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	4911      	ldr	r1, [pc, #68]	; (8002e94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3304      	adds	r3, #4
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e60:	88fa      	ldrh	r2, [r7, #6]
 8002e62:	490c      	ldr	r1, [pc, #48]	; (8002e94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3308      	adds	r3, #8
 8002e70:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	4907      	ldr	r1, [pc, #28]	; (8002e94 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002e86:	601a      	str	r2, [r3, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	3740      	adds	r7, #64	; 0x40
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20004b64 	.word	0x20004b64
 8002e94:	20000584 	.word	0x20000584
 8002e98:	20000008 	.word	0x20000008

08002e9c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ea4:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <BSP_LCD_SelectLayer+0x1c>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6013      	str	r3, [r2, #0]
} 
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000580 	.word	0x20000580

08002ebc <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d112      	bne.n	8002ef4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <BSP_LCD_SetLayerVisible+0x78>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	01db      	lsls	r3, r3, #7
 8002ed8:	4413      	add	r3, r2
 8002eda:	3384      	adds	r3, #132	; 0x84
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <BSP_LCD_SetLayerVisible+0x78>)
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	01d2      	lsls	r2, r2, #7
 8002ee8:	440a      	add	r2, r1
 8002eea:	3284      	adds	r2, #132	; 0x84
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e011      	b.n	8002f18 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <BSP_LCD_SetLayerVisible+0x78>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	01db      	lsls	r3, r3, #7
 8002efe:	4413      	add	r3, r2
 8002f00:	3384      	adds	r3, #132	; 0x84
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <BSP_LCD_SetLayerVisible+0x78>)
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	01d2      	lsls	r2, r2, #7
 8002f0e:	440a      	add	r2, r1
 8002f10:	3284      	adds	r2, #132	; 0x84
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <BSP_LCD_SetLayerVisible+0x78>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <BSP_LCD_SetLayerVisible+0x78>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	20004b64 	.word	0x20004b64

08002f38 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4803      	ldr	r0, [pc, #12]	; (8002f58 <BSP_LCD_SetTransparency+0x20>)
 8002f4c:	f002 fff0 	bl	8005f30 <HAL_LTDC_SetAlpha>
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20004b64 	.word	0x20004b64

08002f5c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <BSP_LCD_SetTextColor+0x28>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <BSP_LCD_SetTextColor+0x2c>)
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	601a      	str	r2, [r3, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	20000580 	.word	0x20000580
 8002f88:	20000584 	.word	0x20000584

08002f8c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <BSP_LCD_SetBackColor+0x2c>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4908      	ldr	r1, [pc, #32]	; (8002fbc <BSP_LCD_SetBackColor+0x30>)
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000580 	.word	0x20000580
 8002fbc:	20000584 	.word	0x20000584

08002fc0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <BSP_LCD_SetFont+0x2c>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4908      	ldr	r1, [pc, #32]	; (8002ff0 <BSP_LCD_SetFont+0x30>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3308      	adds	r3, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	601a      	str	r2, [r3, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000580 	.word	0x20000580
 8002ff0:	20000584 	.word	0x20000584

08002ff4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <BSP_LCD_GetFont+0x24>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4907      	ldr	r1, [pc, #28]	; (800301c <BSP_LCD_GetFont+0x28>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3308      	adds	r3, #8
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000580 	.word	0x20000580
 800301c:	20000584 	.word	0x20000584

08003020 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	b085      	sub	sp, #20
 8003024:	af02      	add	r7, sp, #8
 8003026:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <BSP_LCD_Clear+0x48>)
 800302a:	681c      	ldr	r4, [r3, #0]
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <BSP_LCD_Clear+0x48>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0e      	ldr	r2, [pc, #56]	; (800306c <BSP_LCD_Clear+0x4c>)
 8003032:	2134      	movs	r1, #52	; 0x34
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	335c      	adds	r3, #92	; 0x5c
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461e      	mov	r6, r3
 8003040:	f7ff fea4 	bl	8002d8c <BSP_LCD_GetXSize>
 8003044:	4605      	mov	r5, r0
 8003046:	f7ff feb5 	bl	8002db4 <BSP_LCD_GetYSize>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	2300      	movs	r3, #0
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	462a      	mov	r2, r5
 8003058:	4631      	mov	r1, r6
 800305a:	4620      	mov	r0, r4
 800305c:	f000 fb28 	bl	80036b0 <LL_FillBuffer>
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003068:	20000580 	.word	0x20000580
 800306c:	20004b64 	.word	0x20004b64

08003070 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	80fb      	strh	r3, [r7, #6]
 800307a:	460b      	mov	r3, r1
 800307c:	80bb      	strh	r3, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <BSP_LCD_DisplayChar+0x80>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	491b      	ldr	r1, [pc, #108]	; (80030f4 <BSP_LCD_DisplayChar+0x84>)
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3308      	adds	r3, #8
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	78fb      	ldrb	r3, [r7, #3]
 800309a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <BSP_LCD_DisplayChar+0x80>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4c14      	ldr	r4, [pc, #80]	; (80030f4 <BSP_LCD_DisplayChar+0x84>)
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4423      	add	r3, r4
 80030ae:	3308      	adds	r3, #8
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80030b4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <BSP_LCD_DisplayChar+0x80>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4c0d      	ldr	r4, [pc, #52]	; (80030f4 <BSP_LCD_DisplayChar+0x84>)
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4423      	add	r3, r4
 80030c8:	3308      	adds	r3, #8
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	889b      	ldrh	r3, [r3, #4]
 80030ce:	3307      	adds	r3, #7
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da00      	bge.n	80030d6 <BSP_LCD_DisplayChar+0x66>
 80030d4:	3307      	adds	r3, #7
 80030d6:	10db      	asrs	r3, r3, #3
 80030d8:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80030dc:	18ca      	adds	r2, r1, r3
 80030de:	88b9      	ldrh	r1, [r7, #4]
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fa2c 	bl	8003540 <DrawChar>
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}
 80030f0:	20000580 	.word	0x20000580
 80030f4:	20000584 	.word	0x20000584

080030f8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60ba      	str	r2, [r7, #8]
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	81fb      	strh	r3, [r7, #14]
 8003106:	460b      	mov	r3, r1
 8003108:	81bb      	strh	r3, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800310e:	2301      	movs	r3, #1
 8003110:	83fb      	strh	r3, [r7, #30]
 8003112:	2300      	movs	r3, #0
 8003114:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003122:	e002      	b.n	800312a <BSP_LCD_DisplayStringAt+0x32>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	3301      	adds	r3, #1
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	617a      	str	r2, [r7, #20]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f6      	bne.n	8003124 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003136:	f7ff fe29 	bl	8002d8c <BSP_LCD_GetXSize>
 800313a:	4601      	mov	r1, r0
 800313c:	4b50      	ldr	r3, [pc, #320]	; (8003280 <BSP_LCD_DisplayStringAt+0x188>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4850      	ldr	r0, [pc, #320]	; (8003284 <BSP_LCD_DisplayStringAt+0x18c>)
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4403      	add	r3, r0
 800314c:	3308      	adds	r3, #8
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	889b      	ldrh	r3, [r3, #4]
 8003152:	fbb1 f3f3 	udiv	r3, r1, r3
 8003156:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d01c      	beq.n	8003198 <BSP_LCD_DisplayStringAt+0xa0>
 800315e:	2b03      	cmp	r3, #3
 8003160:	dc33      	bgt.n	80031ca <BSP_LCD_DisplayStringAt+0xd2>
 8003162:	2b01      	cmp	r3, #1
 8003164:	d002      	beq.n	800316c <BSP_LCD_DisplayStringAt+0x74>
 8003166:	2b02      	cmp	r3, #2
 8003168:	d019      	beq.n	800319e <BSP_LCD_DisplayStringAt+0xa6>
 800316a:	e02e      	b.n	80031ca <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	1ad1      	subs	r1, r2, r3
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <BSP_LCD_DisplayStringAt+0x188>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4843      	ldr	r0, [pc, #268]	; (8003284 <BSP_LCD_DisplayStringAt+0x18c>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4403      	add	r3, r0
 8003182:	3308      	adds	r3, #8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	889b      	ldrh	r3, [r3, #4]
 8003188:	fb03 f301 	mul.w	r3, r3, r1
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	89fb      	ldrh	r3, [r7, #14]
 8003192:	4413      	add	r3, r2
 8003194:	83fb      	strh	r3, [r7, #30]
      break;
 8003196:	e01b      	b.n	80031d0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003198:	89fb      	ldrh	r3, [r7, #14]
 800319a:	83fb      	strh	r3, [r7, #30]
      break;
 800319c:	e018      	b.n	80031d0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b299      	uxth	r1, r3
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <BSP_LCD_DisplayStringAt+0x188>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4836      	ldr	r0, [pc, #216]	; (8003284 <BSP_LCD_DisplayStringAt+0x18c>)
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4403      	add	r3, r0
 80031b6:	3308      	adds	r3, #8
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	889b      	ldrh	r3, [r3, #4]
 80031bc:	fb11 f303 	smulbb	r3, r1, r3
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	83fb      	strh	r3, [r7, #30]
      break;
 80031c8:	e002      	b.n	80031d0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80031ca:	89fb      	ldrh	r3, [r7, #14]
 80031cc:	83fb      	strh	r3, [r7, #30]
      break;
 80031ce:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80031d0:	8bfb      	ldrh	r3, [r7, #30]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <BSP_LCD_DisplayStringAt+0xe6>
 80031d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da1d      	bge.n	800321a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80031e2:	e01a      	b.n	800321a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	89b9      	ldrh	r1, [r7, #12]
 80031ea:	8bfb      	ldrh	r3, [r7, #30]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff3f 	bl	8003070 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <BSP_LCD_DisplayStringAt+0x188>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4923      	ldr	r1, [pc, #140]	; (8003284 <BSP_LCD_DisplayStringAt+0x18c>)
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3308      	adds	r3, #8
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	889a      	ldrh	r2, [r3, #4]
 8003208:	8bfb      	ldrh	r3, [r7, #30]
 800320a:	4413      	add	r3, r2
 800320c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3301      	adds	r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
    i++;
 8003214:	8bbb      	ldrh	r3, [r7, #28]
 8003216:	3301      	adds	r3, #1
 8003218:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf14      	ite	ne
 8003222:	2301      	movne	r3, #1
 8003224:	2300      	moveq	r3, #0
 8003226:	b2dc      	uxtb	r4, r3
 8003228:	f7ff fdb0 	bl	8002d8c <BSP_LCD_GetXSize>
 800322c:	8bb9      	ldrh	r1, [r7, #28]
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <BSP_LCD_DisplayStringAt+0x188>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4d14      	ldr	r5, [pc, #80]	; (8003284 <BSP_LCD_DisplayStringAt+0x18c>)
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	442b      	add	r3, r5
 800323e:	3308      	adds	r3, #8
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	889b      	ldrh	r3, [r3, #4]
 8003244:	fb03 f301 	mul.w	r3, r3, r1
 8003248:	1ac3      	subs	r3, r0, r3
 800324a:	b299      	uxth	r1, r3
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <BSP_LCD_DisplayStringAt+0x188>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <BSP_LCD_DisplayStringAt+0x18c>)
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4403      	add	r3, r0
 800325c:	3308      	adds	r3, #8
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	889b      	ldrh	r3, [r3, #4]
 8003262:	4299      	cmp	r1, r3
 8003264:	bf2c      	ite	cs
 8003266:	2301      	movcs	r3, #1
 8003268:	2300      	movcc	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4023      	ands	r3, r4
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1b7      	bne.n	80031e4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bdb0      	pop	{r4, r5, r7, pc}
 800327e:	bf00      	nop
 8003280:	20000580 	.word	0x20000580
 8003284:	20000584 	.word	0x20000584

08003288 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	603a      	str	r2, [r7, #0]
 8003292:	80fb      	strh	r3, [r7, #6]
 8003294:	460b      	mov	r3, r1
 8003296:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <BSP_LCD_DrawPixel+0x88>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <BSP_LCD_DrawPixel+0x8c>)
 800329e:	2134      	movs	r1, #52	; 0x34
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3348      	adds	r3, #72	; 0x48
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d116      	bne.n	80032dc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <BSP_LCD_DrawPixel+0x88>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <BSP_LCD_DrawPixel+0x8c>)
 80032b4:	2134      	movs	r1, #52	; 0x34
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	335c      	adds	r3, #92	; 0x5c
 80032be:	681c      	ldr	r4, [r3, #0]
 80032c0:	88bd      	ldrh	r5, [r7, #4]
 80032c2:	f7ff fd63 	bl	8002d8c <BSP_LCD_GetXSize>
 80032c6:	4603      	mov	r3, r0
 80032c8:	fb03 f205 	mul.w	r2, r3, r5
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	4413      	add	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4423      	add	r3, r4
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b292      	uxth	r2, r2
 80032d8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80032da:	e015      	b.n	8003308 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <BSP_LCD_DrawPixel+0x88>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <BSP_LCD_DrawPixel+0x8c>)
 80032e2:	2134      	movs	r1, #52	; 0x34
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	335c      	adds	r3, #92	; 0x5c
 80032ec:	681c      	ldr	r4, [r3, #0]
 80032ee:	88bd      	ldrh	r5, [r7, #4]
 80032f0:	f7ff fd4c 	bl	8002d8c <BSP_LCD_GetXSize>
 80032f4:	4603      	mov	r3, r0
 80032f6:	fb03 f205 	mul.w	r2, r3, r5
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4423      	add	r3, r4
 8003302:	461a      	mov	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6013      	str	r3, [r2, #0]
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bdb0      	pop	{r4, r5, r7, pc}
 8003310:	20000580 	.word	0x20000580
 8003314:	20004b64 	.word	0x20004b64

08003318 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <BSP_LCD_DisplayOn+0x30>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <BSP_LCD_DisplayOn+0x30>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800332c:	2201      	movs	r2, #1
 800332e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003332:	4806      	ldr	r0, [pc, #24]	; (800334c <BSP_LCD_DisplayOn+0x34>)
 8003334:	f002 fc12 	bl	8005b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003338:	2201      	movs	r2, #1
 800333a:	2108      	movs	r1, #8
 800333c:	4804      	ldr	r0, [pc, #16]	; (8003350 <BSP_LCD_DisplayOn+0x38>)
 800333e:	f002 fc0d 	bl	8005b5c <HAL_GPIO_WritePin>
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20004b64 	.word	0x20004b64
 800334c:	40022000 	.word	0x40022000
 8003350:	40022800 	.word	0x40022800

08003354 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b090      	sub	sp, #64	; 0x40
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800335e:	4b64      	ldr	r3, [pc, #400]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4a63      	ldr	r2, [pc, #396]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003364:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003368:	6453      	str	r3, [r2, #68]	; 0x44
 800336a:	4b61      	ldr	r3, [pc, #388]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003376:	4b5e      	ldr	r3, [pc, #376]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a5d      	ldr	r2, [pc, #372]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 800337c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b5b      	ldr	r3, [pc, #364]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800338e:	4b58      	ldr	r3, [pc, #352]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a57      	ldr	r2, [pc, #348]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003394:	f043 0310 	orr.w	r3, r3, #16
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b55      	ldr	r3, [pc, #340]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033a6:	4b52      	ldr	r3, [pc, #328]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a51      	ldr	r2, [pc, #324]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	4b4f      	ldr	r3, [pc, #316]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033be:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a4b      	ldr	r2, [pc, #300]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a45      	ldr	r2, [pc, #276]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033ee:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a3f      	ldr	r2, [pc, #252]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a39      	ldr	r2, [pc, #228]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
 8003412:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800341e:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a33      	ldr	r2, [pc, #204]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 8003424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <BSP_LCD_MspInit+0x19c>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003436:	2310      	movs	r3, #16
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003442:	2302      	movs	r3, #2
 8003444:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003446:	230e      	movs	r3, #14
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800344a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800344e:	4619      	mov	r1, r3
 8003450:	4828      	ldr	r0, [pc, #160]	; (80034f4 <BSP_LCD_MspInit+0x1a0>)
 8003452:	f002 f9bf 	bl	80057d4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003460:	2309      	movs	r3, #9
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003468:	4619      	mov	r1, r3
 800346a:	4823      	ldr	r0, [pc, #140]	; (80034f8 <BSP_LCD_MspInit+0x1a4>)
 800346c:	f002 f9b2 	bl	80057d4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003470:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003476:	2302      	movs	r3, #2
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800347a:	230e      	movs	r3, #14
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800347e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003482:	4619      	mov	r1, r3
 8003484:	481d      	ldr	r0, [pc, #116]	; (80034fc <BSP_LCD_MspInit+0x1a8>)
 8003486:	f002 f9a5 	bl	80057d4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800348a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003494:	230e      	movs	r3, #14
 8003496:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800349c:	4619      	mov	r1, r3
 800349e:	4818      	ldr	r0, [pc, #96]	; (8003500 <BSP_LCD_MspInit+0x1ac>)
 80034a0:	f002 f998 	bl	80057d4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80034a4:	23f7      	movs	r3, #247	; 0xf7
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034ac:	230e      	movs	r3, #14
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80034b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034b4:	4619      	mov	r1, r3
 80034b6:	4813      	ldr	r0, [pc, #76]	; (8003504 <BSP_LCD_MspInit+0x1b0>)
 80034b8:	f002 f98c 	bl	80057d4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80034bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034c2:	2301      	movs	r3, #1
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80034c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ca:	4619      	mov	r1, r3
 80034cc:	480b      	ldr	r0, [pc, #44]	; (80034fc <BSP_LCD_MspInit+0x1a8>)
 80034ce:	f002 f981 	bl	80057d4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80034d2:	2308      	movs	r3, #8
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034d6:	2301      	movs	r3, #1
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80034da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034de:	4619      	mov	r1, r3
 80034e0:	4808      	ldr	r0, [pc, #32]	; (8003504 <BSP_LCD_MspInit+0x1b0>)
 80034e2:	f002 f977 	bl	80057d4 <HAL_GPIO_Init>
}
 80034e6:	bf00      	nop
 80034e8:	3740      	adds	r7, #64	; 0x40
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40021800 	.word	0x40021800
 80034fc:	40022000 	.word	0x40022000
 8003500:	40022400 	.word	0x40022400
 8003504:	40022800 	.word	0x40022800

08003508 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <BSP_LCD_ClockConfig+0x34>)
 8003514:	2208      	movs	r2, #8
 8003516:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <BSP_LCD_ClockConfig+0x34>)
 800351a:	22c0      	movs	r2, #192	; 0xc0
 800351c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <BSP_LCD_ClockConfig+0x34>)
 8003520:	2205      	movs	r2, #5
 8003522:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <BSP_LCD_ClockConfig+0x34>)
 8003526:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800352c:	4803      	ldr	r0, [pc, #12]	; (800353c <BSP_LCD_ClockConfig+0x34>)
 800352e:	f003 fc79 	bl	8006e24 <HAL_RCCEx_PeriphCLKConfig>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	2000059c 	.word	0x2000059c

08003540 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	603a      	str	r2, [r7, #0]
 800354a:	80fb      	strh	r3, [r7, #6]
 800354c:	460b      	mov	r3, r1
 800354e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <DrawChar+0x168>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4953      	ldr	r1, [pc, #332]	; (80036ac <DrawChar+0x16c>)
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3308      	adds	r3, #8
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	88db      	ldrh	r3, [r3, #6]
 800356e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003570:	4b4d      	ldr	r3, [pc, #308]	; (80036a8 <DrawChar+0x168>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	494d      	ldr	r1, [pc, #308]	; (80036ac <DrawChar+0x16c>)
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3308      	adds	r3, #8
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	889b      	ldrh	r3, [r3, #4]
 8003586:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003588:	8a3b      	ldrh	r3, [r7, #16]
 800358a:	3307      	adds	r3, #7
 800358c:	2b00      	cmp	r3, #0
 800358e:	da00      	bge.n	8003592 <DrawChar+0x52>
 8003590:	3307      	adds	r3, #7
 8003592:	10db      	asrs	r3, r3, #3
 8003594:	b2db      	uxtb	r3, r3
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	b2da      	uxtb	r2, r3
 800359a:	8a3b      	ldrh	r3, [r7, #16]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e076      	b.n	8003696 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80035a8:	8a3b      	ldrh	r3, [r7, #16]
 80035aa:	3307      	adds	r3, #7
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da00      	bge.n	80035b2 <DrawChar+0x72>
 80035b0:	3307      	adds	r3, #7
 80035b2:	10db      	asrs	r3, r3, #3
 80035b4:	461a      	mov	r2, r3
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fb03 f302 	mul.w	r3, r3, r2
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80035c2:	8a3b      	ldrh	r3, [r7, #16]
 80035c4:	3307      	adds	r3, #7
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da00      	bge.n	80035cc <DrawChar+0x8c>
 80035ca:	3307      	adds	r3, #7
 80035cc:	10db      	asrs	r3, r3, #3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d002      	beq.n	80035d8 <DrawChar+0x98>
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d004      	beq.n	80035e0 <DrawChar+0xa0>
 80035d6:	e00c      	b.n	80035f2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	617b      	str	r3, [r7, #20]
      break;
 80035de:	e016      	b.n	800360e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	3201      	adds	r2, #1
 80035ea:	7812      	ldrb	r2, [r2, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
      break;
 80035f0:	e00d      	b.n	800360e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	041a      	lsls	r2, r3, #16
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3301      	adds	r3, #1
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	4313      	orrs	r3, r2
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	3202      	adds	r2, #2
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
      break;
 800360c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800360e:	2300      	movs	r3, #0
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	e036      	b.n	8003682 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003614:	8a3a      	ldrh	r2, [r7, #16]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad2      	subs	r2, r2, r3
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	4413      	add	r3, r2
 800361e:	3b01      	subs	r3, #1
 8003620:	2201      	movs	r2, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	461a      	mov	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	b29a      	uxth	r2, r3
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	4413      	add	r3, r2
 8003638:	b298      	uxth	r0, r3
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <DrawChar+0x168>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	491b      	ldr	r1, [pc, #108]	; (80036ac <DrawChar+0x16c>)
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	88bb      	ldrh	r3, [r7, #4]
 800364e:	4619      	mov	r1, r3
 8003650:	f7ff fe1a 	bl	8003288 <BSP_LCD_DrawPixel>
 8003654:	e012      	b.n	800367c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	b29a      	uxth	r2, r3
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	4413      	add	r3, r2
 800365e:	b298      	uxth	r0, r3
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <DrawChar+0x168>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	4911      	ldr	r1, [pc, #68]	; (80036ac <DrawChar+0x16c>)
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	3304      	adds	r3, #4
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	88bb      	ldrh	r3, [r7, #4]
 8003676:	4619      	mov	r1, r3
 8003678:	f7ff fe06 	bl	8003288 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	3301      	adds	r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	8a3b      	ldrh	r3, [r7, #16]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	429a      	cmp	r2, r3
 8003688:	d3c4      	bcc.n	8003614 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800368a:	88bb      	ldrh	r3, [r7, #4]
 800368c:	3301      	adds	r3, #1
 800368e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	3301      	adds	r3, #1
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	8a7b      	ldrh	r3, [r7, #18]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	429a      	cmp	r2, r3
 800369c:	d384      	bcc.n	80035a8 <DrawChar+0x68>
  }
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20000580 	.word	0x20000580
 80036ac:	20000584 	.word	0x20000584

080036b0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80036be:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <LL_FillBuffer+0x88>)
 80036c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036c4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <LL_FillBuffer+0x8c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <LL_FillBuffer+0x90>)
 80036cc:	2134      	movs	r1, #52	; 0x34
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	3348      	adds	r3, #72	; 0x48
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d103      	bne.n	80036e4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <LL_FillBuffer+0x88>)
 80036de:	2202      	movs	r2, #2
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	e002      	b.n	80036ea <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <LL_FillBuffer+0x88>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <LL_FillBuffer+0x88>)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <LL_FillBuffer+0x88>)
 80036f2:	4a14      	ldr	r2, [pc, #80]	; (8003744 <LL_FillBuffer+0x94>)
 80036f4:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80036f6:	4810      	ldr	r0, [pc, #64]	; (8003738 <LL_FillBuffer+0x88>)
 80036f8:	f001 fcd0 	bl	800509c <HAL_DMA2D_Init>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d115      	bne.n	800372e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003702:	68f9      	ldr	r1, [r7, #12]
 8003704:	480c      	ldr	r0, [pc, #48]	; (8003738 <LL_FillBuffer+0x88>)
 8003706:	f001 ff37 	bl	8005578 <HAL_DMA2D_ConfigLayer>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10e      	bne.n	800372e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69f9      	ldr	r1, [r7, #28]
 800371a:	4807      	ldr	r0, [pc, #28]	; (8003738 <LL_FillBuffer+0x88>)
 800371c:	f001 fd08 	bl	8005130 <HAL_DMA2D_Start>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003726:	210a      	movs	r1, #10
 8003728:	4803      	ldr	r0, [pc, #12]	; (8003738 <LL_FillBuffer+0x88>)
 800372a:	f001 fd2c 	bl	8005186 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000540 	.word	0x20000540
 800373c:	20000580 	.word	0x20000580
 8003740:	20004b64 	.word	0x20004b64
 8003744:	4002b000 	.word	0x4002b000

08003748 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <BSP_SD_Init+0x8c>)
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <BSP_SD_Init+0x90>)
 8003756:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <BSP_SD_Init+0x8c>)
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <BSP_SD_Init+0x8c>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <BSP_SD_Init+0x8c>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <BSP_SD_Init+0x8c>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <BSP_SD_Init+0x8c>)
 8003772:	2200      	movs	r2, #0
 8003774:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <BSP_SD_Init+0x8c>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 800377c:	2100      	movs	r1, #0
 800377e:	4815      	ldr	r0, [pc, #84]	; (80037d4 <BSP_SD_Init+0x8c>)
 8003780:	f000 f960 	bl	8003a44 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8003784:	f000 f82a 	bl	80037dc <BSP_SD_IsDetected>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d001      	beq.n	8003792 <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800378e:	2302      	movs	r3, #2
 8003790:	e01c      	b.n	80037cc <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8003792:	2100      	movs	r1, #0
 8003794:	480f      	ldr	r0, [pc, #60]	; (80037d4 <BSP_SD_Init+0x8c>)
 8003796:	f000 f869 	bl	800386c <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 800379a:	480e      	ldr	r0, [pc, #56]	; (80037d4 <BSP_SD_Init+0x8c>)
 800379c:	f004 fb0a 	bl	8007db4 <HAL_SD_Init>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10c      	bne.n	80037ca <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80037b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037b4:	4807      	ldr	r0, [pc, #28]	; (80037d4 <BSP_SD_Init+0x8c>)
 80037b6:	f005 f8cb 	bl	8008950 <HAL_SD_ConfigWideBusOperation>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	71fb      	strb	r3, [r7, #7]
 80037c4:	e001      	b.n	80037ca <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 80037ca:	79fb      	ldrb	r3, [r7, #7]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20004c0c 	.word	0x20004c0c
 80037d8:	40012c00 	.word	0x40012c00

080037dc <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 80037e2:	2301      	movs	r3, #1
 80037e4:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80037e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ea:	4807      	ldr	r0, [pc, #28]	; (8003808 <BSP_SD_IsDetected+0x2c>)
 80037ec:	f002 f99e 	bl	8005b2c <HAL_GPIO_ReadPin>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 80037f6:	2300      	movs	r3, #0
 80037f8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	b2db      	uxtb	r3, r3
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40020800 	.word	0x40020800

0800380c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{  
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	4806      	ldr	r0, [pc, #24]	; (8003838 <BSP_SD_ReadBlocks_DMA+0x2c>)
 8003820:	f004 fb7e 	bl	8007f20 <HAL_SD_ReadBlocks_DMA>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <BSP_SD_ReadBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <BSP_SD_ReadBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 800382e:	2300      	movs	r3, #0
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20004c0c 	.word	0x20004c0c

0800383c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{ 
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	4806      	ldr	r0, [pc, #24]	; (8003868 <BSP_SD_WriteBlocks_DMA+0x2c>)
 8003850:	f004 fc48 	bl	80080e4 <HAL_SD_WriteBlocks_DMA>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <BSP_SD_WriteBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <BSP_SD_WriteBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 800385e:	2300      	movs	r3, #0
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20004c0c 	.word	0x20004c0c

0800386c <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08c      	sub	sp, #48	; 0x30
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003876:	4b6c      	ldr	r3, [pc, #432]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a6b      	ldr	r2, [pc, #428]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 800387c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b69      	ldr	r3, [pc, #420]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 800388e:	4b66      	ldr	r3, [pc, #408]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 8003894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a6:	4b60      	ldr	r3, [pc, #384]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a5f      	ldr	r2, [pc, #380]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 80038ac:	f043 0304 	orr.w	r3, r3, #4
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b5d      	ldr	r3, [pc, #372]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038be:	4b5a      	ldr	r3, [pc, #360]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a59      	ldr	r2, [pc, #356]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b57      	ldr	r3, [pc, #348]	; (8003a28 <BSP_SD_MspInit+0x1bc>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038d6:	2302      	movs	r3, #2
 80038d8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80038da:	2301      	movs	r3, #1
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80038de:	2303      	movs	r3, #3
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 80038e2:	230c      	movs	r3, #12
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80038e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80038ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80038ec:	f107 031c 	add.w	r3, r7, #28
 80038f0:	4619      	mov	r1, r3
 80038f2:	484e      	ldr	r0, [pc, #312]	; (8003a2c <BSP_SD_MspInit+0x1c0>)
 80038f4:	f001 ff6e 	bl	80057d4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 80038f8:	2304      	movs	r3, #4
 80038fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	4619      	mov	r1, r3
 8003902:	484b      	ldr	r0, [pc, #300]	; (8003a30 <BSP_SD_MspInit+0x1c4>)
 8003904:	f001 ff66 	bl	80057d4 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8003908:	2200      	movs	r2, #0
 800390a:	210e      	movs	r1, #14
 800390c:	2031      	movs	r0, #49	; 0x31
 800390e:	f000 fea0 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003912:	2031      	movs	r0, #49	; 0x31
 8003914:	f000 feb9 	bl	800468a <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8003918:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 800391a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800391e:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003920:	4b44      	ldr	r3, [pc, #272]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003926:	4b43      	ldr	r3, [pc, #268]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800392c:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 800392e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003932:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003934:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800393a:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800393c:	4b3d      	ldr	r3, [pc, #244]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 800393e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003942:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003944:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003946:	2220      	movs	r2, #32
 8003948:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800394a:	4b3a      	ldr	r3, [pc, #232]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 800394c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003950:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003952:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003954:	2204      	movs	r2, #4
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 800395a:	2203      	movs	r2, #3
 800395c:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 800395e:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003960:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003964:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003966:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003968:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003970:	4a31      	ldr	r2, [pc, #196]	; (8003a38 <BSP_SD_MspInit+0x1cc>)
 8003972:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
 800397a:	4a2e      	ldr	r2, [pc, #184]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8003980:	482c      	ldr	r0, [pc, #176]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003982:	f001 f835 	bl	80049f0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8003986:	482b      	ldr	r0, [pc, #172]	; (8003a34 <BSP_SD_MspInit+0x1c8>)
 8003988:	f000 ff84 	bl	8004894 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 800398e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003992:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 8003996:	2240      	movs	r2, #64	; 0x40
 8003998:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800399a:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a6:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039a8:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039ae:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80039b0:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039b6:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039ba:	2220      	movs	r2, #32
 80039bc:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039c4:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039c8:	2204      	movs	r2, #4
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039ce:	2203      	movs	r2, #3
 80039d0:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039e4:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <BSP_SD_MspInit+0x1d4>)
 80039e6:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 80039f4:	4811      	ldr	r0, [pc, #68]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039f6:	f000 fffb 	bl	80049f0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 80039fa:	4810      	ldr	r0, [pc, #64]	; (8003a3c <BSP_SD_MspInit+0x1d0>)
 80039fc:	f000 ff4a 	bl	8004894 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8003a00:	2200      	movs	r2, #0
 8003a02:	210f      	movs	r1, #15
 8003a04:	203b      	movs	r0, #59	; 0x3b
 8003a06:	f000 fe24 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 8003a0a:	203b      	movs	r0, #59	; 0x3b
 8003a0c:	f000 fe3d 	bl	800468a <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8003a10:	2200      	movs	r2, #0
 8003a12:	210f      	movs	r1, #15
 8003a14:	2045      	movs	r0, #69	; 0x45
 8003a16:	f000 fe1c 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003a1a:	2045      	movs	r0, #69	; 0x45
 8003a1c:	f000 fe35 	bl	800468a <HAL_NVIC_EnableIRQ>
}
 8003a20:	bf00      	nop
 8003a22:	3730      	adds	r7, #48	; 0x30
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40020c00 	.word	0x40020c00
 8003a34:	20000620 	.word	0x20000620
 8003a38:	40026458 	.word	0x40026458
 8003a3c:	20000680 	.word	0x20000680
 8003a40:	400264a0 	.word	0x400264a0

08003a44 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <BSP_SD_Detect_MspInit+0x48>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <BSP_SD_Detect_MspInit+0x48>)
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <BSP_SD_Detect_MspInit+0x48>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8003a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003a70:	2301      	movs	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003a74:	2303      	movs	r3, #3
 8003a76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4804      	ldr	r0, [pc, #16]	; (8003a90 <BSP_SD_Detect_MspInit+0x4c>)
 8003a80:	f001 fea8 	bl	80057d4 <HAL_GPIO_Init>
}
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40020800 	.word	0x40020800

08003a94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003a98:	4805      	ldr	r0, [pc, #20]	; (8003ab0 <BSP_SD_GetCardState+0x1c>)
 8003a9a:	f004 fff3 	bl	8008a84 <HAL_SD_GetCardState>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20004c0c 	.word	0x20004c0c

08003ab4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4803      	ldr	r0, [pc, #12]	; (8003acc <BSP_SD_GetCardInfo+0x18>)
 8003ac0:	f004 ff1a 	bl	80088f8 <HAL_SD_GetCardInfo>
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20004c0c 	.word	0x20004c0c

08003ad0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8003ad8:	f000 f818 	bl	8003b0c <BSP_SD_AbortCallback>
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8003aec:	f7fe fa7a 	bl	8001fe4 <BSP_SD_WriteCpltCallback>
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8003b00:	f7fe fa7e 	bl	8002000 <BSP_SD_ReadCpltCallback>
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callbacks
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0

}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b20:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b22:	4a2a      	ldr	r2, [pc, #168]	; (8003bcc <BSP_SDRAM_Init+0xb0>)
 8003b24:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003b26:	4b2a      	ldr	r3, [pc, #168]	; (8003bd0 <BSP_SDRAM_Init+0xb4>)
 8003b28:	2202      	movs	r2, #2
 8003b2a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <BSP_SDRAM_Init+0xb4>)
 8003b2e:	2207      	movs	r2, #7
 8003b30:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <BSP_SDRAM_Init+0xb4>)
 8003b34:	2204      	movs	r2, #4
 8003b36:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003b38:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <BSP_SDRAM_Init+0xb4>)
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <BSP_SDRAM_Init+0xb4>)
 8003b40:	2202      	movs	r2, #2
 8003b42:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003b44:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <BSP_SDRAM_Init+0xb4>)
 8003b46:	2202      	movs	r2, #2
 8003b48:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003b4a:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <BSP_SDRAM_Init+0xb4>)
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b5c:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b5e:	2204      	movs	r2, #4
 8003b60:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003b62:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b64:	2210      	movs	r2, #16
 8003b66:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b68:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b74:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b82:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003b92:	2100      	movs	r1, #0
 8003b94:	480c      	ldr	r0, [pc, #48]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b96:	f000 f87f 	bl	8003c98 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003b9a:	490d      	ldr	r1, [pc, #52]	; (8003bd0 <BSP_SDRAM_Init+0xb4>)
 8003b9c:	480a      	ldr	r0, [pc, #40]	; (8003bc8 <BSP_SDRAM_Init+0xac>)
 8003b9e:	f005 fc30 	bl	8009402 <HAL_SDRAM_Init>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <BSP_SDRAM_Init+0xb8>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	e002      	b.n	8003bb6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <BSP_SDRAM_Init+0xb8>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003bb6:	f240 6003 	movw	r0, #1539	; 0x603
 8003bba:	f000 f80d 	bl	8003bd8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <BSP_SDRAM_Init+0xb8>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20004c90 	.word	0x20004c90
 8003bcc:	a0000140 	.word	0xa0000140
 8003bd0:	200006e0 	.word	0x200006e0
 8003bd4:	20000018 	.word	0x20000018

08003bd8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bec:	2210      	movs	r2, #16
 8003bee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003bf0:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c00:	4923      	ldr	r1, [pc, #140]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c02:	4824      	ldr	r0, [pc, #144]	; (8003c94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c04:	f005 fc31 	bl	800946a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f000 f99b 	bl	8003f44 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c10:	2202      	movs	r2, #2
 8003c12:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c14:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c16:	2210      	movs	r2, #16
 8003c18:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c2a:	4919      	ldr	r1, [pc, #100]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c2c:	4819      	ldr	r0, [pc, #100]	; (8003c94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c2e:	f005 fc1c 	bl	800946a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c34:	2203      	movs	r2, #3
 8003c36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c40:	2208      	movs	r2, #8
 8003c42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c44:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c4e:	4910      	ldr	r1, [pc, #64]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c50:	4810      	ldr	r0, [pc, #64]	; (8003c94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c52:	f005 fc0a 	bl	800946a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003c56:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003c5a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5e:	2204      	movs	r2, #4
 8003c60:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c64:	2210      	movs	r2, #16
 8003c66:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c72:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c78:	4905      	ldr	r1, [pc, #20]	; (8003c90 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c7a:	4806      	ldr	r0, [pc, #24]	; (8003c94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c7c:	f005 fbf5 	bl	800946a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4804      	ldr	r0, [pc, #16]	; (8003c94 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c84:	f005 fc1c 	bl	80094c0 <HAL_SDRAM_ProgramRefreshRate>
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	200006fc 	.word	0x200006fc
 8003c94:	20004c90 	.word	0x20004c90

08003c98 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b090      	sub	sp, #64	; 0x40
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ca2:	4b70      	ldr	r3, [pc, #448]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	4a6f      	ldr	r2, [pc, #444]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6393      	str	r3, [r2, #56]	; 0x38
 8003cae:	4b6d      	ldr	r3, [pc, #436]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003cba:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a69      	ldr	r2, [pc, #420]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd2:	4b64      	ldr	r3, [pc, #400]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a63      	ldr	r2, [pc, #396]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b61      	ldr	r3, [pc, #388]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	623b      	str	r3, [r7, #32]
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cea:	4b5e      	ldr	r3, [pc, #376]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a5d      	ldr	r2, [pc, #372]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b5b      	ldr	r3, [pc, #364]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	61fb      	str	r3, [r7, #28]
 8003d00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d02:	4b58      	ldr	r3, [pc, #352]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a57      	ldr	r2, [pc, #348]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d08:	f043 0310 	orr.w	r3, r3, #16
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d1a:	4b52      	ldr	r3, [pc, #328]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	4a51      	ldr	r2, [pc, #324]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d20:	f043 0320 	orr.w	r3, r3, #32
 8003d24:	6313      	str	r3, [r2, #48]	; 0x30
 8003d26:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d32:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4a4b      	ldr	r2, [pc, #300]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3e:	4b49      	ldr	r3, [pc, #292]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d4a:	4b46      	ldr	r3, [pc, #280]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a45      	ldr	r2, [pc, #276]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <BSP_SDRAM_MspInit+0x1cc>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003d66:	2301      	movs	r3, #1
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003d6e:	230c      	movs	r3, #12
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003d72:	2308      	movs	r3, #8
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	483a      	ldr	r0, [pc, #232]	; (8003e68 <BSP_SDRAM_MspInit+0x1d0>)
 8003d7e:	f001 fd29 	bl	80057d4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003d82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4837      	ldr	r0, [pc, #220]	; (8003e6c <BSP_SDRAM_MspInit+0x1d4>)
 8003d90:	f001 fd20 	bl	80057d4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003d94:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4833      	ldr	r0, [pc, #204]	; (8003e70 <BSP_SDRAM_MspInit+0x1d8>)
 8003da2:	f001 fd17 	bl	80057d4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003da6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db0:	4619      	mov	r1, r3
 8003db2:	4830      	ldr	r0, [pc, #192]	; (8003e74 <BSP_SDRAM_MspInit+0x1dc>)
 8003db4:	f001 fd0e 	bl	80057d4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003db8:	f248 1333 	movw	r3, #33075	; 0x8133
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	482c      	ldr	r0, [pc, #176]	; (8003e78 <BSP_SDRAM_MspInit+0x1e0>)
 8003dc6:	f001 fd05 	bl	80057d4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003dca:	2328      	movs	r3, #40	; 0x28
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4829      	ldr	r0, [pc, #164]	; (8003e7c <BSP_SDRAM_MspInit+0x1e4>)
 8003dd6:	f001 fcfd 	bl	80057d4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003dda:	4b29      	ldr	r3, [pc, #164]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dec:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003dee:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003df0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003df4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003df6:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dfc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e04:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e12:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003e14:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e1a:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e20:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <BSP_SDRAM_MspInit+0x1ec>)
 8003e30:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
 8003e38:	4a11      	ldr	r2, [pc, #68]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003e3e:	4810      	ldr	r0, [pc, #64]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e40:	f000 fdd6 	bl	80049f0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003e44:	480e      	ldr	r0, [pc, #56]	; (8003e80 <BSP_SDRAM_MspInit+0x1e8>)
 8003e46:	f000 fd25 	bl	8004894 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	210f      	movs	r1, #15
 8003e4e:	2038      	movs	r0, #56	; 0x38
 8003e50:	f000 fbff 	bl	8004652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003e54:	2038      	movs	r0, #56	; 0x38
 8003e56:	f000 fc18 	bl	800468a <HAL_NVIC_EnableIRQ>
}
 8003e5a:	bf00      	nop
 8003e5c:	3740      	adds	r7, #64	; 0x40
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40020800 	.word	0x40020800
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40021400 	.word	0x40021400
 8003e78:	40021800 	.word	0x40021800
 8003e7c:	40021c00 	.word	0x40021c00
 8003e80:	2000070c 	.word	0x2000070c
 8003e84:	40026410 	.word	0x40026410

08003e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f000 fbd5 	bl	800463c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e92:	200f      	movs	r0, #15
 8003e94:	f000 f806 	bl	8003ea4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003e98:	f7fe f8c0 	bl	800201c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_InitTick+0x54>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_InitTick+0x58>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fbef 	bl	80046a6 <HAL_SYSTICK_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00e      	b.n	8003ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b0f      	cmp	r3, #15
 8003ed6:	d80a      	bhi.n	8003eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	f000 fbb7 	bl	8004652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ee4:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <HAL_InitTick+0x5c>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000004 	.word	0x20000004
 8003efc:	20000020 	.word	0x20000020
 8003f00:	2000001c 	.word	0x2000001c

08003f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_IncTick+0x20>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x24>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4413      	add	r3, r2
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_IncTick+0x24>)
 8003f16:	6013      	str	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000020 	.word	0x20000020
 8003f28:	20004cc4 	.word	0x20004cc4

08003f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_GetTick+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20004cc4 	.word	0x20004cc4

08003f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f4c:	f7ff ffee 	bl	8003f2c <HAL_GetTick>
 8003f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d005      	beq.n	8003f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_Delay+0x44>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6a:	bf00      	nop
 8003f6c:	f7ff ffde 	bl	8003f2c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d8f7      	bhi.n	8003f6c <HAL_Delay+0x28>
  {
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000020 	.word	0x20000020

08003f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e031      	b.n	8004006 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fe f85e 	bl	800206c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d116      	bne.n	8003ff8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <HAL_ADC_Init+0x84>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f964 	bl	80042a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ff6:	e001      	b.n	8003ffc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	ffffeefd 	.word	0xffffeefd

08004014 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x1c>
 800402c:	2302      	movs	r3, #2
 800402e:	e12a      	b.n	8004286 <HAL_ADC_ConfigChannel+0x272>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b09      	cmp	r3, #9
 800403e:	d93a      	bls.n	80040b6 <HAL_ADC_ConfigChannel+0xa2>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004048:	d035      	beq.n	80040b6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68d9      	ldr	r1, [r3, #12]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	3b1e      	subs	r3, #30
 8004060:	2207      	movs	r2, #7
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	400a      	ands	r2, r1
 800406e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a87      	ldr	r2, [pc, #540]	; (8004294 <HAL_ADC_ConfigChannel+0x280>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10a      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68d9      	ldr	r1, [r3, #12]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	061a      	lsls	r2, r3, #24
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800408e:	e035      	b.n	80040fc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68d9      	ldr	r1, [r3, #12]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4618      	mov	r0, r3
 80040a2:	4603      	mov	r3, r0
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4403      	add	r3, r0
 80040a8:	3b1e      	subs	r3, #30
 80040aa:	409a      	lsls	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040b4:	e022      	b.n	80040fc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6919      	ldr	r1, [r3, #16]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	2207      	movs	r2, #7
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43da      	mvns	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	400a      	ands	r2, r1
 80040d8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6919      	ldr	r1, [r3, #16]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	4618      	mov	r0, r3
 80040ec:	4603      	mov	r3, r0
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4403      	add	r3, r0
 80040f2:	409a      	lsls	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d824      	bhi.n	800414e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	3b05      	subs	r3, #5
 8004116:	221f      	movs	r2, #31
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	43da      	mvns	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	400a      	ands	r2, r1
 8004124:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	4618      	mov	r0, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	3b05      	subs	r3, #5
 8004140:	fa00 f203 	lsl.w	r2, r0, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	635a      	str	r2, [r3, #52]	; 0x34
 800414c:	e04c      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d824      	bhi.n	80041a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	3b23      	subs	r3, #35	; 0x23
 8004168:	221f      	movs	r2, #31
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	400a      	ands	r2, r1
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	4618      	mov	r0, r3
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	3b23      	subs	r3, #35	; 0x23
 8004192:	fa00 f203 	lsl.w	r2, r0, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
 800419e:	e023      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	3b41      	subs	r3, #65	; 0x41
 80041b2:	221f      	movs	r2, #31
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43da      	mvns	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	400a      	ands	r2, r1
 80041c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4618      	mov	r0, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3b41      	subs	r3, #65	; 0x41
 80041dc:	fa00 f203 	lsl.w	r2, r0, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a2a      	ldr	r2, [pc, #168]	; (8004298 <HAL_ADC_ConfigChannel+0x284>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10a      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1f4>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fa:	d105      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80041fc:	4b27      	ldr	r3, [pc, #156]	; (800429c <HAL_ADC_ConfigChannel+0x288>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a26      	ldr	r2, [pc, #152]	; (800429c <HAL_ADC_ConfigChannel+0x288>)
 8004202:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004206:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <HAL_ADC_ConfigChannel+0x284>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d109      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x212>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b12      	cmp	r3, #18
 8004218:	d105      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_ADC_ConfigChannel+0x288>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_ADC_ConfigChannel+0x288>)
 8004220:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004224:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_ADC_ConfigChannel+0x284>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d125      	bne.n	800427c <HAL_ADC_ConfigChannel+0x268>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a17      	ldr	r2, [pc, #92]	; (8004294 <HAL_ADC_ConfigChannel+0x280>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x22e>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b11      	cmp	r3, #17
 8004240:	d11c      	bne.n	800427c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004242:	4b16      	ldr	r3, [pc, #88]	; (800429c <HAL_ADC_ConfigChannel+0x288>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4a15      	ldr	r2, [pc, #84]	; (800429c <HAL_ADC_ConfigChannel+0x288>)
 8004248:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800424c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a10      	ldr	r2, [pc, #64]	; (8004294 <HAL_ADC_ConfigChannel+0x280>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d111      	bne.n	800427c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <HAL_ADC_ConfigChannel+0x28c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <HAL_ADC_ConfigChannel+0x290>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0c9a      	lsrs	r2, r3, #18
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800426e:	e002      	b.n	8004276 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3b01      	subs	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f9      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	10000012 	.word	0x10000012
 8004298:	40012000 	.word	0x40012000
 800429c:	40012300 	.word	0x40012300
 80042a0:	20000004 	.word	0x20000004
 80042a4:	431bde83 	.word	0x431bde83

080042a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042b0:	4b78      	ldr	r3, [pc, #480]	; (8004494 <ADC_Init+0x1ec>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a77      	ldr	r2, [pc, #476]	; (8004494 <ADC_Init+0x1ec>)
 80042b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042bc:	4b75      	ldr	r3, [pc, #468]	; (8004494 <ADC_Init+0x1ec>)
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4973      	ldr	r1, [pc, #460]	; (8004494 <ADC_Init+0x1ec>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	021a      	lsls	r2, r3, #8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	4a58      	ldr	r2, [pc, #352]	; (8004498 <ADC_Init+0x1f0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d022      	beq.n	8004382 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800434a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6899      	ldr	r1, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800436c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6899      	ldr	r1, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	e00f      	b.n	80043a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0202 	bic.w	r2, r2, #2
 80043b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6899      	ldr	r1, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	005a      	lsls	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	3b01      	subs	r3, #1
 80043fc:	035a      	lsls	r2, r3, #13
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	e007      	b.n	8004418 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004416:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	3b01      	subs	r3, #1
 8004434:	051a      	lsls	r2, r3, #20
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800444c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6899      	ldr	r1, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800445a:	025a      	lsls	r2, r3, #9
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6899      	ldr	r1, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	029a      	lsls	r2, r3, #10
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40012300 	.word	0x40012300
 8004498:	0f000001 	.word	0x0f000001

0800449c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <__NVIC_SetPriorityGrouping+0x40>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b8:	4013      	ands	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044c4:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <__NVIC_SetPriorityGrouping+0x44>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ca:	4a04      	ldr	r2, [pc, #16]	; (80044dc <__NVIC_SetPriorityGrouping+0x40>)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	60d3      	str	r3, [r2, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000ed00 	.word	0xe000ed00
 80044e0:	05fa0000 	.word	0x05fa0000

080044e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <__NVIC_GetPriorityGrouping+0x18>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	f003 0307 	and.w	r3, r3, #7
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	2b00      	cmp	r3, #0
 8004510:	db0b      	blt.n	800452a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	f003 021f 	and.w	r2, r3, #31
 8004518:	4907      	ldr	r1, [pc, #28]	; (8004538 <__NVIC_EnableIRQ+0x38>)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2001      	movs	r0, #1
 8004522:	fa00 f202 	lsl.w	r2, r0, r2
 8004526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000e100 	.word	0xe000e100

0800453c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	6039      	str	r1, [r7, #0]
 8004546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454c:	2b00      	cmp	r3, #0
 800454e:	db0a      	blt.n	8004566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	490c      	ldr	r1, [pc, #48]	; (8004588 <__NVIC_SetPriority+0x4c>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	0112      	lsls	r2, r2, #4
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	440b      	add	r3, r1
 8004560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004564:	e00a      	b.n	800457c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4908      	ldr	r1, [pc, #32]	; (800458c <__NVIC_SetPriority+0x50>)
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	3b04      	subs	r3, #4
 8004574:	0112      	lsls	r2, r2, #4
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	440b      	add	r3, r1
 800457a:	761a      	strb	r2, [r3, #24]
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000e100 	.word	0xe000e100
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004590:	b480      	push	{r7}
 8004592:	b089      	sub	sp, #36	; 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f1c3 0307 	rsb	r3, r3, #7
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	bf28      	it	cs
 80045ae:	2304      	movcs	r3, #4
 80045b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3304      	adds	r3, #4
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d902      	bls.n	80045c0 <NVIC_EncodePriority+0x30>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3b03      	subs	r3, #3
 80045be:	e000      	b.n	80045c2 <NVIC_EncodePriority+0x32>
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c4:	f04f 32ff 	mov.w	r2, #4294967295
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43da      	mvns	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	401a      	ands	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d8:	f04f 31ff 	mov.w	r1, #4294967295
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	43d9      	mvns	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e8:	4313      	orrs	r3, r2
         );
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004608:	d301      	bcc.n	800460e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800460a:	2301      	movs	r3, #1
 800460c:	e00f      	b.n	800462e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <SysTick_Config+0x40>)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004616:	210f      	movs	r1, #15
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	f7ff ff8e 	bl	800453c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <SysTick_Config+0x40>)
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <SysTick_Config+0x40>)
 8004628:	2207      	movs	r2, #7
 800462a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	e000e010 	.word	0xe000e010

0800463c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff29 	bl	800449c <__NVIC_SetPriorityGrouping>
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	4603      	mov	r3, r0
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004664:	f7ff ff3e 	bl	80044e4 <__NVIC_GetPriorityGrouping>
 8004668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f7ff ff8e 	bl	8004590 <NVIC_EncodePriority>
 8004674:	4602      	mov	r2, r0
 8004676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff5d 	bl	800453c <__NVIC_SetPriority>
}
 8004682:	bf00      	nop
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	4603      	mov	r3, r0
 8004692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff31 	bl	8004500 <__NVIC_EnableIRQ>
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff ffa2 	bl	80045f8 <SysTick_Config>
 80046b4:	4603      	mov	r3, r0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e054      	b.n	800477c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7f5b      	ldrb	r3, [r3, #29]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fd fd1c 	bl	8002120 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	791b      	ldrb	r3, [r3, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10c      	bne.n	8004710 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a22      	ldr	r2, [pc, #136]	; (8004784 <HAL_CRC_Init+0xc4>)
 80046fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0218 	bic.w	r2, r2, #24
 800470c:	609a      	str	r2, [r3, #8]
 800470e:	e00c      	b.n	800472a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6899      	ldr	r1, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	461a      	mov	r2, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f834 	bl	8004788 <HAL_CRCEx_Polynomial_Set>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e028      	b.n	800477c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	795b      	ldrb	r3, [r3, #5]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f04f 32ff 	mov.w	r2, #4294967295
 800473a:	611a      	str	r2, [r3, #16]
 800473c:	e004      	b.n	8004748 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6912      	ldr	r2, [r2, #16]
 8004746:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	04c11db7 	.word	0x04c11db7

08004788 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004798:	231f      	movs	r3, #31
 800479a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800479c:	bf00      	nop
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	613a      	str	r2, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_CRCEx_Polynomial_Set+0x34>
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_CRCEx_Polynomial_Set+0x16>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b18      	cmp	r3, #24
 80047c0:	d846      	bhi.n	8004850 <HAL_CRCEx_Polynomial_Set+0xc8>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	08004857 	.word	0x08004857
 80047cc:	08004851 	.word	0x08004851
 80047d0:	08004851 	.word	0x08004851
 80047d4:	08004851 	.word	0x08004851
 80047d8:	08004851 	.word	0x08004851
 80047dc:	08004851 	.word	0x08004851
 80047e0:	08004851 	.word	0x08004851
 80047e4:	08004851 	.word	0x08004851
 80047e8:	08004845 	.word	0x08004845
 80047ec:	08004851 	.word	0x08004851
 80047f0:	08004851 	.word	0x08004851
 80047f4:	08004851 	.word	0x08004851
 80047f8:	08004851 	.word	0x08004851
 80047fc:	08004851 	.word	0x08004851
 8004800:	08004851 	.word	0x08004851
 8004804:	08004851 	.word	0x08004851
 8004808:	08004839 	.word	0x08004839
 800480c:	08004851 	.word	0x08004851
 8004810:	08004851 	.word	0x08004851
 8004814:	08004851 	.word	0x08004851
 8004818:	08004851 	.word	0x08004851
 800481c:	08004851 	.word	0x08004851
 8004820:	08004851 	.word	0x08004851
 8004824:	08004851 	.word	0x08004851
 8004828:	0800482d 	.word	0x0800482d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b06      	cmp	r3, #6
 8004830:	d913      	bls.n	800485a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004836:	e010      	b.n	800485a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b07      	cmp	r3, #7
 800483c:	d90f      	bls.n	800485e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004842:	e00c      	b.n	800485e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b0f      	cmp	r3, #15
 8004848:	d90b      	bls.n	8004862 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800484e:	e008      	b.n	8004862 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	75fb      	strb	r3, [r7, #23]
      break;
 8004854:	e006      	b.n	8004864 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004856:	bf00      	nop
 8004858:	e004      	b.n	8004864 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800485a:	bf00      	nop
 800485c:	e002      	b.n	8004864 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800485e:	bf00      	nop
 8004860:	e000      	b.n	8004864 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004862:	bf00      	nop
  }
  if (status == HAL_OK)
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10d      	bne.n	8004886 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f023 0118 	bic.w	r1, r3, #24
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	430a      	orrs	r2, r1
 8004884:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048a0:	f7ff fb44 	bl	8003f2c <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e099      	b.n	80049e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d0:	e00f      	b.n	80048f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048d2:	f7ff fb2b 	bl	8003f2c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b05      	cmp	r3, #5
 80048de:	d908      	bls.n	80048f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2203      	movs	r2, #3
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e078      	b.n	80049e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e8      	bne.n	80048d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4b38      	ldr	r3, [pc, #224]	; (80049ec <HAL_DMA_Init+0x158>)
 800490c:	4013      	ands	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800491e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800492a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2b04      	cmp	r3, #4
 800494a:	d107      	bne.n	800495c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	4313      	orrs	r3, r2
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b04      	cmp	r3, #4
 8004984:	d117      	bne.n	80049b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fb03 	bl	8004fa4 <DMA_CheckFifoParam>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2240      	movs	r2, #64	; 0x40
 80049a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049b2:	2301      	movs	r3, #1
 80049b4:	e016      	b.n	80049e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 faba 	bl	8004f38 <DMA_CalcBaseAndBitshift>
 80049c4:	4603      	mov	r3, r0
 80049c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049cc:	223f      	movs	r2, #63	; 0x3f
 80049ce:	409a      	lsls	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	f010803f 	.word	0xf010803f

080049f0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e050      	b.n	8004aa4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d101      	bne.n	8004a12 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e048      	b.n	8004aa4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2221      	movs	r2, #33	; 0x21
 8004a50:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa70 	bl	8004f38 <DMA_CalcBaseAndBitshift>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	223f      	movs	r2, #63	; 0x3f
 8004a62:	409a      	lsls	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_DMA_Start_IT+0x26>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e048      	b.n	8004b64 <HAL_DMA_Start_IT+0xb8>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d137      	bne.n	8004b56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f9ee 	bl	8004edc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b04:	223f      	movs	r2, #63	; 0x3f
 8004b06:	409a      	lsls	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0216 	orr.w	r2, r2, #22
 8004b1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0208 	orr.w	r2, r2, #8
 8004b42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0201 	orr.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e005      	b.n	8004b62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d004      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2280      	movs	r2, #128	; 0x80
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e00c      	b.n	8004ba4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2205      	movs	r2, #5
 8004b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004bbc:	4b92      	ldr	r3, [pc, #584]	; (8004e08 <HAL_DMA_IRQHandler+0x258>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a92      	ldr	r2, [pc, #584]	; (8004e0c <HAL_DMA_IRQHandler+0x25c>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0a9b      	lsrs	r3, r3, #10
 8004bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2208      	movs	r2, #8
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01a      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d013      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0204 	bic.w	r2, r2, #4
 8004c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	2208      	movs	r2, #8
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f043 0201 	orr.w	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	2201      	movs	r2, #1
 8004c40:	409a      	lsls	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	f043 0202 	orr.w	r2, r3, #2
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	2204      	movs	r2, #4
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	2204      	movs	r2, #4
 8004c76:	409a      	lsls	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d043      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d03c      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	2210      	movs	r2, #16
 8004cac:	409a      	lsls	r2, r3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d018      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d108      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d024      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
 8004cde:	e01f      	b.n	8004d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4798      	blx	r3
 8004cf0:	e016      	b.n	8004d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d107      	bne.n	8004d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0208 	bic.w	r2, r2, #8
 8004d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	2220      	movs	r2, #32
 8004d26:	409a      	lsls	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 808e 	beq.w	8004e4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8086 	beq.w	8004e4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d46:	2220      	movs	r2, #32
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d136      	bne.n	8004dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0216 	bic.w	r2, r2, #22
 8004d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <HAL_DMA_IRQHandler+0x1da>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0208 	bic.w	r2, r2, #8
 8004d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	223f      	movs	r2, #63	; 0x3f
 8004da0:	409a      	lsls	r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d07d      	beq.n	8004eba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
        }
        return;
 8004dc6:	e078      	b.n	8004eba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01c      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d108      	bne.n	8004df6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d030      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
 8004df4:	e02b      	b.n	8004e4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
 8004e06:	e022      	b.n	8004e4e <HAL_DMA_IRQHandler+0x29e>
 8004e08:	20000004 	.word	0x20000004
 8004e0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0210 	bic.w	r2, r2, #16
 8004e2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d032      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d022      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2205      	movs	r2, #5
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d307      	bcc.n	8004e96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f2      	bne.n	8004e7a <HAL_DMA_IRQHandler+0x2ca>
 8004e94:	e000      	b.n	8004e98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004e96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
 8004eb8:	e000      	b.n	8004ebc <HAL_DMA_IRQHandler+0x30c>
        return;
 8004eba:	bf00      	nop
    }
  }
}
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop

08004ec4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ef8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d108      	bne.n	8004f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f1a:	e007      	b.n	8004f2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	3b10      	subs	r3, #16
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <DMA_CalcBaseAndBitshift+0x60>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f52:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <DMA_CalcBaseAndBitshift+0x64>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d908      	bls.n	8004f78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	1d1a      	adds	r2, r3, #4
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	659a      	str	r2, [r3, #88]	; 0x58
 8004f76:	e006      	b.n	8004f86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	aaaaaaab 	.word	0xaaaaaaab
 8004f9c:	08013b20 	.word	0x08013b20
 8004fa0:	fffffc00 	.word	0xfffffc00

08004fa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d11f      	bne.n	8004ffe <DMA_CheckFifoParam+0x5a>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d856      	bhi.n	8005072 <DMA_CheckFifoParam+0xce>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <DMA_CheckFifoParam+0x28>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fef 	.word	0x08004fef
 8004fd4:	08004fdd 	.word	0x08004fdd
 8004fd8:	08005073 	.word	0x08005073
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d046      	beq.n	8005076 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fec:	e043      	b.n	8005076 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ff6:	d140      	bne.n	800507a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffc:	e03d      	b.n	800507a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005006:	d121      	bne.n	800504c <DMA_CheckFifoParam+0xa8>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b03      	cmp	r3, #3
 800500c:	d837      	bhi.n	800507e <DMA_CheckFifoParam+0xda>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <DMA_CheckFifoParam+0x70>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005025 	.word	0x08005025
 8005018:	0800502b 	.word	0x0800502b
 800501c:	08005025 	.word	0x08005025
 8005020:	0800503d 	.word	0x0800503d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
      break;
 8005028:	e030      	b.n	800508c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d025      	beq.n	8005082 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503a:	e022      	b.n	8005082 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005044:	d11f      	bne.n	8005086 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800504a:	e01c      	b.n	8005086 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d903      	bls.n	800505a <DMA_CheckFifoParam+0xb6>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d003      	beq.n	8005060 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005058:	e018      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
      break;
 800505e:	e015      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      break;
 8005070:	e00b      	b.n	800508a <DMA_CheckFifoParam+0xe6>
      break;
 8005072:	bf00      	nop
 8005074:	e00a      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 8005076:	bf00      	nop
 8005078:	e008      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 800507a:	bf00      	nop
 800507c:	e006      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 800507e:	bf00      	nop
 8005080:	e004      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 8005082:	bf00      	nop
 8005084:	e002      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;   
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 800508a:	bf00      	nop
    }
  } 
  
  return status; 
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop

0800509c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e039      	b.n	8005122 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fd f84c 	bl	8002160 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	f023 0107 	bic.w	r1, r3, #7
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <HAL_DMA2D_Init+0x90>)
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68d1      	ldr	r1, [r2, #12]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	430b      	orrs	r3, r1
 8005110:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	ffffc000 	.word	0xffffc000

08005130 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_DMA2D_Start+0x1c>
 8005148:	2302      	movs	r3, #2
 800514a:	e018      	b.n	800517e <HAL_DMA2D_Start+0x4e>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fa98 	bl	800569c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d056      	beq.n	8005250 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80051a2:	f7fe fec3 	bl	8003f2c <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80051a8:	e04b      	b.n	8005242 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d023      	beq.n	8005204 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	f043 0202 	orr.w	r2, r3, #2
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e0:	f043 0201 	orr.w	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2221      	movs	r2, #33	; 0x21
 80051ee:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2204      	movs	r2, #4
 80051f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0a5      	b.n	8005350 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d01a      	beq.n	8005242 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800520c:	f7fe fe8e 	bl	8003f2c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <HAL_DMA2D_PollForTransfer+0x9c>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2203      	movs	r2, #3
 8005232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e086      	b.n	8005350 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ac      	beq.n	80051aa <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d061      	beq.n	8005336 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005272:	f7fe fe5b 	bl	8003f2c <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005278:	e056      	b.n	8005328 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005288:	2b00      	cmp	r3, #0
 800528a:	d02e      	beq.n	80052ea <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	f043 0204 	orr.w	r2, r3, #4
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	f043 0202 	orr.w	r2, r3, #2
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	f043 0201 	orr.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2229      	movs	r2, #41	; 0x29
 80052d4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2204      	movs	r2, #4
 80052da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e032      	b.n	8005350 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f0:	d01a      	beq.n	8005328 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fe fe1b 	bl	8003f2c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <HAL_DMA2D_PollForTransfer+0x182>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10f      	bne.n	8005328 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2203      	movs	r2, #3
 8005318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e013      	b.n	8005350 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0a1      	beq.n	800527a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2212      	movs	r2, #18
 800533c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d026      	beq.n	80053c8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d021      	beq.n	80053c8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005392:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	f043 0201 	orr.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2201      	movs	r2, #1
 80053a6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2204      	movs	r2, #4
 80053ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d026      	beq.n	8005420 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d021      	beq.n	8005420 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ea:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2220      	movs	r2, #32
 80053f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f8:	f043 0202 	orr.w	r2, r3, #2
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2204      	movs	r2, #4
 8005404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d026      	beq.n	8005478 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005430:	2b00      	cmp	r3, #0
 8005432:	d021      	beq.n	8005478 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005442:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2208      	movs	r2, #8
 800544a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	f043 0204 	orr.w	r2, r3, #4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2204      	movs	r2, #4
 800545c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d013      	beq.n	80054aa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00e      	beq.n	80054aa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2204      	movs	r2, #4
 80054a2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f853 	bl	8005550 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d024      	beq.n	80054fe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01f      	beq.n	80054fe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054cc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2202      	movs	r2, #2
 80054d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01f      	beq.n	8005548 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d01a      	beq.n	8005548 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005520:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2210      	movs	r2, #16
 8005528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f80e 	bl	8005564 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_DMA2D_ConfigLayer+0x20>
 8005594:	2302      	movs	r3, #2
 8005596:	e079      	b.n	800568c <HAL_DMA2D_ConfigLayer+0x114>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	3318      	adds	r3, #24
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4413      	add	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80055c2:	4b35      	ldr	r3, [pc, #212]	; (8005698 <HAL_DMA2D_ConfigLayer+0x120>)
 80055c4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b0a      	cmp	r3, #10
 80055cc:	d003      	beq.n	80055d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b09      	cmp	r3, #9
 80055d4:	d107      	bne.n	80055e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e005      	b.n	80055f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	061b      	lsls	r3, r3, #24
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d120      	bne.n	800563a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	43db      	mvns	r3, r3
 8005602:	ea02 0103 	and.w	r1, r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	430a      	orrs	r2, r1
 800560e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b0a      	cmp	r3, #10
 8005620:	d003      	beq.n	800562a <HAL_DMA2D_ConfigLayer+0xb2>
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b09      	cmp	r3, #9
 8005628:	d127      	bne.n	800567a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005636:	629a      	str	r2, [r3, #40]	; 0x28
 8005638:	e01f      	b.n	800567a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	43db      	mvns	r3, r3
 8005644:	ea02 0103 	and.w	r1, r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	430a      	orrs	r2, r1
 8005650:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b0a      	cmp	r3, #10
 8005662:	d003      	beq.n	800566c <HAL_DMA2D_ConfigLayer+0xf4>
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b09      	cmp	r3, #9
 800566a:	d106      	bne.n	800567a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005678:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	ff03000f 	.word	0xff03000f

0800569c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800569c:	b480      	push	{r7}
 800569e:	b08b      	sub	sp, #44	; 0x2c
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	041a      	lsls	r2, r3, #16
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	431a      	orrs	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056d4:	d174      	bne.n	80057c0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80056dc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056e4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056ec:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d108      	bne.n	800570e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	431a      	orrs	r2, r3
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	4313      	orrs	r3, r2
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
 800570c:	e053      	b.n	80057b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d106      	bne.n	8005724 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
 8005722:	e048      	b.n	80057b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d111      	bne.n	8005750 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	0cdb      	lsrs	r3, r3, #19
 8005730:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	0a9b      	lsrs	r3, r3, #10
 8005736:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	08db      	lsrs	r3, r3, #3
 800573c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	02db      	lsls	r3, r3, #11
 8005746:	4313      	orrs	r3, r2
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
 800574e:	e032      	b.n	80057b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d117      	bne.n	8005788 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	0fdb      	lsrs	r3, r3, #31
 800575c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	0cdb      	lsrs	r3, r3, #19
 8005762:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	0adb      	lsrs	r3, r3, #11
 8005768:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	08db      	lsrs	r3, r3, #3
 800576e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	431a      	orrs	r2, r3
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	03db      	lsls	r3, r3, #15
 800577e:	4313      	orrs	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
 8005786:	e016      	b.n	80057b6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	0f1b      	lsrs	r3, r3, #28
 800578c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	0d1b      	lsrs	r3, r3, #20
 8005792:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	0b1b      	lsrs	r3, r3, #12
 8005798:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	011a      	lsls	r2, r3, #4
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	431a      	orrs	r2, r3
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	031b      	lsls	r3, r3, #12
 80057ae:	4313      	orrs	r3, r2
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80057be:	e003      	b.n	80057c8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	60da      	str	r2, [r3, #12]
}
 80057c8:	bf00      	nop
 80057ca:	372c      	adds	r7, #44	; 0x2c
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	e175      	b.n	8005ae0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80057f4:	2201      	movs	r2, #1
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4013      	ands	r3, r2
 8005806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	429a      	cmp	r2, r3
 800580e:	f040 8164 	bne.w	8005ada <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d00b      	beq.n	8005832 <HAL_GPIO_Init+0x5e>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d007      	beq.n	8005832 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005826:	2b11      	cmp	r3, #17
 8005828:	d003      	beq.n	8005832 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2b12      	cmp	r3, #18
 8005830:	d130      	bne.n	8005894 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	2203      	movs	r2, #3
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43db      	mvns	r3, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005868:	2201      	movs	r2, #1
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 0201 	and.w	r2, r3, #1
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	2203      	movs	r2, #3
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x100>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2b12      	cmp	r3, #18
 80058d2:	d123      	bne.n	800591c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	08da      	lsrs	r2, r3, #3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3208      	adds	r2, #8
 80058dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	220f      	movs	r2, #15
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	08da      	lsrs	r2, r3, #3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3208      	adds	r2, #8
 8005916:	69b9      	ldr	r1, [r7, #24]
 8005918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	2203      	movs	r2, #3
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 0203 	and.w	r2, r3, #3
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80be 	beq.w	8005ada <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800595e:	4b66      	ldr	r3, [pc, #408]	; (8005af8 <HAL_GPIO_Init+0x324>)
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	4a65      	ldr	r2, [pc, #404]	; (8005af8 <HAL_GPIO_Init+0x324>)
 8005964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005968:	6453      	str	r3, [r2, #68]	; 0x44
 800596a:	4b63      	ldr	r3, [pc, #396]	; (8005af8 <HAL_GPIO_Init+0x324>)
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005976:	4a61      	ldr	r2, [pc, #388]	; (8005afc <HAL_GPIO_Init+0x328>)
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	089b      	lsrs	r3, r3, #2
 800597c:	3302      	adds	r3, #2
 800597e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005982:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	220f      	movs	r2, #15
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43db      	mvns	r3, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4013      	ands	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a58      	ldr	r2, [pc, #352]	; (8005b00 <HAL_GPIO_Init+0x32c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d037      	beq.n	8005a12 <HAL_GPIO_Init+0x23e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_GPIO_Init+0x330>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d031      	beq.n	8005a0e <HAL_GPIO_Init+0x23a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a56      	ldr	r2, [pc, #344]	; (8005b08 <HAL_GPIO_Init+0x334>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02b      	beq.n	8005a0a <HAL_GPIO_Init+0x236>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a55      	ldr	r2, [pc, #340]	; (8005b0c <HAL_GPIO_Init+0x338>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d025      	beq.n	8005a06 <HAL_GPIO_Init+0x232>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a54      	ldr	r2, [pc, #336]	; (8005b10 <HAL_GPIO_Init+0x33c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <HAL_GPIO_Init+0x22e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a53      	ldr	r2, [pc, #332]	; (8005b14 <HAL_GPIO_Init+0x340>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d019      	beq.n	80059fe <HAL_GPIO_Init+0x22a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a52      	ldr	r2, [pc, #328]	; (8005b18 <HAL_GPIO_Init+0x344>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_GPIO_Init+0x226>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a51      	ldr	r2, [pc, #324]	; (8005b1c <HAL_GPIO_Init+0x348>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00d      	beq.n	80059f6 <HAL_GPIO_Init+0x222>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a50      	ldr	r2, [pc, #320]	; (8005b20 <HAL_GPIO_Init+0x34c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <HAL_GPIO_Init+0x21e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a4f      	ldr	r2, [pc, #316]	; (8005b24 <HAL_GPIO_Init+0x350>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d101      	bne.n	80059ee <HAL_GPIO_Init+0x21a>
 80059ea:	2309      	movs	r3, #9
 80059ec:	e012      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 80059ee:	230a      	movs	r3, #10
 80059f0:	e010      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 80059f2:	2308      	movs	r3, #8
 80059f4:	e00e      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 80059f6:	2307      	movs	r3, #7
 80059f8:	e00c      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 80059fa:	2306      	movs	r3, #6
 80059fc:	e00a      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 80059fe:	2305      	movs	r3, #5
 8005a00:	e008      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 8005a02:	2304      	movs	r3, #4
 8005a04:	e006      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 8005a06:	2303      	movs	r3, #3
 8005a08:	e004      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e002      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <HAL_GPIO_Init+0x240>
 8005a12:	2300      	movs	r3, #0
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	f002 0203 	and.w	r2, r2, #3
 8005a1a:	0092      	lsls	r2, r2, #2
 8005a1c:	4093      	lsls	r3, r2
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005a24:	4935      	ldr	r1, [pc, #212]	; (8005afc <HAL_GPIO_Init+0x328>)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	089b      	lsrs	r3, r3, #2
 8005a2a:	3302      	adds	r3, #2
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a32:	4b3d      	ldr	r3, [pc, #244]	; (8005b28 <HAL_GPIO_Init+0x354>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a56:	4a34      	ldr	r2, [pc, #208]	; (8005b28 <HAL_GPIO_Init+0x354>)
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a5c:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <HAL_GPIO_Init+0x354>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	43db      	mvns	r3, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a80:	4a29      	ldr	r2, [pc, #164]	; (8005b28 <HAL_GPIO_Init+0x354>)
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a86:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <HAL_GPIO_Init+0x354>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	43db      	mvns	r3, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4013      	ands	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aaa:	4a1f      	ldr	r2, [pc, #124]	; (8005b28 <HAL_GPIO_Init+0x354>)
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <HAL_GPIO_Init+0x354>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <HAL_GPIO_Init+0x354>)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3301      	adds	r3, #1
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b0f      	cmp	r3, #15
 8005ae4:	f67f ae86 	bls.w	80057f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	3724      	adds	r7, #36	; 0x24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40023800 	.word	0x40023800
 8005afc:	40013800 	.word	0x40013800
 8005b00:	40020000 	.word	0x40020000
 8005b04:	40020400 	.word	0x40020400
 8005b08:	40020800 	.word	0x40020800
 8005b0c:	40020c00 	.word	0x40020c00
 8005b10:	40021000 	.word	0x40021000
 8005b14:	40021400 	.word	0x40021400
 8005b18:	40021800 	.word	0x40021800
 8005b1c:	40021c00 	.word	0x40021c00
 8005b20:	40022000 	.word	0x40022000
 8005b24:	40022400 	.word	0x40022400
 8005b28:	40013c00 	.word	0x40013c00

08005b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	887b      	ldrh	r3, [r7, #2]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	e001      	b.n	8005b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	807b      	strh	r3, [r7, #2]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b6c:	787b      	ldrb	r3, [r7, #1]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b72:	887a      	ldrh	r2, [r7, #2]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005b78:	e003      	b.n	8005b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005b7a:	887b      	ldrh	r3, [r7, #2]
 8005b7c:	041a      	lsls	r2, r3, #16
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	619a      	str	r2, [r3, #24]
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e0bf      	b.n	8005d22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc faf8 	bl	80021ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005bd2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6999      	ldr	r1, [r3, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005be8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6899      	ldr	r1, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b4a      	ldr	r3, [pc, #296]	; (8005d2c <HAL_LTDC_Init+0x19c>)
 8005c04:	400b      	ands	r3, r1
 8005c06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	041b      	lsls	r3, r3, #16
 8005c0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6899      	ldr	r1, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68d9      	ldr	r1, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <HAL_LTDC_Init+0x19c>)
 8005c32:	400b      	ands	r3, r1
 8005c34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68d9      	ldr	r1, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1a      	ldr	r2, [r3, #32]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6919      	ldr	r1, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <HAL_LTDC_Init+0x19c>)
 8005c60:	400b      	ands	r3, r1
 8005c62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	041b      	lsls	r3, r3, #16
 8005c6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6919      	ldr	r1, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6959      	ldr	r1, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <HAL_LTDC_Init+0x19c>)
 8005c8e:	400b      	ands	r3, r1
 8005c90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6959      	ldr	r1, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0206 	orr.w	r2, r2, #6
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	f000f800 	.word	0xf000f800

08005d30 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d023      	beq.n	8005d9a <HAL_LTDC_IRQHandler+0x6a>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01e      	beq.n	8005d9a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0204 	bic.w	r2, r2, #4
 8005d6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2204      	movs	r2, #4
 8005d72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d7a:	f043 0201 	orr.w	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2204      	movs	r2, #4
 8005d88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f86f 	bl	8005e78 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d023      	beq.n	8005dec <HAL_LTDC_IRQHandler+0xbc>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01e      	beq.n	8005dec <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0202 	bic.w	r2, r2, #2
 8005dbc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dcc:	f043 0202 	orr.w	r2, r3, #2
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f846 	bl	8005e78 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01b      	beq.n	8005e2e <HAL_LTDC_IRQHandler+0xfe>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d016      	beq.n	8005e2e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2201      	movs	r2, #1
 8005e16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f82f 	bl	8005e8c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01b      	beq.n	8005e70 <HAL_LTDC_IRQHandler+0x140>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d016      	beq.n	8005e70 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0208 	bic.w	r2, r2, #8
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2208      	movs	r2, #8
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f818 	bl	8005ea0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005eb4:	b5b0      	push	{r4, r5, r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_LTDC_ConfigLayer+0x1a>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e02c      	b.n	8005f28 <HAL_LTDC_ConfigLayer+0x74>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2134      	movs	r1, #52	; 0x34
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	4413      	add	r3, r2
 8005eea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	461d      	mov	r5, r3
 8005ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f855 	bl	8005fb8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2201      	movs	r2, #1
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bdb0      	pop	{r4, r5, r7, pc}

08005f30 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_LTDC_SetAlpha+0x1a>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e024      	b.n	8005f94 <HAL_LTDC_SetAlpha+0x64>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2234      	movs	r2, #52	; 0x34
 8005f5e:	fb02 f303 	mul.w	r3, r2, r3
 8005f62:	3338      	adds	r3, #56	; 0x38
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f81f 	bl	8005fb8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005faa:	b2db      	uxtb	r3, r3
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b089      	sub	sp, #36	; 0x24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd4:	4413      	add	r3, r2
 8005fd6:	041b      	lsls	r3, r3, #16
 8005fd8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	01db      	lsls	r3, r3, #7
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3384      	adds	r3, #132	; 0x84
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	4611      	mov	r1, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	01d2      	lsls	r2, r2, #7
 8005ff4:	440a      	add	r2, r1
 8005ff6:	3284      	adds	r2, #132	; 0x84
 8005ff8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ffc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800600e:	4413      	add	r3, r2
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	01db      	lsls	r3, r3, #7
 800601c:	440b      	add	r3, r1
 800601e:	3384      	adds	r3, #132	; 0x84
 8006020:	4619      	mov	r1, r3
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4313      	orrs	r3, r2
 8006026:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006036:	4413      	add	r3, r2
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	01db      	lsls	r3, r3, #7
 8006046:	4413      	add	r3, r2
 8006048:	3384      	adds	r3, #132	; 0x84
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	6812      	ldr	r2, [r2, #0]
 8006050:	4611      	mov	r1, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	01d2      	lsls	r2, r2, #7
 8006056:	440a      	add	r2, r1
 8006058:	3284      	adds	r2, #132	; 0x84
 800605a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800605e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800606e:	4413      	add	r3, r2
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	01db      	lsls	r3, r3, #7
 800607c:	440b      	add	r3, r1
 800607e:	3384      	adds	r3, #132	; 0x84
 8006080:	4619      	mov	r1, r3
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4313      	orrs	r3, r2
 8006086:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	01db      	lsls	r3, r3, #7
 8006092:	4413      	add	r3, r2
 8006094:	3384      	adds	r3, #132	; 0x84
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	4611      	mov	r1, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	01d2      	lsls	r2, r2, #7
 80060a2:	440a      	add	r2, r1
 80060a4:	3284      	adds	r2, #132	; 0x84
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	01db      	lsls	r3, r3, #7
 80060b6:	4413      	add	r3, r2
 80060b8:	3384      	adds	r3, #132	; 0x84
 80060ba:	461a      	mov	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	061b      	lsls	r3, r3, #24
 80060dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	01db      	lsls	r3, r3, #7
 80060e8:	4413      	add	r3, r2
 80060ea:	3384      	adds	r3, #132	; 0x84
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	01db      	lsls	r3, r3, #7
 80060f8:	4413      	add	r3, r2
 80060fa:	3384      	adds	r3, #132	; 0x84
 80060fc:	461a      	mov	r2, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006108:	461a      	mov	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	431a      	orrs	r2, r3
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	431a      	orrs	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	440b      	add	r3, r1
 800611e:	3384      	adds	r3, #132	; 0x84
 8006120:	4619      	mov	r1, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	01db      	lsls	r3, r3, #7
 8006132:	4413      	add	r3, r2
 8006134:	3384      	adds	r3, #132	; 0x84
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	4611      	mov	r1, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	01d2      	lsls	r2, r2, #7
 8006142:	440a      	add	r2, r1
 8006144:	3284      	adds	r2, #132	; 0x84
 8006146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800614a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	01db      	lsls	r3, r3, #7
 8006156:	4413      	add	r3, r2
 8006158:	3384      	adds	r3, #132	; 0x84
 800615a:	461a      	mov	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	01db      	lsls	r3, r3, #7
 800616c:	4413      	add	r3, r2
 800616e:	3384      	adds	r3, #132	; 0x84
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4619      	mov	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	01db      	lsls	r3, r3, #7
 800617c:	440b      	add	r3, r1
 800617e:	3384      	adds	r3, #132	; 0x84
 8006180:	4619      	mov	r1, r3
 8006182:	4b58      	ldr	r3, [pc, #352]	; (80062e4 <LTDC_SetConfig+0x32c>)
 8006184:	4013      	ands	r3, r2
 8006186:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	68f9      	ldr	r1, [r7, #12]
 8006192:	6809      	ldr	r1, [r1, #0]
 8006194:	4608      	mov	r0, r1
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	01c9      	lsls	r1, r1, #7
 800619a:	4401      	add	r1, r0
 800619c:	3184      	adds	r1, #132	; 0x84
 800619e:	4313      	orrs	r3, r2
 80061a0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	01db      	lsls	r3, r3, #7
 80061ac:	4413      	add	r3, r2
 80061ae:	3384      	adds	r3, #132	; 0x84
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	01db      	lsls	r3, r3, #7
 80061bc:	4413      	add	r3, r2
 80061be:	3384      	adds	r3, #132	; 0x84
 80061c0:	461a      	mov	r2, r3
 80061c2:	2300      	movs	r3, #0
 80061c4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	01db      	lsls	r3, r3, #7
 80061d0:	4413      	add	r3, r2
 80061d2:	3384      	adds	r3, #132	; 0x84
 80061d4:	461a      	mov	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80061e4:	2304      	movs	r3, #4
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	e01b      	b.n	8006222 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d102      	bne.n	80061f8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80061f2:	2303      	movs	r3, #3
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	e014      	b.n	8006222 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d00b      	beq.n	8006218 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006204:	2b02      	cmp	r3, #2
 8006206:	d007      	beq.n	8006218 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800620c:	2b03      	cmp	r3, #3
 800620e:	d003      	beq.n	8006218 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006214:	2b07      	cmp	r3, #7
 8006216:	d102      	bne.n	800621e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006218:	2302      	movs	r3, #2
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	e001      	b.n	8006222 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800621e:	2301      	movs	r3, #1
 8006220:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	01db      	lsls	r3, r3, #7
 800622c:	4413      	add	r3, r2
 800622e:	3384      	adds	r3, #132	; 0x84
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	4611      	mov	r1, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	01d2      	lsls	r2, r2, #7
 800623c:	440a      	add	r2, r1
 800623e:	3284      	adds	r2, #132	; 0x84
 8006240:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006244:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	fb02 f303 	mul.w	r3, r2, r3
 8006250:	041a      	lsls	r2, r3, #16
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6859      	ldr	r1, [r3, #4]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	1acb      	subs	r3, r1, r3
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	3303      	adds	r3, #3
 8006264:	68f9      	ldr	r1, [r7, #12]
 8006266:	6809      	ldr	r1, [r1, #0]
 8006268:	4608      	mov	r0, r1
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	01c9      	lsls	r1, r1, #7
 800626e:	4401      	add	r1, r0
 8006270:	3184      	adds	r1, #132	; 0x84
 8006272:	4313      	orrs	r3, r2
 8006274:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	01db      	lsls	r3, r3, #7
 8006280:	4413      	add	r3, r2
 8006282:	3384      	adds	r3, #132	; 0x84
 8006284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4619      	mov	r1, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	01db      	lsls	r3, r3, #7
 8006290:	440b      	add	r3, r1
 8006292:	3384      	adds	r3, #132	; 0x84
 8006294:	4619      	mov	r1, r3
 8006296:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <LTDC_SetConfig+0x330>)
 8006298:	4013      	ands	r3, r2
 800629a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	01db      	lsls	r3, r3, #7
 80062a6:	4413      	add	r3, r2
 80062a8:	3384      	adds	r3, #132	; 0x84
 80062aa:	461a      	mov	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	01db      	lsls	r3, r3, #7
 80062bc:	4413      	add	r3, r2
 80062be:	3384      	adds	r3, #132	; 0x84
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	4611      	mov	r1, r2
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	01d2      	lsls	r2, r2, #7
 80062cc:	440a      	add	r2, r1
 80062ce:	3284      	adds	r2, #132	; 0x84
 80062d0:	f043 0301 	orr.w	r3, r3, #1
 80062d4:	6013      	str	r3, [r2, #0]
}
 80062d6:	bf00      	nop
 80062d8:	3724      	adds	r7, #36	; 0x24
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	fffff8f8 	.word	0xfffff8f8
 80062e8:	fffff800 	.word	0xfffff800

080062ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a04      	ldr	r2, [pc, #16]	; (8006308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fa:	6013      	str	r3, [r2, #0]
}
 80062fc:	bf00      	nop
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40007000 	.word	0x40007000

0800630c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006316:	4b23      	ldr	r3, [pc, #140]	; (80063a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	4a22      	ldr	r2, [pc, #136]	; (80063a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800631c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006320:	6413      	str	r3, [r2, #64]	; 0x40
 8006322:	4b20      	ldr	r3, [pc, #128]	; (80063a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	603b      	str	r3, [r7, #0]
 800632c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800632e:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006338:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800633a:	f7fd fdf7 	bl	8003f2c <HAL_GetTick>
 800633e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006340:	e009      	b.n	8006356 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006342:	f7fd fdf3 	bl	8003f2c <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006350:	d901      	bls.n	8006356 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e022      	b.n	800639c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006362:	d1ee      	bne.n	8006342 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006364:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a0f      	ldr	r2, [pc, #60]	; (80063a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800636a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800636e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006370:	f7fd fddc 	bl	8003f2c <HAL_GetTick>
 8006374:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006376:	e009      	b.n	800638c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006378:	f7fd fdd8 	bl	8003f2c <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006386:	d901      	bls.n	800638c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e007      	b.n	800639c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006398:	d1ee      	bne.n	8006378 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40023800 	.word	0x40023800
 80063a8:	40007000 	.word	0x40007000

080063ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80063b4:	f7fd fdba 	bl	8003f2c <HAL_GetTick>
 80063b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e067      	b.n	8006494 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10b      	bne.n	80063e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fb ffaf 	bl	800233c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80063de:	f241 3188 	movw	r1, #5000	; 0x1388
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f85e 	bl	80064a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	021a      	lsls	r2, r3, #8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	2120      	movs	r1, #32
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f856 	bl	80064c0 <QSPI_WaitFlagStateUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d135      	bne.n	800648a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b1d      	ldr	r3, [pc, #116]	; (800649c <HAL_QSPI_Init+0xf0>)
 8006426:	4013      	ands	r3, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6852      	ldr	r2, [r2, #4]
 800642c:	0611      	lsls	r1, r2, #24
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	68d2      	ldr	r2, [r2, #12]
 8006432:	4311      	orrs	r1, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	69d2      	ldr	r2, [r2, #28]
 8006438:	4311      	orrs	r1, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6a12      	ldr	r2, [r2, #32]
 800643e:	4311      	orrs	r1, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	430b      	orrs	r3, r1
 8006446:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <HAL_QSPI_Init+0xf4>)
 8006450:	4013      	ands	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6912      	ldr	r2, [r2, #16]
 8006456:	0411      	lsls	r1, r2, #16
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6952      	ldr	r2, [r2, #20]
 800645c:	4311      	orrs	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6992      	ldr	r2, [r2, #24]
 8006462:	4311      	orrs	r1, r2
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6812      	ldr	r2, [r2, #0]
 8006468:	430b      	orrs	r3, r1
 800646a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006492:	7afb      	ldrb	r3, [r7, #11]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	00ffff2f 	.word	0x00ffff2f
 80064a0:	ffe0f8fe 	.word	0xffe0f8fe

080064a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	4613      	mov	r3, r2
 80064ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064d0:	e01a      	b.n	8006508 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d016      	beq.n	8006508 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064da:	f7fd fd27 	bl	8003f2c <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10b      	bne.n	8006508 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2204      	movs	r2, #4
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fc:	f043 0201 	orr.w	r2, r3, #1
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e00e      	b.n	8006526 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf14      	ite	ne
 8006516:	2301      	movne	r3, #1
 8006518:	2300      	moveq	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	429a      	cmp	r2, r3
 8006522:	d1d6      	bne.n	80064d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006538:	2300      	movs	r3, #0
 800653a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e291      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8087 	beq.w	8006662 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006554:	4b96      	ldr	r3, [pc, #600]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 030c 	and.w	r3, r3, #12
 800655c:	2b04      	cmp	r3, #4
 800655e:	d00c      	beq.n	800657a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006560:	4b93      	ldr	r3, [pc, #588]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 030c 	and.w	r3, r3, #12
 8006568:	2b08      	cmp	r3, #8
 800656a:	d112      	bne.n	8006592 <HAL_RCC_OscConfig+0x62>
 800656c:	4b90      	ldr	r3, [pc, #576]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006578:	d10b      	bne.n	8006592 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800657a:	4b8d      	ldr	r3, [pc, #564]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d06c      	beq.n	8006660 <HAL_RCC_OscConfig+0x130>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d168      	bne.n	8006660 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e26b      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659a:	d106      	bne.n	80065aa <HAL_RCC_OscConfig+0x7a>
 800659c:	4b84      	ldr	r3, [pc, #528]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a83      	ldr	r2, [pc, #524]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e02e      	b.n	8006608 <HAL_RCC_OscConfig+0xd8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10c      	bne.n	80065cc <HAL_RCC_OscConfig+0x9c>
 80065b2:	4b7f      	ldr	r3, [pc, #508]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a7e      	ldr	r2, [pc, #504]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	4b7c      	ldr	r3, [pc, #496]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a7b      	ldr	r2, [pc, #492]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e01d      	b.n	8006608 <HAL_RCC_OscConfig+0xd8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065d4:	d10c      	bne.n	80065f0 <HAL_RCC_OscConfig+0xc0>
 80065d6:	4b76      	ldr	r3, [pc, #472]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a75      	ldr	r2, [pc, #468]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	4b73      	ldr	r3, [pc, #460]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a72      	ldr	r2, [pc, #456]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	e00b      	b.n	8006608 <HAL_RCC_OscConfig+0xd8>
 80065f0:	4b6f      	ldr	r3, [pc, #444]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a6e      	ldr	r2, [pc, #440]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	4b6c      	ldr	r3, [pc, #432]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a6b      	ldr	r2, [pc, #428]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d013      	beq.n	8006638 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fd fc8c 	bl	8003f2c <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006618:	f7fd fc88 	bl	8003f2c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b64      	cmp	r3, #100	; 0x64
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e21f      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662a:	4b61      	ldr	r3, [pc, #388]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0xe8>
 8006636:	e014      	b.n	8006662 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fd fc78 	bl	8003f2c <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006640:	f7fd fc74 	bl	8003f2c <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	; 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e20b      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006652:	4b57      	ldr	r3, [pc, #348]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x110>
 800665e:	e000      	b.n	8006662 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d069      	beq.n	8006742 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800666e:	4b50      	ldr	r3, [pc, #320]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800667a:	4b4d      	ldr	r3, [pc, #308]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	2b08      	cmp	r3, #8
 8006684:	d11c      	bne.n	80066c0 <HAL_RCC_OscConfig+0x190>
 8006686:	4b4a      	ldr	r3, [pc, #296]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d116      	bne.n	80066c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006692:	4b47      	ldr	r3, [pc, #284]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_RCC_OscConfig+0x17a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d001      	beq.n	80066aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e1df      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066aa:	4b41      	ldr	r3, [pc, #260]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	493d      	ldr	r1, [pc, #244]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066be:	e040      	b.n	8006742 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d023      	beq.n	8006710 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066c8:	4b39      	ldr	r3, [pc, #228]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a38      	ldr	r2, [pc, #224]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d4:	f7fd fc2a 	bl	8003f2c <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066da:	e008      	b.n	80066ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066dc:	f7fd fc26 	bl	8003f2c <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e1bd      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ee:	4b30      	ldr	r3, [pc, #192]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fa:	4b2d      	ldr	r3, [pc, #180]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	4929      	ldr	r1, [pc, #164]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800670a:	4313      	orrs	r3, r2
 800670c:	600b      	str	r3, [r1, #0]
 800670e:	e018      	b.n	8006742 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006710:	4b27      	ldr	r3, [pc, #156]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fd fc06 	bl	8003f2c <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006724:	f7fd fc02 	bl	8003f2c <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e199      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d038      	beq.n	80067c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d019      	beq.n	800678a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006756:	4b16      	ldr	r3, [pc, #88]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	4a15      	ldr	r2, [pc, #84]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006762:	f7fd fbe3 	bl	8003f2c <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800676a:	f7fd fbdf 	bl	8003f2c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e176      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677c:	4b0c      	ldr	r3, [pc, #48]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800677e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x23a>
 8006788:	e01a      	b.n	80067c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800678a:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 800678c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678e:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <HAL_RCC_OscConfig+0x280>)
 8006790:	f023 0301 	bic.w	r3, r3, #1
 8006794:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006796:	f7fd fbc9 	bl	8003f2c <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800679c:	e00a      	b.n	80067b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800679e:	f7fd fbc5 	bl	8003f2c <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d903      	bls.n	80067b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e15c      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
 80067b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b4:	4b91      	ldr	r3, [pc, #580]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80067b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1ee      	bne.n	800679e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80a4 	beq.w	8006916 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ce:	4b8b      	ldr	r3, [pc, #556]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10d      	bne.n	80067f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80067da:	4b88      	ldr	r3, [pc, #544]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	4a87      	ldr	r2, [pc, #540]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80067e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e4:	6413      	str	r3, [r2, #64]	; 0x40
 80067e6:	4b85      	ldr	r3, [pc, #532]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ee:	60bb      	str	r3, [r7, #8]
 80067f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067f2:	2301      	movs	r3, #1
 80067f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067f6:	4b82      	ldr	r3, [pc, #520]	; (8006a00 <HAL_RCC_OscConfig+0x4d0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d118      	bne.n	8006834 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006802:	4b7f      	ldr	r3, [pc, #508]	; (8006a00 <HAL_RCC_OscConfig+0x4d0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a7e      	ldr	r2, [pc, #504]	; (8006a00 <HAL_RCC_OscConfig+0x4d0>)
 8006808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800680c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800680e:	f7fd fb8d 	bl	8003f2c <HAL_GetTick>
 8006812:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006816:	f7fd fb89 	bl	8003f2c <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b64      	cmp	r3, #100	; 0x64
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e120      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006828:	4b75      	ldr	r3, [pc, #468]	; (8006a00 <HAL_RCC_OscConfig+0x4d0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d106      	bne.n	800684a <HAL_RCC_OscConfig+0x31a>
 800683c:	4b6f      	ldr	r3, [pc, #444]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 800683e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006840:	4a6e      	ldr	r2, [pc, #440]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	6713      	str	r3, [r2, #112]	; 0x70
 8006848:	e02d      	b.n	80068a6 <HAL_RCC_OscConfig+0x376>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10c      	bne.n	800686c <HAL_RCC_OscConfig+0x33c>
 8006852:	4b6a      	ldr	r3, [pc, #424]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	4a69      	ldr	r2, [pc, #420]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	6713      	str	r3, [r2, #112]	; 0x70
 800685e:	4b67      	ldr	r3, [pc, #412]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	4a66      	ldr	r2, [pc, #408]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006864:	f023 0304 	bic.w	r3, r3, #4
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
 800686a:	e01c      	b.n	80068a6 <HAL_RCC_OscConfig+0x376>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b05      	cmp	r3, #5
 8006872:	d10c      	bne.n	800688e <HAL_RCC_OscConfig+0x35e>
 8006874:	4b61      	ldr	r3, [pc, #388]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006878:	4a60      	ldr	r2, [pc, #384]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 800687a:	f043 0304 	orr.w	r3, r3, #4
 800687e:	6713      	str	r3, [r2, #112]	; 0x70
 8006880:	4b5e      	ldr	r3, [pc, #376]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	4a5d      	ldr	r2, [pc, #372]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006886:	f043 0301 	orr.w	r3, r3, #1
 800688a:	6713      	str	r3, [r2, #112]	; 0x70
 800688c:	e00b      	b.n	80068a6 <HAL_RCC_OscConfig+0x376>
 800688e:	4b5b      	ldr	r3, [pc, #364]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	4a5a      	ldr	r2, [pc, #360]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	6713      	str	r3, [r2, #112]	; 0x70
 800689a:	4b58      	ldr	r3, [pc, #352]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	4a57      	ldr	r2, [pc, #348]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d015      	beq.n	80068da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ae:	f7fd fb3d 	bl	8003f2c <HAL_GetTick>
 80068b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b4:	e00a      	b.n	80068cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b6:	f7fd fb39 	bl	8003f2c <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e0ce      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068cc:	4b4b      	ldr	r3, [pc, #300]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0ee      	beq.n	80068b6 <HAL_RCC_OscConfig+0x386>
 80068d8:	e014      	b.n	8006904 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068da:	f7fd fb27 	bl	8003f2c <HAL_GetTick>
 80068de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e0:	e00a      	b.n	80068f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e2:	f7fd fb23 	bl	8003f2c <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e0b8      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f8:	4b40      	ldr	r3, [pc, #256]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80068fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1ee      	bne.n	80068e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006904:	7dfb      	ldrb	r3, [r7, #23]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d105      	bne.n	8006916 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800690a:	4b3c      	ldr	r3, [pc, #240]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	4a3b      	ldr	r2, [pc, #236]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006914:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80a4 	beq.w	8006a68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006920:	4b36      	ldr	r3, [pc, #216]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 030c 	and.w	r3, r3, #12
 8006928:	2b08      	cmp	r3, #8
 800692a:	d06b      	beq.n	8006a04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b02      	cmp	r3, #2
 8006932:	d149      	bne.n	80069c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006934:	4b31      	ldr	r3, [pc, #196]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a30      	ldr	r2, [pc, #192]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 800693a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006940:	f7fd faf4 	bl	8003f2c <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006948:	f7fd faf0 	bl	8003f2c <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e087      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695a:	4b28      	ldr	r3, [pc, #160]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f0      	bne.n	8006948 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69da      	ldr	r2, [r3, #28]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	019b      	lsls	r3, r3, #6
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	3b01      	subs	r3, #1
 8006980:	041b      	lsls	r3, r3, #16
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	061b      	lsls	r3, r3, #24
 800698a:	4313      	orrs	r3, r2
 800698c:	4a1b      	ldr	r2, [pc, #108]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 800698e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006992:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006994:	4b19      	ldr	r3, [pc, #100]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a18      	ldr	r2, [pc, #96]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 800699a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800699e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a0:	f7fd fac4 	bl	8003f2c <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a8:	f7fd fac0 	bl	8003f2c <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e057      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f0      	beq.n	80069a8 <HAL_RCC_OscConfig+0x478>
 80069c6:	e04f      	b.n	8006a68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a0b      	ldr	r2, [pc, #44]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80069ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fd faaa 	bl	8003f2c <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069dc:	f7fd faa6 	bl	8003f2c <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e03d      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ee:	4b03      	ldr	r3, [pc, #12]	; (80069fc <HAL_RCC_OscConfig+0x4cc>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x4ac>
 80069fa:	e035      	b.n	8006a68 <HAL_RCC_OscConfig+0x538>
 80069fc:	40023800 	.word	0x40023800
 8006a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a04:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <HAL_RCC_OscConfig+0x544>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d028      	beq.n	8006a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d121      	bne.n	8006a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d11a      	bne.n	8006a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a34:	4013      	ands	r3, r2
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d111      	bne.n	8006a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d107      	bne.n	8006a64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d001      	beq.n	8006a68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800

08006a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0d0      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a90:	4b6a      	ldr	r3, [pc, #424]	; (8006c3c <HAL_RCC_ClockConfig+0x1c4>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d910      	bls.n	8006ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9e:	4b67      	ldr	r3, [pc, #412]	; (8006c3c <HAL_RCC_ClockConfig+0x1c4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f023 020f 	bic.w	r2, r3, #15
 8006aa6:	4965      	ldr	r1, [pc, #404]	; (8006c3c <HAL_RCC_ClockConfig+0x1c4>)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aae:	4b63      	ldr	r3, [pc, #396]	; (8006c3c <HAL_RCC_ClockConfig+0x1c4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0b8      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d020      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad8:	4b59      	ldr	r3, [pc, #356]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4a58      	ldr	r2, [pc, #352]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006ade:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ae2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006af0:	4b53      	ldr	r3, [pc, #332]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a52      	ldr	r2, [pc, #328]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006af6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006afa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006afc:	4b50      	ldr	r3, [pc, #320]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	494d      	ldr	r1, [pc, #308]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d040      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d107      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	4b47      	ldr	r3, [pc, #284]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d115      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e07f      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3a:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e073      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b4a:	4b3d      	ldr	r3, [pc, #244]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e06b      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b5a:	4b39      	ldr	r3, [pc, #228]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f023 0203 	bic.w	r2, r3, #3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	4936      	ldr	r1, [pc, #216]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b6c:	f7fd f9de 	bl	8003f2c <HAL_GetTick>
 8006b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b72:	e00a      	b.n	8006b8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b74:	f7fd f9da 	bl	8003f2c <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e053      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8a:	4b2d      	ldr	r3, [pc, #180]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 020c 	and.w	r2, r3, #12
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d1eb      	bne.n	8006b74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b9c:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <HAL_RCC_ClockConfig+0x1c4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d210      	bcs.n	8006bcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006baa:	4b24      	ldr	r3, [pc, #144]	; (8006c3c <HAL_RCC_ClockConfig+0x1c4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f023 020f 	bic.w	r2, r3, #15
 8006bb2:	4922      	ldr	r1, [pc, #136]	; (8006c3c <HAL_RCC_ClockConfig+0x1c4>)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bba:	4b20      	ldr	r3, [pc, #128]	; (8006c3c <HAL_RCC_ClockConfig+0x1c4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e032      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd8:	4b19      	ldr	r3, [pc, #100]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4916      	ldr	r1, [pc, #88]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bf6:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	490e      	ldr	r1, [pc, #56]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c0a:	f000 f821 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <HAL_RCC_ClockConfig+0x1c8>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	091b      	lsrs	r3, r3, #4
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	490a      	ldr	r1, [pc, #40]	; (8006c44 <HAL_RCC_ClockConfig+0x1cc>)
 8006c1c:	5ccb      	ldrb	r3, [r1, r3]
 8006c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c22:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <HAL_RCC_ClockConfig+0x1d0>)
 8006c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <HAL_RCC_ClockConfig+0x1d4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fd f93a 	bl	8003ea4 <HAL_InitTick>

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40023c00 	.word	0x40023c00
 8006c40:	40023800 	.word	0x40023800
 8006c44:	08011bdc 	.word	0x08011bdc
 8006c48:	20000004 	.word	0x20000004
 8006c4c:	2000001c 	.word	0x2000001c

08006c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c50:	b5b0      	push	{r4, r5, r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c56:	2100      	movs	r1, #0
 8006c58:	6079      	str	r1, [r7, #4]
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	60f9      	str	r1, [r7, #12]
 8006c5e:	2100      	movs	r1, #0
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006c62:	2100      	movs	r1, #0
 8006c64:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c66:	4952      	ldr	r1, [pc, #328]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c68:	6889      	ldr	r1, [r1, #8]
 8006c6a:	f001 010c 	and.w	r1, r1, #12
 8006c6e:	2908      	cmp	r1, #8
 8006c70:	d00d      	beq.n	8006c8e <HAL_RCC_GetSysClockFreq+0x3e>
 8006c72:	2908      	cmp	r1, #8
 8006c74:	f200 8094 	bhi.w	8006da0 <HAL_RCC_GetSysClockFreq+0x150>
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d002      	beq.n	8006c82 <HAL_RCC_GetSysClockFreq+0x32>
 8006c7c:	2904      	cmp	r1, #4
 8006c7e:	d003      	beq.n	8006c88 <HAL_RCC_GetSysClockFreq+0x38>
 8006c80:	e08e      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c82:	4b4c      	ldr	r3, [pc, #304]	; (8006db4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006c84:	60bb      	str	r3, [r7, #8]
      break;
 8006c86:	e08e      	b.n	8006da6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c88:	4b4b      	ldr	r3, [pc, #300]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x168>)
 8006c8a:	60bb      	str	r3, [r7, #8]
      break;
 8006c8c:	e08b      	b.n	8006da6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c8e:	4948      	ldr	r1, [pc, #288]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c90:	6849      	ldr	r1, [r1, #4]
 8006c92:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006c96:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c98:	4945      	ldr	r1, [pc, #276]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c9a:	6849      	ldr	r1, [r1, #4]
 8006c9c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006ca0:	2900      	cmp	r1, #0
 8006ca2:	d024      	beq.n	8006cee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca4:	4942      	ldr	r1, [pc, #264]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ca6:	6849      	ldr	r1, [r1, #4]
 8006ca8:	0989      	lsrs	r1, r1, #6
 8006caa:	4608      	mov	r0, r1
 8006cac:	f04f 0100 	mov.w	r1, #0
 8006cb0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006cb4:	f04f 0500 	mov.w	r5, #0
 8006cb8:	ea00 0204 	and.w	r2, r0, r4
 8006cbc:	ea01 0305 	and.w	r3, r1, r5
 8006cc0:	493d      	ldr	r1, [pc, #244]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x168>)
 8006cc2:	fb01 f003 	mul.w	r0, r1, r3
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	fb01 f102 	mul.w	r1, r1, r2
 8006ccc:	1844      	adds	r4, r0, r1
 8006cce:	493a      	ldr	r1, [pc, #232]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x168>)
 8006cd0:	fba2 0101 	umull	r0, r1, r2, r1
 8006cd4:	1863      	adds	r3, r4, r1
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	f7f9 fae6 	bl	80002b0 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4613      	mov	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e04a      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cee:	4b30      	ldr	r3, [pc, #192]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	099b      	lsrs	r3, r3, #6
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006cfe:	f04f 0100 	mov.w	r1, #0
 8006d02:	ea02 0400 	and.w	r4, r2, r0
 8006d06:	ea03 0501 	and.w	r5, r3, r1
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	014b      	lsls	r3, r1, #5
 8006d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006d1c:	0142      	lsls	r2, r0, #5
 8006d1e:	4610      	mov	r0, r2
 8006d20:	4619      	mov	r1, r3
 8006d22:	1b00      	subs	r0, r0, r4
 8006d24:	eb61 0105 	sbc.w	r1, r1, r5
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	018b      	lsls	r3, r1, #6
 8006d32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006d36:	0182      	lsls	r2, r0, #6
 8006d38:	1a12      	subs	r2, r2, r0
 8006d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006d3e:	f04f 0000 	mov.w	r0, #0
 8006d42:	f04f 0100 	mov.w	r1, #0
 8006d46:	00d9      	lsls	r1, r3, #3
 8006d48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d4c:	00d0      	lsls	r0, r2, #3
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	1912      	adds	r2, r2, r4
 8006d54:	eb45 0303 	adc.w	r3, r5, r3
 8006d58:	f04f 0000 	mov.w	r0, #0
 8006d5c:	f04f 0100 	mov.w	r1, #0
 8006d60:	0299      	lsls	r1, r3, #10
 8006d62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006d66:	0290      	lsls	r0, r2, #10
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	f7f9 fa9a 	bl	80002b0 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4613      	mov	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006d84:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	0c1b      	lsrs	r3, r3, #16
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	3301      	adds	r3, #1
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	60bb      	str	r3, [r7, #8]
      break;
 8006d9e:	e002      	b.n	8006da6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006da0:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <HAL_RCC_GetSysClockFreq+0x164>)
 8006da2:	60bb      	str	r3, [r7, #8]
      break;
 8006da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006da6:	68bb      	ldr	r3, [r7, #8]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bdb0      	pop	{r4, r5, r7, pc}
 8006db0:	40023800 	.word	0x40023800
 8006db4:	00f42400 	.word	0x00f42400
 8006db8:	017d7840 	.word	0x017d7840

08006dbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dc0:	4b03      	ldr	r3, [pc, #12]	; (8006dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	20000004 	.word	0x20000004

08006dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dd8:	f7ff fff0 	bl	8006dbc <HAL_RCC_GetHCLKFreq>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	0a9b      	lsrs	r3, r3, #10
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	4903      	ldr	r1, [pc, #12]	; (8006df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dea:	5ccb      	ldrb	r3, [r1, r3]
 8006dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40023800 	.word	0x40023800
 8006df8:	08011bec 	.word	0x08011bec

08006dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e00:	f7ff ffdc 	bl	8006dbc <HAL_RCC_GetHCLKFreq>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	0b5b      	lsrs	r3, r3, #13
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	4903      	ldr	r1, [pc, #12]	; (8006e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e12:	5ccb      	ldrb	r3, [r1, r3]
 8006e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	08011bec 	.word	0x08011bec

08006e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d012      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e4c:	4b69      	ldr	r3, [pc, #420]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	4a68      	ldr	r2, [pc, #416]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e56:	6093      	str	r3, [r2, #8]
 8006e58:	4b66      	ldr	r3, [pc, #408]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e60:	4964      	ldr	r1, [pc, #400]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d017      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e7e:	4b5d      	ldr	r3, [pc, #372]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8c:	4959      	ldr	r1, [pc, #356]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006eba:	4b4e      	ldr	r3, [pc, #312]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	494a      	ldr	r1, [pc, #296]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed8:	d101      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006eda:	2301      	movs	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 808b 	beq.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f08:	4b3a      	ldr	r3, [pc, #232]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	4a39      	ldr	r2, [pc, #228]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f12:	6413      	str	r3, [r2, #64]	; 0x40
 8006f14:	4b37      	ldr	r3, [pc, #220]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f20:	4b35      	ldr	r3, [pc, #212]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a34      	ldr	r2, [pc, #208]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2c:	f7fc fffe 	bl	8003f2c <HAL_GetTick>
 8006f30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f34:	f7fc fffa 	bl	8003f2c <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	; 0x64
 8006f40:	d901      	bls.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e357      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f46:	4b2c      	ldr	r3, [pc, #176]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f52:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d035      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6a:	693a      	ldr	r2, [r7, #16]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d02e      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f70:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f7a:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f86:	4b1b      	ldr	r3, [pc, #108]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9c:	f003 0301 	and.w	r3, r3, #1
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d114      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa4:	f7fc ffc2 	bl	8003f2c <HAL_GetTick>
 8006fa8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fac:	f7fc ffbe 	bl	8003f2c <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e319      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0ee      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fda:	d111      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006fdc:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006fea:	400b      	ands	r3, r1
 8006fec:	4901      	ldr	r1, [pc, #4]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	608b      	str	r3, [r1, #8]
 8006ff2:	e00b      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006ff4:	40023800 	.word	0x40023800
 8006ff8:	40007000 	.word	0x40007000
 8006ffc:	0ffffcff 	.word	0x0ffffcff
 8007000:	4bb1      	ldr	r3, [pc, #708]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4ab0      	ldr	r2, [pc, #704]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007006:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800700a:	6093      	str	r3, [r2, #8]
 800700c:	4bae      	ldr	r3, [pc, #696]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800700e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007018:	49ab      	ldr	r1, [pc, #684]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800701a:	4313      	orrs	r3, r2
 800701c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b00      	cmp	r3, #0
 8007028:	d010      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800702a:	4ba7      	ldr	r3, [pc, #668]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800702c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007030:	4aa5      	ldr	r2, [pc, #660]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007036:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800703a:	4ba3      	ldr	r3, [pc, #652]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800703c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	49a0      	ldr	r1, [pc, #640]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007046:	4313      	orrs	r3, r2
 8007048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007058:	4b9b      	ldr	r3, [pc, #620]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007066:	4998      	ldr	r1, [pc, #608]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800707a:	4b93      	ldr	r3, [pc, #588]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800707c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007080:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007088:	498f      	ldr	r1, [pc, #572]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800709c:	4b8a      	ldr	r3, [pc, #552]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070aa:	4987      	ldr	r1, [pc, #540]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070be:	4b82      	ldr	r3, [pc, #520]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070cc:	497e      	ldr	r1, [pc, #504]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070e0:	4b79      	ldr	r3, [pc, #484]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e6:	f023 0203 	bic.w	r2, r3, #3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ee:	4976      	ldr	r1, [pc, #472]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007102:	4b71      	ldr	r3, [pc, #452]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007108:	f023 020c 	bic.w	r2, r3, #12
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007110:	496d      	ldr	r1, [pc, #436]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007124:	4b68      	ldr	r3, [pc, #416]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007132:	4965      	ldr	r1, [pc, #404]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007146:	4b60      	ldr	r3, [pc, #384]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007154:	495c      	ldr	r1, [pc, #368]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007168:	4b57      	ldr	r3, [pc, #348]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007176:	4954      	ldr	r1, [pc, #336]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007178:	4313      	orrs	r3, r2
 800717a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800718a:	4b4f      	ldr	r3, [pc, #316]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007190:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	494b      	ldr	r1, [pc, #300]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80071ac:	4b46      	ldr	r3, [pc, #280]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ba:	4943      	ldr	r1, [pc, #268]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80071ce:	4b3e      	ldr	r3, [pc, #248]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071dc:	493a      	ldr	r1, [pc, #232]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071f0:	4b35      	ldr	r3, [pc, #212]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071fe:	4932      	ldr	r1, [pc, #200]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007200:	4313      	orrs	r3, r2
 8007202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d011      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007212:	4b2d      	ldr	r3, [pc, #180]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007218:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007220:	4929      	ldr	r1, [pc, #164]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800722c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007230:	d101      	bne.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007232:	2301      	movs	r3, #1
 8007234:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007242:	2301      	movs	r3, #1
 8007244:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007252:	4b1d      	ldr	r3, [pc, #116]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007258:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007260:	4919      	ldr	r1, [pc, #100]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007274:	4b14      	ldr	r3, [pc, #80]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007284:	4910      	ldr	r1, [pc, #64]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007286:	4313      	orrs	r3, r2
 8007288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d006      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 80d9 	beq.w	8007452 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a08      	ldr	r2, [pc, #32]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80072a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ac:	f7fc fe3e 	bl	8003f2c <HAL_GetTick>
 80072b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072b2:	e00b      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072b4:	f7fc fe3a 	bl	8003f2c <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b64      	cmp	r3, #100	; 0x64
 80072c0:	d904      	bls.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e197      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80072c6:	bf00      	nop
 80072c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072cc:	4b6c      	ldr	r3, [pc, #432]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1ed      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d021      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11d      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072ec:	4b64      	ldr	r3, [pc, #400]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072fa:	4b61      	ldr	r3, [pc, #388]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007300:	0e1b      	lsrs	r3, r3, #24
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	019a      	lsls	r2, r3, #6
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	041b      	lsls	r3, r3, #16
 8007312:	431a      	orrs	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	061b      	lsls	r3, r3, #24
 8007318:	431a      	orrs	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	071b      	lsls	r3, r3, #28
 8007320:	4957      	ldr	r1, [pc, #348]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800733c:	d00a      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02e      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007352:	d129      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007354:	4b4a      	ldr	r3, [pc, #296]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	f003 0303 	and.w	r3, r3, #3
 8007360:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007362:	4b47      	ldr	r3, [pc, #284]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007368:	0f1b      	lsrs	r3, r3, #28
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	019a      	lsls	r2, r3, #6
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	041b      	lsls	r3, r3, #16
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	061b      	lsls	r3, r3, #24
 8007382:	431a      	orrs	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	071b      	lsls	r3, r3, #28
 8007388:	493d      	ldr	r1, [pc, #244]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007390:	4b3b      	ldr	r3, [pc, #236]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007396:	f023 021f 	bic.w	r2, r3, #31
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	3b01      	subs	r3, #1
 80073a0:	4937      	ldr	r1, [pc, #220]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01d      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073b4:	4b32      	ldr	r3, [pc, #200]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073ba:	0e1b      	lsrs	r3, r3, #24
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073c2:	4b2f      	ldr	r3, [pc, #188]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c8:	0f1b      	lsrs	r3, r3, #28
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	019a      	lsls	r2, r3, #6
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	431a      	orrs	r2, r3
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	061b      	lsls	r3, r3, #24
 80073e2:	431a      	orrs	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	071b      	lsls	r3, r3, #28
 80073e8:	4925      	ldr	r1, [pc, #148]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d011      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	019a      	lsls	r2, r3, #6
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	061b      	lsls	r3, r3, #24
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	071b      	lsls	r3, r3, #28
 8007418:	4919      	ldr	r1, [pc, #100]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800741a:	4313      	orrs	r3, r2
 800741c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007420:	4b17      	ldr	r3, [pc, #92]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a16      	ldr	r2, [pc, #88]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800742a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800742c:	f7fc fd7e 	bl	8003f2c <HAL_GetTick>
 8007430:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007434:	f7fc fd7a 	bl	8003f2c <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b64      	cmp	r3, #100	; 0x64
 8007440:	d901      	bls.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e0d7      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007446:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f0      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	2b01      	cmp	r3, #1
 8007456:	f040 80cd 	bne.w	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800745a:	4b09      	ldr	r3, [pc, #36]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a08      	ldr	r2, [pc, #32]	; (8007480 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007466:	f7fc fd61 	bl	8003f2c <HAL_GetTick>
 800746a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800746c:	e00a      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800746e:	f7fc fd5d 	bl	8003f2c <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b64      	cmp	r3, #100	; 0x64
 800747a:	d903      	bls.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e0ba      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007480:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007484:	4b5e      	ldr	r3, [pc, #376]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800748c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007490:	d0ed      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d02e      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d12a      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074ba:	4b51      	ldr	r3, [pc, #324]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074c8:	4b4d      	ldr	r3, [pc, #308]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ce:	0f1b      	lsrs	r3, r3, #28
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	019a      	lsls	r2, r3, #6
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	061b      	lsls	r3, r3, #24
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	071b      	lsls	r3, r3, #28
 80074ee:	4944      	ldr	r1, [pc, #272]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074f6:	4b42      	ldr	r3, [pc, #264]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	3b01      	subs	r3, #1
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	493d      	ldr	r1, [pc, #244]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d022      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007524:	d11d      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007526:	4b36      	ldr	r3, [pc, #216]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	0e1b      	lsrs	r3, r3, #24
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007534:	4b32      	ldr	r3, [pc, #200]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	0f1b      	lsrs	r3, r3, #28
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	019a      	lsls	r2, r3, #6
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	431a      	orrs	r2, r3
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	061b      	lsls	r3, r3, #24
 8007554:	431a      	orrs	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	071b      	lsls	r3, r3, #28
 800755a:	4929      	ldr	r1, [pc, #164]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800755c:	4313      	orrs	r3, r2
 800755e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d028      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800756e:	4b24      	ldr	r3, [pc, #144]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007574:	0e1b      	lsrs	r3, r3, #24
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800757c:	4b20      	ldr	r3, [pc, #128]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800757e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007582:	0c1b      	lsrs	r3, r3, #16
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	019a      	lsls	r2, r3, #6
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	431a      	orrs	r2, r3
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	061b      	lsls	r3, r3, #24
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	071b      	lsls	r3, r3, #28
 80075a2:	4917      	ldr	r1, [pc, #92]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075aa:	4b15      	ldr	r3, [pc, #84]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	4911      	ldr	r1, [pc, #68]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075c0:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a0e      	ldr	r2, [pc, #56]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075cc:	f7fc fcae 	bl	8003f2c <HAL_GetTick>
 80075d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075d2:	e008      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075d4:	f7fc fcaa 	bl	8003f2c <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b64      	cmp	r3, #100	; 0x64
 80075e0:	d901      	bls.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e007      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075e6:	4b06      	ldr	r3, [pc, #24]	; (8007600 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f2:	d1ef      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	40023800 	.word	0x40023800

08007604 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e081      	b.n	800771a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7f5b      	ldrb	r3, [r3, #29]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7fa ff18 	bl	800245c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	22ca      	movs	r2, #202	; 0xca
 8007638:	625a      	str	r2, [r3, #36]	; 0x24
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2253      	movs	r2, #83	; 0x53
 8007640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fb16 	bl	8007c74 <RTC_EnterInitMode>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d008      	beq.n	8007660 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	22ff      	movs	r2, #255	; 0xff
 8007654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2204      	movs	r2, #4
 800765a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e05c      	b.n	800771a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6899      	ldr	r1, [r3, #8]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b2e      	ldr	r3, [pc, #184]	; (8007724 <HAL_RTC_Init+0x120>)
 800766c:	400b      	ands	r3, r1
 800766e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6899      	ldr	r1, [r3, #8]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68d2      	ldr	r2, [r2, #12]
 8007696:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6919      	ldr	r1, [r3, #16]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	041a      	lsls	r2, r3, #16
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076ba:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10e      	bne.n	80076e8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 faaa 	bl	8007c24 <HAL_RTC_WaitForSynchro>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	22ff      	movs	r2, #255	; 0xff
 80076dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2204      	movs	r2, #4
 80076e2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e018      	b.n	800771a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0208 	bic.w	r2, r2, #8
 80076f6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699a      	ldr	r2, [r3, #24]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	22ff      	movs	r2, #255	; 0xff
 8007710:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007718:	2300      	movs	r3, #0
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	ff8fffbf 	.word	0xff8fffbf

08007728 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007728:	b590      	push	{r4, r7, lr}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	7f1b      	ldrb	r3, [r3, #28]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_RTC_SetTime+0x1c>
 8007740:	2302      	movs	r3, #2
 8007742:	e0a8      	b.n	8007896 <HAL_RTC_SetTime+0x16e>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2202      	movs	r2, #2
 800774e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d126      	bne.n	80077a4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d102      	bne.n	800776a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 faac 	bl	8007ccc <RTC_ByteToBcd2>
 8007774:	4603      	mov	r3, r0
 8007776:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 faa5 	bl	8007ccc <RTC_ByteToBcd2>
 8007782:	4603      	mov	r3, r0
 8007784:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007786:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	789b      	ldrb	r3, [r3, #2]
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fa9d 	bl	8007ccc <RTC_ByteToBcd2>
 8007792:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007794:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	7b1b      	ldrb	r3, [r3, #12]
 800779c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
 80077a2:	e018      	b.n	80077d6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80077c4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80077ca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	7b1b      	ldrb	r3, [r3, #12]
 80077d0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80077d2:	4313      	orrs	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	22ca      	movs	r2, #202	; 0xca
 80077dc:	625a      	str	r2, [r3, #36]	; 0x24
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2253      	movs	r2, #83	; 0x53
 80077e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 fa44 	bl	8007c74 <RTC_EnterInitMode>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	22ff      	movs	r2, #255	; 0xff
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2204      	movs	r2, #4
 80077fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e045      	b.n	8007896 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	6979      	ldr	r1, [r7, #20]
 8007810:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <HAL_RTC_SetTime+0x178>)
 8007812:	400b      	ands	r3, r1
 8007814:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007824:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	6899      	ldr	r1, [r3, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800784c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d111      	bne.n	8007880 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f9e1 	bl	8007c24 <HAL_RTC_WaitForSynchro>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	22ff      	movs	r2, #255	; 0xff
 800786e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2204      	movs	r2, #4
 8007874:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e00a      	b.n	8007896 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	22ff      	movs	r2, #255	; 0xff
 8007886:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007894:	2300      	movs	r3, #0
  }
}
 8007896:	4618      	mov	r0, r3
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	bd90      	pop	{r4, r7, pc}
 800789e:	bf00      	nop
 80078a0:	007f7f7f 	.word	0x007f7f7f

080078a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078a4:	b590      	push	{r4, r7, lr}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	7f1b      	ldrb	r3, [r3, #28]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_RTC_SetDate+0x1c>
 80078bc:	2302      	movs	r3, #2
 80078be:	e092      	b.n	80079e6 <HAL_RTC_SetDate+0x142>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2202      	movs	r2, #2
 80078ca:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10e      	bne.n	80078f0 <HAL_RTC_SetDate+0x4c>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	f023 0310 	bic.w	r3, r3, #16
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	330a      	adds	r3, #10
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d11c      	bne.n	8007930 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	78db      	ldrb	r3, [r3, #3]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f9e6 	bl	8007ccc <RTC_ByteToBcd2>
 8007900:	4603      	mov	r3, r0
 8007902:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	4618      	mov	r0, r3
 800790a:	f000 f9df 	bl	8007ccc <RTC_ByteToBcd2>
 800790e:	4603      	mov	r3, r0
 8007910:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007912:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	789b      	ldrb	r3, [r3, #2]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f9d7 	bl	8007ccc <RTC_ByteToBcd2>
 800791e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007920:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	e00e      	b.n	800794e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	78db      	ldrb	r3, [r3, #3]
 8007934:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	785b      	ldrb	r3, [r3, #1]
 800793a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800793c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007942:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	22ca      	movs	r2, #202	; 0xca
 8007954:	625a      	str	r2, [r3, #36]	; 0x24
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2253      	movs	r2, #83	; 0x53
 800795c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 f988 	bl	8007c74 <RTC_EnterInitMode>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00b      	beq.n	8007982 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	22ff      	movs	r2, #255	; 0xff
 8007970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2204      	movs	r2, #4
 8007976:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e031      	b.n	80079e6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <HAL_RTC_SetDate+0x14c>)
 800798a:	400b      	ands	r3, r1
 800798c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68da      	ldr	r2, [r3, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800799c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d111      	bne.n	80079d0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f939 	bl	8007c24 <HAL_RTC_WaitForSynchro>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	22ff      	movs	r2, #255	; 0xff
 80079be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2204      	movs	r2, #4
 80079c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e00a      	b.n	80079e6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	22ff      	movs	r2, #255	; 0xff
 80079d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80079e4:	2300      	movs	r3, #0
  }
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd90      	pop	{r4, r7, pc}
 80079ee:	bf00      	nop
 80079f0:	00ffff3f 	.word	0x00ffff3f

080079f4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b089      	sub	sp, #36	; 0x24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	7f1b      	ldrb	r3, [r3, #28]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_RTC_SetAlarm+0x24>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e101      	b.n	8007c1c <HAL_RTC_SetAlarm+0x228>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2202      	movs	r2, #2
 8007a22:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d137      	bne.n	8007a9a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f942 	bl	8007ccc <RTC_ByteToBcd2>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 f93b 	bl	8007ccc <RTC_ByteToBcd2>
 8007a56:	4603      	mov	r3, r0
 8007a58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007a5a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	789b      	ldrb	r3, [r3, #2]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f933 	bl	8007ccc <RTC_ByteToBcd2>
 8007a66:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007a68:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	7b1b      	ldrb	r3, [r3, #12]
 8007a70:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007a72:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 f925 	bl	8007ccc <RTC_ByteToBcd2>
 8007a82:	4603      	mov	r3, r0
 8007a84:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007a86:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007a8e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	e023      	b.n	8007ae2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007aba:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007ac0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	7b1b      	ldrb	r3, [r3, #12]
 8007ac6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007ac8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ad0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007ad2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007ad8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	22ca      	movs	r2, #202	; 0xca
 8007af4:	625a      	str	r2, [r3, #36]	; 0x24
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2253      	movs	r2, #83	; 0x53
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b06:	d13f      	bne.n	8007b88 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b16:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b26:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b28:	f7fc fa00 	bl	8003f2c <HAL_GetTick>
 8007b2c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007b2e:	e013      	b.n	8007b58 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b30:	f7fc f9fc 	bl	8003f2c <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b3e:	d90b      	bls.n	8007b58 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	22ff      	movs	r2, #255	; 0xff
 8007b46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e061      	b.n	8007c1c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0e4      	beq.n	8007b30 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b84:	609a      	str	r2, [r3, #8]
 8007b86:	e03e      	b.n	8007c06 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b96:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ba6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ba8:	f7fc f9c0 	bl	8003f2c <HAL_GetTick>
 8007bac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007bae:	e013      	b.n	8007bd8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007bb0:	f7fc f9bc 	bl	8003f2c <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bbe:	d90b      	bls.n	8007bd8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	22ff      	movs	r2, #255	; 0xff
 8007bc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2203      	movs	r2, #3
 8007bcc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e021      	b.n	8007c1c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0e4      	beq.n	8007bb0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69fa      	ldr	r2, [r7, #28]
 8007bec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c04:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	22ff      	movs	r2, #255	; 0xff
 8007c0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3724      	adds	r7, #36	; 0x24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd90      	pop	{r4, r7, pc}

08007c24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007c3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c40:	f7fc f974 	bl	8003f2c <HAL_GetTick>
 8007c44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007c46:	e009      	b.n	8007c5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c48:	f7fc f970 	bl	8003f2c <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c56:	d901      	bls.n	8007c5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e007      	b.n	8007c6c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0ee      	beq.n	8007c48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d119      	bne.n	8007cc2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c98:	f7fc f948 	bl	8003f2c <HAL_GetTick>
 8007c9c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c9e:	e009      	b.n	8007cb4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ca0:	f7fc f944 	bl	8003f2c <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cae:	d901      	bls.n	8007cb4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e007      	b.n	8007cc4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0ee      	beq.n	8007ca0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007cda:	e005      	b.n	8007ce8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	3b0a      	subs	r3, #10
 8007ce6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	2b09      	cmp	r3, #9
 8007cec:	d8f6      	bhi.n	8007cdc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b2db      	uxtb	r3, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	7f1b      	ldrb	r3, [r3, #28]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e03e      	b.n	8007da2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	4b1e      	ldr	r3, [pc, #120]	; (8007db0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	22ca      	movs	r2, #202	; 0xca
 8007d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2253      	movs	r2, #83	; 0x53
 8007d52:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0206 	bic.w	r2, r2, #6
 8007d62:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d8a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	22ff      	movs	r2, #255	; 0xff
 8007d92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	fffff7f7 	.word	0xfffff7f7

08007db4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e022      	b.n	8007e0c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d105      	bne.n	8007dde <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fa fb59 	bl	8002490 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2203      	movs	r2, #3
 8007de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f814 	bl	8007e14 <HAL_SD_InitCard>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e00a      	b.n	8007e0c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e14:	b5b0      	push	{r4, r5, r7, lr}
 8007e16:	b08e      	sub	sp, #56	; 0x38
 8007e18:	af04      	add	r7, sp, #16
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007e30:	2376      	movs	r3, #118	; 0x76
 8007e32:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681d      	ldr	r5, [r3, #0]
 8007e38:	466c      	mov	r4, sp
 8007e3a:	f107 0314 	add.w	r3, r7, #20
 8007e3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e46:	f107 0308 	add.w	r3, r7, #8
 8007e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f002 ffc1 	bl	800add4 <SDMMC_Init>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e056      	b.n	8007f12 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e72:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f002 fff5 	bl	800ae68 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e8c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fff2 	bl	8008e78 <SD_PowerON>
 8007e94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e02e      	b.n	8007f12 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 ff13 	bl	8008ce0 <SD_InitCard>
 8007eba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e01b      	b.n	8007f12 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f003 f854 	bl	800af90 <SDMMC_CmdBlockLength>
 8007ee8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00f      	beq.n	8007f10 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a09      	ldr	r2, [pc, #36]	; (8007f1c <HAL_SD_InitCard+0x108>)
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3728      	adds	r7, #40	; 0x28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bdb0      	pop	{r4, r5, r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	004005ff 	.word	0x004005ff

08007f20 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08c      	sub	sp, #48	; 0x30
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d107      	bne.n	8007f48 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e0c3      	b.n	80080d0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	f040 80bc 	bne.w	80080ce <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	441a      	add	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d907      	bls.n	8007f7a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e0aa      	b.n	80080d0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2200      	movs	r2, #0
 8007f88:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	4a4e      	ldr	r2, [pc, #312]	; (80080d8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	4a4d      	ldr	r2, [pc, #308]	; (80080dc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007fa8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	2200      	movs	r2, #0
 8007fb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3380      	adds	r3, #128	; 0x80
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	025b      	lsls	r3, r3, #9
 8007fe8:	089b      	lsrs	r3, r3, #2
 8007fea:	f7fc fd5f 	bl	8004aac <HAL_DMA_Start_IT>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d017      	beq.n	8008024 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008002:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a35      	ldr	r2, [pc, #212]	; (80080e0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800800a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e055      	b.n	80080d0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0208 	orr.w	r2, r2, #8
 8008032:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008038:	2b01      	cmp	r3, #1
 800803a:	d002      	beq.n	8008042 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	025b      	lsls	r3, r3, #9
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008042:	f04f 33ff 	mov.w	r3, #4294967295
 8008046:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	025b      	lsls	r3, r3, #9
 800804c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800804e:	2390      	movs	r3, #144	; 0x90
 8008050:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008052:	2302      	movs	r3, #2
 8008054:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008056:	2300      	movs	r3, #0
 8008058:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800805a:	2301      	movs	r3, #1
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f107 0210 	add.w	r2, r7, #16
 8008066:	4611      	mov	r1, r2
 8008068:	4618      	mov	r0, r3
 800806a:	f002 ff65 	bl	800af38 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d90a      	bls.n	800808a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2282      	movs	r2, #130	; 0x82
 8008078:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008080:	4618      	mov	r0, r3
 8008082:	f002 ffc9 	bl	800b018 <SDMMC_CmdReadMultiBlock>
 8008086:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008088:	e009      	b.n	800809e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2281      	movs	r2, #129	; 0x81
 800808e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008096:	4618      	mov	r0, r3
 8008098:	f002 ff9c 	bl	800afd4 <SDMMC_CmdReadSingleBlock>
 800809c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d012      	beq.n	80080ca <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a0d      	ldr	r2, [pc, #52]	; (80080e0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80080aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b2:	431a      	orrs	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e002      	b.n	80080d0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	e000      	b.n	80080d0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80080ce:	2302      	movs	r3, #2
  }
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3730      	adds	r7, #48	; 0x30
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	08008aef 	.word	0x08008aef
 80080dc:	08008b61 	.word	0x08008b61
 80080e0:	004005ff 	.word	0x004005ff

080080e4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08c      	sub	sp, #48	; 0x30
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d107      	bne.n	800810c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e0c6      	b.n	800829a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	f040 80bf 	bne.w	8008298 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	441a      	add	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812a:	429a      	cmp	r2, r3
 800812c:	d907      	bls.n	800813e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e0ad      	b.n	800829a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2203      	movs	r2, #3
 8008142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f042 021a 	orr.w	r2, r2, #26
 800815c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008162:	4a50      	ldr	r2, [pc, #320]	; (80082a4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	4a4f      	ldr	r2, [pc, #316]	; (80082a8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800816c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	2200      	movs	r2, #0
 8008174:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817a:	2b01      	cmp	r3, #1
 800817c:	d002      	beq.n	8008184 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	025b      	lsls	r3, r3, #9
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d90a      	bls.n	80081a0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	22a0      	movs	r2, #160	; 0xa0
 800818e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008196:	4618      	mov	r0, r3
 8008198:	f002 ff82 	bl	800b0a0 <SDMMC_CmdWriteMultiBlock>
 800819c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800819e:	e009      	b.n	80081b4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2290      	movs	r2, #144	; 0x90
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081ac:	4618      	mov	r0, r3
 80081ae:	f002 ff55 	bl	800b05c <SDMMC_CmdWriteSingleBlock>
 80081b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80081b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d012      	beq.n	80081e0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a3b      	ldr	r2, [pc, #236]	; (80082ac <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80081c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c8:	431a      	orrs	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e05c      	b.n	800829a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0208 	orr.w	r2, r2, #8
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f4:	2240      	movs	r2, #64	; 0x40
 80081f6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008208:	689a      	ldr	r2, [r3, #8]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3380      	adds	r3, #128	; 0x80
 8008220:	461a      	mov	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	025b      	lsls	r3, r3, #9
 8008226:	089b      	lsrs	r3, r3, #2
 8008228:	f7fc fc40 	bl	8004aac <HAL_DMA_Start_IT>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01a      	beq.n	8008268 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 021a 	bic.w	r2, r2, #26
 8008240:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a19      	ldr	r2, [pc, #100]	; (80082ac <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008248:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e018      	b.n	800829a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	025b      	lsls	r3, r3, #9
 8008272:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008274:	2390      	movs	r3, #144	; 0x90
 8008276:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008278:	2300      	movs	r3, #0
 800827a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800827c:	2300      	movs	r3, #0
 800827e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008280:	2301      	movs	r3, #1
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f107 0210 	add.w	r2, r7, #16
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f002 fe52 	bl	800af38 <SDMMC_ConfigData>

      return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	4618      	mov	r0, r3
 800829c:	3730      	adds	r7, #48	; 0x30
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	08008ac5 	.word	0x08008ac5
 80082a8:	08008b61 	.word	0x08008b61
 80082ac:	004005ff 	.word	0x004005ff

080082b0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082bc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <HAL_SD_IRQHandler+0x2e>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 ffed 	bl	80092b6 <SD_Read_IT>
 80082dc:	e153      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 808d 	beq.w	8008408 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4ba3      	ldr	r3, [pc, #652]	; (8008590 <HAL_SD_IRQHandler+0x2e0>)
 8008304:	400b      	ands	r3, r1
 8008306:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0201 	bic.w	r2, r2, #1
 8008316:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f003 0308 	and.w	r3, r3, #8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d039      	beq.n	8008396 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <HAL_SD_IRQHandler+0x86>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d011      	beq.n	800835a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f002 fed2 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 8008340:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d008      	beq.n	800835a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	431a      	orrs	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f921 	bl	800859c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008362:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <HAL_SD_IRQHandler+0xd6>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7fb fbb6 	bl	8003af8 <HAL_SD_RxCpltCallback>
 800838c:	e0fb      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7fb fba8 	bl	8003ae4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008394:	e0f7      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 80f2 	beq.w	8008586 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d011      	beq.n	80083d0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f002 fe97 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 80083b6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d008      	beq.n	80083d0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f8e6 	bl	800859c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f040 80d5 	bne.w	8008586 <HAL_SD_IRQHandler+0x2d6>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 80cf 	bne.w	8008586 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 0208 	bic.w	r2, r2, #8
 80083f6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7fb fb6f 	bl	8003ae4 <HAL_SD_TxCpltCallback>
}
 8008406:	e0be      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <HAL_SD_IRQHandler+0x178>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f003 0308 	and.w	r3, r3, #8
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 ff99 	bl	8009358 <SD_Write_IT>
 8008426:	e0ae      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 80a7 	beq.w	8008586 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d005      	beq.n	8008452 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	f043 0202 	orr.w	r2, r3, #2
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	f043 0208 	orr.w	r2, r3, #8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b00      	cmp	r3, #0
 8008478:	d005      	beq.n	8008486 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	f043 0220 	orr.w	r2, r3, #32
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	f003 0310 	and.w	r3, r3, #16
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	f043 0210 	orr.w	r2, r3, #16
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80084b8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f002 fe10 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 80084c4:	4602      	mov	r2, r0
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f857 	bl	800859c <HAL_SD_ErrorCallback>
}
 80084ee:	e04a      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d045      	beq.n	8008586 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f003 0310 	and.w	r3, r3, #16
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <HAL_SD_IRQHandler+0x25e>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d011      	beq.n	8008532 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	4a20      	ldr	r2, [pc, #128]	; (8008594 <HAL_SD_IRQHandler+0x2e4>)
 8008514:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	4618      	mov	r0, r3
 800851c:	f7fc fb26 	bl	8004b6c <HAL_DMA_Abort_IT>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d02f      	beq.n	8008586 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fb6a 	bl	8008c04 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008530:	e029      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <HAL_SD_IRQHandler+0x296>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d011      	beq.n	800856a <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	4a13      	ldr	r2, [pc, #76]	; (8008598 <HAL_SD_IRQHandler+0x2e8>)
 800854c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	4618      	mov	r0, r3
 8008554:	f7fc fb0a 	bl	8004b6c <HAL_DMA_Abort_IT>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d013      	beq.n	8008586 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fb85 	bl	8008c72 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008568:	e00d      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7fb faa6 	bl	8003ad0 <HAL_SD_AbortCallback>
}
 8008584:	e7ff      	b.n	8008586 <HAL_SD_IRQHandler+0x2d6>
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	ffff3ec5 	.word	0xffff3ec5
 8008594:	08008c05 	.word	0x08008c05
 8008598:	08008c73 	.word	0x08008c73

0800859c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085be:	0f9b      	lsrs	r3, r3, #30
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ca:	0e9b      	lsrs	r3, r3, #26
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085dc:	0e1b      	lsrs	r3, r3, #24
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0303 	and.w	r3, r3, #3
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008606:	b2da      	uxtb	r2, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008610:	0d1b      	lsrs	r3, r3, #20
 8008612:	b29a      	uxth	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800861c:	0c1b      	lsrs	r3, r3, #16
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	b2da      	uxtb	r2, r3
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800862e:	0bdb      	lsrs	r3, r3, #15
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008640:	0b9b      	lsrs	r3, r3, #14
 8008642:	b2db      	uxtb	r3, r3
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	b2da      	uxtb	r2, r3
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008652:	0b5b      	lsrs	r3, r3, #13
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	b2da      	uxtb	r2, r3
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008664:	0b1b      	lsrs	r3, r3, #12
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	b2da      	uxtb	r2, r3
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2200      	movs	r2, #0
 8008676:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867c:	2b00      	cmp	r3, #0
 800867e:	d163      	bne.n	8008748 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008684:	009a      	lsls	r2, r3, #2
 8008686:	f640 73fc 	movw	r3, #4092	; 0xffc
 800868a:	4013      	ands	r3, r2
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008690:	0f92      	lsrs	r2, r2, #30
 8008692:	431a      	orrs	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800869c:	0edb      	lsrs	r3, r3, #27
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 0307 	and.w	r3, r3, #7
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ae:	0e1b      	lsrs	r3, r3, #24
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c0:	0d5b      	lsrs	r3, r3, #21
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d2:	0c9b      	lsrs	r3, r3, #18
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086e4:	0bdb      	lsrs	r3, r3, #15
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	7e1b      	ldrb	r3, [r3, #24]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	3302      	adds	r3, #2
 8008708:	2201      	movs	r2, #1
 800870a:	fa02 f303 	lsl.w	r3, r2, r3
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008712:	fb02 f203 	mul.w	r2, r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	7a1b      	ldrb	r3, [r3, #8]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	2201      	movs	r2, #1
 8008726:	409a      	lsls	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008734:	0a52      	lsrs	r2, r2, #9
 8008736:	fb02 f203 	mul.w	r2, r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008744:	661a      	str	r2, [r3, #96]	; 0x60
 8008746:	e031      	b.n	80087ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874c:	2b01      	cmp	r3, #1
 800874e:	d11d      	bne.n	800878c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008754:	041b      	lsls	r3, r3, #16
 8008756:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800875e:	0c1b      	lsrs	r3, r3, #16
 8008760:	431a      	orrs	r2, r3
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	3301      	adds	r3, #1
 800876c:	029a      	lsls	r2, r3, #10
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008780:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	661a      	str	r2, [r3, #96]	; 0x60
 800878a:	e00f      	b.n	80087ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a58      	ldr	r2, [pc, #352]	; (80088f4 <HAL_SD_GetCardCSD+0x344>)
 8008792:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e09d      	b.n	80088e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b0:	0b9b      	lsrs	r3, r3, #14
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c2:	09db      	lsrs	r3, r3, #7
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e4:	0fdb      	lsrs	r3, r3, #31
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f0:	0f5b      	lsrs	r3, r3, #29
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008802:	0e9b      	lsrs	r3, r3, #26
 8008804:	b2db      	uxtb	r3, r3
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	b2da      	uxtb	r2, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008814:	0d9b      	lsrs	r3, r3, #22
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	b2da      	uxtb	r2, r3
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	0d5b      	lsrs	r3, r3, #21
 8008828:	b2db      	uxtb	r3, r3
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	b2da      	uxtb	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008842:	0c1b      	lsrs	r3, r3, #16
 8008844:	b2db      	uxtb	r3, r3
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	b2da      	uxtb	r2, r3
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008856:	0bdb      	lsrs	r3, r3, #15
 8008858:	b2db      	uxtb	r3, r3
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	b2da      	uxtb	r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886a:	0b9b      	lsrs	r3, r3, #14
 800886c:	b2db      	uxtb	r3, r3
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	b2da      	uxtb	r2, r3
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	0b5b      	lsrs	r3, r3, #13
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	b2da      	uxtb	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	0b1b      	lsrs	r3, r3, #12
 8008894:	b2db      	uxtb	r3, r3
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	b2da      	uxtb	r2, r3
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a6:	0a9b      	lsrs	r3, r3, #10
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ce:	085b      	lsrs	r3, r3, #1
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	004005ff 	.word	0x004005ff

080088f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008950:	b5b0      	push	{r4, r5, r7, lr}
 8008952:	b08e      	sub	sp, #56	; 0x38
 8008954:	af04      	add	r7, sp, #16
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2203      	movs	r2, #3
 8008964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896c:	2b03      	cmp	r3, #3
 800896e:	d02e      	beq.n	80089ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008976:	d106      	bne.n	8008986 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	639a      	str	r2, [r3, #56]	; 0x38
 8008984:	e029      	b.n	80089da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800898c:	d10a      	bne.n	80089a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fb28 	bl	8008fe4 <SD_WideBus_Enable>
 8008994:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	431a      	orrs	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
 80089a2:	e01a      	b.n	80089da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fb65 	bl	800907a <SD_WideBus_Disable>
 80089b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	639a      	str	r2, [r3, #56]	; 0x38
 80089be:	e00c      	b.n	80089da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38
 80089cc:	e005      	b.n	80089da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a26      	ldr	r2, [pc, #152]	; (8008a80 <HAL_SD_ConfigWideBusOperation+0x130>)
 80089e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089f8:	e01f      	b.n	8008a3a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681d      	ldr	r5, [r3, #0]
 8008a20:	466c      	mov	r4, sp
 8008a22:	f107 0314 	add.w	r3, r7, #20
 8008a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a2e:	f107 0308 	add.w	r3, r7, #8
 8008a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a34:	4628      	mov	r0, r5
 8008a36:	f002 f9cd 	bl	800add4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a42:	4618      	mov	r0, r3
 8008a44:	f002 faa4 	bl	800af90 <SDMMC_CmdBlockLength>
 8008a48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00c      	beq.n	8008a6a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a0a      	ldr	r2, [pc, #40]	; (8008a80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3728      	adds	r7, #40	; 0x28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	004005ff 	.word	0x004005ff

08008a84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a90:	f107 030c 	add.w	r3, r7, #12
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa7c 	bl	8008f94 <SD_SendStatus>
 8008a9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	0a5b      	lsrs	r3, r3, #9
 8008ab4:	f003 030f 	and.w	r3, r3, #15
 8008ab8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008aba:	693b      	ldr	r3, [r7, #16]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ae0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b00:	2b82      	cmp	r3, #130	; 0x82
 8008b02:	d111      	bne.n	8008b28 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f002 faeb 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 8008b0e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d008      	beq.n	8008b28 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f7ff fd3a 	bl	800859c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0208 	bic.w	r2, r2, #8
 8008b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b40:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7fa ffd1 	bl	8003af8 <HAL_SD_RxCpltCallback>
#endif
}
 8008b56:	bf00      	nop
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fc f9a8 	bl	8004ec4 <HAL_DMA_GetError>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d03e      	beq.n	8008bf8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b80:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b88:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d002      	beq.n	8008b96 <SD_DMAError+0x36>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d12d      	bne.n	8008bf2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a19      	ldr	r2, [pc, #100]	; (8008c00 <SD_DMAError+0xa0>)
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008bac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008bba:	6978      	ldr	r0, [r7, #20]
 8008bbc:	f7ff ff62 	bl	8008a84 <HAL_SD_GetCardState>
 8008bc0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b06      	cmp	r3, #6
 8008bc6:	d002      	beq.n	8008bce <SD_DMAError+0x6e>
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d10a      	bne.n	8008be4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f002 fa86 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	431a      	orrs	r2, r3
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008bf2:	6978      	ldr	r0, [r7, #20]
 8008bf4:	f7ff fcd2 	bl	800859c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008bf8:	bf00      	nop
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	004005ff 	.word	0x004005ff

08008c04 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff ff31 	bl	8008a84 <HAL_SD_GetCardState>
 8008c22:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2b06      	cmp	r3, #6
 8008c36:	d002      	beq.n	8008c3e <SD_DMATxAbort+0x3a>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b05      	cmp	r3, #5
 8008c3c:	d10a      	bne.n	8008c54 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f002 fa4e 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d103      	bne.n	8008c64 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f7fa ff37 	bl	8003ad0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008c62:	e002      	b.n	8008c6a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f7ff fc99 	bl	800859c <HAL_SD_ErrorCallback>
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c88:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff fefa 	bl	8008a84 <HAL_SD_GetCardState>
 8008c90:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b06      	cmp	r3, #6
 8008ca4:	d002      	beq.n	8008cac <SD_DMARxAbort+0x3a>
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2b05      	cmp	r3, #5
 8008caa:	d10a      	bne.n	8008cc2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f002 fa17 	bl	800b0e4 <SDMMC_CmdStopTransfer>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f7fa ff00 	bl	8003ad0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008cd0:	e002      	b.n	8008cd8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fc62 	bl	800859c <HAL_SD_ErrorCallback>
}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ce0:	b5b0      	push	{r4, r5, r7, lr}
 8008ce2:	b094      	sub	sp, #80	; 0x50
 8008ce4:	af04      	add	r7, sp, #16
 8008ce6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 f8c8 	bl	800ae86 <SDMMC_GetPowerState>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008cfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d00:	e0b6      	b.n	8008e70 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d02f      	beq.n	8008d6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f002 faf3 	bl	800b2fa <SDMMC_CmdSendCID>
 8008d14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <SD_InitCard+0x40>
    {
      return errorstate;
 8008d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d1e:	e0a7      	b.n	8008e70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2100      	movs	r1, #0
 8008d26:	4618      	mov	r0, r3
 8008d28:	f002 f8f3 	bl	800af12 <SDMMC_GetResponse>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2104      	movs	r1, #4
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f002 f8ea 	bl	800af12 <SDMMC_GetResponse>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2108      	movs	r1, #8
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f002 f8e1 	bl	800af12 <SDMMC_GetResponse>
 8008d50:	4602      	mov	r2, r0
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	210c      	movs	r1, #12
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f002 f8d8 	bl	800af12 <SDMMC_GetResponse>
 8008d62:	4602      	mov	r2, r0
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d00d      	beq.n	8008d8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f107 020e 	add.w	r2, r7, #14
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f002 faf9 	bl	800b374 <SDMMC_CmdSetRelAdd>
 8008d82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <SD_InitCard+0xae>
    {
      return errorstate;
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8c:	e070      	b.n	8008e70 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d036      	beq.n	8008e04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d96:	89fb      	ldrh	r3, [r7, #14]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da6:	041b      	lsls	r3, r3, #16
 8008da8:	4619      	mov	r1, r3
 8008daa:	4610      	mov	r0, r2
 8008dac:	f002 fac3 	bl	800b336 <SDMMC_CmdSendCSD>
 8008db0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <SD_InitCard+0xdc>
    {
      return errorstate;
 8008db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dba:	e059      	b.n	8008e70 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f002 f8a5 	bl	800af12 <SDMMC_GetResponse>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2104      	movs	r1, #4
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f002 f89c 	bl	800af12 <SDMMC_GetResponse>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2108      	movs	r1, #8
 8008de6:	4618      	mov	r0, r3
 8008de8:	f002 f893 	bl	800af12 <SDMMC_GetResponse>
 8008dec:	4602      	mov	r2, r0
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	210c      	movs	r1, #12
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f002 f88a 	bl	800af12 <SDMMC_GetResponse>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2104      	movs	r1, #4
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f002 f881 	bl	800af12 <SDMMC_GetResponse>
 8008e10:	4603      	mov	r3, r0
 8008e12:	0d1a      	lsrs	r2, r3, #20
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e18:	f107 0310 	add.w	r3, r7, #16
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff fbc6 	bl	80085b0 <HAL_SD_GetCardCSD>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e2e:	e01f      	b.n	8008e70 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e38:	041b      	lsls	r3, r3, #16
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f04f 0300 	mov.w	r3, #0
 8008e40:	4608      	mov	r0, r1
 8008e42:	f002 f971 	bl	800b128 <SDMMC_CmdSelDesel>
 8008e46:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <SD_InitCard+0x172>
  {
    return errorstate;
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e50:	e00e      	b.n	8008e70 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681d      	ldr	r5, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	466c      	mov	r4, sp
 8008e5a:	f103 0210 	add.w	r2, r3, #16
 8008e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e64:	3304      	adds	r3, #4
 8008e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f001 ffb3 	bl	800add4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3740      	adds	r7, #64	; 0x40
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bdb0      	pop	{r4, r5, r7, pc}

08008e78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f002 f96c 	bl	800b16e <SDMMC_CmdGoIdleState>
 8008e96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	e072      	b.n	8008f88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f002 f97f 	bl	800b1aa <SDMMC_CmdOperCond>
 8008eac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00d      	beq.n	8008ed0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f002 f955 	bl	800b16e <SDMMC_CmdGoIdleState>
 8008ec4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d004      	beq.n	8008ed6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	e05b      	b.n	8008f88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d137      	bne.n	8008f4e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f002 f97f 	bl	800b1e8 <SDMMC_CmdAppCommand>
 8008eea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d02d      	beq.n	8008f4e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ef2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ef6:	e047      	b.n	8008f88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 f972 	bl	800b1e8 <SDMMC_CmdAppCommand>
 8008f04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <SD_PowerON+0x98>
    {
      return errorstate;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	e03b      	b.n	8008f88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	491e      	ldr	r1, [pc, #120]	; (8008f90 <SD_PowerON+0x118>)
 8008f16:	4618      	mov	r0, r3
 8008f18:	f002 f988 	bl	800b22c <SDMMC_CmdAppOperCommand>
 8008f1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f28:	e02e      	b.n	8008f88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 ffee 	bl	800af12 <SDMMC_GetResponse>
 8008f36:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	0fdb      	lsrs	r3, r3, #31
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d101      	bne.n	8008f44 <SD_PowerON+0xcc>
 8008f40:	2301      	movs	r3, #1
 8008f42:	e000      	b.n	8008f46 <SD_PowerON+0xce>
 8008f44:	2300      	movs	r3, #0
 8008f46:	613b      	str	r3, [r7, #16]

    count++;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d802      	bhi.n	8008f5e <SD_PowerON+0xe6>
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0cc      	beq.n	8008ef8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d902      	bls.n	8008f6e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f6c:	e00c      	b.n	8008f88 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	645a      	str	r2, [r3, #68]	; 0x44
 8008f7e:	e002      	b.n	8008f86 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	c1100000 	.word	0xc1100000

08008f94 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d102      	bne.n	8008faa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008fa4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fa8:	e018      	b.n	8008fdc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb2:	041b      	lsls	r3, r3, #16
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f002 f9fd 	bl	800b3b6 <SDMMC_CmdSendStatus>
 8008fbc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	e009      	b.n	8008fdc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 ff9f 	bl	800af12 <SDMMC_GetResponse>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 ff89 	bl	800af12 <SDMMC_GetResponse>
 8009000:	4603      	mov	r3, r0
 8009002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800900a:	d102      	bne.n	8009012 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800900c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009010:	e02f      	b.n	8009072 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009012:	f107 030c 	add.w	r3, r7, #12
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f879 	bl	8009110 <SD_FindSCR>
 800901e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	e023      	b.n	8009072 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01c      	beq.n	800906e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800903c:	041b      	lsls	r3, r3, #16
 800903e:	4619      	mov	r1, r3
 8009040:	4610      	mov	r0, r2
 8009042:	f002 f8d1 	bl	800b1e8 <SDMMC_CmdAppCommand>
 8009046:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	e00f      	b.n	8009072 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2102      	movs	r1, #2
 8009058:	4618      	mov	r0, r3
 800905a:	f002 f90b 	bl	800b274 <SDMMC_CmdBusWidth>
 800905e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	e003      	b.n	8009072 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800906a:	2300      	movs	r3, #0
 800906c:	e001      	b.n	8009072 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800906e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009072:	4618      	mov	r0, r3
 8009074:	3718      	adds	r7, #24
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b086      	sub	sp, #24
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	2300      	movs	r3, #0
 8009088:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2100      	movs	r1, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f001 ff3e 	bl	800af12 <SDMMC_GetResponse>
 8009096:	4603      	mov	r3, r0
 8009098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800909c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090a0:	d102      	bne.n	80090a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090a6:	e02f      	b.n	8009108 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090a8:	f107 030c 	add.w	r3, r7, #12
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f82e 	bl	8009110 <SD_FindSCR>
 80090b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	e023      	b.n	8009108 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d01c      	beq.n	8009104 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	4619      	mov	r1, r3
 80090d6:	4610      	mov	r0, r2
 80090d8:	f002 f886 	bl	800b1e8 <SDMMC_CmdAppCommand>
 80090dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	e00f      	b.n	8009108 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 f8c0 	bl	800b274 <SDMMC_CmdBusWidth>
 80090f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	e003      	b.n	8009108 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009100:	2300      	movs	r3, #0
 8009102:	e001      	b.n	8009108 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009104:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009110:	b590      	push	{r4, r7, lr}
 8009112:	b08f      	sub	sp, #60	; 0x3c
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800911a:	f7fa ff07 	bl	8003f2c <HAL_GetTick>
 800911e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009124:	2300      	movs	r3, #0
 8009126:	60bb      	str	r3, [r7, #8]
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2108      	movs	r1, #8
 8009136:	4618      	mov	r0, r3
 8009138:	f001 ff2a 	bl	800af90 <SDMMC_CmdBlockLength>
 800913c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	e0b2      	b.n	80092ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	4619      	mov	r1, r3
 8009154:	4610      	mov	r0, r2
 8009156:	f002 f847 	bl	800b1e8 <SDMMC_CmdAppCommand>
 800915a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800915c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	e0a3      	b.n	80092ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009166:	f04f 33ff 	mov.w	r3, #4294967295
 800916a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800916c:	2308      	movs	r3, #8
 800916e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009170:	2330      	movs	r3, #48	; 0x30
 8009172:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009174:	2302      	movs	r3, #2
 8009176:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009178:	2300      	movs	r3, #0
 800917a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800917c:	2301      	movs	r3, #1
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f107 0210 	add.w	r2, r7, #16
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f001 fed4 	bl	800af38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4618      	mov	r0, r3
 8009196:	f002 f88f 	bl	800b2b8 <SDMMC_CmdSendSCR>
 800919a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d02a      	beq.n	80091f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	e083      	b.n	80092ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00f      	beq.n	80091d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6819      	ldr	r1, [r3, #0]
 80091b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	f107 0208 	add.w	r2, r7, #8
 80091c0:	18d4      	adds	r4, r2, r3
 80091c2:	4608      	mov	r0, r1
 80091c4:	f001 fe32 	bl	800ae2c <SDMMC_ReadFIFO>
 80091c8:	4603      	mov	r3, r0
 80091ca:	6023      	str	r3, [r4, #0]
      index++;
 80091cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ce:	3301      	adds	r3, #1
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
 80091d2:	e006      	b.n	80091e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d012      	beq.n	8009208 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091e2:	f7fa fea3 	bl	8003f2c <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f0:	d102      	bne.n	80091f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091f6:	e05a      	b.n	80092ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0cf      	beq.n	80091a6 <SD_FindSCR+0x96>
 8009206:	e000      	b.n	800920a <SD_FindSCR+0xfa>
      break;
 8009208:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b00      	cmp	r3, #0
 8009216:	d005      	beq.n	8009224 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2208      	movs	r2, #8
 800921e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009220:	2308      	movs	r3, #8
 8009222:	e044      	b.n	80092ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2202      	movs	r2, #2
 8009238:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800923a:	2302      	movs	r3, #2
 800923c:	e037      	b.n	80092ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2220      	movs	r2, #32
 8009252:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009254:	2320      	movs	r3, #32
 8009256:	e02a      	b.n	80092ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009260:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	061a      	lsls	r2, r3, #24
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	021b      	lsls	r3, r3, #8
 800926a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800926e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	0a1b      	lsrs	r3, r3, #8
 8009274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009278:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	0e1b      	lsrs	r3, r3, #24
 800927e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	601a      	str	r2, [r3, #0]
    scr++;
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	3304      	adds	r3, #4
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	061a      	lsls	r2, r3, #24
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009296:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	0a1b      	lsrs	r3, r3, #8
 800929c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	0e1b      	lsrs	r3, r3, #24
 80092a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	373c      	adds	r7, #60	; 0x3c
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd90      	pop	{r4, r7, pc}

080092b6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b086      	sub	sp, #24
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d03f      	beq.n	8009350 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80092d0:	2300      	movs	r3, #0
 80092d2:	617b      	str	r3, [r7, #20]
 80092d4:	e033      	b.n	800933e <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 fda6 	bl	800ae2c <SDMMC_ReadFIFO>
 80092e0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3301      	adds	r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	0a1b      	lsrs	r3, r3, #8
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3301      	adds	r3, #1
 8009304:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	3b01      	subs	r3, #1
 800930a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	0c1b      	lsrs	r3, r3, #16
 8009310:	b2da      	uxtb	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3301      	adds	r3, #1
 800931a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	3b01      	subs	r3, #1
 8009320:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	0e1b      	lsrs	r3, r3, #24
 8009326:	b2da      	uxtb	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3301      	adds	r3, #1
 8009330:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	3b01      	subs	r3, #1
 8009336:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	3301      	adds	r3, #1
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b07      	cmp	r3, #7
 8009342:	d9c8      	bls.n	80092d6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009350:	bf00      	nop
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a1b      	ldr	r3, [r3, #32]
 8009364:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d043      	beq.n	80093fa <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009372:	2300      	movs	r3, #0
 8009374:	617b      	str	r3, [r7, #20]
 8009376:	e037      	b.n	80093e8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	3301      	adds	r3, #1
 8009382:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	3b01      	subs	r3, #1
 8009388:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	021a      	lsls	r2, r3, #8
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	4313      	orrs	r3, r2
 8009394:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	3b01      	subs	r3, #1
 80093a0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	041a      	lsls	r2, r3, #16
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	3301      	adds	r3, #1
 80093b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	061a      	lsls	r2, r3, #24
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f107 0208 	add.w	r2, r7, #8
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f001 fd32 	bl	800ae46 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	3301      	adds	r3, #1
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b07      	cmp	r3, #7
 80093ec:	d9c4      	bls.n	8009378 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80093fa:	bf00      	nop
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e025      	b.n	8009462 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d106      	bne.n	8009430 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7f9 fb34 	bl	8002a98 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f001 fb9c 	bl	800ab80 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	461a      	mov	r2, r3
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	f001 fc06 	bl	800ac64 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d101      	bne.n	8009486 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009482:	2302      	movs	r3, #2
 8009484:	e018      	b.n	80094b8 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2202      	movs	r2, #2
 800948a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fc64 	bl	800ad64 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d104      	bne.n	80094ae <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2205      	movs	r2, #5
 80094a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80094ac:	e003      	b.n	80094b6 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d101      	bne.n	80094da <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80094d6:	2302      	movs	r3, #2
 80094d8:	e00e      	b.n	80094f8 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2202      	movs	r2, #2
 80094de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f001 fc5f 	bl	800adac <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	e049      	b.n	80095a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d106      	bne.n	800952c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7f9 f8a6 	bl	8002678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3304      	adds	r3, #4
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f000 fa62 	bl	8009a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e049      	b.n	8009654 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d106      	bne.n	80095da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7f9 f897 	bl	8002708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2202      	movs	r2, #2
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3304      	adds	r3, #4
 80095ea:	4619      	mov	r1, r3
 80095ec:	4610      	mov	r0, r2
 80095ee:	f000 fa0b 	bl	8009a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800966e:	2b01      	cmp	r3, #1
 8009670:	d101      	bne.n	8009676 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009672:	2302      	movs	r3, #2
 8009674:	e0fd      	b.n	8009872 <HAL_TIM_PWM_ConfigChannel+0x216>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b14      	cmp	r3, #20
 8009682:	f200 80f0 	bhi.w	8009866 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009686:	a201      	add	r2, pc, #4	; (adr r2, 800968c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968c:	080096e1 	.word	0x080096e1
 8009690:	08009867 	.word	0x08009867
 8009694:	08009867 	.word	0x08009867
 8009698:	08009867 	.word	0x08009867
 800969c:	08009721 	.word	0x08009721
 80096a0:	08009867 	.word	0x08009867
 80096a4:	08009867 	.word	0x08009867
 80096a8:	08009867 	.word	0x08009867
 80096ac:	08009763 	.word	0x08009763
 80096b0:	08009867 	.word	0x08009867
 80096b4:	08009867 	.word	0x08009867
 80096b8:	08009867 	.word	0x08009867
 80096bc:	080097a3 	.word	0x080097a3
 80096c0:	08009867 	.word	0x08009867
 80096c4:	08009867 	.word	0x08009867
 80096c8:	08009867 	.word	0x08009867
 80096cc:	080097e5 	.word	0x080097e5
 80096d0:	08009867 	.word	0x08009867
 80096d4:	08009867 	.word	0x08009867
 80096d8:	08009867 	.word	0x08009867
 80096dc:	08009825 	.word	0x08009825
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fa2e 	bl	8009b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	699a      	ldr	r2, [r3, #24]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0208 	orr.w	r2, r2, #8
 80096fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	699a      	ldr	r2, [r3, #24]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0204 	bic.w	r2, r2, #4
 800970a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6999      	ldr	r1, [r3, #24]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	619a      	str	r2, [r3, #24]
      break;
 800971e:	e0a3      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fa80 	bl	8009c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	699a      	ldr	r2, [r3, #24]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	699a      	ldr	r2, [r3, #24]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800974a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6999      	ldr	r1, [r3, #24]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	021a      	lsls	r2, r3, #8
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	619a      	str	r2, [r3, #24]
      break;
 8009760:	e082      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fad7 	bl	8009d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69da      	ldr	r2, [r3, #28]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f042 0208 	orr.w	r2, r2, #8
 800977c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	69da      	ldr	r2, [r3, #28]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 0204 	bic.w	r2, r2, #4
 800978c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	69d9      	ldr	r1, [r3, #28]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	61da      	str	r2, [r3, #28]
      break;
 80097a0:	e062      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fb2d 	bl	8009e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	69da      	ldr	r2, [r3, #28]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	69da      	ldr	r2, [r3, #28]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69d9      	ldr	r1, [r3, #28]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	021a      	lsls	r2, r3, #8
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	61da      	str	r2, [r3, #28]
      break;
 80097e2:	e041      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fb64 	bl	8009eb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f042 0208 	orr.w	r2, r2, #8
 80097fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f022 0204 	bic.w	r2, r2, #4
 800980e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	691a      	ldr	r2, [r3, #16]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009822:	e021      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	4618      	mov	r0, r3
 800982c:	f000 fb96 	bl	8009f5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800983e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800984e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	021a      	lsls	r2, r3, #8
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009864:	e000      	b.n	8009868 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop

0800987c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800988c:	2b01      	cmp	r3, #1
 800988e:	d101      	bne.n	8009894 <HAL_TIM_ConfigClockSource+0x18>
 8009890:	2302      	movs	r3, #2
 8009892:	e0b3      	b.n	80099fc <HAL_TIM_ConfigClockSource+0x180>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4b55      	ldr	r3, [pc, #340]	; (8009a04 <HAL_TIM_ConfigClockSource+0x188>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098cc:	d03e      	beq.n	800994c <HAL_TIM_ConfigClockSource+0xd0>
 80098ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098d2:	f200 8087 	bhi.w	80099e4 <HAL_TIM_ConfigClockSource+0x168>
 80098d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098da:	f000 8085 	beq.w	80099e8 <HAL_TIM_ConfigClockSource+0x16c>
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e2:	d87f      	bhi.n	80099e4 <HAL_TIM_ConfigClockSource+0x168>
 80098e4:	2b70      	cmp	r3, #112	; 0x70
 80098e6:	d01a      	beq.n	800991e <HAL_TIM_ConfigClockSource+0xa2>
 80098e8:	2b70      	cmp	r3, #112	; 0x70
 80098ea:	d87b      	bhi.n	80099e4 <HAL_TIM_ConfigClockSource+0x168>
 80098ec:	2b60      	cmp	r3, #96	; 0x60
 80098ee:	d050      	beq.n	8009992 <HAL_TIM_ConfigClockSource+0x116>
 80098f0:	2b60      	cmp	r3, #96	; 0x60
 80098f2:	d877      	bhi.n	80099e4 <HAL_TIM_ConfigClockSource+0x168>
 80098f4:	2b50      	cmp	r3, #80	; 0x50
 80098f6:	d03c      	beq.n	8009972 <HAL_TIM_ConfigClockSource+0xf6>
 80098f8:	2b50      	cmp	r3, #80	; 0x50
 80098fa:	d873      	bhi.n	80099e4 <HAL_TIM_ConfigClockSource+0x168>
 80098fc:	2b40      	cmp	r3, #64	; 0x40
 80098fe:	d058      	beq.n	80099b2 <HAL_TIM_ConfigClockSource+0x136>
 8009900:	2b40      	cmp	r3, #64	; 0x40
 8009902:	d86f      	bhi.n	80099e4 <HAL_TIM_ConfigClockSource+0x168>
 8009904:	2b30      	cmp	r3, #48	; 0x30
 8009906:	d064      	beq.n	80099d2 <HAL_TIM_ConfigClockSource+0x156>
 8009908:	2b30      	cmp	r3, #48	; 0x30
 800990a:	d86b      	bhi.n	80099e4 <HAL_TIM_ConfigClockSource+0x168>
 800990c:	2b20      	cmp	r3, #32
 800990e:	d060      	beq.n	80099d2 <HAL_TIM_ConfigClockSource+0x156>
 8009910:	2b20      	cmp	r3, #32
 8009912:	d867      	bhi.n	80099e4 <HAL_TIM_ConfigClockSource+0x168>
 8009914:	2b00      	cmp	r3, #0
 8009916:	d05c      	beq.n	80099d2 <HAL_TIM_ConfigClockSource+0x156>
 8009918:	2b10      	cmp	r3, #16
 800991a:	d05a      	beq.n	80099d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800991c:	e062      	b.n	80099e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	6899      	ldr	r1, [r3, #8]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f000 fbe3 	bl	800a0f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009940:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	609a      	str	r2, [r3, #8]
      break;
 800994a:	e04e      	b.n	80099ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6818      	ldr	r0, [r3, #0]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	6899      	ldr	r1, [r3, #8]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f000 fbcc 	bl	800a0f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	689a      	ldr	r2, [r3, #8]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800996e:	609a      	str	r2, [r3, #8]
      break;
 8009970:	e03b      	b.n	80099ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	6859      	ldr	r1, [r3, #4]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	461a      	mov	r2, r3
 8009980:	f000 fb40 	bl	800a004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2150      	movs	r1, #80	; 0x50
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fb99 	bl	800a0c2 <TIM_ITRx_SetConfig>
      break;
 8009990:	e02b      	b.n	80099ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	6859      	ldr	r1, [r3, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	461a      	mov	r2, r3
 80099a0:	f000 fb5f 	bl	800a062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2160      	movs	r1, #96	; 0x60
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fb89 	bl	800a0c2 <TIM_ITRx_SetConfig>
      break;
 80099b0:	e01b      	b.n	80099ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6818      	ldr	r0, [r3, #0]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	6859      	ldr	r1, [r3, #4]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	461a      	mov	r2, r3
 80099c0:	f000 fb20 	bl	800a004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2140      	movs	r1, #64	; 0x40
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fb79 	bl	800a0c2 <TIM_ITRx_SetConfig>
      break;
 80099d0:	e00b      	b.n	80099ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4619      	mov	r1, r3
 80099dc:	4610      	mov	r0, r2
 80099de:	f000 fb70 	bl	800a0c2 <TIM_ITRx_SetConfig>
        break;
 80099e2:	e002      	b.n	80099ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80099e4:	bf00      	nop
 80099e6:	e000      	b.n	80099ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80099e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	fffeff88 	.word	0xfffeff88

08009a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a40      	ldr	r2, [pc, #256]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d013      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a26:	d00f      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a3d      	ldr	r2, [pc, #244]	; (8009b20 <TIM_Base_SetConfig+0x118>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d00b      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a3c      	ldr	r2, [pc, #240]	; (8009b24 <TIM_Base_SetConfig+0x11c>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d007      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a3b      	ldr	r2, [pc, #236]	; (8009b28 <TIM_Base_SetConfig+0x120>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d003      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a3a      	ldr	r2, [pc, #232]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d108      	bne.n	8009a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a2f      	ldr	r2, [pc, #188]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d02b      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a68:	d027      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a2c      	ldr	r2, [pc, #176]	; (8009b20 <TIM_Base_SetConfig+0x118>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d023      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a2b      	ldr	r2, [pc, #172]	; (8009b24 <TIM_Base_SetConfig+0x11c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d01f      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a2a      	ldr	r2, [pc, #168]	; (8009b28 <TIM_Base_SetConfig+0x120>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d01b      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a29      	ldr	r2, [pc, #164]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d017      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a28      	ldr	r2, [pc, #160]	; (8009b30 <TIM_Base_SetConfig+0x128>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d013      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a27      	ldr	r2, [pc, #156]	; (8009b34 <TIM_Base_SetConfig+0x12c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00f      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a26      	ldr	r2, [pc, #152]	; (8009b38 <TIM_Base_SetConfig+0x130>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00b      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a25      	ldr	r2, [pc, #148]	; (8009b3c <TIM_Base_SetConfig+0x134>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d007      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a24      	ldr	r2, [pc, #144]	; (8009b40 <TIM_Base_SetConfig+0x138>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a23      	ldr	r2, [pc, #140]	; (8009b44 <TIM_Base_SetConfig+0x13c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d108      	bne.n	8009acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a0a      	ldr	r2, [pc, #40]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <TIM_Base_SetConfig+0xf8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a0c      	ldr	r2, [pc, #48]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d103      	bne.n	8009b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	691a      	ldr	r2, [r3, #16]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	615a      	str	r2, [r3, #20]
}
 8009b0e:	bf00      	nop
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40000400 	.word	0x40000400
 8009b24:	40000800 	.word	0x40000800
 8009b28:	40000c00 	.word	0x40000c00
 8009b2c:	40010400 	.word	0x40010400
 8009b30:	40014000 	.word	0x40014000
 8009b34:	40014400 	.word	0x40014400
 8009b38:	40014800 	.word	0x40014800
 8009b3c:	40001800 	.word	0x40001800
 8009b40:	40001c00 	.word	0x40001c00
 8009b44:	40002000 	.word	0x40002000

08009b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	f023 0201 	bic.w	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	4b2b      	ldr	r3, [pc, #172]	; (8009c20 <TIM_OC1_SetConfig+0xd8>)
 8009b74:	4013      	ands	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0303 	bic.w	r3, r3, #3
 8009b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f023 0302 	bic.w	r3, r3, #2
 8009b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a21      	ldr	r2, [pc, #132]	; (8009c24 <TIM_OC1_SetConfig+0xdc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d003      	beq.n	8009bac <TIM_OC1_SetConfig+0x64>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a20      	ldr	r2, [pc, #128]	; (8009c28 <TIM_OC1_SetConfig+0xe0>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d10c      	bne.n	8009bc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f023 0308 	bic.w	r3, r3, #8
 8009bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f023 0304 	bic.w	r3, r3, #4
 8009bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a16      	ldr	r2, [pc, #88]	; (8009c24 <TIM_OC1_SetConfig+0xdc>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d003      	beq.n	8009bd6 <TIM_OC1_SetConfig+0x8e>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <TIM_OC1_SetConfig+0xe0>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d111      	bne.n	8009bfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	621a      	str	r2, [r3, #32]
}
 8009c14:	bf00      	nop
 8009c16:	371c      	adds	r7, #28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	fffeff8f 	.word	0xfffeff8f
 8009c24:	40010000 	.word	0x40010000
 8009c28:	40010400 	.word	0x40010400

08009c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	f023 0210 	bic.w	r2, r3, #16
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	4b2e      	ldr	r3, [pc, #184]	; (8009d10 <TIM_OC2_SetConfig+0xe4>)
 8009c58:	4013      	ands	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	021b      	lsls	r3, r3, #8
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f023 0320 	bic.w	r3, r3, #32
 8009c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	011b      	lsls	r3, r3, #4
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a23      	ldr	r2, [pc, #140]	; (8009d14 <TIM_OC2_SetConfig+0xe8>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d003      	beq.n	8009c94 <TIM_OC2_SetConfig+0x68>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a22      	ldr	r2, [pc, #136]	; (8009d18 <TIM_OC2_SetConfig+0xec>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d10d      	bne.n	8009cb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a18      	ldr	r2, [pc, #96]	; (8009d14 <TIM_OC2_SetConfig+0xe8>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d003      	beq.n	8009cc0 <TIM_OC2_SetConfig+0x94>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a17      	ldr	r2, [pc, #92]	; (8009d18 <TIM_OC2_SetConfig+0xec>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d113      	bne.n	8009ce8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	621a      	str	r2, [r3, #32]
}
 8009d02:	bf00      	nop
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	feff8fff 	.word	0xfeff8fff
 8009d14:	40010000 	.word	0x40010000
 8009d18:	40010400 	.word	0x40010400

08009d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4b2d      	ldr	r3, [pc, #180]	; (8009dfc <TIM_OC3_SetConfig+0xe0>)
 8009d48:	4013      	ands	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	021b      	lsls	r3, r3, #8
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a22      	ldr	r2, [pc, #136]	; (8009e00 <TIM_OC3_SetConfig+0xe4>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d003      	beq.n	8009d82 <TIM_OC3_SetConfig+0x66>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a21      	ldr	r2, [pc, #132]	; (8009e04 <TIM_OC3_SetConfig+0xe8>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d10d      	bne.n	8009d9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	021b      	lsls	r3, r3, #8
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a17      	ldr	r2, [pc, #92]	; (8009e00 <TIM_OC3_SetConfig+0xe4>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d003      	beq.n	8009dae <TIM_OC3_SetConfig+0x92>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a16      	ldr	r2, [pc, #88]	; (8009e04 <TIM_OC3_SetConfig+0xe8>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d113      	bne.n	8009dd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	693a      	ldr	r2, [r7, #16]
 8009dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	621a      	str	r2, [r3, #32]
}
 8009df0:	bf00      	nop
 8009df2:	371c      	adds	r7, #28
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	fffeff8f 	.word	0xfffeff8f
 8009e00:	40010000 	.word	0x40010000
 8009e04:	40010400 	.word	0x40010400

08009e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	4b1e      	ldr	r3, [pc, #120]	; (8009eac <TIM_OC4_SetConfig+0xa4>)
 8009e34:	4013      	ands	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	021b      	lsls	r3, r3, #8
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	031b      	lsls	r3, r3, #12
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a13      	ldr	r2, [pc, #76]	; (8009eb0 <TIM_OC4_SetConfig+0xa8>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d003      	beq.n	8009e70 <TIM_OC4_SetConfig+0x68>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a12      	ldr	r2, [pc, #72]	; (8009eb4 <TIM_OC4_SetConfig+0xac>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d109      	bne.n	8009e84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	019b      	lsls	r3, r3, #6
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	621a      	str	r2, [r3, #32]
}
 8009e9e:	bf00      	nop
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	feff8fff 	.word	0xfeff8fff
 8009eb0:	40010000 	.word	0x40010000
 8009eb4:	40010400 	.word	0x40010400

08009eb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	4b1b      	ldr	r3, [pc, #108]	; (8009f50 <TIM_OC5_SetConfig+0x98>)
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ef8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	041b      	lsls	r3, r3, #16
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a12      	ldr	r2, [pc, #72]	; (8009f54 <TIM_OC5_SetConfig+0x9c>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d003      	beq.n	8009f16 <TIM_OC5_SetConfig+0x5e>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a11      	ldr	r2, [pc, #68]	; (8009f58 <TIM_OC5_SetConfig+0xa0>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d109      	bne.n	8009f2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	021b      	lsls	r3, r3, #8
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	621a      	str	r2, [r3, #32]
}
 8009f44:	bf00      	nop
 8009f46:	371c      	adds	r7, #28
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	fffeff8f 	.word	0xfffeff8f
 8009f54:	40010000 	.word	0x40010000
 8009f58:	40010400 	.word	0x40010400

08009f5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	4b1c      	ldr	r3, [pc, #112]	; (8009ff8 <TIM_OC6_SetConfig+0x9c>)
 8009f88:	4013      	ands	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	021b      	lsls	r3, r3, #8
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	051b      	lsls	r3, r3, #20
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a13      	ldr	r2, [pc, #76]	; (8009ffc <TIM_OC6_SetConfig+0xa0>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d003      	beq.n	8009fbc <TIM_OC6_SetConfig+0x60>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a12      	ldr	r2, [pc, #72]	; (800a000 <TIM_OC6_SetConfig+0xa4>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d109      	bne.n	8009fd0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	695b      	ldr	r3, [r3, #20]
 8009fc8:	029b      	lsls	r3, r3, #10
 8009fca:	697a      	ldr	r2, [r7, #20]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	621a      	str	r2, [r3, #32]
}
 8009fea:	bf00      	nop
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	feff8fff 	.word	0xfeff8fff
 8009ffc:	40010000 	.word	0x40010000
 800a000:	40010400 	.word	0x40010400

0800a004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6a1b      	ldr	r3, [r3, #32]
 800a01a:	f023 0201 	bic.w	r2, r3, #1
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a02e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	011b      	lsls	r3, r3, #4
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4313      	orrs	r3, r2
 800a038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f023 030a 	bic.w	r3, r3, #10
 800a040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	4313      	orrs	r3, r2
 800a048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	621a      	str	r2, [r3, #32]
}
 800a056:	bf00      	nop
 800a058:	371c      	adds	r7, #28
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a062:	b480      	push	{r7}
 800a064:	b087      	sub	sp, #28
 800a066:	af00      	add	r7, sp, #0
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6a1b      	ldr	r3, [r3, #32]
 800a072:	f023 0210 	bic.w	r2, r3, #16
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a08c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	031b      	lsls	r3, r3, #12
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	4313      	orrs	r3, r2
 800a096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a09e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	621a      	str	r2, [r3, #32]
}
 800a0b6:	bf00      	nop
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b085      	sub	sp, #20
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	f043 0307 	orr.w	r3, r3, #7
 800a0e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	609a      	str	r2, [r3, #8]
}
 800a0ec:	bf00      	nop
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
 800a104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	021a      	lsls	r2, r3, #8
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	431a      	orrs	r2, r3
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4313      	orrs	r3, r2
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	4313      	orrs	r3, r2
 800a124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	609a      	str	r2, [r3, #8]
}
 800a12c:	bf00      	nop
 800a12e:	371c      	adds	r7, #28
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d101      	bne.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a14c:	2302      	movs	r3, #2
 800a14e:	e06d      	b.n	800a22c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a30      	ldr	r2, [pc, #192]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d004      	beq.n	800a184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a2f      	ldr	r2, [pc, #188]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d108      	bne.n	800a196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a18a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a19c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a20      	ldr	r2, [pc, #128]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d022      	beq.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c2:	d01d      	beq.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a1d      	ldr	r2, [pc, #116]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d018      	beq.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a1c      	ldr	r2, [pc, #112]	; (800a244 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d013      	beq.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a1a      	ldr	r2, [pc, #104]	; (800a248 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d00e      	beq.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a15      	ldr	r2, [pc, #84]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d009      	beq.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a16      	ldr	r2, [pc, #88]	; (800a24c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d004      	beq.n	800a200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a15      	ldr	r2, [pc, #84]	; (800a250 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10c      	bne.n	800a21a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a206:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	40010000 	.word	0x40010000
 800a23c:	40010400 	.word	0x40010400
 800a240:	40000400 	.word	0x40000400
 800a244:	40000800 	.word	0x40000800
 800a248:	40000c00 	.word	0x40000c00
 800a24c:	40014000 	.word	0x40014000
 800a250:	40001800 	.word	0x40001800

0800a254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e040      	b.n	800a2e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7f8 faea 	bl	8002850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2224      	movs	r2, #36	; 0x24
 800a280:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f022 0201 	bic.w	r2, r2, #1
 800a290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f8c0 	bl	800a418 <UART_SetConfig>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d101      	bne.n	800a2a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e022      	b.n	800a2e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fb16 	bl	800a8dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689a      	ldr	r2, [r3, #8]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0201 	orr.w	r2, r2, #1
 800a2de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fb9d 	bl	800aa20 <UART_CheckIdleState>
 800a2e6:	4603      	mov	r3, r0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08a      	sub	sp, #40	; 0x28
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	603b      	str	r3, [r7, #0]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a304:	2b20      	cmp	r3, #32
 800a306:	f040 8081 	bne.w	800a40c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <HAL_UART_Transmit+0x26>
 800a310:	88fb      	ldrh	r3, [r7, #6]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e079      	b.n	800a40e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a320:	2b01      	cmp	r3, #1
 800a322:	d101      	bne.n	800a328 <HAL_UART_Transmit+0x38>
 800a324:	2302      	movs	r3, #2
 800a326:	e072      	b.n	800a40e <HAL_UART_Transmit+0x11e>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2221      	movs	r2, #33	; 0x21
 800a33c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a33e:	f7f9 fdf5 	bl	8003f2c <HAL_GetTick>
 800a342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	88fa      	ldrh	r2, [r7, #6]
 800a348:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	88fa      	ldrh	r2, [r7, #6]
 800a350:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a35c:	d108      	bne.n	800a370 <HAL_UART_Transmit+0x80>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d104      	bne.n	800a370 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a366:	2300      	movs	r3, #0
 800a368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	61bb      	str	r3, [r7, #24]
 800a36e:	e003      	b.n	800a378 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a374:	2300      	movs	r3, #0
 800a376:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a380:	e02c      	b.n	800a3dc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2200      	movs	r2, #0
 800a38a:	2180      	movs	r1, #128	; 0x80
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 fb7a 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e038      	b.n	800a40e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10b      	bne.n	800a3ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	61bb      	str	r3, [r7, #24]
 800a3b8:	e007      	b.n	800a3ca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	781a      	ldrb	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1cc      	bne.n	800a382 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2140      	movs	r1, #64	; 0x40
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fb47 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e005      	b.n	800a40e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2220      	movs	r2, #32
 800a406:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	e000      	b.n	800a40e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a40c:	2302      	movs	r3, #2
  }
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3720      	adds	r7, #32
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
	...

0800a418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	431a      	orrs	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	431a      	orrs	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	4313      	orrs	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	4ba7      	ldr	r3, [pc, #668]	; (800a6e0 <UART_SetConfig+0x2c8>)
 800a444:	4013      	ands	r3, r2
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	6812      	ldr	r2, [r2, #0]
 800a44a:	6979      	ldr	r1, [r7, #20]
 800a44c:	430b      	orrs	r3, r1
 800a44e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	4313      	orrs	r3, r2
 800a474:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	430a      	orrs	r2, r1
 800a488:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a95      	ldr	r2, [pc, #596]	; (800a6e4 <UART_SetConfig+0x2cc>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d120      	bne.n	800a4d6 <UART_SetConfig+0xbe>
 800a494:	4b94      	ldr	r3, [pc, #592]	; (800a6e8 <UART_SetConfig+0x2d0>)
 800a496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d816      	bhi.n	800a4d0 <UART_SetConfig+0xb8>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <UART_SetConfig+0x90>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4b9 	.word	0x0800a4b9
 800a4ac:	0800a4c5 	.word	0x0800a4c5
 800a4b0:	0800a4bf 	.word	0x0800a4bf
 800a4b4:	0800a4cb 	.word	0x0800a4cb
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	77fb      	strb	r3, [r7, #31]
 800a4bc:	e14f      	b.n	800a75e <UART_SetConfig+0x346>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	77fb      	strb	r3, [r7, #31]
 800a4c2:	e14c      	b.n	800a75e <UART_SetConfig+0x346>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	77fb      	strb	r3, [r7, #31]
 800a4c8:	e149      	b.n	800a75e <UART_SetConfig+0x346>
 800a4ca:	2308      	movs	r3, #8
 800a4cc:	77fb      	strb	r3, [r7, #31]
 800a4ce:	e146      	b.n	800a75e <UART_SetConfig+0x346>
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	77fb      	strb	r3, [r7, #31]
 800a4d4:	e143      	b.n	800a75e <UART_SetConfig+0x346>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a84      	ldr	r2, [pc, #528]	; (800a6ec <UART_SetConfig+0x2d4>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d132      	bne.n	800a546 <UART_SetConfig+0x12e>
 800a4e0:	4b81      	ldr	r3, [pc, #516]	; (800a6e8 <UART_SetConfig+0x2d0>)
 800a4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4e6:	f003 030c 	and.w	r3, r3, #12
 800a4ea:	2b0c      	cmp	r3, #12
 800a4ec:	d828      	bhi.n	800a540 <UART_SetConfig+0x128>
 800a4ee:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <UART_SetConfig+0xdc>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a529 	.word	0x0800a529
 800a4f8:	0800a541 	.word	0x0800a541
 800a4fc:	0800a541 	.word	0x0800a541
 800a500:	0800a541 	.word	0x0800a541
 800a504:	0800a535 	.word	0x0800a535
 800a508:	0800a541 	.word	0x0800a541
 800a50c:	0800a541 	.word	0x0800a541
 800a510:	0800a541 	.word	0x0800a541
 800a514:	0800a52f 	.word	0x0800a52f
 800a518:	0800a541 	.word	0x0800a541
 800a51c:	0800a541 	.word	0x0800a541
 800a520:	0800a541 	.word	0x0800a541
 800a524:	0800a53b 	.word	0x0800a53b
 800a528:	2300      	movs	r3, #0
 800a52a:	77fb      	strb	r3, [r7, #31]
 800a52c:	e117      	b.n	800a75e <UART_SetConfig+0x346>
 800a52e:	2302      	movs	r3, #2
 800a530:	77fb      	strb	r3, [r7, #31]
 800a532:	e114      	b.n	800a75e <UART_SetConfig+0x346>
 800a534:	2304      	movs	r3, #4
 800a536:	77fb      	strb	r3, [r7, #31]
 800a538:	e111      	b.n	800a75e <UART_SetConfig+0x346>
 800a53a:	2308      	movs	r3, #8
 800a53c:	77fb      	strb	r3, [r7, #31]
 800a53e:	e10e      	b.n	800a75e <UART_SetConfig+0x346>
 800a540:	2310      	movs	r3, #16
 800a542:	77fb      	strb	r3, [r7, #31]
 800a544:	e10b      	b.n	800a75e <UART_SetConfig+0x346>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a69      	ldr	r2, [pc, #420]	; (800a6f0 <UART_SetConfig+0x2d8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d120      	bne.n	800a592 <UART_SetConfig+0x17a>
 800a550:	4b65      	ldr	r3, [pc, #404]	; (800a6e8 <UART_SetConfig+0x2d0>)
 800a552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a556:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a55a:	2b30      	cmp	r3, #48	; 0x30
 800a55c:	d013      	beq.n	800a586 <UART_SetConfig+0x16e>
 800a55e:	2b30      	cmp	r3, #48	; 0x30
 800a560:	d814      	bhi.n	800a58c <UART_SetConfig+0x174>
 800a562:	2b20      	cmp	r3, #32
 800a564:	d009      	beq.n	800a57a <UART_SetConfig+0x162>
 800a566:	2b20      	cmp	r3, #32
 800a568:	d810      	bhi.n	800a58c <UART_SetConfig+0x174>
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d002      	beq.n	800a574 <UART_SetConfig+0x15c>
 800a56e:	2b10      	cmp	r3, #16
 800a570:	d006      	beq.n	800a580 <UART_SetConfig+0x168>
 800a572:	e00b      	b.n	800a58c <UART_SetConfig+0x174>
 800a574:	2300      	movs	r3, #0
 800a576:	77fb      	strb	r3, [r7, #31]
 800a578:	e0f1      	b.n	800a75e <UART_SetConfig+0x346>
 800a57a:	2302      	movs	r3, #2
 800a57c:	77fb      	strb	r3, [r7, #31]
 800a57e:	e0ee      	b.n	800a75e <UART_SetConfig+0x346>
 800a580:	2304      	movs	r3, #4
 800a582:	77fb      	strb	r3, [r7, #31]
 800a584:	e0eb      	b.n	800a75e <UART_SetConfig+0x346>
 800a586:	2308      	movs	r3, #8
 800a588:	77fb      	strb	r3, [r7, #31]
 800a58a:	e0e8      	b.n	800a75e <UART_SetConfig+0x346>
 800a58c:	2310      	movs	r3, #16
 800a58e:	77fb      	strb	r3, [r7, #31]
 800a590:	e0e5      	b.n	800a75e <UART_SetConfig+0x346>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a57      	ldr	r2, [pc, #348]	; (800a6f4 <UART_SetConfig+0x2dc>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d120      	bne.n	800a5de <UART_SetConfig+0x1c6>
 800a59c:	4b52      	ldr	r3, [pc, #328]	; (800a6e8 <UART_SetConfig+0x2d0>)
 800a59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5a6:	2bc0      	cmp	r3, #192	; 0xc0
 800a5a8:	d013      	beq.n	800a5d2 <UART_SetConfig+0x1ba>
 800a5aa:	2bc0      	cmp	r3, #192	; 0xc0
 800a5ac:	d814      	bhi.n	800a5d8 <UART_SetConfig+0x1c0>
 800a5ae:	2b80      	cmp	r3, #128	; 0x80
 800a5b0:	d009      	beq.n	800a5c6 <UART_SetConfig+0x1ae>
 800a5b2:	2b80      	cmp	r3, #128	; 0x80
 800a5b4:	d810      	bhi.n	800a5d8 <UART_SetConfig+0x1c0>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <UART_SetConfig+0x1a8>
 800a5ba:	2b40      	cmp	r3, #64	; 0x40
 800a5bc:	d006      	beq.n	800a5cc <UART_SetConfig+0x1b4>
 800a5be:	e00b      	b.n	800a5d8 <UART_SetConfig+0x1c0>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	77fb      	strb	r3, [r7, #31]
 800a5c4:	e0cb      	b.n	800a75e <UART_SetConfig+0x346>
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e0c8      	b.n	800a75e <UART_SetConfig+0x346>
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e0c5      	b.n	800a75e <UART_SetConfig+0x346>
 800a5d2:	2308      	movs	r3, #8
 800a5d4:	77fb      	strb	r3, [r7, #31]
 800a5d6:	e0c2      	b.n	800a75e <UART_SetConfig+0x346>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	77fb      	strb	r3, [r7, #31]
 800a5dc:	e0bf      	b.n	800a75e <UART_SetConfig+0x346>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a45      	ldr	r2, [pc, #276]	; (800a6f8 <UART_SetConfig+0x2e0>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d125      	bne.n	800a634 <UART_SetConfig+0x21c>
 800a5e8:	4b3f      	ldr	r3, [pc, #252]	; (800a6e8 <UART_SetConfig+0x2d0>)
 800a5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5f6:	d017      	beq.n	800a628 <UART_SetConfig+0x210>
 800a5f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5fc:	d817      	bhi.n	800a62e <UART_SetConfig+0x216>
 800a5fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a602:	d00b      	beq.n	800a61c <UART_SetConfig+0x204>
 800a604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a608:	d811      	bhi.n	800a62e <UART_SetConfig+0x216>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <UART_SetConfig+0x1fe>
 800a60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a612:	d006      	beq.n	800a622 <UART_SetConfig+0x20a>
 800a614:	e00b      	b.n	800a62e <UART_SetConfig+0x216>
 800a616:	2300      	movs	r3, #0
 800a618:	77fb      	strb	r3, [r7, #31]
 800a61a:	e0a0      	b.n	800a75e <UART_SetConfig+0x346>
 800a61c:	2302      	movs	r3, #2
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e09d      	b.n	800a75e <UART_SetConfig+0x346>
 800a622:	2304      	movs	r3, #4
 800a624:	77fb      	strb	r3, [r7, #31]
 800a626:	e09a      	b.n	800a75e <UART_SetConfig+0x346>
 800a628:	2308      	movs	r3, #8
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e097      	b.n	800a75e <UART_SetConfig+0x346>
 800a62e:	2310      	movs	r3, #16
 800a630:	77fb      	strb	r3, [r7, #31]
 800a632:	e094      	b.n	800a75e <UART_SetConfig+0x346>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a30      	ldr	r2, [pc, #192]	; (800a6fc <UART_SetConfig+0x2e4>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d125      	bne.n	800a68a <UART_SetConfig+0x272>
 800a63e:	4b2a      	ldr	r3, [pc, #168]	; (800a6e8 <UART_SetConfig+0x2d0>)
 800a640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a644:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a648:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a64c:	d017      	beq.n	800a67e <UART_SetConfig+0x266>
 800a64e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a652:	d817      	bhi.n	800a684 <UART_SetConfig+0x26c>
 800a654:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a658:	d00b      	beq.n	800a672 <UART_SetConfig+0x25a>
 800a65a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a65e:	d811      	bhi.n	800a684 <UART_SetConfig+0x26c>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d003      	beq.n	800a66c <UART_SetConfig+0x254>
 800a664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a668:	d006      	beq.n	800a678 <UART_SetConfig+0x260>
 800a66a:	e00b      	b.n	800a684 <UART_SetConfig+0x26c>
 800a66c:	2301      	movs	r3, #1
 800a66e:	77fb      	strb	r3, [r7, #31]
 800a670:	e075      	b.n	800a75e <UART_SetConfig+0x346>
 800a672:	2302      	movs	r3, #2
 800a674:	77fb      	strb	r3, [r7, #31]
 800a676:	e072      	b.n	800a75e <UART_SetConfig+0x346>
 800a678:	2304      	movs	r3, #4
 800a67a:	77fb      	strb	r3, [r7, #31]
 800a67c:	e06f      	b.n	800a75e <UART_SetConfig+0x346>
 800a67e:	2308      	movs	r3, #8
 800a680:	77fb      	strb	r3, [r7, #31]
 800a682:	e06c      	b.n	800a75e <UART_SetConfig+0x346>
 800a684:	2310      	movs	r3, #16
 800a686:	77fb      	strb	r3, [r7, #31]
 800a688:	e069      	b.n	800a75e <UART_SetConfig+0x346>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a1c      	ldr	r2, [pc, #112]	; (800a700 <UART_SetConfig+0x2e8>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d137      	bne.n	800a704 <UART_SetConfig+0x2ec>
 800a694:	4b14      	ldr	r3, [pc, #80]	; (800a6e8 <UART_SetConfig+0x2d0>)
 800a696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a69e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6a2:	d017      	beq.n	800a6d4 <UART_SetConfig+0x2bc>
 800a6a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6a8:	d817      	bhi.n	800a6da <UART_SetConfig+0x2c2>
 800a6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ae:	d00b      	beq.n	800a6c8 <UART_SetConfig+0x2b0>
 800a6b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b4:	d811      	bhi.n	800a6da <UART_SetConfig+0x2c2>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d003      	beq.n	800a6c2 <UART_SetConfig+0x2aa>
 800a6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6be:	d006      	beq.n	800a6ce <UART_SetConfig+0x2b6>
 800a6c0:	e00b      	b.n	800a6da <UART_SetConfig+0x2c2>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	77fb      	strb	r3, [r7, #31]
 800a6c6:	e04a      	b.n	800a75e <UART_SetConfig+0x346>
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	77fb      	strb	r3, [r7, #31]
 800a6cc:	e047      	b.n	800a75e <UART_SetConfig+0x346>
 800a6ce:	2304      	movs	r3, #4
 800a6d0:	77fb      	strb	r3, [r7, #31]
 800a6d2:	e044      	b.n	800a75e <UART_SetConfig+0x346>
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	77fb      	strb	r3, [r7, #31]
 800a6d8:	e041      	b.n	800a75e <UART_SetConfig+0x346>
 800a6da:	2310      	movs	r3, #16
 800a6dc:	77fb      	strb	r3, [r7, #31]
 800a6de:	e03e      	b.n	800a75e <UART_SetConfig+0x346>
 800a6e0:	efff69f3 	.word	0xefff69f3
 800a6e4:	40011000 	.word	0x40011000
 800a6e8:	40023800 	.word	0x40023800
 800a6ec:	40004400 	.word	0x40004400
 800a6f0:	40004800 	.word	0x40004800
 800a6f4:	40004c00 	.word	0x40004c00
 800a6f8:	40005000 	.word	0x40005000
 800a6fc:	40011400 	.word	0x40011400
 800a700:	40007800 	.word	0x40007800
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a71      	ldr	r2, [pc, #452]	; (800a8d0 <UART_SetConfig+0x4b8>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d125      	bne.n	800a75a <UART_SetConfig+0x342>
 800a70e:	4b71      	ldr	r3, [pc, #452]	; (800a8d4 <UART_SetConfig+0x4bc>)
 800a710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a718:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a71c:	d017      	beq.n	800a74e <UART_SetConfig+0x336>
 800a71e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a722:	d817      	bhi.n	800a754 <UART_SetConfig+0x33c>
 800a724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a728:	d00b      	beq.n	800a742 <UART_SetConfig+0x32a>
 800a72a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a72e:	d811      	bhi.n	800a754 <UART_SetConfig+0x33c>
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <UART_SetConfig+0x324>
 800a734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a738:	d006      	beq.n	800a748 <UART_SetConfig+0x330>
 800a73a:	e00b      	b.n	800a754 <UART_SetConfig+0x33c>
 800a73c:	2300      	movs	r3, #0
 800a73e:	77fb      	strb	r3, [r7, #31]
 800a740:	e00d      	b.n	800a75e <UART_SetConfig+0x346>
 800a742:	2302      	movs	r3, #2
 800a744:	77fb      	strb	r3, [r7, #31]
 800a746:	e00a      	b.n	800a75e <UART_SetConfig+0x346>
 800a748:	2304      	movs	r3, #4
 800a74a:	77fb      	strb	r3, [r7, #31]
 800a74c:	e007      	b.n	800a75e <UART_SetConfig+0x346>
 800a74e:	2308      	movs	r3, #8
 800a750:	77fb      	strb	r3, [r7, #31]
 800a752:	e004      	b.n	800a75e <UART_SetConfig+0x346>
 800a754:	2310      	movs	r3, #16
 800a756:	77fb      	strb	r3, [r7, #31]
 800a758:	e001      	b.n	800a75e <UART_SetConfig+0x346>
 800a75a:	2310      	movs	r3, #16
 800a75c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a766:	d15b      	bne.n	800a820 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a768:	7ffb      	ldrb	r3, [r7, #31]
 800a76a:	2b08      	cmp	r3, #8
 800a76c:	d827      	bhi.n	800a7be <UART_SetConfig+0x3a6>
 800a76e:	a201      	add	r2, pc, #4	; (adr r2, 800a774 <UART_SetConfig+0x35c>)
 800a770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a774:	0800a799 	.word	0x0800a799
 800a778:	0800a7a1 	.word	0x0800a7a1
 800a77c:	0800a7a9 	.word	0x0800a7a9
 800a780:	0800a7bf 	.word	0x0800a7bf
 800a784:	0800a7af 	.word	0x0800a7af
 800a788:	0800a7bf 	.word	0x0800a7bf
 800a78c:	0800a7bf 	.word	0x0800a7bf
 800a790:	0800a7bf 	.word	0x0800a7bf
 800a794:	0800a7b7 	.word	0x0800a7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a798:	f7fc fb1c 	bl	8006dd4 <HAL_RCC_GetPCLK1Freq>
 800a79c:	61b8      	str	r0, [r7, #24]
        break;
 800a79e:	e013      	b.n	800a7c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7a0:	f7fc fb2c 	bl	8006dfc <HAL_RCC_GetPCLK2Freq>
 800a7a4:	61b8      	str	r0, [r7, #24]
        break;
 800a7a6:	e00f      	b.n	800a7c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7a8:	4b4b      	ldr	r3, [pc, #300]	; (800a8d8 <UART_SetConfig+0x4c0>)
 800a7aa:	61bb      	str	r3, [r7, #24]
        break;
 800a7ac:	e00c      	b.n	800a7c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ae:	f7fc fa4f 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 800a7b2:	61b8      	str	r0, [r7, #24]
        break;
 800a7b4:	e008      	b.n	800a7c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ba:	61bb      	str	r3, [r7, #24]
        break;
 800a7bc:	e004      	b.n	800a7c8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	77bb      	strb	r3, [r7, #30]
        break;
 800a7c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d074      	beq.n	800a8b8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	005a      	lsls	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	441a      	add	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b0f      	cmp	r3, #15
 800a7ea:	d916      	bls.n	800a81a <UART_SetConfig+0x402>
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f2:	d212      	bcs.n	800a81a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	f023 030f 	bic.w	r3, r3, #15
 800a7fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	085b      	lsrs	r3, r3, #1
 800a802:	b29b      	uxth	r3, r3
 800a804:	f003 0307 	and.w	r3, r3, #7
 800a808:	b29a      	uxth	r2, r3
 800a80a:	89fb      	ldrh	r3, [r7, #14]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	89fa      	ldrh	r2, [r7, #14]
 800a816:	60da      	str	r2, [r3, #12]
 800a818:	e04e      	b.n	800a8b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	77bb      	strb	r3, [r7, #30]
 800a81e:	e04b      	b.n	800a8b8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a820:	7ffb      	ldrb	r3, [r7, #31]
 800a822:	2b08      	cmp	r3, #8
 800a824:	d827      	bhi.n	800a876 <UART_SetConfig+0x45e>
 800a826:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <UART_SetConfig+0x414>)
 800a828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82c:	0800a851 	.word	0x0800a851
 800a830:	0800a859 	.word	0x0800a859
 800a834:	0800a861 	.word	0x0800a861
 800a838:	0800a877 	.word	0x0800a877
 800a83c:	0800a867 	.word	0x0800a867
 800a840:	0800a877 	.word	0x0800a877
 800a844:	0800a877 	.word	0x0800a877
 800a848:	0800a877 	.word	0x0800a877
 800a84c:	0800a86f 	.word	0x0800a86f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a850:	f7fc fac0 	bl	8006dd4 <HAL_RCC_GetPCLK1Freq>
 800a854:	61b8      	str	r0, [r7, #24]
        break;
 800a856:	e013      	b.n	800a880 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a858:	f7fc fad0 	bl	8006dfc <HAL_RCC_GetPCLK2Freq>
 800a85c:	61b8      	str	r0, [r7, #24]
        break;
 800a85e:	e00f      	b.n	800a880 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a860:	4b1d      	ldr	r3, [pc, #116]	; (800a8d8 <UART_SetConfig+0x4c0>)
 800a862:	61bb      	str	r3, [r7, #24]
        break;
 800a864:	e00c      	b.n	800a880 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a866:	f7fc f9f3 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 800a86a:	61b8      	str	r0, [r7, #24]
        break;
 800a86c:	e008      	b.n	800a880 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a86e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a872:	61bb      	str	r3, [r7, #24]
        break;
 800a874:	e004      	b.n	800a880 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a876:	2300      	movs	r3, #0
 800a878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	77bb      	strb	r3, [r7, #30]
        break;
 800a87e:	bf00      	nop
    }

    if (pclk != 0U)
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d018      	beq.n	800a8b8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	085a      	lsrs	r2, r3, #1
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	441a      	add	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	fbb2 f3f3 	udiv	r3, r2, r3
 800a898:	b29b      	uxth	r3, r3
 800a89a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2b0f      	cmp	r3, #15
 800a8a0:	d908      	bls.n	800a8b4 <UART_SetConfig+0x49c>
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8a8:	d204      	bcs.n	800a8b4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	60da      	str	r2, [r3, #12]
 800a8b2:	e001      	b.n	800a8b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a8c4:	7fbb      	ldrb	r3, [r7, #30]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3720      	adds	r7, #32
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	40007c00 	.word	0x40007c00
 800a8d4:	40023800 	.word	0x40023800
 800a8d8:	00f42400 	.word	0x00f42400

0800a8dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00a      	beq.n	800a906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	430a      	orrs	r2, r1
 800a904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90a:	f003 0302 	and.w	r3, r3, #2
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00a      	beq.n	800a928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	f003 0304 	and.w	r3, r3, #4
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00a      	beq.n	800a94a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	430a      	orrs	r2, r1
 800a948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94e:	f003 0308 	and.w	r3, r3, #8
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00a      	beq.n	800a96c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	430a      	orrs	r2, r1
 800a96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	f003 0310 	and.w	r3, r3, #16
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00a      	beq.n	800a98e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	430a      	orrs	r2, r1
 800a98c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a992:	f003 0320 	and.w	r3, r3, #32
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d01a      	beq.n	800a9f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9da:	d10a      	bne.n	800a9f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	605a      	str	r2, [r3, #4]
  }
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa30:	f7f9 fa7c 	bl	8003f2c <HAL_GetTick>
 800aa34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0308 	and.w	r3, r3, #8
 800aa40:	2b08      	cmp	r3, #8
 800aa42:	d10e      	bne.n	800aa62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f817 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e00d      	b.n	800aa7e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	603b      	str	r3, [r7, #0]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa96:	e05e      	b.n	800ab56 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9e:	d05a      	beq.n	800ab56 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaa0:	f7f9 fa44 	bl	8003f2c <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	69ba      	ldr	r2, [r7, #24]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d302      	bcc.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x30>
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d11b      	bne.n	800aaee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aac4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	689a      	ldr	r2, [r3, #8]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f022 0201 	bic.w	r2, r2, #1
 800aad4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2220      	movs	r2, #32
 800aada:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2220      	movs	r2, #32
 800aae0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e043      	b.n	800ab76 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d02c      	beq.n	800ab56 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	69db      	ldr	r3, [r3, #28]
 800ab02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab0a:	d124      	bne.n	800ab56 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab24:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	689a      	ldr	r2, [r3, #8]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f022 0201 	bic.w	r2, r2, #1
 800ab34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2220      	movs	r2, #32
 800ab3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2220      	movs	r2, #32
 800ab46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e00f      	b.n	800ab76 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	69da      	ldr	r2, [r3, #28]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	4013      	ands	r3, r2
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	bf0c      	ite	eq
 800ab66:	2301      	moveq	r3, #1
 800ab68:	2300      	movne	r3, #0
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d091      	beq.n	800aa98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d027      	beq.n	800abea <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4b2f      	ldr	r3, [pc, #188]	; (800ac60 <FMC_SDRAM_Init+0xe0>)
 800aba4:	4013      	ands	r3, r2
 800aba6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800abb0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800abb6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800abbc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800abc2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800abc8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800abce:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800abd4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800abda:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	4313      	orrs	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	e032      	b.n	800ac50 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abf6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ac00:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ac06:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	4b12      	ldr	r3, [pc, #72]	; (800ac60 <FMC_SDRAM_Init+0xe0>)
 800ac18:	4013      	ands	r3, r2
 800ac1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ac2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800ac30:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800ac36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800ac3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	ffff8000 	.word	0xffff8000

0800ac64 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d02e      	beq.n	800acdc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac8a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac9a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800aca4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	3b01      	subs	r3, #1
 800acac:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800acae:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800acb8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	695b      	ldr	r3, [r3, #20]
 800acbe:	3b01      	subs	r3, #1
 800acc0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800acc2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	3b01      	subs	r3, #1
 800acca:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800accc:	4313      	orrs	r3, r2
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	609a      	str	r2, [r3, #8]
 800acda:	e039      	b.n	800ad50 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	4b1e      	ldr	r3, [pc, #120]	; (800ad60 <FMC_SDRAM_Timing_Init+0xfc>)
 800ace6:	4013      	ands	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	3b01      	subs	r3, #1
 800acf0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800acfa:	4313      	orrs	r3, r2
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad0e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad1e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ad28:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ad32:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	ff0f0fff 	.word	0xff0f0fff

0800ad64 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	691a      	ldr	r2, [r3, #16]
 800ad74:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <FMC_SDRAM_SendCommand+0x44>)
 800ad76:	4013      	ands	r3, r2
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	6811      	ldr	r1, [r2, #0]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	6852      	ldr	r2, [r2, #4]
 800ad80:	4311      	orrs	r1, r2
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	6892      	ldr	r2, [r2, #8]
 800ad86:	3a01      	subs	r2, #1
 800ad88:	0152      	lsls	r2, r2, #5
 800ad8a:	4311      	orrs	r1, r2
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	68d2      	ldr	r2, [r2, #12]
 800ad90:	0252      	lsls	r2, r2, #9
 800ad92:	430a      	orrs	r2, r1
 800ad94:	431a      	orrs	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	ffc00000 	.word	0xffc00000

0800adac <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	695a      	ldr	r2, [r3, #20]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	431a      	orrs	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800add4:	b084      	sub	sp, #16
 800add6:	b480      	push	{r7}
 800add8:	b085      	sub	sp, #20
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	f107 001c 	add.w	r0, r7, #28
 800ade2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800adea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800adec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800adee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800adf2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800adf6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800adfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800adfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <SDMMC_Init+0x54>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	431a      	orrs	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	b004      	add	sp, #16
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	ffff8100 	.word	0xffff8100

0800ae2c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ae46:	b480      	push	{r7}
 800ae48:	b083      	sub	sp, #12
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2203      	movs	r2, #3
 800ae74:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ae76:	2002      	movs	r0, #2
 800ae78:	f7f9 f864 	bl	8003f44 <HAL_Delay>
  
  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0303 	and.w	r3, r3, #3
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
	...

0800aea4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aec2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aec8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aece:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	4b06      	ldr	r3, [pc, #24]	; (800aef4 <SDMMC_SendCommand+0x50>)
 800aedc:	4013      	ands	r3, r2
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	431a      	orrs	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aee6:	2300      	movs	r3, #0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3714      	adds	r7, #20
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	fffff000 	.word	0xfffff000

0800aef8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	b2db      	uxtb	r3, r3
}
 800af06:	4618      	mov	r0, r3
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3314      	adds	r3, #20
 800af20:	461a      	mov	r2, r3
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	4413      	add	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
}  
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af5e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800af64:	431a      	orrs	r2, r3
                       Data->DPSM);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800af6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af76:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	431a      	orrs	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800af82:	2300      	movs	r3, #0

}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr

0800af90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b088      	sub	sp, #32
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800af9e:	2310      	movs	r3, #16
 800afa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afa2:	2340      	movs	r3, #64	; 0x40
 800afa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afb0:	f107 0308 	add.w	r3, r7, #8
 800afb4:	4619      	mov	r1, r3
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ff74 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800afbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc0:	2110      	movs	r1, #16
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fa46 	bl	800b454 <SDMMC_GetCmdResp1>
 800afc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afca:	69fb      	ldr	r3, [r7, #28]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3720      	adds	r7, #32
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800afe2:	2311      	movs	r3, #17
 800afe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afe6:	2340      	movs	r3, #64	; 0x40
 800afe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aff2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff ff52 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b000:	f241 3288 	movw	r2, #5000	; 0x1388
 800b004:	2111      	movs	r1, #17
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fa24 	bl	800b454 <SDMMC_GetCmdResp1>
 800b00c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b00e:	69fb      	ldr	r3, [r7, #28]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3720      	adds	r7, #32
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b026:	2312      	movs	r3, #18
 800b028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b02a:	2340      	movs	r3, #64	; 0x40
 800b02c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b038:	f107 0308 	add.w	r3, r7, #8
 800b03c:	4619      	mov	r1, r3
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff ff30 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b044:	f241 3288 	movw	r2, #5000	; 0x1388
 800b048:	2112      	movs	r1, #18
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fa02 	bl	800b454 <SDMMC_GetCmdResp1>
 800b050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b052:	69fb      	ldr	r3, [r7, #28]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b06a:	2318      	movs	r3, #24
 800b06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b06e:	2340      	movs	r3, #64	; 0x40
 800b070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b072:	2300      	movs	r3, #0
 800b074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b07a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b07c:	f107 0308 	add.w	r3, r7, #8
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff ff0e 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b088:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08c:	2118      	movs	r1, #24
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f9e0 	bl	800b454 <SDMMC_GetCmdResp1>
 800b094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b096:	69fb      	ldr	r3, [r7, #28]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3720      	adds	r7, #32
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b088      	sub	sp, #32
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b0ae:	2319      	movs	r3, #25
 800b0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0b2:	2340      	movs	r3, #64	; 0x40
 800b0b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c0:	f107 0308 	add.w	r3, r7, #8
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff feec 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b0cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0d0:	2119      	movs	r1, #25
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f9be 	bl	800b454 <SDMMC_GetCmdResp1>
 800b0d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0da:	69fb      	ldr	r3, [r7, #28]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b0f0:	230c      	movs	r3, #12
 800b0f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0f4:	2340      	movs	r3, #64	; 0x40
 800b0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b102:	f107 0308 	add.w	r3, r7, #8
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff fecb 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b10e:	4a05      	ldr	r2, [pc, #20]	; (800b124 <SDMMC_CmdStopTransfer+0x40>)
 800b110:	210c      	movs	r1, #12
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f99e 	bl	800b454 <SDMMC_GetCmdResp1>
 800b118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b11a:	69fb      	ldr	r3, [r7, #28]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3720      	adds	r7, #32
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	05f5e100 	.word	0x05f5e100

0800b128 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	; 0x28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b138:	2307      	movs	r3, #7
 800b13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b13c:	2340      	movs	r3, #64	; 0x40
 800b13e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b140:	2300      	movs	r3, #0
 800b142:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b148:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b14a:	f107 0310 	add.w	r3, r7, #16
 800b14e:	4619      	mov	r1, r3
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff fea7 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b156:	f241 3288 	movw	r2, #5000	; 0x1388
 800b15a:	2107      	movs	r1, #7
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 f979 	bl	800b454 <SDMMC_GetCmdResp1>
 800b162:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b166:	4618      	mov	r0, r3
 800b168:	3728      	adds	r7, #40	; 0x28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b088      	sub	sp, #32
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b17e:	2300      	movs	r3, #0
 800b180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b182:	2300      	movs	r3, #0
 800b184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b18a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b18c:	f107 0308 	add.w	r3, r7, #8
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff fe86 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f92f 	bl	800b3fc <SDMMC_GetCmdError>
 800b19e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3720      	adds	r7, #32
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b088      	sub	sp, #32
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b1b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b1b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b1b8:	2308      	movs	r3, #8
 800b1ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1bc:	2340      	movs	r3, #64	; 0x40
 800b1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1ca:	f107 0308 	add.w	r3, r7, #8
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff fe67 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fb26 	bl	800b828 <SDMMC_GetCmdResp7>
 800b1dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1de:	69fb      	ldr	r3, [r7, #28]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3720      	adds	r7, #32
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b088      	sub	sp, #32
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b1f6:	2337      	movs	r3, #55	; 0x37
 800b1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1fa:	2340      	movs	r3, #64	; 0x40
 800b1fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b208:	f107 0308 	add.w	r3, r7, #8
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fe48 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b214:	f241 3288 	movw	r2, #5000	; 0x1388
 800b218:	2137      	movs	r1, #55	; 0x37
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f91a 	bl	800b454 <SDMMC_GetCmdResp1>
 800b220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b222:	69fb      	ldr	r3, [r7, #28]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3720      	adds	r7, #32
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b088      	sub	sp, #32
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	4b0d      	ldr	r3, [pc, #52]	; (800b270 <SDMMC_CmdAppOperCommand+0x44>)
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b23e:	2329      	movs	r3, #41	; 0x29
 800b240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b242:	2340      	movs	r3, #64	; 0x40
 800b244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b250:	f107 0308 	add.w	r3, r7, #8
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff fe24 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 fa2f 	bl	800b6c0 <SDMMC_GetCmdResp3>
 800b262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b264:	69fb      	ldr	r3, [r7, #28]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3720      	adds	r7, #32
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	80100000 	.word	0x80100000

0800b274 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b088      	sub	sp, #32
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b282:	2306      	movs	r3, #6
 800b284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b286:	2340      	movs	r3, #64	; 0x40
 800b288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b294:	f107 0308 	add.w	r3, r7, #8
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7ff fe02 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b2a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a4:	2106      	movs	r1, #6
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f8d4 	bl	800b454 <SDMMC_GetCmdResp1>
 800b2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b2c4:	2333      	movs	r3, #51	; 0x33
 800b2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2c8:	2340      	movs	r3, #64	; 0x40
 800b2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2d6:	f107 0308 	add.w	r3, r7, #8
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff fde1 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e6:	2133      	movs	r1, #51	; 0x33
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f8b3 	bl	800b454 <SDMMC_GetCmdResp1>
 800b2ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2f0:	69fb      	ldr	r3, [r7, #28]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b088      	sub	sp, #32
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b302:	2300      	movs	r3, #0
 800b304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b306:	2302      	movs	r3, #2
 800b308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b30a:	23c0      	movs	r3, #192	; 0xc0
 800b30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b318:	f107 0308 	add.w	r3, r7, #8
 800b31c:	4619      	mov	r1, r3
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7ff fdc0 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f983 	bl	800b630 <SDMMC_GetCmdResp2>
 800b32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b32c:	69fb      	ldr	r3, [r7, #28]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3720      	adds	r7, #32
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b088      	sub	sp, #32
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b344:	2309      	movs	r3, #9
 800b346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b348:	23c0      	movs	r3, #192	; 0xc0
 800b34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b34c:	2300      	movs	r3, #0
 800b34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b356:	f107 0308 	add.w	r3, r7, #8
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff fda1 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 f964 	bl	800b630 <SDMMC_GetCmdResp2>
 800b368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b36a:	69fb      	ldr	r3, [r7, #28]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3720      	adds	r7, #32
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b382:	2303      	movs	r3, #3
 800b384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b386:	2340      	movs	r3, #64	; 0x40
 800b388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b38a:	2300      	movs	r3, #0
 800b38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b394:	f107 0308 	add.w	r3, r7, #8
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7ff fd82 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	2103      	movs	r1, #3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f9c9 	bl	800b73c <SDMMC_GetCmdResp6>
 800b3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b088      	sub	sp, #32
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b3c4:	230d      	movs	r3, #13
 800b3c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3c8:	2340      	movs	r3, #64	; 0x40
 800b3ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff fd61 	bl	800aea4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b3e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e6:	210d      	movs	r1, #13
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f833 	bl	800b454 <SDMMC_GetCmdResp1>
 800b3ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f0:	69fb      	ldr	r3, [r7, #28]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b085      	sub	sp, #20
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b404:	4b11      	ldr	r3, [pc, #68]	; (800b44c <SDMMC_GetCmdError+0x50>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a11      	ldr	r2, [pc, #68]	; (800b450 <SDMMC_GetCmdError+0x54>)
 800b40a:	fba2 2303 	umull	r2, r3, r2, r3
 800b40e:	0a5b      	lsrs	r3, r3, #9
 800b410:	f241 3288 	movw	r2, #5000	; 0x1388
 800b414:	fb02 f303 	mul.w	r3, r2, r3
 800b418:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	1e5a      	subs	r2, r3, #1
 800b41e:	60fa      	str	r2, [r7, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d102      	bne.n	800b42a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b424:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b428:	e009      	b.n	800b43e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0f1      	beq.n	800b41a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	22c5      	movs	r2, #197	; 0xc5
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3714      	adds	r7, #20
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	20000004 	.word	0x20000004
 800b450:	10624dd3 	.word	0x10624dd3

0800b454 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b088      	sub	sp, #32
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	460b      	mov	r3, r1
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b462:	4b70      	ldr	r3, [pc, #448]	; (800b624 <SDMMC_GetCmdResp1+0x1d0>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a70      	ldr	r2, [pc, #448]	; (800b628 <SDMMC_GetCmdResp1+0x1d4>)
 800b468:	fba2 2303 	umull	r2, r3, r2, r3
 800b46c:	0a5a      	lsrs	r2, r3, #9
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	fb02 f303 	mul.w	r3, r2, r3
 800b474:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	1e5a      	subs	r2, r3, #1
 800b47a:	61fa      	str	r2, [r7, #28]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d102      	bne.n	800b486 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b484:	e0c9      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0ef      	beq.n	800b476 <SDMMC_GetCmdResp1+0x22>
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1ea      	bne.n	800b476 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a4:	f003 0304 	and.w	r3, r3, #4
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d004      	beq.n	800b4b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2204      	movs	r2, #4
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4b2:	2304      	movs	r3, #4
 800b4b4:	e0b1      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d004      	beq.n	800b4cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e0a6      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	22c5      	movs	r2, #197	; 0xc5
 800b4d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fd10 	bl	800aef8 <SDMMC_GetCommandResponse>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	461a      	mov	r2, r3
 800b4dc:	7afb      	ldrb	r3, [r7, #11]
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d001      	beq.n	800b4e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e099      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff fd12 	bl	800af12 <SDMMC_GetResponse>
 800b4ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4b4e      	ldr	r3, [pc, #312]	; (800b62c <SDMMC_GetCmdResp1+0x1d8>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	e08d      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	2b00      	cmp	r3, #0
 800b502:	da02      	bge.n	800b50a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b508:	e087      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b510:	2b00      	cmp	r3, #0
 800b512:	d001      	beq.n	800b518 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b514:	2340      	movs	r3, #64	; 0x40
 800b516:	e080      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b522:	2380      	movs	r3, #128	; 0x80
 800b524:	e079      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b530:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b534:	e071      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b540:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b544:	e069      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b554:	e061      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b564:	e059      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b574:	e051      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b584:	e049      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b590:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b594:	e041      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b5a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5a4:	e039      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b5b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b5b4:	e031      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b5c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b5c4:	e029      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b5d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b5d4:	e021      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b5e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b5e4:	e019      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b5f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b5f4:	e011      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b600:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b604:	e009      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f003 0308 	and.w	r3, r3, #8
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b610:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b614:	e001      	b.n	800b61a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3720      	adds	r7, #32
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	20000004 	.word	0x20000004
 800b628:	10624dd3 	.word	0x10624dd3
 800b62c:	fdffe008 	.word	0xfdffe008

0800b630 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b638:	4b1f      	ldr	r3, [pc, #124]	; (800b6b8 <SDMMC_GetCmdResp2+0x88>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a1f      	ldr	r2, [pc, #124]	; (800b6bc <SDMMC_GetCmdResp2+0x8c>)
 800b63e:	fba2 2303 	umull	r2, r3, r2, r3
 800b642:	0a5b      	lsrs	r3, r3, #9
 800b644:	f241 3288 	movw	r2, #5000	; 0x1388
 800b648:	fb02 f303 	mul.w	r3, r2, r3
 800b64c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	1e5a      	subs	r2, r3, #1
 800b652:	60fa      	str	r2, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d102      	bne.n	800b65e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b65c:	e026      	b.n	800b6ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b662:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0ef      	beq.n	800b64e <SDMMC_GetCmdResp2+0x1e>
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1ea      	bne.n	800b64e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67c:	f003 0304 	and.w	r3, r3, #4
 800b680:	2b00      	cmp	r3, #0
 800b682:	d004      	beq.n	800b68e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2204      	movs	r2, #4
 800b688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b68a:	2304      	movs	r3, #4
 800b68c:	e00e      	b.n	800b6ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d004      	beq.n	800b6a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e003      	b.n	800b6ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	22c5      	movs	r2, #197	; 0xc5
 800b6a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	20000004 	.word	0x20000004
 800b6bc:	10624dd3 	.word	0x10624dd3

0800b6c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6c8:	4b1a      	ldr	r3, [pc, #104]	; (800b734 <SDMMC_GetCmdResp3+0x74>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a1a      	ldr	r2, [pc, #104]	; (800b738 <SDMMC_GetCmdResp3+0x78>)
 800b6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d2:	0a5b      	lsrs	r3, r3, #9
 800b6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6d8:	fb02 f303 	mul.w	r3, r2, r3
 800b6dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	1e5a      	subs	r2, r3, #1
 800b6e2:	60fa      	str	r2, [r7, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d102      	bne.n	800b6ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6ec:	e01b      	b.n	800b726 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0ef      	beq.n	800b6de <SDMMC_GetCmdResp3+0x1e>
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1ea      	bne.n	800b6de <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2204      	movs	r2, #4
 800b718:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b71a:	2304      	movs	r3, #4
 800b71c:	e003      	b.n	800b726 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	22c5      	movs	r2, #197	; 0xc5
 800b722:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	20000004 	.word	0x20000004
 800b738:	10624dd3 	.word	0x10624dd3

0800b73c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	460b      	mov	r3, r1
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b74a:	4b35      	ldr	r3, [pc, #212]	; (800b820 <SDMMC_GetCmdResp6+0xe4>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a35      	ldr	r2, [pc, #212]	; (800b824 <SDMMC_GetCmdResp6+0xe8>)
 800b750:	fba2 2303 	umull	r2, r3, r2, r3
 800b754:	0a5b      	lsrs	r3, r3, #9
 800b756:	f241 3288 	movw	r2, #5000	; 0x1388
 800b75a:	fb02 f303 	mul.w	r3, r2, r3
 800b75e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b760:	69fb      	ldr	r3, [r7, #28]
 800b762:	1e5a      	subs	r2, r3, #1
 800b764:	61fa      	str	r2, [r7, #28]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d102      	bne.n	800b770 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b76a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b76e:	e052      	b.n	800b816 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b774:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0ef      	beq.n	800b760 <SDMMC_GetCmdResp6+0x24>
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1ea      	bne.n	800b760 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78e:	f003 0304 	and.w	r3, r3, #4
 800b792:	2b00      	cmp	r3, #0
 800b794:	d004      	beq.n	800b7a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2204      	movs	r2, #4
 800b79a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b79c:	2304      	movs	r3, #4
 800b79e:	e03a      	b.n	800b816 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d004      	beq.n	800b7b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e02f      	b.n	800b816 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f7ff fb9e 	bl	800aef8 <SDMMC_GetCommandResponse>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	461a      	mov	r2, r3
 800b7c0:	7afb      	ldrb	r3, [r7, #11]
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d001      	beq.n	800b7ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e025      	b.n	800b816 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	22c5      	movs	r2, #197	; 0xc5
 800b7ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	68f8      	ldr	r0, [r7, #12]
 800b7d4:	f7ff fb9d 	bl	800af12 <SDMMC_GetResponse>
 800b7d8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d106      	bne.n	800b7f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	0c1b      	lsrs	r3, r3, #16
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e011      	b.n	800b816 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b7fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b800:	e009      	b.n	800b816 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b80c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b810:	e001      	b.n	800b816 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b816:	4618      	mov	r0, r3
 800b818:	3720      	adds	r7, #32
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20000004 	.word	0x20000004
 800b824:	10624dd3 	.word	0x10624dd3

0800b828 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b830:	4b22      	ldr	r3, [pc, #136]	; (800b8bc <SDMMC_GetCmdResp7+0x94>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a22      	ldr	r2, [pc, #136]	; (800b8c0 <SDMMC_GetCmdResp7+0x98>)
 800b836:	fba2 2303 	umull	r2, r3, r2, r3
 800b83a:	0a5b      	lsrs	r3, r3, #9
 800b83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b840:	fb02 f303 	mul.w	r3, r2, r3
 800b844:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	1e5a      	subs	r2, r3, #1
 800b84a:	60fa      	str	r2, [r7, #12]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d102      	bne.n	800b856 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b850:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b854:	e02c      	b.n	800b8b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b85a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0ef      	beq.n	800b846 <SDMMC_GetCmdResp7+0x1e>
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1ea      	bne.n	800b846 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b874:	f003 0304 	and.w	r3, r3, #4
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2204      	movs	r2, #4
 800b880:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b882:	2304      	movs	r3, #4
 800b884:	e014      	b.n	800b8b0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d004      	beq.n	800b89c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b898:	2301      	movs	r3, #1
 800b89a:	e009      	b.n	800b8b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2240      	movs	r2, #64	; 0x40
 800b8ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b8ae:	2300      	movs	r3, #0
  
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	20000004 	.word	0x20000004
 800b8c0:	10624dd3 	.word	0x10624dd3

0800b8c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	4a08      	ldr	r2, [pc, #32]	; (800b8f4 <disk_status+0x30>)
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	79fa      	ldrb	r2, [r7, #7]
 800b8dc:	4905      	ldr	r1, [pc, #20]	; (800b8f4 <disk_status+0x30>)
 800b8de:	440a      	add	r2, r1
 800b8e0:	7b12      	ldrb	r2, [r2, #12]
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	4798      	blx	r3
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	20000798 	.word	0x20000798

0800b8f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b902:	2300      	movs	r3, #0
 800b904:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	4a0d      	ldr	r2, [pc, #52]	; (800b940 <disk_initialize+0x48>)
 800b90a:	5cd3      	ldrb	r3, [r2, r3]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d111      	bne.n	800b934 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b910:	79fb      	ldrb	r3, [r7, #7]
 800b912:	4a0b      	ldr	r2, [pc, #44]	; (800b940 <disk_initialize+0x48>)
 800b914:	2101      	movs	r1, #1
 800b916:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	4a09      	ldr	r2, [pc, #36]	; (800b940 <disk_initialize+0x48>)
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	79fa      	ldrb	r2, [r7, #7]
 800b926:	4906      	ldr	r1, [pc, #24]	; (800b940 <disk_initialize+0x48>)
 800b928:	440a      	add	r2, r1
 800b92a:	7b12      	ldrb	r2, [r2, #12]
 800b92c:	4610      	mov	r0, r2
 800b92e:	4798      	blx	r3
 800b930:	4603      	mov	r3, r0
 800b932:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b934:	7bfb      	ldrb	r3, [r7, #15]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	20000798 	.word	0x20000798

0800b944 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b944:	b590      	push	{r4, r7, lr}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	607a      	str	r2, [r7, #4]
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b954:	7bfb      	ldrb	r3, [r7, #15]
 800b956:	4a0a      	ldr	r2, [pc, #40]	; (800b980 <disk_read+0x3c>)
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	689c      	ldr	r4, [r3, #8]
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	4a07      	ldr	r2, [pc, #28]	; (800b980 <disk_read+0x3c>)
 800b964:	4413      	add	r3, r2
 800b966:	7b18      	ldrb	r0, [r3, #12]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	68b9      	ldr	r1, [r7, #8]
 800b96e:	47a0      	blx	r4
 800b970:	4603      	mov	r3, r0
 800b972:	75fb      	strb	r3, [r7, #23]
  return res;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
}
 800b976:	4618      	mov	r0, r3
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd90      	pop	{r4, r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000798 	.word	0x20000798

0800b984 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b984:	b590      	push	{r4, r7, lr}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60b9      	str	r1, [r7, #8]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	4a0a      	ldr	r2, [pc, #40]	; (800b9c0 <disk_write+0x3c>)
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	68dc      	ldr	r4, [r3, #12]
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	4a07      	ldr	r2, [pc, #28]	; (800b9c0 <disk_write+0x3c>)
 800b9a4:	4413      	add	r3, r2
 800b9a6:	7b18      	ldrb	r0, [r3, #12]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	68b9      	ldr	r1, [r7, #8]
 800b9ae:	47a0      	blx	r4
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	371c      	adds	r7, #28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd90      	pop	{r4, r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20000798 	.word	0x20000798

0800b9c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b9d4:	89fb      	ldrh	r3, [r7, #14]
 800b9d6:	021b      	lsls	r3, r3, #8
 800b9d8:	b21a      	sxth	r2, r3
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	b21b      	sxth	r3, r3
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	b21b      	sxth	r3, r3
 800b9e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b9e6:	89fb      	ldrh	r3, [r7, #14]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	3303      	adds	r3, #3
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	021b      	lsls	r3, r3, #8
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	3202      	adds	r2, #2
 800ba0c:	7812      	ldrb	r2, [r2, #0]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	3201      	adds	r2, #1
 800ba1a:	7812      	ldrb	r2, [r2, #0]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	021b      	lsls	r3, r3, #8
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	7812      	ldrb	r2, [r2, #0]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	1c5a      	adds	r2, r3, #1
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	887a      	ldrh	r2, [r7, #2]
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	887b      	ldrh	r3, [r7, #2]
 800ba54:	0a1b      	lsrs	r3, r3, #8
 800ba56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	607a      	str	r2, [r7, #4]
 800ba5e:	887a      	ldrh	r2, [r7, #2]
 800ba60:	b2d2      	uxtb	r2, r2
 800ba62:	701a      	strb	r2, [r3, #0]
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	701a      	strb	r2, [r3, #0]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	0a1b      	lsrs	r3, r3, #8
 800ba8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	607a      	str	r2, [r7, #4]
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	b2d2      	uxtb	r2, r2
 800ba96:	701a      	strb	r2, [r3, #0]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	0a1b      	lsrs	r3, r3, #8
 800ba9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	683a      	ldr	r2, [r7, #0]
 800baa6:	b2d2      	uxtb	r2, r2
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	0a1b      	lsrs	r3, r3, #8
 800baae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	607a      	str	r2, [r7, #4]
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	b2d2      	uxtb	r2, r2
 800baba:	701a      	strb	r2, [r3, #0]
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	1c5a      	adds	r2, r3, #1
 800badc:	617a      	str	r2, [r7, #20]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	b2d2      	uxtb	r2, r2
 800bae2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	3b01      	subs	r3, #1
 800bae8:	607b      	str	r3, [r7, #4]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1f3      	bne.n	800bad8 <mem_set+0x10>
}
 800baf0:	bf00      	nop
 800baf2:	bf00      	nop
 800baf4:	371c      	adds	r7, #28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bafe:	b480      	push	{r7}
 800bb00:	b089      	sub	sp, #36	; 0x24
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	60b9      	str	r1, [r7, #8]
 800bb08:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	61fb      	str	r3, [r7, #28]
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	61fa      	str	r2, [r7, #28]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	61ba      	str	r2, [r7, #24]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	1acb      	subs	r3, r1, r3
 800bb2a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	607b      	str	r3, [r7, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <mem_cmp+0x40>
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d0eb      	beq.n	800bb16 <mem_cmp+0x18>

	return r;
 800bb3e:	697b      	ldr	r3, [r7, #20]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3724      	adds	r7, #36	; 0x24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bb56:	e002      	b.n	800bb5e <chk_chr+0x12>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	607b      	str	r3, [r7, #4]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d005      	beq.n	800bb72 <chk_chr+0x26>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d1f2      	bne.n	800bb58 <chk_chr+0xc>
	return *str;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	781b      	ldrb	r3, [r3, #0]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	370c      	adds	r7, #12
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b082      	sub	sp, #8
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d009      	beq.n	800bba4 <lock_fs+0x22>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 ffc6 	bl	800db26 <ff_req_grant>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <lock_fs+0x22>
 800bba0:	2301      	movs	r3, #1
 800bba2:	e000      	b.n	800bba6 <lock_fs+0x24>
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00d      	beq.n	800bbdc <unlock_fs+0x2e>
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	2b0c      	cmp	r3, #12
 800bbc4:	d00a      	beq.n	800bbdc <unlock_fs+0x2e>
 800bbc6:	78fb      	ldrb	r3, [r7, #3]
 800bbc8:	2b0b      	cmp	r3, #11
 800bbca:	d007      	beq.n	800bbdc <unlock_fs+0x2e>
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	2b0f      	cmp	r3, #15
 800bbd0:	d004      	beq.n	800bbdc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f001 ffba 	bl	800db50 <ff_rel_grant>
	}
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60fb      	str	r3, [r7, #12]
 800bbf2:	e01f      	b.n	800bc34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bbf4:	4a41      	ldr	r2, [pc, #260]	; (800bcfc <inc_lock+0x118>)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	011b      	lsls	r3, r3, #4
 800bbfa:	4413      	add	r3, r2
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d113      	bne.n	800bc2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bc06:	4a3d      	ldr	r2, [pc, #244]	; (800bcfc <inc_lock+0x118>)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	011b      	lsls	r3, r3, #4
 800bc0c:	4413      	add	r3, r2
 800bc0e:	3304      	adds	r3, #4
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d109      	bne.n	800bc2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bc1a:	4a38      	ldr	r2, [pc, #224]	; (800bcfc <inc_lock+0x118>)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	4413      	add	r3, r2
 800bc22:	3308      	adds	r3, #8
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d006      	beq.n	800bc3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3301      	adds	r3, #1
 800bc32:	60fb      	str	r3, [r7, #12]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d9dc      	bls.n	800bbf4 <inc_lock+0x10>
 800bc3a:	e000      	b.n	800bc3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bc3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d132      	bne.n	800bcaa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc44:	2300      	movs	r3, #0
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	e002      	b.n	800bc50 <inc_lock+0x6c>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d806      	bhi.n	800bc64 <inc_lock+0x80>
 800bc56:	4a29      	ldr	r2, [pc, #164]	; (800bcfc <inc_lock+0x118>)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	011b      	lsls	r3, r3, #4
 800bc5c:	4413      	add	r3, r2
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1f2      	bne.n	800bc4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d101      	bne.n	800bc6e <inc_lock+0x8a>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e040      	b.n	800bcf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4922      	ldr	r1, [pc, #136]	; (800bcfc <inc_lock+0x118>)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	011b      	lsls	r3, r3, #4
 800bc78:	440b      	add	r3, r1
 800bc7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689a      	ldr	r2, [r3, #8]
 800bc80:	491e      	ldr	r1, [pc, #120]	; (800bcfc <inc_lock+0x118>)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	011b      	lsls	r3, r3, #4
 800bc86:	440b      	add	r3, r1
 800bc88:	3304      	adds	r3, #4
 800bc8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	695a      	ldr	r2, [r3, #20]
 800bc90:	491a      	ldr	r1, [pc, #104]	; (800bcfc <inc_lock+0x118>)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	011b      	lsls	r3, r3, #4
 800bc96:	440b      	add	r3, r1
 800bc98:	3308      	adds	r3, #8
 800bc9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bc9c:	4a17      	ldr	r2, [pc, #92]	; (800bcfc <inc_lock+0x118>)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	011b      	lsls	r3, r3, #4
 800bca2:	4413      	add	r3, r2
 800bca4:	330c      	adds	r3, #12
 800bca6:	2200      	movs	r2, #0
 800bca8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d009      	beq.n	800bcc4 <inc_lock+0xe0>
 800bcb0:	4a12      	ldr	r2, [pc, #72]	; (800bcfc <inc_lock+0x118>)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	011b      	lsls	r3, r3, #4
 800bcb6:	4413      	add	r3, r2
 800bcb8:	330c      	adds	r3, #12
 800bcba:	881b      	ldrh	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <inc_lock+0xe0>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	e015      	b.n	800bcf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d108      	bne.n	800bcdc <inc_lock+0xf8>
 800bcca:	4a0c      	ldr	r2, [pc, #48]	; (800bcfc <inc_lock+0x118>)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	011b      	lsls	r3, r3, #4
 800bcd0:	4413      	add	r3, r2
 800bcd2:	330c      	adds	r3, #12
 800bcd4:	881b      	ldrh	r3, [r3, #0]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	e001      	b.n	800bce0 <inc_lock+0xfc>
 800bcdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bce0:	4906      	ldr	r1, [pc, #24]	; (800bcfc <inc_lock+0x118>)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	440b      	add	r3, r1
 800bce8:	330c      	adds	r3, #12
 800bcea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	3301      	adds	r3, #1
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	20000778 	.word	0x20000778

0800bd00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	607b      	str	r3, [r7, #4]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d825      	bhi.n	800bd60 <dec_lock+0x60>
		n = Files[i].ctr;
 800bd14:	4a17      	ldr	r2, [pc, #92]	; (800bd74 <dec_lock+0x74>)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	011b      	lsls	r3, r3, #4
 800bd1a:	4413      	add	r3, r2
 800bd1c:	330c      	adds	r3, #12
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bd22:	89fb      	ldrh	r3, [r7, #14]
 800bd24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd28:	d101      	bne.n	800bd2e <dec_lock+0x2e>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bd2e:	89fb      	ldrh	r3, [r7, #14]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <dec_lock+0x3a>
 800bd34:	89fb      	ldrh	r3, [r7, #14]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bd3a:	4a0e      	ldr	r2, [pc, #56]	; (800bd74 <dec_lock+0x74>)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	011b      	lsls	r3, r3, #4
 800bd40:	4413      	add	r3, r2
 800bd42:	330c      	adds	r3, #12
 800bd44:	89fa      	ldrh	r2, [r7, #14]
 800bd46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bd48:	89fb      	ldrh	r3, [r7, #14]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d105      	bne.n	800bd5a <dec_lock+0x5a>
 800bd4e:	4a09      	ldr	r2, [pc, #36]	; (800bd74 <dec_lock+0x74>)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	011b      	lsls	r3, r3, #4
 800bd54:	4413      	add	r3, r2
 800bd56:	2200      	movs	r2, #0
 800bd58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	737b      	strb	r3, [r7, #13]
 800bd5e:	e001      	b.n	800bd64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bd60:	2302      	movs	r3, #2
 800bd62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bd64:	7b7b      	ldrb	r3, [r7, #13]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	20000778 	.word	0x20000778

0800bd78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bd80:	2300      	movs	r3, #0
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	e010      	b.n	800bda8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bd86:	4a0d      	ldr	r2, [pc, #52]	; (800bdbc <clear_lock+0x44>)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	011b      	lsls	r3, r3, #4
 800bd8c:	4413      	add	r3, r2
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d105      	bne.n	800bda2 <clear_lock+0x2a>
 800bd96:	4a09      	ldr	r2, [pc, #36]	; (800bdbc <clear_lock+0x44>)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	011b      	lsls	r3, r3, #4
 800bd9c:	4413      	add	r3, r2
 800bd9e:	2200      	movs	r2, #0
 800bda0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3301      	adds	r3, #1
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d9eb      	bls.n	800bd86 <clear_lock+0xe>
	}
}
 800bdae:	bf00      	nop
 800bdb0:	bf00      	nop
 800bdb2:	3714      	adds	r7, #20
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20000778 	.word	0x20000778

0800bdc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	78db      	ldrb	r3, [r3, #3]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d034      	beq.n	800be3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7858      	ldrb	r0, [r3, #1]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bde4:	2301      	movs	r3, #1
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	f7ff fdcc 	bl	800b984 <disk_write>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	73fb      	strb	r3, [r7, #15]
 800bdf6:	e022      	b.n	800be3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	1ad2      	subs	r2, r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d217      	bcs.n	800be3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	789b      	ldrb	r3, [r3, #2]
 800be12:	613b      	str	r3, [r7, #16]
 800be14:	e010      	b.n	800be38 <sync_window+0x78>
					wsect += fs->fsize;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	4413      	add	r3, r2
 800be1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	7858      	ldrb	r0, [r3, #1]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be2a:	2301      	movs	r3, #1
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	f7ff fda9 	bl	800b984 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	3b01      	subs	r3, #1
 800be36:	613b      	str	r3, [r7, #16]
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d8eb      	bhi.n	800be16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800be3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d01b      	beq.n	800be98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff ffad 	bl	800bdc0 <sync_window>
 800be66:	4603      	mov	r3, r0
 800be68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d113      	bne.n	800be98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7858      	ldrb	r0, [r3, #1]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be7a:	2301      	movs	r3, #1
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	f7ff fd61 	bl	800b944 <disk_read>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d004      	beq.n	800be92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800be88:	f04f 33ff 	mov.w	r3, #4294967295
 800be8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800be8e:	2301      	movs	r3, #1
 800be90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800be98:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b083      	sub	sp, #12
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
 800beaa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	3b02      	subs	r3, #2
 800beb0:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	69db      	ldr	r3, [r3, #28]
 800beb6:	3b02      	subs	r3, #2
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d301      	bcc.n	800bec2 <clust2sect+0x20>
 800bebe:	2300      	movs	r3, #0
 800bec0:	e008      	b.n	800bed4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	895b      	ldrh	r3, [r3, #10]
 800bec6:	461a      	mov	r2, r3
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	fb03 f202 	mul.w	r2, r3, r2
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed2:	4413      	add	r3, r2
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d904      	bls.n	800bf00 <get_fat+0x20>
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	69db      	ldr	r3, [r3, #28]
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d302      	bcc.n	800bf06 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bf00:	2301      	movs	r3, #1
 800bf02:	617b      	str	r3, [r7, #20]
 800bf04:	e08f      	b.n	800c026 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bf06:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d062      	beq.n	800bfda <get_fat+0xfa>
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	dc7c      	bgt.n	800c012 <get_fat+0x132>
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d002      	beq.n	800bf22 <get_fat+0x42>
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d042      	beq.n	800bfa6 <get_fat+0xc6>
 800bf20:	e077      	b.n	800c012 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	60fb      	str	r3, [r7, #12]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	085b      	lsrs	r3, r3, #1
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	0a5b      	lsrs	r3, r3, #9
 800bf38:	4413      	add	r3, r2
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6938      	ldr	r0, [r7, #16]
 800bf3e:	f7ff ff83 	bl	800be48 <move_window>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d167      	bne.n	800c018 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	60fa      	str	r2, [r7, #12]
 800bf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	4413      	add	r3, r2
 800bf56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bf5a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	0a5b      	lsrs	r3, r3, #9
 800bf64:	4413      	add	r3, r2
 800bf66:	4619      	mov	r1, r3
 800bf68:	6938      	ldr	r0, [r7, #16]
 800bf6a:	f7ff ff6d 	bl	800be48 <move_window>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d153      	bne.n	800c01c <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	461a      	mov	r2, r3
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d002      	beq.n	800bf9c <get_fat+0xbc>
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	091b      	lsrs	r3, r3, #4
 800bf9a:	e002      	b.n	800bfa2 <get_fat+0xc2>
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfa2:	617b      	str	r3, [r7, #20]
			break;
 800bfa4:	e03f      	b.n	800c026 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	0a1b      	lsrs	r3, r3, #8
 800bfae:	4413      	add	r3, r2
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6938      	ldr	r0, [r7, #16]
 800bfb4:	f7ff ff48 	bl	800be48 <move_window>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d130      	bne.n	800c020 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	005b      	lsls	r3, r3, #1
 800bfc8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bfcc:	4413      	add	r3, r2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff fcf8 	bl	800b9c4 <ld_word>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	617b      	str	r3, [r7, #20]
			break;
 800bfd8:	e025      	b.n	800c026 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	09db      	lsrs	r3, r3, #7
 800bfe2:	4413      	add	r3, r2
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6938      	ldr	r0, [r7, #16]
 800bfe8:	f7ff ff2e 	bl	800be48 <move_window>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d118      	bne.n	800c024 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c000:	4413      	add	r3, r2
 800c002:	4618      	mov	r0, r3
 800c004:	f7ff fcf6 	bl	800b9f4 <ld_dword>
 800c008:	4603      	mov	r3, r0
 800c00a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c00e:	617b      	str	r3, [r7, #20]
			break;
 800c010:	e009      	b.n	800c026 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c012:	2301      	movs	r3, #1
 800c014:	617b      	str	r3, [r7, #20]
 800c016:	e006      	b.n	800c026 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c018:	bf00      	nop
 800c01a:	e004      	b.n	800c026 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c01c:	bf00      	nop
 800c01e:	e002      	b.n	800c026 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c020:	bf00      	nop
 800c022:	e000      	b.n	800c026 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c024:	bf00      	nop
		}
	}

	return val;
 800c026:	697b      	ldr	r3, [r7, #20]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c030:	b590      	push	{r4, r7, lr}
 800c032:	b089      	sub	sp, #36	; 0x24
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c03c:	2302      	movs	r3, #2
 800c03e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	2b01      	cmp	r3, #1
 800c044:	f240 80d2 	bls.w	800c1ec <put_fat+0x1bc>
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	69db      	ldr	r3, [r3, #28]
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	429a      	cmp	r2, r3
 800c050:	f080 80cc 	bcs.w	800c1ec <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	2b03      	cmp	r3, #3
 800c05a:	f000 8096 	beq.w	800c18a <put_fat+0x15a>
 800c05e:	2b03      	cmp	r3, #3
 800c060:	f300 80cd 	bgt.w	800c1fe <put_fat+0x1ce>
 800c064:	2b01      	cmp	r3, #1
 800c066:	d002      	beq.n	800c06e <put_fat+0x3e>
 800c068:	2b02      	cmp	r3, #2
 800c06a:	d06e      	beq.n	800c14a <put_fat+0x11a>
 800c06c:	e0c7      	b.n	800c1fe <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	61bb      	str	r3, [r7, #24]
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	085b      	lsrs	r3, r3, #1
 800c076:	69ba      	ldr	r2, [r7, #24]
 800c078:	4413      	add	r3, r2
 800c07a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	0a5b      	lsrs	r3, r3, #9
 800c084:	4413      	add	r3, r2
 800c086:	4619      	mov	r1, r3
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f7ff fedd 	bl	800be48 <move_window>
 800c08e:	4603      	mov	r3, r0
 800c090:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c092:	7ffb      	ldrb	r3, [r7, #31]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f040 80ab 	bne.w	800c1f0 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	1c59      	adds	r1, r3, #1
 800c0a4:	61b9      	str	r1, [r7, #24]
 800c0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0aa:	4413      	add	r3, r2
 800c0ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00d      	beq.n	800c0d4 <put_fat+0xa4>
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	b25b      	sxtb	r3, r3
 800c0be:	f003 030f 	and.w	r3, r3, #15
 800c0c2:	b25a      	sxtb	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	011b      	lsls	r3, r3, #4
 800c0ca:	b25b      	sxtb	r3, r3
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	b25b      	sxtb	r3, r3
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	e001      	b.n	800c0d8 <put_fat+0xa8>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	0a5b      	lsrs	r3, r3, #9
 800c0ea:	4413      	add	r3, r2
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f7ff feaa 	bl	800be48 <move_window>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0f8:	7ffb      	ldrb	r3, [r7, #31]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d17a      	bne.n	800c1f4 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10a:	4413      	add	r3, r2
 800c10c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	2b00      	cmp	r3, #0
 800c116:	d003      	beq.n	800c120 <put_fat+0xf0>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	091b      	lsrs	r3, r3, #4
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	e00e      	b.n	800c13e <put_fat+0x10e>
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	b25b      	sxtb	r3, r3
 800c126:	f023 030f 	bic.w	r3, r3, #15
 800c12a:	b25a      	sxtb	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	0a1b      	lsrs	r3, r3, #8
 800c130:	b25b      	sxtb	r3, r3
 800c132:	f003 030f 	and.w	r3, r3, #15
 800c136:	b25b      	sxtb	r3, r3
 800c138:	4313      	orrs	r3, r2
 800c13a:	b25b      	sxtb	r3, r3
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2201      	movs	r2, #1
 800c146:	70da      	strb	r2, [r3, #3]
			break;
 800c148:	e059      	b.n	800c1fe <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	0a1b      	lsrs	r3, r3, #8
 800c152:	4413      	add	r3, r2
 800c154:	4619      	mov	r1, r3
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f7ff fe76 	bl	800be48 <move_window>
 800c15c:	4603      	mov	r3, r0
 800c15e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c160:	7ffb      	ldrb	r3, [r7, #31]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d148      	bne.n	800c1f8 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c174:	4413      	add	r3, r2
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	b292      	uxth	r2, r2
 800c17a:	4611      	mov	r1, r2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff fc5c 	bl	800ba3a <st_word>
			fs->wflag = 1;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2201      	movs	r2, #1
 800c186:	70da      	strb	r2, [r3, #3]
			break;
 800c188:	e039      	b.n	800c1fe <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	09db      	lsrs	r3, r3, #7
 800c192:	4413      	add	r3, r2
 800c194:	4619      	mov	r1, r3
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff fe56 	bl	800be48 <move_window>
 800c19c:	4603      	mov	r3, r0
 800c19e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1a0:	7ffb      	ldrb	r3, [r7, #31]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d12a      	bne.n	800c1fc <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c1ba:	4413      	add	r3, r2
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff fc19 	bl	800b9f4 <ld_dword>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c1c8:	4323      	orrs	r3, r4
 800c1ca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c1da:	4413      	add	r3, r2
 800c1dc:	6879      	ldr	r1, [r7, #4]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff fc46 	bl	800ba70 <st_dword>
			fs->wflag = 1;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	70da      	strb	r2, [r3, #3]
			break;
 800c1ea:	e008      	b.n	800c1fe <put_fat+0x1ce>
		}
	}
 800c1ec:	bf00      	nop
 800c1ee:	e006      	b.n	800c1fe <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c1f0:	bf00      	nop
 800c1f2:	e004      	b.n	800c1fe <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c1f4:	bf00      	nop
 800c1f6:	e002      	b.n	800c1fe <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c1f8:	bf00      	nop
 800c1fa:	e000      	b.n	800c1fe <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c1fc:	bf00      	nop
	return res;
 800c1fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3724      	adds	r7, #36	; 0x24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd90      	pop	{r4, r7, pc}

0800c208 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10d      	bne.n	800c23a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d004      	beq.n	800c234 <create_chain+0x2c>
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	69db      	ldr	r3, [r3, #28]
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	429a      	cmp	r2, r3
 800c232:	d31b      	bcc.n	800c26c <create_chain+0x64>
 800c234:	2301      	movs	r3, #1
 800c236:	61bb      	str	r3, [r7, #24]
 800c238:	e018      	b.n	800c26c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff fe4f 	bl	800bee0 <get_fat>
 800c242:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d801      	bhi.n	800c24e <create_chain+0x46>
 800c24a:	2301      	movs	r3, #1
 800c24c:	e070      	b.n	800c330 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c254:	d101      	bne.n	800c25a <create_chain+0x52>
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	e06a      	b.n	800c330 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	69db      	ldr	r3, [r3, #28]
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	429a      	cmp	r2, r3
 800c262:	d201      	bcs.n	800c268 <create_chain+0x60>
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	e063      	b.n	800c330 <create_chain+0x128>
		scl = clst;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	3301      	adds	r3, #1
 800c274:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	69fa      	ldr	r2, [r7, #28]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d307      	bcc.n	800c290 <create_chain+0x88>
				ncl = 2;
 800c280:	2302      	movs	r3, #2
 800c282:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c284:	69fa      	ldr	r2, [r7, #28]
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d901      	bls.n	800c290 <create_chain+0x88>
 800c28c:	2300      	movs	r3, #0
 800c28e:	e04f      	b.n	800c330 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c290:	69f9      	ldr	r1, [r7, #28]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f7ff fe24 	bl	800bee0 <get_fat>
 800c298:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00e      	beq.n	800c2be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d003      	beq.n	800c2ae <create_chain+0xa6>
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d101      	bne.n	800c2b2 <create_chain+0xaa>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	e03e      	b.n	800c330 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c2b2:	69fa      	ldr	r2, [r7, #28]
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d1da      	bne.n	800c270 <create_chain+0x68>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e038      	b.n	800c330 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c2be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c4:	69f9      	ldr	r1, [r7, #28]
 800c2c6:	6938      	ldr	r0, [r7, #16]
 800c2c8:	f7ff feb2 	bl	800c030 <put_fat>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c2d0:	7dfb      	ldrb	r3, [r7, #23]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d109      	bne.n	800c2ea <create_chain+0xe2>
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d006      	beq.n	800c2ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c2dc:	69fa      	ldr	r2, [r7, #28]
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6938      	ldr	r0, [r7, #16]
 800c2e2:	f7ff fea5 	bl	800c030 <put_fat>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d116      	bne.n	800c31e <create_chain+0x116>
		fs->last_clst = ncl;
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	699a      	ldr	r2, [r3, #24]
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	69db      	ldr	r3, [r3, #28]
 800c2fe:	3b02      	subs	r3, #2
 800c300:	429a      	cmp	r2, r3
 800c302:	d804      	bhi.n	800c30e <create_chain+0x106>
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	1e5a      	subs	r2, r3, #1
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	791b      	ldrb	r3, [r3, #4]
 800c312:	f043 0301 	orr.w	r3, r3, #1
 800c316:	b2da      	uxtb	r2, r3
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	711a      	strb	r2, [r3, #4]
 800c31c:	e007      	b.n	800c32e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c31e:	7dfb      	ldrb	r3, [r7, #23]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d102      	bne.n	800c32a <create_chain+0x122>
 800c324:	f04f 33ff 	mov.w	r3, #4294967295
 800c328:	e000      	b.n	800c32c <create_chain+0x124>
 800c32a:	2301      	movs	r3, #1
 800c32c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c32e:	69fb      	ldr	r3, [r7, #28]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3720      	adds	r7, #32
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c34e:	d204      	bcs.n	800c35a <dir_sdi+0x22>
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	f003 031f 	and.w	r3, r3, #31
 800c356:	2b00      	cmp	r3, #0
 800c358:	d001      	beq.n	800c35e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c35a:	2302      	movs	r3, #2
 800c35c:	e063      	b.n	800c426 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <dir_sdi+0x46>
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	2b02      	cmp	r3, #2
 800c376:	d902      	bls.n	800c37e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10c      	bne.n	800c39e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	095b      	lsrs	r3, r3, #5
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	8912      	ldrh	r2, [r2, #8]
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d301      	bcc.n	800c394 <dir_sdi+0x5c>
 800c390:	2302      	movs	r3, #2
 800c392:	e048      	b.n	800c426 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	61da      	str	r2, [r3, #28]
 800c39c:	e029      	b.n	800c3f2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	895b      	ldrh	r3, [r3, #10]
 800c3a2:	025b      	lsls	r3, r3, #9
 800c3a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3a6:	e019      	b.n	800c3dc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6979      	ldr	r1, [r7, #20]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7ff fd97 	bl	800bee0 <get_fat>
 800c3b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ba:	d101      	bne.n	800c3c0 <dir_sdi+0x88>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e032      	b.n	800c426 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d904      	bls.n	800c3d0 <dir_sdi+0x98>
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d301      	bcc.n	800c3d4 <dir_sdi+0x9c>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e028      	b.n	800c426 <dir_sdi+0xee>
			ofs -= csz;
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d2e1      	bcs.n	800c3a8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c3e4:	6979      	ldr	r1, [r7, #20]
 800c3e6:	6938      	ldr	r0, [r7, #16]
 800c3e8:	f7ff fd5b 	bl	800bea2 <clust2sect>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	697a      	ldr	r2, [r7, #20]
 800c3f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	69db      	ldr	r3, [r3, #28]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d101      	bne.n	800c404 <dir_sdi+0xcc>
 800c400:	2302      	movs	r3, #2
 800c402:	e010      	b.n	800c426 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	69da      	ldr	r2, [r3, #28]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	0a5b      	lsrs	r3, r3, #9
 800c40c:	441a      	add	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c41e:	441a      	add	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b086      	sub	sp, #24
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	3320      	adds	r3, #32
 800c444:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d003      	beq.n	800c456 <dir_next+0x28>
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c454:	d301      	bcc.n	800c45a <dir_next+0x2c>
 800c456:	2304      	movs	r3, #4
 800c458:	e0aa      	b.n	800c5b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c460:	2b00      	cmp	r3, #0
 800c462:	f040 8098 	bne.w	800c596 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	1c5a      	adds	r2, r3, #1
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10b      	bne.n	800c490 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	095b      	lsrs	r3, r3, #5
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	8912      	ldrh	r2, [r2, #8]
 800c480:	4293      	cmp	r3, r2
 800c482:	f0c0 8088 	bcc.w	800c596 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	61da      	str	r2, [r3, #28]
 800c48c:	2304      	movs	r3, #4
 800c48e:	e08f      	b.n	800c5b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	0a5b      	lsrs	r3, r3, #9
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	8952      	ldrh	r2, [r2, #10]
 800c498:	3a01      	subs	r2, #1
 800c49a:	4013      	ands	r3, r2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d17a      	bne.n	800c596 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	f7ff fd19 	bl	800bee0 <get_fat>
 800c4ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d801      	bhi.n	800c4ba <dir_next+0x8c>
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	e07a      	b.n	800c5b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c0:	d101      	bne.n	800c4c6 <dir_next+0x98>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e074      	b.n	800c5b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d358      	bcc.n	800c582 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d104      	bne.n	800c4e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	61da      	str	r2, [r3, #28]
 800c4dc:	2304      	movs	r3, #4
 800c4de:	e067      	b.n	800c5b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	f7ff fe8d 	bl	800c208 <create_chain>
 800c4ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <dir_next+0xcc>
 800c4f6:	2307      	movs	r3, #7
 800c4f8:	e05a      	b.n	800c5b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d101      	bne.n	800c504 <dir_next+0xd6>
 800c500:	2302      	movs	r3, #2
 800c502:	e055      	b.n	800c5b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c50a:	d101      	bne.n	800c510 <dir_next+0xe2>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e04f      	b.n	800c5b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f7ff fc55 	bl	800bdc0 <sync_window>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d001      	beq.n	800c520 <dir_next+0xf2>
 800c51c:	2301      	movs	r3, #1
 800c51e:	e047      	b.n	800c5b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	3338      	adds	r3, #56	; 0x38
 800c524:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c528:	2100      	movs	r1, #0
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7ff facc 	bl	800bac8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c530:	2300      	movs	r3, #0
 800c532:	613b      	str	r3, [r7, #16]
 800c534:	6979      	ldr	r1, [r7, #20]
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7ff fcb3 	bl	800bea2 <clust2sect>
 800c53c:	4602      	mov	r2, r0
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	635a      	str	r2, [r3, #52]	; 0x34
 800c542:	e012      	b.n	800c56a <dir_next+0x13c>
						fs->wflag = 1;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2201      	movs	r2, #1
 800c548:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f7ff fc38 	bl	800bdc0 <sync_window>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d001      	beq.n	800c55a <dir_next+0x12c>
 800c556:	2301      	movs	r3, #1
 800c558:	e02a      	b.n	800c5b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	3301      	adds	r3, #1
 800c55e:	613b      	str	r3, [r7, #16]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c564:	1c5a      	adds	r2, r3, #1
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	635a      	str	r2, [r3, #52]	; 0x34
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	895b      	ldrh	r3, [r3, #10]
 800c56e:	461a      	mov	r2, r3
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	4293      	cmp	r3, r2
 800c574:	d3e6      	bcc.n	800c544 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	1ad2      	subs	r2, r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c588:	6979      	ldr	r1, [r7, #20]
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f7ff fc89 	bl	800bea2 <clust2sect>
 800c590:	4602      	mov	r2, r0
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a8:	441a      	add	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	331a      	adds	r3, #26
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7ff f9fc 	bl	800b9c4 <ld_word>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b03      	cmp	r3, #3
 800c5d6:	d109      	bne.n	800c5ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	3314      	adds	r3, #20
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7ff f9f1 	bl	800b9c4 <ld_word>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	041b      	lsls	r3, r3, #16
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c5f8:	b590      	push	{r4, r7, lr}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	331a      	adds	r3, #26
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff f9dc 	bl	800b9c4 <ld_word>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <cmp_lfn+0x1e>
 800c612:	2300      	movs	r3, #0
 800c614:	e059      	b.n	800c6ca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c61e:	1e5a      	subs	r2, r3, #1
 800c620:	4613      	mov	r3, r2
 800c622:	005b      	lsls	r3, r3, #1
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c62c:	2301      	movs	r3, #1
 800c62e:	81fb      	strh	r3, [r7, #14]
 800c630:	2300      	movs	r3, #0
 800c632:	613b      	str	r3, [r7, #16]
 800c634:	e033      	b.n	800c69e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c636:	4a27      	ldr	r2, [pc, #156]	; (800c6d4 <cmp_lfn+0xdc>)
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	4413      	add	r3, r2
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	4413      	add	r3, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f7ff f9bd 	bl	800b9c4 <ld_word>
 800c64a:	4603      	mov	r3, r0
 800c64c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c64e:	89fb      	ldrh	r3, [r7, #14]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d01a      	beq.n	800c68a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	2bfe      	cmp	r3, #254	; 0xfe
 800c658:	d812      	bhi.n	800c680 <cmp_lfn+0x88>
 800c65a:	89bb      	ldrh	r3, [r7, #12]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f001 fad5 	bl	800dc0c <ff_wtoupper>
 800c662:	4603      	mov	r3, r0
 800c664:	461c      	mov	r4, r3
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	1c5a      	adds	r2, r3, #1
 800c66a:	617a      	str	r2, [r7, #20]
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	4413      	add	r3, r2
 800c672:	881b      	ldrh	r3, [r3, #0]
 800c674:	4618      	mov	r0, r3
 800c676:	f001 fac9 	bl	800dc0c <ff_wtoupper>
 800c67a:	4603      	mov	r3, r0
 800c67c:	429c      	cmp	r4, r3
 800c67e:	d001      	beq.n	800c684 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c680:	2300      	movs	r3, #0
 800c682:	e022      	b.n	800c6ca <cmp_lfn+0xd2>
			}
			wc = uc;
 800c684:	89bb      	ldrh	r3, [r7, #12]
 800c686:	81fb      	strh	r3, [r7, #14]
 800c688:	e006      	b.n	800c698 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c68a:	89bb      	ldrh	r3, [r7, #12]
 800c68c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c690:	4293      	cmp	r3, r2
 800c692:	d001      	beq.n	800c698 <cmp_lfn+0xa0>
 800c694:	2300      	movs	r3, #0
 800c696:	e018      	b.n	800c6ca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	3301      	adds	r3, #1
 800c69c:	613b      	str	r3, [r7, #16]
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	2b0c      	cmp	r3, #12
 800c6a2:	d9c8      	bls.n	800c636 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00b      	beq.n	800c6c8 <cmp_lfn+0xd0>
 800c6b0:	89fb      	ldrh	r3, [r7, #14]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d008      	beq.n	800c6c8 <cmp_lfn+0xd0>
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	005b      	lsls	r3, r3, #1
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	4413      	add	r3, r2
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <cmp_lfn+0xd0>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e000      	b.n	800c6ca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c6c8:	2301      	movs	r3, #1
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	371c      	adds	r7, #28
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd90      	pop	{r4, r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	08013ba8 	.word	0x08013ba8

0800c6d8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	331a      	adds	r3, #26
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff f96c 	bl	800b9c4 <ld_word>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <pick_lfn+0x1e>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e04d      	b.n	800c792 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6fe:	1e5a      	subs	r2, r3, #1
 800c700:	4613      	mov	r3, r2
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	4413      	add	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c70c:	2301      	movs	r3, #1
 800c70e:	81fb      	strh	r3, [r7, #14]
 800c710:	2300      	movs	r3, #0
 800c712:	613b      	str	r3, [r7, #16]
 800c714:	e028      	b.n	800c768 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c716:	4a21      	ldr	r2, [pc, #132]	; (800c79c <pick_lfn+0xc4>)
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	4413      	add	r3, r2
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	4413      	add	r3, r2
 800c724:	4618      	mov	r0, r3
 800c726:	f7ff f94d 	bl	800b9c4 <ld_word>
 800c72a:	4603      	mov	r3, r0
 800c72c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c72e:	89fb      	ldrh	r3, [r7, #14]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00f      	beq.n	800c754 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	2bfe      	cmp	r3, #254	; 0xfe
 800c738:	d901      	bls.n	800c73e <pick_lfn+0x66>
 800c73a:	2300      	movs	r3, #0
 800c73c:	e029      	b.n	800c792 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c73e:	89bb      	ldrh	r3, [r7, #12]
 800c740:	81fb      	strh	r3, [r7, #14]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	1c5a      	adds	r2, r3, #1
 800c746:	617a      	str	r2, [r7, #20]
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	4413      	add	r3, r2
 800c74e:	89fa      	ldrh	r2, [r7, #14]
 800c750:	801a      	strh	r2, [r3, #0]
 800c752:	e006      	b.n	800c762 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c754:	89bb      	ldrh	r3, [r7, #12]
 800c756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d001      	beq.n	800c762 <pick_lfn+0x8a>
 800c75e:	2300      	movs	r3, #0
 800c760:	e017      	b.n	800c792 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	3301      	adds	r3, #1
 800c766:	613b      	str	r3, [r7, #16]
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	2b0c      	cmp	r3, #12
 800c76c:	d9d3      	bls.n	800c716 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	2bfe      	cmp	r3, #254	; 0xfe
 800c77e:	d901      	bls.n	800c784 <pick_lfn+0xac>
 800c780:	2300      	movs	r3, #0
 800c782:	e006      	b.n	800c792 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	4413      	add	r3, r2
 800c78c:	2200      	movs	r2, #0
 800c78e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c790:	2301      	movs	r3, #1
}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	08013ba8 	.word	0x08013ba8

0800c7a0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c7ac:	230b      	movs	r3, #11
 800c7ae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	0852      	lsrs	r2, r2, #1
 800c7b6:	01db      	lsls	r3, r3, #7
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	1c59      	adds	r1, r3, #1
 800c7c0:	6079      	str	r1, [r7, #4]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	60bb      	str	r3, [r7, #8]
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1ed      	bne.n	800c7b0 <sum_sfn+0x10>
	return sum;
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b086      	sub	sp, #24
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c7ec:	2304      	movs	r3, #4
 800c7ee:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c7f6:	23ff      	movs	r3, #255	; 0xff
 800c7f8:	757b      	strb	r3, [r7, #21]
 800c7fa:	23ff      	movs	r3, #255	; 0xff
 800c7fc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c7fe:	e081      	b.n	800c904 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	69db      	ldr	r3, [r3, #28]
 800c804:	4619      	mov	r1, r3
 800c806:	6938      	ldr	r0, [r7, #16]
 800c808:	f7ff fb1e 	bl	800be48 <move_window>
 800c80c:	4603      	mov	r3, r0
 800c80e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c810:	7dfb      	ldrb	r3, [r7, #23]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d17c      	bne.n	800c910 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c81e:	7dbb      	ldrb	r3, [r7, #22]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c824:	2304      	movs	r3, #4
 800c826:	75fb      	strb	r3, [r7, #23]
 800c828:	e077      	b.n	800c91a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	330b      	adds	r3, #11
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c836:	73fb      	strb	r3, [r7, #15]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	7bfa      	ldrb	r2, [r7, #15]
 800c83c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c83e:	7dbb      	ldrb	r3, [r7, #22]
 800c840:	2be5      	cmp	r3, #229	; 0xe5
 800c842:	d00e      	beq.n	800c862 <dir_read+0x80>
 800c844:	7dbb      	ldrb	r3, [r7, #22]
 800c846:	2b2e      	cmp	r3, #46	; 0x2e
 800c848:	d00b      	beq.n	800c862 <dir_read+0x80>
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
 800c84c:	f023 0320 	bic.w	r3, r3, #32
 800c850:	2b08      	cmp	r3, #8
 800c852:	bf0c      	ite	eq
 800c854:	2301      	moveq	r3, #1
 800c856:	2300      	movne	r3, #0
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	461a      	mov	r2, r3
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	4293      	cmp	r3, r2
 800c860:	d002      	beq.n	800c868 <dir_read+0x86>
				ord = 0xFF;
 800c862:	23ff      	movs	r3, #255	; 0xff
 800c864:	757b      	strb	r3, [r7, #21]
 800c866:	e044      	b.n	800c8f2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c868:	7bfb      	ldrb	r3, [r7, #15]
 800c86a:	2b0f      	cmp	r3, #15
 800c86c:	d12f      	bne.n	800c8ce <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c86e:	7dbb      	ldrb	r3, [r7, #22]
 800c870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00d      	beq.n	800c894 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a1b      	ldr	r3, [r3, #32]
 800c87c:	7b5b      	ldrb	r3, [r3, #13]
 800c87e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c880:	7dbb      	ldrb	r3, [r7, #22]
 800c882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c886:	75bb      	strb	r3, [r7, #22]
 800c888:	7dbb      	ldrb	r3, [r7, #22]
 800c88a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	695a      	ldr	r2, [r3, #20]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c894:	7dba      	ldrb	r2, [r7, #22]
 800c896:	7d7b      	ldrb	r3, [r7, #21]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d115      	bne.n	800c8c8 <dir_read+0xe6>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a1b      	ldr	r3, [r3, #32]
 800c8a0:	330d      	adds	r3, #13
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	7d3a      	ldrb	r2, [r7, #20]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	d10e      	bne.n	800c8c8 <dir_read+0xe6>
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	68da      	ldr	r2, [r3, #12]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	f7ff ff0f 	bl	800c6d8 <pick_lfn>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d003      	beq.n	800c8c8 <dir_read+0xe6>
 800c8c0:	7d7b      	ldrb	r3, [r7, #21]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	e000      	b.n	800c8ca <dir_read+0xe8>
 800c8c8:	23ff      	movs	r3, #255	; 0xff
 800c8ca:	757b      	strb	r3, [r7, #21]
 800c8cc:	e011      	b.n	800c8f2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c8ce:	7d7b      	ldrb	r3, [r7, #21]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d109      	bne.n	800c8e8 <dir_read+0x106>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a1b      	ldr	r3, [r3, #32]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7ff ff61 	bl	800c7a0 <sum_sfn>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	7d3b      	ldrb	r3, [r7, #20]
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d015      	beq.n	800c914 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ee:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800c8f0:	e010      	b.n	800c914 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7ff fd9a 	bl	800c42e <dir_next>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c8fe:	7dfb      	ldrb	r3, [r7, #23]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d109      	bne.n	800c918 <dir_read+0x136>
	while (dp->sect) {
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	69db      	ldr	r3, [r3, #28]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f47f af79 	bne.w	800c800 <dir_read+0x1e>
 800c90e:	e004      	b.n	800c91a <dir_read+0x138>
		if (res != FR_OK) break;
 800c910:	bf00      	nop
 800c912:	e002      	b.n	800c91a <dir_read+0x138>
					break;
 800c914:	bf00      	nop
 800c916:	e000      	b.n	800c91a <dir_read+0x138>
		if (res != FR_OK) break;
 800c918:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d002      	beq.n	800c926 <dir_read+0x144>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	61da      	str	r2, [r3, #28]
	return res;
 800c926:	7dfb      	ldrb	r3, [r7, #23]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3718      	adds	r7, #24
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c93e:	2100      	movs	r1, #0
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff fcf9 	bl	800c338 <dir_sdi>
 800c946:	4603      	mov	r3, r0
 800c948:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <dir_find+0x24>
 800c950:	7dfb      	ldrb	r3, [r7, #23]
 800c952:	e0a9      	b.n	800caa8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c954:	23ff      	movs	r3, #255	; 0xff
 800c956:	753b      	strb	r3, [r7, #20]
 800c958:	7d3b      	ldrb	r3, [r7, #20]
 800c95a:	757b      	strb	r3, [r7, #21]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f04f 32ff 	mov.w	r2, #4294967295
 800c962:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	4619      	mov	r1, r3
 800c96a:	6938      	ldr	r0, [r7, #16]
 800c96c:	f7ff fa6c 	bl	800be48 <move_window>
 800c970:	4603      	mov	r3, r0
 800c972:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f040 8090 	bne.w	800ca9c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6a1b      	ldr	r3, [r3, #32]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c984:	7dbb      	ldrb	r3, [r7, #22]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d102      	bne.n	800c990 <dir_find+0x60>
 800c98a:	2304      	movs	r3, #4
 800c98c:	75fb      	strb	r3, [r7, #23]
 800c98e:	e08a      	b.n	800caa6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a1b      	ldr	r3, [r3, #32]
 800c994:	330b      	adds	r3, #11
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c99c:	73fb      	strb	r3, [r7, #15]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	7bfa      	ldrb	r2, [r7, #15]
 800c9a2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c9a4:	7dbb      	ldrb	r3, [r7, #22]
 800c9a6:	2be5      	cmp	r3, #229	; 0xe5
 800c9a8:	d007      	beq.n	800c9ba <dir_find+0x8a>
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
 800c9ac:	f003 0308 	and.w	r3, r3, #8
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d009      	beq.n	800c9c8 <dir_find+0x98>
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	2b0f      	cmp	r3, #15
 800c9b8:	d006      	beq.n	800c9c8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c9ba:	23ff      	movs	r3, #255	; 0xff
 800c9bc:	757b      	strb	r3, [r7, #21]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c4:	631a      	str	r2, [r3, #48]	; 0x30
 800c9c6:	e05e      	b.n	800ca86 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	2b0f      	cmp	r3, #15
 800c9cc:	d136      	bne.n	800ca3c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d154      	bne.n	800ca86 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c9dc:	7dbb      	ldrb	r3, [r7, #22]
 800c9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00d      	beq.n	800ca02 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	7b5b      	ldrb	r3, [r3, #13]
 800c9ec:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c9ee:	7dbb      	ldrb	r3, [r7, #22]
 800c9f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9f4:	75bb      	strb	r3, [r7, #22]
 800c9f6:	7dbb      	ldrb	r3, [r7, #22]
 800c9f8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	695a      	ldr	r2, [r3, #20]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca02:	7dba      	ldrb	r2, [r7, #22]
 800ca04:	7d7b      	ldrb	r3, [r7, #21]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d115      	bne.n	800ca36 <dir_find+0x106>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	330d      	adds	r3, #13
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	7d3a      	ldrb	r2, [r7, #20]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d10e      	bne.n	800ca36 <dir_find+0x106>
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	68da      	ldr	r2, [r3, #12]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a1b      	ldr	r3, [r3, #32]
 800ca20:	4619      	mov	r1, r3
 800ca22:	4610      	mov	r0, r2
 800ca24:	f7ff fde8 	bl	800c5f8 <cmp_lfn>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d003      	beq.n	800ca36 <dir_find+0x106>
 800ca2e:	7d7b      	ldrb	r3, [r7, #21]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	e000      	b.n	800ca38 <dir_find+0x108>
 800ca36:	23ff      	movs	r3, #255	; 0xff
 800ca38:	757b      	strb	r3, [r7, #21]
 800ca3a:	e024      	b.n	800ca86 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ca3c:	7d7b      	ldrb	r3, [r7, #21]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d109      	bne.n	800ca56 <dir_find+0x126>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff feaa 	bl	800c7a0 <sum_sfn>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	461a      	mov	r2, r3
 800ca50:	7d3b      	ldrb	r3, [r7, #20]
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d024      	beq.n	800caa0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca5c:	f003 0301 	and.w	r3, r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10a      	bne.n	800ca7a <dir_find+0x14a>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6a18      	ldr	r0, [r3, #32]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3324      	adds	r3, #36	; 0x24
 800ca6c:	220b      	movs	r2, #11
 800ca6e:	4619      	mov	r1, r3
 800ca70:	f7ff f845 	bl	800bafe <mem_cmp>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d014      	beq.n	800caa4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca7a:	23ff      	movs	r3, #255	; 0xff
 800ca7c:	757b      	strb	r3, [r7, #21]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f04f 32ff 	mov.w	r2, #4294967295
 800ca84:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ca86:	2100      	movs	r1, #0
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7ff fcd0 	bl	800c42e <dir_next>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f43f af65 	beq.w	800c964 <dir_find+0x34>
 800ca9a:	e004      	b.n	800caa6 <dir_find+0x176>
		if (res != FR_OK) break;
 800ca9c:	bf00      	nop
 800ca9e:	e002      	b.n	800caa6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800caa0:	bf00      	nop
 800caa2:	e000      	b.n	800caa6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800caa4:	bf00      	nop

	return res;
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2200      	movs	r2, #0
 800cac4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	69db      	ldr	r3, [r3, #28]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f000 80c9 	beq.w	800cc62 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad8:	d032      	beq.n	800cb40 <get_fileinfo+0x90>
			i = j = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	61bb      	str	r3, [r7, #24]
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cae2:	e01b      	b.n	800cb1c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cae4:	89fb      	ldrh	r3, [r7, #14]
 800cae6:	2100      	movs	r1, #0
 800cae8:	4618      	mov	r0, r3
 800caea:	f001 f853 	bl	800db94 <ff_convert>
 800caee:	4603      	mov	r3, r0
 800caf0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800caf2:	89fb      	ldrh	r3, [r7, #14]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d102      	bne.n	800cafe <get_fileinfo+0x4e>
 800caf8:	2300      	movs	r3, #0
 800cafa:	61fb      	str	r3, [r7, #28]
 800cafc:	e01a      	b.n	800cb34 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	2bfe      	cmp	r3, #254	; 0xfe
 800cb02:	d902      	bls.n	800cb0a <get_fileinfo+0x5a>
 800cb04:	2300      	movs	r3, #0
 800cb06:	61fb      	str	r3, [r7, #28]
 800cb08:	e014      	b.n	800cb34 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	1c5a      	adds	r2, r3, #1
 800cb0e:	61fa      	str	r2, [r7, #28]
 800cb10:	89fa      	ldrh	r2, [r7, #14]
 800cb12:	b2d1      	uxtb	r1, r2
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	4413      	add	r3, r2
 800cb18:	460a      	mov	r2, r1
 800cb1a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	68da      	ldr	r2, [r3, #12]
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	1c59      	adds	r1, r3, #1
 800cb24:	61b9      	str	r1, [r7, #24]
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	4413      	add	r3, r2
 800cb2a:	881b      	ldrh	r3, [r3, #0]
 800cb2c:	81fb      	strh	r3, [r7, #14]
 800cb2e:	89fb      	ldrh	r3, [r7, #14]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1d7      	bne.n	800cae4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	4413      	add	r3, r2
 800cb3a:	3316      	adds	r3, #22
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cb40:	2300      	movs	r3, #0
 800cb42:	61bb      	str	r3, [r7, #24]
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cb48:	683a      	ldr	r2, [r7, #0]
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	3316      	adds	r3, #22
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cb54:	e04c      	b.n	800cbf0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1a      	ldr	r2, [r3, #32]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	1c59      	adds	r1, r3, #1
 800cb5e:	61f9      	str	r1, [r7, #28]
 800cb60:	4413      	add	r3, r2
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cb66:	7dfb      	ldrb	r3, [r7, #23]
 800cb68:	2b20      	cmp	r3, #32
 800cb6a:	d100      	bne.n	800cb6e <get_fileinfo+0xbe>
 800cb6c:	e040      	b.n	800cbf0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cb6e:	7dfb      	ldrb	r3, [r7, #23]
 800cb70:	2b05      	cmp	r3, #5
 800cb72:	d101      	bne.n	800cb78 <get_fileinfo+0xc8>
 800cb74:	23e5      	movs	r3, #229	; 0xe5
 800cb76:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	2b09      	cmp	r3, #9
 800cb7c:	d10f      	bne.n	800cb9e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800cb7e:	89bb      	ldrh	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d105      	bne.n	800cb90 <get_fileinfo+0xe0>
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	4413      	add	r3, r2
 800cb8a:	3316      	adds	r3, #22
 800cb8c:	222e      	movs	r2, #46	; 0x2e
 800cb8e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	1c5a      	adds	r2, r3, #1
 800cb94:	61ba      	str	r2, [r7, #24]
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	4413      	add	r3, r2
 800cb9a:	222e      	movs	r2, #46	; 0x2e
 800cb9c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	4413      	add	r3, r2
 800cba4:	3309      	adds	r3, #9
 800cba6:	7dfa      	ldrb	r2, [r7, #23]
 800cba8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cbaa:	89bb      	ldrh	r3, [r7, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d11c      	bne.n	800cbea <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	2b40      	cmp	r3, #64	; 0x40
 800cbb4:	d913      	bls.n	800cbde <get_fileinfo+0x12e>
 800cbb6:	7dfb      	ldrb	r3, [r7, #23]
 800cbb8:	2b5a      	cmp	r3, #90	; 0x5a
 800cbba:	d810      	bhi.n	800cbde <get_fileinfo+0x12e>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	330c      	adds	r3, #12
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	2b08      	cmp	r3, #8
 800cbca:	d901      	bls.n	800cbd0 <get_fileinfo+0x120>
 800cbcc:	2310      	movs	r3, #16
 800cbce:	e000      	b.n	800cbd2 <get_fileinfo+0x122>
 800cbd0:	2308      	movs	r3, #8
 800cbd2:	4013      	ands	r3, r2
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800cbd8:	7dfb      	ldrb	r3, [r7, #23]
 800cbda:	3320      	adds	r3, #32
 800cbdc:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	3316      	adds	r3, #22
 800cbe6:	7dfa      	ldrb	r2, [r7, #23]
 800cbe8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	3301      	adds	r3, #1
 800cbee:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	2b0a      	cmp	r3, #10
 800cbf4:	d9af      	bls.n	800cb56 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800cbf6:	89bb      	ldrh	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10d      	bne.n	800cc18 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	4413      	add	r3, r2
 800cc02:	3316      	adds	r3, #22
 800cc04:	2200      	movs	r2, #0
 800cc06:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a1b      	ldr	r3, [r3, #32]
 800cc0c:	330c      	adds	r3, #12
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d101      	bne.n	800cc18 <get_fileinfo+0x168>
 800cc14:	2300      	movs	r3, #0
 800cc16:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cc18:	683a      	ldr	r2, [r7, #0]
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	3309      	adds	r3, #9
 800cc20:	2200      	movs	r2, #0
 800cc22:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a1b      	ldr	r3, [r3, #32]
 800cc28:	7ada      	ldrb	r2, [r3, #11]
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a1b      	ldr	r3, [r3, #32]
 800cc32:	331c      	adds	r3, #28
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7fe fedd 	bl	800b9f4 <ld_dword>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	3316      	adds	r3, #22
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fe fed4 	bl	800b9f4 <ld_dword>
 800cc4c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	80da      	strh	r2, [r3, #6]
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	0c1b      	lsrs	r3, r3, #16
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	809a      	strh	r2, [r3, #4]
 800cc60:	e000      	b.n	800cc64 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cc62:	bf00      	nop
}
 800cc64:	3720      	adds	r7, #32
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
	...

0800cc6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b08a      	sub	sp, #40	; 0x28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	613b      	str	r3, [r7, #16]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	2300      	movs	r3, #0
 800cc86:	617b      	str	r3, [r7, #20]
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	61ba      	str	r2, [r7, #24]
 800cc92:	693a      	ldr	r2, [r7, #16]
 800cc94:	4413      	add	r3, r2
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cc9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc9c:	2b1f      	cmp	r3, #31
 800cc9e:	d940      	bls.n	800cd22 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cca2:	2b2f      	cmp	r3, #47	; 0x2f
 800cca4:	d006      	beq.n	800ccb4 <create_name+0x48>
 800cca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cca8:	2b5c      	cmp	r3, #92	; 0x5c
 800ccaa:	d110      	bne.n	800ccce <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ccac:	e002      	b.n	800ccb4 <create_name+0x48>
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	693a      	ldr	r2, [r7, #16]
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	4413      	add	r3, r2
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b2f      	cmp	r3, #47	; 0x2f
 800ccbe:	d0f6      	beq.n	800ccae <create_name+0x42>
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	2b5c      	cmp	r3, #92	; 0x5c
 800ccca:	d0f0      	beq.n	800ccae <create_name+0x42>
			break;
 800cccc:	e02a      	b.n	800cd24 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2bfe      	cmp	r3, #254	; 0xfe
 800ccd2:	d901      	bls.n	800ccd8 <create_name+0x6c>
 800ccd4:	2306      	movs	r3, #6
 800ccd6:	e177      	b.n	800cfc8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ccd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ccde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cce0:	2101      	movs	r1, #1
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 ff56 	bl	800db94 <ff_convert>
 800cce8:	4603      	mov	r3, r0
 800ccea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ccec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <create_name+0x8a>
 800ccf2:	2306      	movs	r3, #6
 800ccf4:	e168      	b.n	800cfc8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ccf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccf8:	2b7f      	cmp	r3, #127	; 0x7f
 800ccfa:	d809      	bhi.n	800cd10 <create_name+0xa4>
 800ccfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccfe:	4619      	mov	r1, r3
 800cd00:	48b3      	ldr	r0, [pc, #716]	; (800cfd0 <create_name+0x364>)
 800cd02:	f7fe ff23 	bl	800bb4c <chk_chr>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <create_name+0xa4>
 800cd0c:	2306      	movs	r3, #6
 800cd0e:	e15b      	b.n	800cfc8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	617a      	str	r2, [r7, #20]
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd1e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cd20:	e7b4      	b.n	800cc8c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cd22:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cd24:	693a      	ldr	r2, [r7, #16]
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	441a      	add	r2, r3
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cd2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd30:	2b1f      	cmp	r3, #31
 800cd32:	d801      	bhi.n	800cd38 <create_name+0xcc>
 800cd34:	2304      	movs	r3, #4
 800cd36:	e000      	b.n	800cd3a <create_name+0xce>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cd3e:	e011      	b.n	800cd64 <create_name+0xf8>
		w = lfn[di - 1];
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd46:	4413      	add	r3, r2
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cd52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd54:	2b20      	cmp	r3, #32
 800cd56:	d002      	beq.n	800cd5e <create_name+0xf2>
 800cd58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd5a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd5c:	d106      	bne.n	800cd6c <create_name+0x100>
		di--;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	3b01      	subs	r3, #1
 800cd62:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1ea      	bne.n	800cd40 <create_name+0xd4>
 800cd6a:	e000      	b.n	800cd6e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cd6c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	4413      	add	r3, r2
 800cd76:	2200      	movs	r2, #0
 800cd78:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d101      	bne.n	800cd84 <create_name+0x118>
 800cd80:	2306      	movs	r3, #6
 800cd82:	e121      	b.n	800cfc8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	3324      	adds	r3, #36	; 0x24
 800cd88:	220b      	movs	r2, #11
 800cd8a:	2120      	movs	r1, #32
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fe fe9b 	bl	800bac8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cd92:	2300      	movs	r3, #0
 800cd94:	61bb      	str	r3, [r7, #24]
 800cd96:	e002      	b.n	800cd9e <create_name+0x132>
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	61bb      	str	r3, [r7, #24]
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	4413      	add	r3, r2
 800cda6:	881b      	ldrh	r3, [r3, #0]
 800cda8:	2b20      	cmp	r3, #32
 800cdaa:	d0f5      	beq.n	800cd98 <create_name+0x12c>
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	005b      	lsls	r3, r3, #1
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	881b      	ldrh	r3, [r3, #0]
 800cdb6:	2b2e      	cmp	r3, #46	; 0x2e
 800cdb8:	d0ee      	beq.n	800cd98 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d009      	beq.n	800cdd4 <create_name+0x168>
 800cdc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdc4:	f043 0303 	orr.w	r3, r3, #3
 800cdc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cdcc:	e002      	b.n	800cdd4 <create_name+0x168>
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	617b      	str	r3, [r7, #20]
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d009      	beq.n	800cdee <create_name+0x182>
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cde0:	4413      	add	r3, r2
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	4413      	add	r3, r2
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	2b2e      	cmp	r3, #46	; 0x2e
 800cdec:	d1ef      	bne.n	800cdce <create_name+0x162>

	i = b = 0; ni = 8;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	623b      	str	r3, [r7, #32]
 800cdf8:	2308      	movs	r3, #8
 800cdfa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	1c5a      	adds	r2, r3, #1
 800ce00:	61ba      	str	r2, [r7, #24]
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	4413      	add	r3, r2
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ce0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f000 8090 	beq.w	800cf34 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ce14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce16:	2b20      	cmp	r3, #32
 800ce18:	d006      	beq.n	800ce28 <create_name+0x1bc>
 800ce1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce1e:	d10a      	bne.n	800ce36 <create_name+0x1ca>
 800ce20:	69ba      	ldr	r2, [r7, #24]
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d006      	beq.n	800ce36 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ce28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce2c:	f043 0303 	orr.w	r3, r3, #3
 800ce30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce34:	e07d      	b.n	800cf32 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ce36:	6a3a      	ldr	r2, [r7, #32]
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d203      	bcs.n	800ce46 <create_name+0x1da>
 800ce3e:	69ba      	ldr	r2, [r7, #24]
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d123      	bne.n	800ce8e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	2b0b      	cmp	r3, #11
 800ce4a:	d106      	bne.n	800ce5a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ce4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce50:	f043 0303 	orr.w	r3, r3, #3
 800ce54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce58:	e06f      	b.n	800cf3a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ce5a:	69ba      	ldr	r2, [r7, #24]
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d005      	beq.n	800ce6e <create_name+0x202>
 800ce62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce66:	f043 0303 	orr.w	r3, r3, #3
 800ce6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ce6e:	69ba      	ldr	r2, [r7, #24]
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d860      	bhi.n	800cf38 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	61bb      	str	r3, [r7, #24]
 800ce7a:	2308      	movs	r3, #8
 800ce7c:	623b      	str	r3, [r7, #32]
 800ce7e:	230b      	movs	r3, #11
 800ce80:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ce82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce8c:	e051      	b.n	800cf32 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ce8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce90:	2b7f      	cmp	r3, #127	; 0x7f
 800ce92:	d914      	bls.n	800cebe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ce94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce96:	2100      	movs	r1, #0
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 fe7b 	bl	800db94 <ff_convert>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d004      	beq.n	800ceb2 <create_name+0x246>
 800cea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceaa:	3b80      	subs	r3, #128	; 0x80
 800ceac:	4a49      	ldr	r2, [pc, #292]	; (800cfd4 <create_name+0x368>)
 800ceae:	5cd3      	ldrb	r3, [r2, r3]
 800ceb0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ceb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceb6:	f043 0302 	orr.w	r3, r3, #2
 800ceba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d007      	beq.n	800ced4 <create_name+0x268>
 800cec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cec6:	4619      	mov	r1, r3
 800cec8:	4843      	ldr	r0, [pc, #268]	; (800cfd8 <create_name+0x36c>)
 800ceca:	f7fe fe3f 	bl	800bb4c <chk_chr>
 800cece:	4603      	mov	r3, r0
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d008      	beq.n	800cee6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ced4:	235f      	movs	r3, #95	; 0x5f
 800ced6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ced8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cedc:	f043 0303 	orr.w	r3, r3, #3
 800cee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cee4:	e01b      	b.n	800cf1e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cee8:	2b40      	cmp	r3, #64	; 0x40
 800ceea:	d909      	bls.n	800cf00 <create_name+0x294>
 800ceec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceee:	2b5a      	cmp	r3, #90	; 0x5a
 800cef0:	d806      	bhi.n	800cf00 <create_name+0x294>
					b |= 2;
 800cef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cef6:	f043 0302 	orr.w	r3, r3, #2
 800cefa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cefe:	e00e      	b.n	800cf1e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cf00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf02:	2b60      	cmp	r3, #96	; 0x60
 800cf04:	d90b      	bls.n	800cf1e <create_name+0x2b2>
 800cf06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf08:	2b7a      	cmp	r3, #122	; 0x7a
 800cf0a:	d808      	bhi.n	800cf1e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cf0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf10:	f043 0301 	orr.w	r3, r3, #1
 800cf14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf1a:	3b20      	subs	r3, #32
 800cf1c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	1c5a      	adds	r2, r3, #1
 800cf22:	623a      	str	r2, [r7, #32]
 800cf24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf26:	b2d1      	uxtb	r1, r2
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	460a      	mov	r2, r1
 800cf2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cf32:	e763      	b.n	800cdfc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cf34:	bf00      	nop
 800cf36:	e000      	b.n	800cf3a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800cf38:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cf40:	2be5      	cmp	r3, #229	; 0xe5
 800cf42:	d103      	bne.n	800cf4c <create_name+0x2e0>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2205      	movs	r2, #5
 800cf48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	2b08      	cmp	r3, #8
 800cf50:	d104      	bne.n	800cf5c <create_name+0x2f0>
 800cf52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cf5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf60:	f003 030c 	and.w	r3, r3, #12
 800cf64:	2b0c      	cmp	r3, #12
 800cf66:	d005      	beq.n	800cf74 <create_name+0x308>
 800cf68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf6c:	f003 0303 	and.w	r3, r3, #3
 800cf70:	2b03      	cmp	r3, #3
 800cf72:	d105      	bne.n	800cf80 <create_name+0x314>
 800cf74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf78:	f043 0302 	orr.w	r3, r3, #2
 800cf7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf84:	f003 0302 	and.w	r3, r3, #2
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d117      	bne.n	800cfbc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cf8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf90:	f003 0303 	and.w	r3, r3, #3
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d105      	bne.n	800cfa4 <create_name+0x338>
 800cf98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf9c:	f043 0310 	orr.w	r3, r3, #16
 800cfa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cfa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfa8:	f003 030c 	and.w	r3, r3, #12
 800cfac:	2b04      	cmp	r3, #4
 800cfae:	d105      	bne.n	800cfbc <create_name+0x350>
 800cfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfb4:	f043 0308 	orr.w	r3, r3, #8
 800cfb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cfc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800cfc6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3728      	adds	r7, #40	; 0x28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	08011b78 	.word	0x08011b78
 800cfd4:	08013b28 	.word	0x08013b28
 800cfd8:	08011b84 	.word	0x08011b84

0800cfdc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cff0:	e002      	b.n	800cff8 <follow_path+0x1c>
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	603b      	str	r3, [r7, #0]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2b2f      	cmp	r3, #47	; 0x2f
 800cffe:	d0f8      	beq.n	800cff2 <follow_path+0x16>
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	2b5c      	cmp	r3, #92	; 0x5c
 800d006:	d0f4      	beq.n	800cff2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	2200      	movs	r2, #0
 800d00c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	2b1f      	cmp	r3, #31
 800d014:	d80a      	bhi.n	800d02c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2280      	movs	r2, #128	; 0x80
 800d01a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d01e:	2100      	movs	r1, #0
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff f989 	bl	800c338 <dir_sdi>
 800d026:	4603      	mov	r3, r0
 800d028:	75fb      	strb	r3, [r7, #23]
 800d02a:	e043      	b.n	800d0b4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d02c:	463b      	mov	r3, r7
 800d02e:	4619      	mov	r1, r3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff fe1b 	bl	800cc6c <create_name>
 800d036:	4603      	mov	r3, r0
 800d038:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d03a:	7dfb      	ldrb	r3, [r7, #23]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d134      	bne.n	800d0aa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f7ff fc75 	bl	800c930 <dir_find>
 800d046:	4603      	mov	r3, r0
 800d048:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d050:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d052:	7dfb      	ldrb	r3, [r7, #23]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00a      	beq.n	800d06e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d058:	7dfb      	ldrb	r3, [r7, #23]
 800d05a:	2b04      	cmp	r3, #4
 800d05c:	d127      	bne.n	800d0ae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d05e:	7afb      	ldrb	r3, [r7, #11]
 800d060:	f003 0304 	and.w	r3, r3, #4
 800d064:	2b00      	cmp	r3, #0
 800d066:	d122      	bne.n	800d0ae <follow_path+0xd2>
 800d068:	2305      	movs	r3, #5
 800d06a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d06c:	e01f      	b.n	800d0ae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d06e:	7afb      	ldrb	r3, [r7, #11]
 800d070:	f003 0304 	and.w	r3, r3, #4
 800d074:	2b00      	cmp	r3, #0
 800d076:	d11c      	bne.n	800d0b2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	799b      	ldrb	r3, [r3, #6]
 800d07c:	f003 0310 	and.w	r3, r3, #16
 800d080:	2b00      	cmp	r3, #0
 800d082:	d102      	bne.n	800d08a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d084:	2305      	movs	r3, #5
 800d086:	75fb      	strb	r3, [r7, #23]
 800d088:	e014      	b.n	800d0b4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	695b      	ldr	r3, [r3, #20]
 800d094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d098:	4413      	add	r3, r2
 800d09a:	4619      	mov	r1, r3
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff fa8b 	bl	800c5b8 <ld_clust>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d0a8:	e7c0      	b.n	800d02c <follow_path+0x50>
			if (res != FR_OK) break;
 800d0aa:	bf00      	nop
 800d0ac:	e002      	b.n	800d0b4 <follow_path+0xd8>
				break;
 800d0ae:	bf00      	nop
 800d0b0:	e000      	b.n	800d0b4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d0b2:	bf00      	nop
			}
		}
	}

	return res;
 800d0b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3718      	adds	r7, #24
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b087      	sub	sp, #28
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d031      	beq.n	800d138 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	617b      	str	r3, [r7, #20]
 800d0da:	e002      	b.n	800d0e2 <get_ldnumber+0x24>
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	617b      	str	r3, [r7, #20]
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	2b1f      	cmp	r3, #31
 800d0e8:	d903      	bls.n	800d0f2 <get_ldnumber+0x34>
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b3a      	cmp	r3, #58	; 0x3a
 800d0f0:	d1f4      	bne.n	800d0dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	2b3a      	cmp	r3, #58	; 0x3a
 800d0f8:	d11c      	bne.n	800d134 <get_ldnumber+0x76>
			tp = *path;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	1c5a      	adds	r2, r3, #1
 800d104:	60fa      	str	r2, [r7, #12]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	3b30      	subs	r3, #48	; 0x30
 800d10a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b09      	cmp	r3, #9
 800d110:	d80e      	bhi.n	800d130 <get_ldnumber+0x72>
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	429a      	cmp	r2, r3
 800d118:	d10a      	bne.n	800d130 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d807      	bhi.n	800d130 <get_ldnumber+0x72>
					vol = (int)i;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	3301      	adds	r3, #1
 800d128:	617b      	str	r3, [r7, #20]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	697a      	ldr	r2, [r7, #20]
 800d12e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	e002      	b.n	800d13a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d134:	2300      	movs	r3, #0
 800d136:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d138:	693b      	ldr	r3, [r7, #16]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	371c      	adds	r7, #28
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr
	...

0800d148 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	70da      	strb	r2, [r3, #3]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f04f 32ff 	mov.w	r2, #4294967295
 800d15e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d160:	6839      	ldr	r1, [r7, #0]
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7fe fe70 	bl	800be48 <move_window>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <check_fs+0x2a>
 800d16e:	2304      	movs	r3, #4
 800d170:	e038      	b.n	800d1e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	3338      	adds	r3, #56	; 0x38
 800d176:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fc22 	bl	800b9c4 <ld_word>
 800d180:	4603      	mov	r3, r0
 800d182:	461a      	mov	r2, r3
 800d184:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d188:	429a      	cmp	r2, r3
 800d18a:	d001      	beq.n	800d190 <check_fs+0x48>
 800d18c:	2303      	movs	r3, #3
 800d18e:	e029      	b.n	800d1e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d196:	2be9      	cmp	r3, #233	; 0xe9
 800d198:	d009      	beq.n	800d1ae <check_fs+0x66>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d1a0:	2beb      	cmp	r3, #235	; 0xeb
 800d1a2:	d11e      	bne.n	800d1e2 <check_fs+0x9a>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d1aa:	2b90      	cmp	r3, #144	; 0x90
 800d1ac:	d119      	bne.n	800d1e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	3338      	adds	r3, #56	; 0x38
 800d1b2:	3336      	adds	r3, #54	; 0x36
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fe fc1d 	bl	800b9f4 <ld_dword>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d1c0:	4a0a      	ldr	r2, [pc, #40]	; (800d1ec <check_fs+0xa4>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d101      	bne.n	800d1ca <check_fs+0x82>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e00c      	b.n	800d1e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	3338      	adds	r3, #56	; 0x38
 800d1ce:	3352      	adds	r3, #82	; 0x52
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fe fc0f 	bl	800b9f4 <ld_dword>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4a05      	ldr	r2, [pc, #20]	; (800d1f0 <check_fs+0xa8>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d101      	bne.n	800d1e2 <check_fs+0x9a>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e000      	b.n	800d1e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d1e2:	2302      	movs	r3, #2
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	00544146 	.word	0x00544146
 800d1f0:	33544146 	.word	0x33544146

0800d1f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b096      	sub	sp, #88	; 0x58
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	4613      	mov	r3, r2
 800d200:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f7ff ff58 	bl	800d0be <get_ldnumber>
 800d20e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d212:	2b00      	cmp	r3, #0
 800d214:	da01      	bge.n	800d21a <find_volume+0x26>
 800d216:	230b      	movs	r3, #11
 800d218:	e236      	b.n	800d688 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d21a:	4aac      	ldr	r2, [pc, #688]	; (800d4cc <find_volume+0x2d8>)
 800d21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d222:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <find_volume+0x3a>
 800d22a:	230c      	movs	r3, #12
 800d22c:	e22c      	b.n	800d688 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800d22e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d230:	f7fe fca7 	bl	800bb82 <lock_fs>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <find_volume+0x4a>
 800d23a:	230f      	movs	r3, #15
 800d23c:	e224      	b.n	800d688 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d242:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	f023 0301 	bic.w	r3, r3, #1
 800d24a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d01a      	beq.n	800d28a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	785b      	ldrb	r3, [r3, #1]
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe fb33 	bl	800b8c4 <disk_status>
 800d25e:	4603      	mov	r3, r0
 800d260:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d268:	f003 0301 	and.w	r3, r3, #1
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10c      	bne.n	800d28a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d007      	beq.n	800d286 <find_volume+0x92>
 800d276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d27a:	f003 0304 	and.w	r3, r3, #4
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d282:	230a      	movs	r3, #10
 800d284:	e200      	b.n	800d688 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800d286:	2300      	movs	r3, #0
 800d288:	e1fe      	b.n	800d688 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28c:	2200      	movs	r2, #0
 800d28e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d292:	b2da      	uxtb	r2, r3
 800d294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d296:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	785b      	ldrb	r3, [r3, #1]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe fb2b 	bl	800b8f8 <disk_initialize>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d2a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	e1e7      	b.n	800d688 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d2b8:	79fb      	ldrb	r3, [r7, #7]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d007      	beq.n	800d2ce <find_volume+0xda>
 800d2be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d2c2:	f003 0304 	and.w	r3, r3, #4
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d2ca:	230a      	movs	r3, #10
 800d2cc:	e1dc      	b.n	800d688 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d2d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d2d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2d6:	f7ff ff37 	bl	800d148 <check_fs>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d2e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d14b      	bne.n	800d380 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	643b      	str	r3, [r7, #64]	; 0x40
 800d2ec:	e01f      	b.n	800d32e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2f6:	011b      	lsls	r3, r3, #4
 800d2f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d2fc:	4413      	add	r3, r2
 800d2fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d302:	3304      	adds	r3, #4
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d006      	beq.n	800d318 <find_volume+0x124>
 800d30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30c:	3308      	adds	r3, #8
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fe fb70 	bl	800b9f4 <ld_dword>
 800d314:	4602      	mov	r2, r0
 800d316:	e000      	b.n	800d31a <find_volume+0x126>
 800d318:	2200      	movs	r2, #0
 800d31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d322:	440b      	add	r3, r1
 800d324:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d32a:	3301      	adds	r3, #1
 800d32c:	643b      	str	r3, [r7, #64]	; 0x40
 800d32e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d330:	2b03      	cmp	r3, #3
 800d332:	d9dc      	bls.n	800d2ee <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d334:	2300      	movs	r3, #0
 800d336:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d002      	beq.n	800d344 <find_volume+0x150>
 800d33e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d340:	3b01      	subs	r3, #1
 800d342:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d34c:	4413      	add	r3, r2
 800d34e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d352:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d356:	2b00      	cmp	r3, #0
 800d358:	d005      	beq.n	800d366 <find_volume+0x172>
 800d35a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d35c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d35e:	f7ff fef3 	bl	800d148 <check_fs>
 800d362:	4603      	mov	r3, r0
 800d364:	e000      	b.n	800d368 <find_volume+0x174>
 800d366:	2303      	movs	r3, #3
 800d368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d36c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d370:	2b01      	cmp	r3, #1
 800d372:	d905      	bls.n	800d380 <find_volume+0x18c>
 800d374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d376:	3301      	adds	r3, #1
 800d378:	643b      	str	r3, [r7, #64]	; 0x40
 800d37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37c:	2b03      	cmp	r3, #3
 800d37e:	d9e1      	bls.n	800d344 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d380:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d384:	2b04      	cmp	r3, #4
 800d386:	d101      	bne.n	800d38c <find_volume+0x198>
 800d388:	2301      	movs	r3, #1
 800d38a:	e17d      	b.n	800d688 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d38c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d390:	2b01      	cmp	r3, #1
 800d392:	d901      	bls.n	800d398 <find_volume+0x1a4>
 800d394:	230d      	movs	r3, #13
 800d396:	e177      	b.n	800d688 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39a:	3338      	adds	r3, #56	; 0x38
 800d39c:	330b      	adds	r3, #11
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fe fb10 	bl	800b9c4 <ld_word>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3aa:	d001      	beq.n	800d3b0 <find_volume+0x1bc>
 800d3ac:	230d      	movs	r3, #13
 800d3ae:	e16b      	b.n	800d688 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b2:	3338      	adds	r3, #56	; 0x38
 800d3b4:	3316      	adds	r3, #22
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fe fb04 	bl	800b9c4 <ld_word>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d106      	bne.n	800d3d4 <find_volume+0x1e0>
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c8:	3338      	adds	r3, #56	; 0x38
 800d3ca:	3324      	adds	r3, #36	; 0x24
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7fe fb11 	bl	800b9f4 <ld_dword>
 800d3d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d3d8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3dc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	789b      	ldrb	r3, [r3, #2]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d005      	beq.n	800d3f8 <find_volume+0x204>
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	789b      	ldrb	r3, [r3, #2]
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d001      	beq.n	800d3f8 <find_volume+0x204>
 800d3f4:	230d      	movs	r3, #13
 800d3f6:	e147      	b.n	800d688 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fa:	789b      	ldrb	r3, [r3, #2]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d400:	fb02 f303 	mul.w	r3, r2, r3
 800d404:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d410:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d414:	895b      	ldrh	r3, [r3, #10]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d008      	beq.n	800d42c <find_volume+0x238>
 800d41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41c:	895b      	ldrh	r3, [r3, #10]
 800d41e:	461a      	mov	r2, r3
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	895b      	ldrh	r3, [r3, #10]
 800d424:	3b01      	subs	r3, #1
 800d426:	4013      	ands	r3, r2
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <find_volume+0x23c>
 800d42c:	230d      	movs	r3, #13
 800d42e:	e12b      	b.n	800d688 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	3338      	adds	r3, #56	; 0x38
 800d434:	3311      	adds	r3, #17
 800d436:	4618      	mov	r0, r3
 800d438:	f7fe fac4 	bl	800b9c4 <ld_word>
 800d43c:	4603      	mov	r3, r0
 800d43e:	461a      	mov	r2, r3
 800d440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d442:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d446:	891b      	ldrh	r3, [r3, #8]
 800d448:	f003 030f 	and.w	r3, r3, #15
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <find_volume+0x262>
 800d452:	230d      	movs	r3, #13
 800d454:	e118      	b.n	800d688 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d458:	3338      	adds	r3, #56	; 0x38
 800d45a:	3313      	adds	r3, #19
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fe fab1 	bl	800b9c4 <ld_word>
 800d462:	4603      	mov	r3, r0
 800d464:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d106      	bne.n	800d47a <find_volume+0x286>
 800d46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46e:	3338      	adds	r3, #56	; 0x38
 800d470:	3320      	adds	r3, #32
 800d472:	4618      	mov	r0, r3
 800d474:	f7fe fabe 	bl	800b9f4 <ld_dword>
 800d478:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47c:	3338      	adds	r3, #56	; 0x38
 800d47e:	330e      	adds	r3, #14
 800d480:	4618      	mov	r0, r3
 800d482:	f7fe fa9f 	bl	800b9c4 <ld_word>
 800d486:	4603      	mov	r3, r0
 800d488:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d48a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d101      	bne.n	800d494 <find_volume+0x2a0>
 800d490:	230d      	movs	r3, #13
 800d492:	e0f9      	b.n	800d688 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d494:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d498:	4413      	add	r3, r2
 800d49a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d49c:	8912      	ldrh	r2, [r2, #8]
 800d49e:	0912      	lsrs	r2, r2, #4
 800d4a0:	b292      	uxth	r2, r2
 800d4a2:	4413      	add	r3, r2
 800d4a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d4a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d201      	bcs.n	800d4b2 <find_volume+0x2be>
 800d4ae:	230d      	movs	r3, #13
 800d4b0:	e0ea      	b.n	800d688 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d4b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4ba:	8952      	ldrh	r2, [r2, #10]
 800d4bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d103      	bne.n	800d4d0 <find_volume+0x2dc>
 800d4c8:	230d      	movs	r3, #13
 800d4ca:	e0dd      	b.n	800d688 <find_volume+0x494>
 800d4cc:	2000076c 	.word	0x2000076c
		fmt = FS_FAT32;
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d802      	bhi.n	800d4e6 <find_volume+0x2f2>
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d802      	bhi.n	800d4f6 <find_volume+0x302>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f8:	1c9a      	adds	r2, r3, #2
 800d4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d500:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d502:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d504:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d508:	441a      	add	r2, r3
 800d50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d50e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	441a      	add	r2, r3
 800d514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d516:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d51c:	2b03      	cmp	r3, #3
 800d51e:	d11e      	bne.n	800d55e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	3338      	adds	r3, #56	; 0x38
 800d524:	332a      	adds	r3, #42	; 0x2a
 800d526:	4618      	mov	r0, r3
 800d528:	f7fe fa4c 	bl	800b9c4 <ld_word>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <find_volume+0x342>
 800d532:	230d      	movs	r3, #13
 800d534:	e0a8      	b.n	800d688 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d538:	891b      	ldrh	r3, [r3, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d001      	beq.n	800d542 <find_volume+0x34e>
 800d53e:	230d      	movs	r3, #13
 800d540:	e0a2      	b.n	800d688 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	3338      	adds	r3, #56	; 0x38
 800d546:	332c      	adds	r3, #44	; 0x2c
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fa53 	bl	800b9f4 <ld_dword>
 800d54e:	4602      	mov	r2, r0
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d556:	69db      	ldr	r3, [r3, #28]
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	647b      	str	r3, [r7, #68]	; 0x44
 800d55c:	e01f      	b.n	800d59e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d560:	891b      	ldrh	r3, [r3, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d101      	bne.n	800d56a <find_volume+0x376>
 800d566:	230d      	movs	r3, #13
 800d568:	e08e      	b.n	800d688 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d570:	441a      	add	r2, r3
 800d572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d574:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d576:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	d103      	bne.n	800d586 <find_volume+0x392>
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	69db      	ldr	r3, [r3, #28]
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	e00a      	b.n	800d59c <find_volume+0x3a8>
 800d586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d588:	69da      	ldr	r2, [r3, #28]
 800d58a:	4613      	mov	r3, r2
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	4413      	add	r3, r2
 800d590:	085a      	lsrs	r2, r3, #1
 800d592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d594:	69db      	ldr	r3, [r3, #28]
 800d596:	f003 0301 	and.w	r3, r3, #1
 800d59a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d59c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a0:	6a1a      	ldr	r2, [r3, #32]
 800d5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d5a8:	0a5b      	lsrs	r3, r3, #9
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d201      	bcs.n	800d5b2 <find_volume+0x3be>
 800d5ae:	230d      	movs	r3, #13
 800d5b0:	e06a      	b.n	800d688 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b8:	619a      	str	r2, [r3, #24]
 800d5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5bc:	699a      	ldr	r2, [r3, #24]
 800d5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c4:	2280      	movs	r2, #128	; 0x80
 800d5c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d5c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d149      	bne.n	800d664 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	3338      	adds	r3, #56	; 0x38
 800d5d4:	3330      	adds	r3, #48	; 0x30
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe f9f4 	bl	800b9c4 <ld_word>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d140      	bne.n	800d664 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d5e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5ea:	f7fe fc2d 	bl	800be48 <move_window>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d137      	bne.n	800d664 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fc:	3338      	adds	r3, #56	; 0x38
 800d5fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe f9de 	bl	800b9c4 <ld_word>
 800d608:	4603      	mov	r3, r0
 800d60a:	461a      	mov	r2, r3
 800d60c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d610:	429a      	cmp	r2, r3
 800d612:	d127      	bne.n	800d664 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d616:	3338      	adds	r3, #56	; 0x38
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe f9eb 	bl	800b9f4 <ld_dword>
 800d61e:	4603      	mov	r3, r0
 800d620:	4a1b      	ldr	r2, [pc, #108]	; (800d690 <find_volume+0x49c>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d11e      	bne.n	800d664 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	3338      	adds	r3, #56	; 0x38
 800d62a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fe f9e0 	bl	800b9f4 <ld_dword>
 800d634:	4603      	mov	r3, r0
 800d636:	4a17      	ldr	r2, [pc, #92]	; (800d694 <find_volume+0x4a0>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d113      	bne.n	800d664 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	3338      	adds	r3, #56	; 0x38
 800d640:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d644:	4618      	mov	r0, r3
 800d646:	f7fe f9d5 	bl	800b9f4 <ld_dword>
 800d64a:	4602      	mov	r2, r0
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d652:	3338      	adds	r3, #56	; 0x38
 800d654:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fe f9cb 	bl	800b9f4 <ld_dword>
 800d65e:	4602      	mov	r2, r0
 800d660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d662:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d666:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d66a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d66c:	4b0a      	ldr	r3, [pc, #40]	; (800d698 <find_volume+0x4a4>)
 800d66e:	881b      	ldrh	r3, [r3, #0]
 800d670:	3301      	adds	r3, #1
 800d672:	b29a      	uxth	r2, r3
 800d674:	4b08      	ldr	r3, [pc, #32]	; (800d698 <find_volume+0x4a4>)
 800d676:	801a      	strh	r2, [r3, #0]
 800d678:	4b07      	ldr	r3, [pc, #28]	; (800d698 <find_volume+0x4a4>)
 800d67a:	881a      	ldrh	r2, [r3, #0]
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d680:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d682:	f7fe fb79 	bl	800bd78 <clear_lock>
#endif
	return FR_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3758      	adds	r7, #88	; 0x58
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	41615252 	.word	0x41615252
 800d694:	61417272 	.word	0x61417272
 800d698:	20000774 	.word	0x20000774

0800d69c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d6a6:	2309      	movs	r3, #9
 800d6a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d02e      	beq.n	800d70e <validate+0x72>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d02a      	beq.n	800d70e <validate+0x72>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d025      	beq.n	800d70e <validate+0x72>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	889a      	ldrh	r2, [r3, #4]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	88db      	ldrh	r3, [r3, #6]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d11e      	bne.n	800d70e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe fa54 	bl	800bb82 <lock_fs>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d014      	beq.n	800d70a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	785b      	ldrb	r3, [r3, #1]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe f8ec 	bl	800b8c4 <disk_status>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	f003 0301 	and.w	r3, r3, #1
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d102      	bne.n	800d6fc <validate+0x60>
				res = FR_OK;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	73fb      	strb	r3, [r7, #15]
 800d6fa:	e008      	b.n	800d70e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2100      	movs	r1, #0
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fa53 	bl	800bbae <unlock_fs>
 800d708:	e001      	b.n	800d70e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d70a:	230f      	movs	r3, #15
 800d70c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d102      	bne.n	800d71a <validate+0x7e>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	e000      	b.n	800d71c <validate+0x80>
 800d71a:	2300      	movs	r3, #0
 800d71c:	683a      	ldr	r2, [r7, #0]
 800d71e:	6013      	str	r3, [r2, #0]
	return res;
 800d720:	7bfb      	ldrb	r3, [r7, #15]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
	...

0800d72c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b088      	sub	sp, #32
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	4613      	mov	r3, r2
 800d738:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d73e:	f107 0310 	add.w	r3, r7, #16
 800d742:	4618      	mov	r0, r3
 800d744:	f7ff fcbb 	bl	800d0be <get_ldnumber>
 800d748:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	da01      	bge.n	800d754 <f_mount+0x28>
 800d750:	230b      	movs	r3, #11
 800d752:	e048      	b.n	800d7e6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d754:	4a26      	ldr	r2, [pc, #152]	; (800d7f0 <f_mount+0xc4>)
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d75c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00f      	beq.n	800d784 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d764:	69b8      	ldr	r0, [r7, #24]
 800d766:	f7fe fb07 	bl	800bd78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	691b      	ldr	r3, [r3, #16]
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f9cd 	bl	800db0e <ff_del_syncobj>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <f_mount+0x52>
 800d77a:	2302      	movs	r3, #2
 800d77c:	e033      	b.n	800d7e6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	2200      	movs	r2, #0
 800d782:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00f      	beq.n	800d7aa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	b2da      	uxtb	r2, r3
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3310      	adds	r3, #16
 800d798:	4619      	mov	r1, r3
 800d79a:	4610      	mov	r0, r2
 800d79c:	f000 f997 	bl	800dace <ff_cre_syncobj>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <f_mount+0x7e>
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	e01d      	b.n	800d7e6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4910      	ldr	r1, [pc, #64]	; (800d7f0 <f_mount+0xc4>)
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <f_mount+0x94>
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d001      	beq.n	800d7c4 <f_mount+0x98>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	e010      	b.n	800d7e6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d7c4:	f107 010c 	add.w	r1, r7, #12
 800d7c8:	f107 0308 	add.w	r3, r7, #8
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7ff fd10 	bl	800d1f4 <find_volume>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	7dfa      	ldrb	r2, [r7, #23]
 800d7dc:	4611      	mov	r1, r2
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fe f9e5 	bl	800bbae <unlock_fs>
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3720      	adds	r7, #32
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	2000076c 	.word	0x2000076c

0800d7f4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <f_opendir+0x14>
 800d804:	2309      	movs	r3, #9
 800d806:	e07f      	b.n	800d908 <f_opendir+0x114>

	/* Get logical drive */
	obj = &dp->obj;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d80c:	f107 0108 	add.w	r1, r7, #8
 800d810:	463b      	mov	r3, r7
 800d812:	2200      	movs	r2, #0
 800d814:	4618      	mov	r0, r3
 800d816:	f7ff fced 	bl	800d1f4 <find_volume>
 800d81a:	4603      	mov	r3, r0
 800d81c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d81e:	7dfb      	ldrb	r3, [r7, #23]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d164      	bne.n	800d8ee <f_opendir+0xfa>
		obj->fs = fs;
 800d824:	68ba      	ldr	r2, [r7, #8]
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d82a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d82e:	f000 f99a 	bl	800db66 <ff_memalloc>
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <f_opendir+0x54>
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	2111      	movs	r1, #17
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fe f9b5 	bl	800bbae <unlock_fs>
 800d844:	2311      	movs	r3, #17
 800d846:	e05f      	b.n	800d908 <f_opendir+0x114>
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	68fa      	ldr	r2, [r7, #12]
 800d84c:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7ff fbc2 	bl	800cfdc <follow_path>
 800d858:	4603      	mov	r3, r0
 800d85a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d85c:	7dfb      	ldrb	r3, [r7, #23]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d13d      	bne.n	800d8de <f_opendir+0xea>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d868:	b25b      	sxtb	r3, r3
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	db12      	blt.n	800d894 <f_opendir+0xa0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	799b      	ldrb	r3, [r3, #6]
 800d872:	f003 0310 	and.w	r3, r3, #16
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00a      	beq.n	800d890 <f_opendir+0x9c>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6a1b      	ldr	r3, [r3, #32]
 800d880:	4619      	mov	r1, r3
 800d882:	4610      	mov	r0, r2
 800d884:	f7fe fe98 	bl	800c5b8 <ld_clust>
 800d888:	4602      	mov	r2, r0
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	609a      	str	r2, [r3, #8]
 800d88e:	e001      	b.n	800d894 <f_opendir+0xa0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d890:	2305      	movs	r3, #5
 800d892:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d894:	7dfb      	ldrb	r3, [r7, #23]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d121      	bne.n	800d8de <f_opendir+0xea>
				obj->id = fs->id;
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	88da      	ldrh	r2, [r3, #6]
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7fe fd47 	bl	800c338 <dir_sdi>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d114      	bne.n	800d8de <f_opendir+0xea>
					if (obj->sclust) {
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00d      	beq.n	800d8d8 <f_opendir+0xe4>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d8bc:	2100      	movs	r1, #0
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f7fe f990 	bl	800bbe4 <inc_lock>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d105      	bne.n	800d8de <f_opendir+0xea>
 800d8d2:	2312      	movs	r3, #18
 800d8d4:	75fb      	strb	r3, [r7, #23]
 800d8d6:	e002      	b.n	800d8de <f_opendir+0xea>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f000 f94d 	bl	800db7e <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d8e4:	7dfb      	ldrb	r3, [r7, #23]
 800d8e6:	2b04      	cmp	r3, #4
 800d8e8:	d101      	bne.n	800d8ee <f_opendir+0xfa>
 800d8ea:	2305      	movs	r3, #5
 800d8ec:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d8ee:	7dfb      	ldrb	r3, [r7, #23]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <f_opendir+0x106>
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	7dfa      	ldrb	r2, [r7, #23]
 800d8fe:	4611      	mov	r1, r2
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe f954 	bl	800bbae <unlock_fs>
 800d906:	7dfb      	ldrb	r3, [r7, #23]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f107 0208 	add.w	r2, r7, #8
 800d91e:	4611      	mov	r1, r2
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff febb 	bl	800d69c <validate>
 800d926:	4603      	mov	r3, r0
 800d928:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d115      	bne.n	800d95c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d006      	beq.n	800d946 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	691b      	ldr	r3, [r3, #16]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fe f9df 	bl	800bd00 <dec_lock>
 800d942:	4603      	mov	r3, r0
 800d944:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d946:	7bfb      	ldrb	r3, [r7, #15]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d102      	bne.n	800d952 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	2100      	movs	r1, #0
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe f929 	bl	800bbae <unlock_fs>
#endif
	}
	return res;
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b086      	sub	sp, #24
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
 800d96e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f107 020c 	add.w	r2, r7, #12
 800d976:	4611      	mov	r1, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f7ff fe8f 	bl	800d69c <validate>
 800d97e:	4603      	mov	r3, r0
 800d980:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d13b      	bne.n	800da00 <f_readdir+0x9a>
		if (!fno) {
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d106      	bne.n	800d99c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d98e:	2100      	movs	r1, #0
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f7fe fcd1 	bl	800c338 <dir_sdi>
 800d996:	4603      	mov	r3, r0
 800d998:	75fb      	strb	r3, [r7, #23]
 800d99a:	e031      	b.n	800da00 <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 800d99c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d9a0:	f000 f8e1 	bl	800db66 <ff_memalloc>
 800d9a4:	6138      	str	r0, [r7, #16]
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d106      	bne.n	800d9ba <f_readdir+0x54>
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2111      	movs	r1, #17
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fe f8fc 	bl	800bbae <unlock_fs>
 800d9b6:	2311      	movs	r3, #17
 800d9b8:	e029      	b.n	800da0e <f_readdir+0xa8>
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7fe ff0d 	bl	800c7e2 <dir_read>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d9cc:	7dfb      	ldrb	r3, [r7, #23]
 800d9ce:	2b04      	cmp	r3, #4
 800d9d0:	d101      	bne.n	800d9d6 <f_readdir+0x70>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800d9d6:	7dfb      	ldrb	r3, [r7, #23]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10e      	bne.n	800d9fa <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d9dc:	6839      	ldr	r1, [r7, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7ff f866 	bl	800cab0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7fe fd21 	bl	800c42e <dir_next>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d9f0:	7dfb      	ldrb	r3, [r7, #23]
 800d9f2:	2b04      	cmp	r3, #4
 800d9f4:	d101      	bne.n	800d9fa <f_readdir+0x94>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800d9fa:	6938      	ldr	r0, [r7, #16]
 800d9fc:	f000 f8bf 	bl	800db7e <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	7dfa      	ldrb	r2, [r7, #23]
 800da04:	4611      	mov	r1, r2
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe f8d1 	bl	800bbae <unlock_fs>
 800da0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3718      	adds	r7, #24
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
	...

0800da18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da18:	b480      	push	{r7}
 800da1a:	b087      	sub	sp, #28
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	4613      	mov	r3, r2
 800da24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da26:	2301      	movs	r3, #1
 800da28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da2a:	2300      	movs	r3, #0
 800da2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800da2e:	4b1f      	ldr	r3, [pc, #124]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da30:	7b9b      	ldrb	r3, [r3, #14]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	2b01      	cmp	r3, #1
 800da36:	d831      	bhi.n	800da9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da38:	4b1c      	ldr	r3, [pc, #112]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da3a:	7b9b      	ldrb	r3, [r3, #14]
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	461a      	mov	r2, r3
 800da40:	4b1a      	ldr	r3, [pc, #104]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da42:	2100      	movs	r1, #0
 800da44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800da46:	4b19      	ldr	r3, [pc, #100]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da48:	7b9b      	ldrb	r3, [r3, #14]
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	4a17      	ldr	r2, [pc, #92]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	4413      	add	r3, r2
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800da56:	4b15      	ldr	r3, [pc, #84]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da58:	7b9b      	ldrb	r3, [r3, #14]
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	461a      	mov	r2, r3
 800da5e:	4b13      	ldr	r3, [pc, #76]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da60:	4413      	add	r3, r2
 800da62:	79fa      	ldrb	r2, [r7, #7]
 800da64:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800da66:	4b11      	ldr	r3, [pc, #68]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da68:	7b9b      	ldrb	r3, [r3, #14]
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	1c5a      	adds	r2, r3, #1
 800da6e:	b2d1      	uxtb	r1, r2
 800da70:	4a0e      	ldr	r2, [pc, #56]	; (800daac <FATFS_LinkDriverEx+0x94>)
 800da72:	7391      	strb	r1, [r2, #14]
 800da74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da76:	7dbb      	ldrb	r3, [r7, #22]
 800da78:	3330      	adds	r3, #48	; 0x30
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	3301      	adds	r3, #1
 800da84:	223a      	movs	r2, #58	; 0x3a
 800da86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	3302      	adds	r3, #2
 800da8c:	222f      	movs	r2, #47	; 0x2f
 800da8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	3303      	adds	r3, #3
 800da94:	2200      	movs	r2, #0
 800da96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da98:	2300      	movs	r3, #0
 800da9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	371c      	adds	r7, #28
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	20000798 	.word	0x20000798

0800dab0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800daba:	2200      	movs	r2, #0
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff ffaa 	bl	800da18 <FATFS_LinkDriverEx>
 800dac4:	4603      	mov	r3, r0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b086      	sub	sp, #24
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	4603      	mov	r3, r0
 800dad6:	6039      	str	r1, [r7, #0]
 800dad8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800dada:	2300      	movs	r3, #0
 800dadc:	60fb      	str	r3, [r7, #12]
 800dade:	2300      	movs	r3, #0
 800dae0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800dae2:	f107 030c 	add.w	r3, r7, #12
 800dae6:	2101      	movs	r1, #1
 800dae8:	4618      	mov	r0, r3
 800daea:	f000 f9c6 	bl	800de7a <osSemaphoreCreate>
 800daee:	4602      	mov	r2, r0
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	bf14      	ite	ne
 800dafc:	2301      	movne	r3, #1
 800dafe:	2300      	moveq	r3, #0
 800db00:	b2db      	uxtb	r3, r3
 800db02:	617b      	str	r3, [r7, #20]

    return ret;
 800db04:	697b      	ldr	r3, [r7, #20]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3718      	adds	r7, #24
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b082      	sub	sp, #8
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 fa72 	bl	800e000 <osSemaphoreDelete>
#endif
    return 1;
 800db1c:	2301      	movs	r3, #1
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b084      	sub	sp, #16
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800db32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 f9de 	bl	800def8 <osSemaphoreWait>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d101      	bne.n	800db46 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800db42:	2301      	movs	r3, #1
 800db44:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800db46:	68fb      	ldr	r3, [r7, #12]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f000 fa1b 	bl	800df94 <osSemaphoreRelease>
#endif
}
 800db5e:	bf00      	nop
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b082      	sub	sp, #8
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f002 ff21 	bl	80109b6 <pvPortMalloc>
 800db74:	4603      	mov	r3, r0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b082      	sub	sp, #8
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f002 ff23 	bl	80109d2 <vPortFree>
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	4603      	mov	r3, r0
 800db9c:	6039      	str	r1, [r7, #0]
 800db9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dba0:	88fb      	ldrh	r3, [r7, #6]
 800dba2:	2b7f      	cmp	r3, #127	; 0x7f
 800dba4:	d802      	bhi.n	800dbac <ff_convert+0x18>
		c = chr;
 800dba6:	88fb      	ldrh	r3, [r7, #6]
 800dba8:	81fb      	strh	r3, [r7, #14]
 800dbaa:	e025      	b.n	800dbf8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00b      	beq.n	800dbca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dbb2:	88fb      	ldrh	r3, [r7, #6]
 800dbb4:	2bff      	cmp	r3, #255	; 0xff
 800dbb6:	d805      	bhi.n	800dbc4 <ff_convert+0x30>
 800dbb8:	88fb      	ldrh	r3, [r7, #6]
 800dbba:	3b80      	subs	r3, #128	; 0x80
 800dbbc:	4a12      	ldr	r2, [pc, #72]	; (800dc08 <ff_convert+0x74>)
 800dbbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbc2:	e000      	b.n	800dbc6 <ff_convert+0x32>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	81fb      	strh	r3, [r7, #14]
 800dbc8:	e016      	b.n	800dbf8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dbca:	2300      	movs	r3, #0
 800dbcc:	81fb      	strh	r3, [r7, #14]
 800dbce:	e009      	b.n	800dbe4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dbd0:	89fb      	ldrh	r3, [r7, #14]
 800dbd2:	4a0d      	ldr	r2, [pc, #52]	; (800dc08 <ff_convert+0x74>)
 800dbd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbd8:	88fa      	ldrh	r2, [r7, #6]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d006      	beq.n	800dbec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dbde:	89fb      	ldrh	r3, [r7, #14]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	81fb      	strh	r3, [r7, #14]
 800dbe4:	89fb      	ldrh	r3, [r7, #14]
 800dbe6:	2b7f      	cmp	r3, #127	; 0x7f
 800dbe8:	d9f2      	bls.n	800dbd0 <ff_convert+0x3c>
 800dbea:	e000      	b.n	800dbee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dbec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dbee:	89fb      	ldrh	r3, [r7, #14]
 800dbf0:	3380      	adds	r3, #128	; 0x80
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dbf8:	89fb      	ldrh	r3, [r7, #14]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	08013bb8 	.word	0x08013bb8

0800dc0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b087      	sub	sp, #28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dc16:	88fb      	ldrh	r3, [r7, #6]
 800dc18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc1c:	d201      	bcs.n	800dc22 <ff_wtoupper+0x16>
 800dc1e:	4b3e      	ldr	r3, [pc, #248]	; (800dd18 <ff_wtoupper+0x10c>)
 800dc20:	e000      	b.n	800dc24 <ff_wtoupper+0x18>
 800dc22:	4b3e      	ldr	r3, [pc, #248]	; (800dd1c <ff_wtoupper+0x110>)
 800dc24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	1c9a      	adds	r2, r3, #2
 800dc2a:	617a      	str	r2, [r7, #20]
 800dc2c:	881b      	ldrh	r3, [r3, #0]
 800dc2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800dc30:	8a7b      	ldrh	r3, [r7, #18]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d068      	beq.n	800dd08 <ff_wtoupper+0xfc>
 800dc36:	88fa      	ldrh	r2, [r7, #6]
 800dc38:	8a7b      	ldrh	r3, [r7, #18]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d364      	bcc.n	800dd08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	1c9a      	adds	r2, r3, #2
 800dc42:	617a      	str	r2, [r7, #20]
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	823b      	strh	r3, [r7, #16]
 800dc48:	8a3b      	ldrh	r3, [r7, #16]
 800dc4a:	0a1b      	lsrs	r3, r3, #8
 800dc4c:	81fb      	strh	r3, [r7, #14]
 800dc4e:	8a3b      	ldrh	r3, [r7, #16]
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dc54:	88fa      	ldrh	r2, [r7, #6]
 800dc56:	8a79      	ldrh	r1, [r7, #18]
 800dc58:	8a3b      	ldrh	r3, [r7, #16]
 800dc5a:	440b      	add	r3, r1
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	da49      	bge.n	800dcf4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800dc60:	89fb      	ldrh	r3, [r7, #14]
 800dc62:	2b08      	cmp	r3, #8
 800dc64:	d84f      	bhi.n	800dd06 <ff_wtoupper+0xfa>
 800dc66:	a201      	add	r2, pc, #4	; (adr r2, 800dc6c <ff_wtoupper+0x60>)
 800dc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6c:	0800dc91 	.word	0x0800dc91
 800dc70:	0800dca3 	.word	0x0800dca3
 800dc74:	0800dcb9 	.word	0x0800dcb9
 800dc78:	0800dcc1 	.word	0x0800dcc1
 800dc7c:	0800dcc9 	.word	0x0800dcc9
 800dc80:	0800dcd1 	.word	0x0800dcd1
 800dc84:	0800dcd9 	.word	0x0800dcd9
 800dc88:	0800dce1 	.word	0x0800dce1
 800dc8c:	0800dce9 	.word	0x0800dce9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dc90:	88fa      	ldrh	r2, [r7, #6]
 800dc92:	8a7b      	ldrh	r3, [r7, #18]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	697a      	ldr	r2, [r7, #20]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	881b      	ldrh	r3, [r3, #0]
 800dc9e:	80fb      	strh	r3, [r7, #6]
 800dca0:	e027      	b.n	800dcf2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dca2:	88fa      	ldrh	r2, [r7, #6]
 800dca4:	8a7b      	ldrh	r3, [r7, #18]
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	f003 0301 	and.w	r3, r3, #1
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	88fa      	ldrh	r2, [r7, #6]
 800dcb2:	1ad3      	subs	r3, r2, r3
 800dcb4:	80fb      	strh	r3, [r7, #6]
 800dcb6:	e01c      	b.n	800dcf2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dcb8:	88fb      	ldrh	r3, [r7, #6]
 800dcba:	3b10      	subs	r3, #16
 800dcbc:	80fb      	strh	r3, [r7, #6]
 800dcbe:	e018      	b.n	800dcf2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dcc0:	88fb      	ldrh	r3, [r7, #6]
 800dcc2:	3b20      	subs	r3, #32
 800dcc4:	80fb      	strh	r3, [r7, #6]
 800dcc6:	e014      	b.n	800dcf2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dcc8:	88fb      	ldrh	r3, [r7, #6]
 800dcca:	3b30      	subs	r3, #48	; 0x30
 800dccc:	80fb      	strh	r3, [r7, #6]
 800dcce:	e010      	b.n	800dcf2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dcd0:	88fb      	ldrh	r3, [r7, #6]
 800dcd2:	3b1a      	subs	r3, #26
 800dcd4:	80fb      	strh	r3, [r7, #6]
 800dcd6:	e00c      	b.n	800dcf2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dcd8:	88fb      	ldrh	r3, [r7, #6]
 800dcda:	3308      	adds	r3, #8
 800dcdc:	80fb      	strh	r3, [r7, #6]
 800dcde:	e008      	b.n	800dcf2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	3b50      	subs	r3, #80	; 0x50
 800dce4:	80fb      	strh	r3, [r7, #6]
 800dce6:	e004      	b.n	800dcf2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dce8:	88fb      	ldrh	r3, [r7, #6]
 800dcea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dcee:	80fb      	strh	r3, [r7, #6]
 800dcf0:	bf00      	nop
			}
			break;
 800dcf2:	e008      	b.n	800dd06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dcf4:	89fb      	ldrh	r3, [r7, #14]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d195      	bne.n	800dc26 <ff_wtoupper+0x1a>
 800dcfa:	8a3b      	ldrh	r3, [r7, #16]
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	697a      	ldr	r2, [r7, #20]
 800dd00:	4413      	add	r3, r2
 800dd02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dd04:	e78f      	b.n	800dc26 <ff_wtoupper+0x1a>
			break;
 800dd06:	bf00      	nop
	}

	return chr;
 800dd08:	88fb      	ldrh	r3, [r7, #6]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	371c      	adds	r7, #28
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	08013cb8 	.word	0x08013cb8
 800dd1c:	08013eac 	.word	0x08013eac

0800dd20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b085      	sub	sp, #20
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dd2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd32:	2b84      	cmp	r3, #132	; 0x84
 800dd34:	d005      	beq.n	800dd42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dd36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	3303      	adds	r3, #3
 800dd40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dd42:	68fb      	ldr	r3, [r7, #12]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd56:	f3ef 8305 	mrs	r3, IPSR
 800dd5a:	607b      	str	r3, [r7, #4]
  return(result);
 800dd5c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	bf14      	ite	ne
 800dd62:	2301      	movne	r3, #1
 800dd64:	2300      	moveq	r3, #0
 800dd66:	b2db      	uxtb	r3, r3
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dd78:	f001 fcb6 	bl	800f6e8 <vTaskStartScheduler>
  
  return osOK;
 800dd7c:	2300      	movs	r3, #0
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800dd86:	f002 f909 	bl	800ff9c <xTaskGetSchedulerState>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d101      	bne.n	800dd94 <osKernelRunning+0x12>
    return 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	e000      	b.n	800dd96 <osKernelRunning+0x14>
  else
    return 1;
 800dd94:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800dd9e:	f7ff ffd7 	bl	800dd50 <inHandlerMode>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d003      	beq.n	800ddb0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800dda8:	f001 fdbe 	bl	800f928 <xTaskGetTickCountFromISR>
 800ddac:	4603      	mov	r3, r0
 800ddae:	e002      	b.n	800ddb6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ddb0:	f001 fdaa 	bl	800f908 <xTaskGetTickCount>
 800ddb4:	4603      	mov	r3, r0
  }
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ddba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddbc:	b089      	sub	sp, #36	; 0x24
 800ddbe:	af04      	add	r7, sp, #16
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	695b      	ldr	r3, [r3, #20]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d020      	beq.n	800de0e <osThreadCreate+0x54>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d01c      	beq.n	800de0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	685c      	ldr	r4, [r3, #4]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681d      	ldr	r5, [r3, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	691e      	ldr	r6, [r3, #16]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7ff ff9a 	bl	800dd20 <makeFreeRtosPriority>
 800ddec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	695b      	ldr	r3, [r3, #20]
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddf6:	9202      	str	r2, [sp, #8]
 800ddf8:	9301      	str	r3, [sp, #4]
 800ddfa:	9100      	str	r1, [sp, #0]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	4632      	mov	r2, r6
 800de00:	4629      	mov	r1, r5
 800de02:	4620      	mov	r0, r4
 800de04:	f001 fa94 	bl	800f330 <xTaskCreateStatic>
 800de08:	4603      	mov	r3, r0
 800de0a:	60fb      	str	r3, [r7, #12]
 800de0c:	e01c      	b.n	800de48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	685c      	ldr	r4, [r3, #4]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800de1a:	b29e      	uxth	r6, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800de22:	4618      	mov	r0, r3
 800de24:	f7ff ff7c 	bl	800dd20 <makeFreeRtosPriority>
 800de28:	4602      	mov	r2, r0
 800de2a:	f107 030c 	add.w	r3, r7, #12
 800de2e:	9301      	str	r3, [sp, #4]
 800de30:	9200      	str	r2, [sp, #0]
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	4632      	mov	r2, r6
 800de36:	4629      	mov	r1, r5
 800de38:	4620      	mov	r0, r4
 800de3a:	f001 fadc 	bl	800f3f6 <xTaskCreate>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b01      	cmp	r3, #1
 800de42:	d001      	beq.n	800de48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800de44:	2300      	movs	r3, #0
 800de46:	e000      	b.n	800de4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800de48:	68fb      	ldr	r3, [r7, #12]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b084      	sub	sp, #16
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <osDelay+0x16>
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	e000      	b.n	800de6a <osDelay+0x18>
 800de68:	2301      	movs	r3, #1
 800de6a:	4618      	mov	r0, r3
 800de6c:	f001 fc06 	bl	800f67c <vTaskDelay>
  
  return osOK;
 800de70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b086      	sub	sp, #24
 800de7e:	af02      	add	r7, sp, #8
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d016      	beq.n	800deba <osSemaphoreCreate+0x40>
    if (count == 1) {
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d10a      	bne.n	800dea8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	2203      	movs	r2, #3
 800de98:	9200      	str	r2, [sp, #0]
 800de9a:	2200      	movs	r2, #0
 800de9c:	2100      	movs	r1, #0
 800de9e:	2001      	movs	r0, #1
 800dea0:	f000 fabc 	bl	800e41c <xQueueGenericCreateStatic>
 800dea4:	4603      	mov	r3, r0
 800dea6:	e023      	b.n	800def0 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800dea8:	6838      	ldr	r0, [r7, #0]
 800deaa:	6839      	ldr	r1, [r7, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	461a      	mov	r2, r3
 800deb2:	f000 fb96 	bl	800e5e2 <xQueueCreateCountingSemaphoreStatic>
 800deb6:	4603      	mov	r3, r0
 800deb8:	e01a      	b.n	800def0 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d110      	bne.n	800dee2 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800dec0:	2203      	movs	r2, #3
 800dec2:	2100      	movs	r1, #0
 800dec4:	2001      	movs	r0, #1
 800dec6:	f000 fb2b 	bl	800e520 <xQueueGenericCreate>
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d005      	beq.n	800dede <osSemaphoreCreate+0x64>
 800ded2:	2300      	movs	r3, #0
 800ded4:	2200      	movs	r2, #0
 800ded6:	2100      	movs	r1, #0
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f000 fbf5 	bl	800e6c8 <xQueueGenericSend>
      return sema;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	e006      	b.n	800def0 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	683a      	ldr	r2, [r7, #0]
 800dee6:	4611      	mov	r1, r2
 800dee8:	4618      	mov	r0, r3
 800deea:	f000 fbb5 	bl	800e658 <xQueueCreateCountingSemaphore>
 800deee:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800def0:	4618      	mov	r0, r3
 800def2:	3710      	adds	r7, #16
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800df02:	2300      	movs	r3, #0
 800df04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d101      	bne.n	800df10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800df0c:	2380      	movs	r3, #128	; 0x80
 800df0e:	e03a      	b.n	800df86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800df10:	2300      	movs	r3, #0
 800df12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df1a:	d103      	bne.n	800df24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800df1c:	f04f 33ff 	mov.w	r3, #4294967295
 800df20:	60fb      	str	r3, [r7, #12]
 800df22:	e009      	b.n	800df38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d006      	beq.n	800df38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <osSemaphoreWait+0x40>
      ticks = 1;
 800df34:	2301      	movs	r3, #1
 800df36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800df38:	f7ff ff0a 	bl	800dd50 <inHandlerMode>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d017      	beq.n	800df72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800df42:	f107 0308 	add.w	r3, r7, #8
 800df46:	461a      	mov	r2, r3
 800df48:	2100      	movs	r1, #0
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 fff2 	bl	800ef34 <xQueueReceiveFromISR>
 800df50:	4603      	mov	r3, r0
 800df52:	2b01      	cmp	r3, #1
 800df54:	d001      	beq.n	800df5a <osSemaphoreWait+0x62>
      return osErrorOS;
 800df56:	23ff      	movs	r3, #255	; 0xff
 800df58:	e015      	b.n	800df86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d011      	beq.n	800df84 <osSemaphoreWait+0x8c>
 800df60:	4b0b      	ldr	r3, [pc, #44]	; (800df90 <osSemaphoreWait+0x98>)
 800df62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	f3bf 8f6f 	isb	sy
 800df70:	e008      	b.n	800df84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800df72:	68f9      	ldr	r1, [r7, #12]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 fec9 	bl	800ed0c <xQueueSemaphoreTake>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d001      	beq.n	800df84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800df80:	23ff      	movs	r3, #255	; 0xff
 800df82:	e000      	b.n	800df86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	e000ed04 	.word	0xe000ed04

0800df94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800dfa4:	f7ff fed4 	bl	800dd50 <inHandlerMode>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d016      	beq.n	800dfdc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dfae:	f107 0308 	add.w	r3, r7, #8
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fd2d 	bl	800ea14 <xQueueGiveFromISR>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d001      	beq.n	800dfc4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800dfc0:	23ff      	movs	r3, #255	; 0xff
 800dfc2:	e017      	b.n	800dff4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d013      	beq.n	800dff2 <osSemaphoreRelease+0x5e>
 800dfca:	4b0c      	ldr	r3, [pc, #48]	; (800dffc <osSemaphoreRelease+0x68>)
 800dfcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfd0:	601a      	str	r2, [r3, #0]
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	e00a      	b.n	800dff2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800dfdc:	2300      	movs	r3, #0
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fb70 	bl	800e6c8 <xQueueGenericSend>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d001      	beq.n	800dff2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800dfee:	23ff      	movs	r3, #255	; 0xff
 800dff0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800dff2:	68fb      	ldr	r3, [r7, #12]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3710      	adds	r7, #16
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	e000ed04 	.word	0xe000ed04

0800e000 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e008:	f7ff fea2 	bl	800dd50 <inHandlerMode>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800e012:	2382      	movs	r3, #130	; 0x82
 800e014:	e003      	b.n	800e01e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f001 f812 	bl	800f040 <vQueueDelete>

  return osOK; 
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e026:	b590      	push	{r4, r7, lr}
 800e028:	b085      	sub	sp, #20
 800e02a:	af02      	add	r7, sp, #8
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d011      	beq.n	800e05c <osMessageCreate+0x36>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00d      	beq.n	800e05c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6859      	ldr	r1, [r3, #4]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689a      	ldr	r2, [r3, #8]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	2400      	movs	r4, #0
 800e052:	9400      	str	r4, [sp, #0]
 800e054:	f000 f9e2 	bl	800e41c <xQueueGenericCreateStatic>
 800e058:	4603      	mov	r3, r0
 800e05a:	e008      	b.n	800e06e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6818      	ldr	r0, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	4619      	mov	r1, r3
 800e068:	f000 fa5a 	bl	800e520 <xQueueGenericCreate>
 800e06c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e06e:	4618      	mov	r0, r3
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	bd90      	pop	{r4, r7, pc}
	...

0800e078 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e084:	2300      	movs	r3, #0
 800e086:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d101      	bne.n	800e096 <osMessagePut+0x1e>
    ticks = 1;
 800e092:	2301      	movs	r3, #1
 800e094:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e096:	f7ff fe5b 	bl	800dd50 <inHandlerMode>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d018      	beq.n	800e0d2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e0a0:	f107 0210 	add.w	r2, r7, #16
 800e0a4:	f107 0108 	add.w	r1, r7, #8
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f000 fc12 	bl	800e8d4 <xQueueGenericSendFromISR>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d001      	beq.n	800e0ba <osMessagePut+0x42>
      return osErrorOS;
 800e0b6:	23ff      	movs	r3, #255	; 0xff
 800e0b8:	e018      	b.n	800e0ec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d014      	beq.n	800e0ea <osMessagePut+0x72>
 800e0c0:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <osMessagePut+0x7c>)
 800e0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	e00b      	b.n	800e0ea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e0d2:	f107 0108 	add.w	r1, r7, #8
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f000 faf4 	bl	800e6c8 <xQueueGenericSend>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d001      	beq.n	800e0ea <osMessagePut+0x72>
      return osErrorOS;
 800e0e6:	23ff      	movs	r3, #255	; 0xff
 800e0e8:	e000      	b.n	800e0ec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	e000ed04 	.word	0xe000ed04

0800e0f8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e0f8:	b590      	push	{r4, r7, lr}
 800e0fa:	b08b      	sub	sp, #44	; 0x2c
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10a      	bne.n	800e128 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e112:	2380      	movs	r3, #128	; 0x80
 800e114:	617b      	str	r3, [r7, #20]
    return event;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	461c      	mov	r4, r3
 800e11a:	f107 0314 	add.w	r3, r7, #20
 800e11e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e126:	e054      	b.n	800e1d2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e128:	2300      	movs	r3, #0
 800e12a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e136:	d103      	bne.n	800e140 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e138:	f04f 33ff 	mov.w	r3, #4294967295
 800e13c:	627b      	str	r3, [r7, #36]	; 0x24
 800e13e:	e009      	b.n	800e154 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d006      	beq.n	800e154 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d101      	bne.n	800e154 <osMessageGet+0x5c>
      ticks = 1;
 800e150:	2301      	movs	r3, #1
 800e152:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e154:	f7ff fdfc 	bl	800dd50 <inHandlerMode>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d01c      	beq.n	800e198 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e15e:	f107 0220 	add.w	r2, r7, #32
 800e162:	f107 0314 	add.w	r3, r7, #20
 800e166:	3304      	adds	r3, #4
 800e168:	4619      	mov	r1, r3
 800e16a:	68b8      	ldr	r0, [r7, #8]
 800e16c:	f000 fee2 	bl	800ef34 <xQueueReceiveFromISR>
 800e170:	4603      	mov	r3, r0
 800e172:	2b01      	cmp	r3, #1
 800e174:	d102      	bne.n	800e17c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e176:	2310      	movs	r3, #16
 800e178:	617b      	str	r3, [r7, #20]
 800e17a:	e001      	b.n	800e180 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d01d      	beq.n	800e1c2 <osMessageGet+0xca>
 800e186:	4b15      	ldr	r3, [pc, #84]	; (800e1dc <osMessageGet+0xe4>)
 800e188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e18c:	601a      	str	r2, [r3, #0]
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	e014      	b.n	800e1c2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e198:	f107 0314 	add.w	r3, r7, #20
 800e19c:	3304      	adds	r3, #4
 800e19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	68b8      	ldr	r0, [r7, #8]
 800e1a4:	f000 fccc 	bl	800eb40 <xQueueReceive>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d102      	bne.n	800e1b4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e1ae:	2310      	movs	r3, #16
 800e1b0:	617b      	str	r3, [r7, #20]
 800e1b2:	e006      	b.n	800e1c2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <osMessageGet+0xc6>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	e000      	b.n	800e1c0 <osMessageGet+0xc8>
 800e1be:	2340      	movs	r3, #64	; 0x40
 800e1c0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	461c      	mov	r4, r3
 800e1c6:	f107 0314 	add.w	r3, r7, #20
 800e1ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	372c      	adds	r7, #44	; 0x2c
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd90      	pop	{r4, r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	e000ed04 	.word	0xe000ed04

0800e1e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f103 0208 	add.w	r2, r3, #8
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f103 0208 	add.w	r2, r3, #8
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f103 0208 	add.w	r2, r3, #8
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2200      	movs	r2, #0
 800e212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e22e:	bf00      	nop
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e23a:	b480      	push	{r7}
 800e23c:	b085      	sub	sp, #20
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	689a      	ldr	r2, [r3, #8]
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	689b      	ldr	r3, [r3, #8]
 800e25c:	683a      	ldr	r2, [r7, #0]
 800e25e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	687a      	ldr	r2, [r7, #4]
 800e26a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	1c5a      	adds	r2, r3, #1
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	601a      	str	r2, [r3, #0]
}
 800e276:	bf00      	nop
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr

0800e282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e282:	b480      	push	{r7}
 800e284:	b085      	sub	sp, #20
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e298:	d103      	bne.n	800e2a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	691b      	ldr	r3, [r3, #16]
 800e29e:	60fb      	str	r3, [r7, #12]
 800e2a0:	e00c      	b.n	800e2bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	60fb      	str	r3, [r7, #12]
 800e2a8:	e002      	b.n	800e2b0 <vListInsert+0x2e>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	60fb      	str	r3, [r7, #12]
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	68ba      	ldr	r2, [r7, #8]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d2f6      	bcs.n	800e2aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	1c5a      	adds	r2, r3, #1
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	601a      	str	r2, [r3, #0]
}
 800e2e8:	bf00      	nop
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	6892      	ldr	r2, [r2, #8]
 800e30a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	6852      	ldr	r2, [r2, #4]
 800e314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d103      	bne.n	800e328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	689a      	ldr	r2, [r3, #8]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	1e5a      	subs	r2, r3, #1
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3714      	adds	r7, #20
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10c      	bne.n	800e376 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e360:	b672      	cpsid	i
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	b662      	cpsie	i
 800e370:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e372:	bf00      	nop
 800e374:	e7fe      	b.n	800e374 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e376:	f002 f961 	bl	801063c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e382:	68f9      	ldr	r1, [r7, #12]
 800e384:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e386:	fb01 f303 	mul.w	r3, r1, r3
 800e38a:	441a      	add	r2, r3
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	68f9      	ldr	r1, [r7, #12]
 800e3aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e3ac:	fb01 f303 	mul.w	r3, r1, r3
 800e3b0:	441a      	add	r2, r3
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	22ff      	movs	r2, #255	; 0xff
 800e3ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	22ff      	movs	r2, #255	; 0xff
 800e3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d114      	bne.n	800e3f6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	691b      	ldr	r3, [r3, #16]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d01a      	beq.n	800e40a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	3310      	adds	r3, #16
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f001 fc19 	bl	800fc10 <xTaskRemoveFromEventList>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d012      	beq.n	800e40a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e3e4:	4b0c      	ldr	r3, [pc, #48]	; (800e418 <xQueueGenericReset+0xd0>)
 800e3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ea:	601a      	str	r2, [r3, #0]
 800e3ec:	f3bf 8f4f 	dsb	sy
 800e3f0:	f3bf 8f6f 	isb	sy
 800e3f4:	e009      	b.n	800e40a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	3310      	adds	r3, #16
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7ff fef0 	bl	800e1e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	3324      	adds	r3, #36	; 0x24
 800e404:	4618      	mov	r0, r3
 800e406:	f7ff feeb 	bl	800e1e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e40a:	f002 f94b 	bl	80106a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e40e:	2301      	movs	r3, #1
}
 800e410:	4618      	mov	r0, r3
 800e412:	3710      	adds	r7, #16
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	e000ed04 	.word	0xe000ed04

0800e41c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b08e      	sub	sp, #56	; 0x38
 800e420:	af02      	add	r7, sp, #8
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	607a      	str	r2, [r7, #4]
 800e428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10c      	bne.n	800e44a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	b672      	cpsid	i
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	b662      	cpsie	i
 800e444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e446:	bf00      	nop
 800e448:	e7fe      	b.n	800e448 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10c      	bne.n	800e46a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	b672      	cpsid	i
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	b662      	cpsie	i
 800e464:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e466:	bf00      	nop
 800e468:	e7fe      	b.n	800e468 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d002      	beq.n	800e476 <xQueueGenericCreateStatic+0x5a>
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <xQueueGenericCreateStatic+0x5e>
 800e476:	2301      	movs	r3, #1
 800e478:	e000      	b.n	800e47c <xQueueGenericCreateStatic+0x60>
 800e47a:	2300      	movs	r3, #0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10c      	bne.n	800e49a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	b672      	cpsid	i
 800e486:	f383 8811 	msr	BASEPRI, r3
 800e48a:	f3bf 8f6f 	isb	sy
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	b662      	cpsie	i
 800e494:	623b      	str	r3, [r7, #32]
}
 800e496:	bf00      	nop
 800e498:	e7fe      	b.n	800e498 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d102      	bne.n	800e4a6 <xQueueGenericCreateStatic+0x8a>
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d101      	bne.n	800e4aa <xQueueGenericCreateStatic+0x8e>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e000      	b.n	800e4ac <xQueueGenericCreateStatic+0x90>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d10c      	bne.n	800e4ca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b4:	b672      	cpsid	i
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	b662      	cpsie	i
 800e4c4:	61fb      	str	r3, [r7, #28]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e4ca:	2348      	movs	r3, #72	; 0x48
 800e4cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	2b48      	cmp	r3, #72	; 0x48
 800e4d2:	d00c      	beq.n	800e4ee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d8:	b672      	cpsid	i
 800e4da:	f383 8811 	msr	BASEPRI, r3
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f3bf 8f4f 	dsb	sy
 800e4e6:	b662      	cpsie	i
 800e4e8:	61bb      	str	r3, [r7, #24]
}
 800e4ea:	bf00      	nop
 800e4ec:	e7fe      	b.n	800e4ec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e4ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00d      	beq.n	800e516 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e502:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	4613      	mov	r3, r2
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	68b9      	ldr	r1, [r7, #8]
 800e510:	68f8      	ldr	r0, [r7, #12]
 800e512:	f000 f847 	bl	800e5a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e518:	4618      	mov	r0, r3
 800e51a:	3730      	adds	r7, #48	; 0x30
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e520:	b580      	push	{r7, lr}
 800e522:	b08a      	sub	sp, #40	; 0x28
 800e524:	af02      	add	r7, sp, #8
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	4613      	mov	r3, r2
 800e52c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d10c      	bne.n	800e54e <xQueueGenericCreate+0x2e>
	__asm volatile
 800e534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e538:	b672      	cpsid	i
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	b662      	cpsie	i
 800e548:	613b      	str	r3, [r7, #16]
}
 800e54a:	bf00      	nop
 800e54c:	e7fe      	b.n	800e54c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d102      	bne.n	800e55a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e554:	2300      	movs	r3, #0
 800e556:	61fb      	str	r3, [r7, #28]
 800e558:	e004      	b.n	800e564 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	fb02 f303 	mul.w	r3, r2, r3
 800e562:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	3348      	adds	r3, #72	; 0x48
 800e568:	4618      	mov	r0, r3
 800e56a:	f002 fa24 	bl	80109b6 <pvPortMalloc>
 800e56e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d011      	beq.n	800e59a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	3348      	adds	r3, #72	; 0x48
 800e57e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	2200      	movs	r2, #0
 800e584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e588:	79fa      	ldrb	r2, [r7, #7]
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	4613      	mov	r3, r2
 800e590:	697a      	ldr	r2, [r7, #20]
 800e592:	68b9      	ldr	r1, [r7, #8]
 800e594:	68f8      	ldr	r0, [r7, #12]
 800e596:	f000 f805 	bl	800e5a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e59a:	69bb      	ldr	r3, [r7, #24]
	}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3720      	adds	r7, #32
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
 800e5b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d103      	bne.n	800e5c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	69ba      	ldr	r2, [r7, #24]
 800e5bc:	601a      	str	r2, [r3, #0]
 800e5be:	e002      	b.n	800e5c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	69b8      	ldr	r0, [r7, #24]
 800e5d6:	f7ff feb7 	bl	800e348 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e5da:	bf00      	nop
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b08a      	sub	sp, #40	; 0x28
 800e5e6:	af02      	add	r7, sp, #8
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10c      	bne.n	800e60e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f8:	b672      	cpsid	i
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	b662      	cpsie	i
 800e608:	61bb      	str	r3, [r7, #24]
}
 800e60a:	bf00      	nop
 800e60c:	e7fe      	b.n	800e60c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e60e:	68ba      	ldr	r2, [r7, #8]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	429a      	cmp	r2, r3
 800e614:	d90c      	bls.n	800e630 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61a:	b672      	cpsid	i
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	b662      	cpsie	i
 800e62a:	617b      	str	r3, [r7, #20]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e630:	2302      	movs	r3, #2
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	2100      	movs	r1, #0
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7ff feee 	bl	800e41c <xQueueGenericCreateStatic>
 800e640:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e64e:	69fb      	ldr	r3, [r7, #28]
	}
 800e650:	4618      	mov	r0, r3
 800e652:	3720      	adds	r7, #32
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d10c      	bne.n	800e682 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800e668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66c:	b672      	cpsid	i
 800e66e:	f383 8811 	msr	BASEPRI, r3
 800e672:	f3bf 8f6f 	isb	sy
 800e676:	f3bf 8f4f 	dsb	sy
 800e67a:	b662      	cpsie	i
 800e67c:	613b      	str	r3, [r7, #16]
}
 800e67e:	bf00      	nop
 800e680:	e7fe      	b.n	800e680 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	429a      	cmp	r2, r3
 800e688:	d90c      	bls.n	800e6a4 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800e68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68e:	b672      	cpsid	i
 800e690:	f383 8811 	msr	BASEPRI, r3
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	f3bf 8f4f 	dsb	sy
 800e69c:	b662      	cpsie	i
 800e69e:	60fb      	str	r3, [r7, #12]
}
 800e6a0:	bf00      	nop
 800e6a2:	e7fe      	b.n	800e6a2 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e6a4:	2202      	movs	r2, #2
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7ff ff39 	bl	800e520 <xQueueGenericCreate>
 800e6ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d002      	beq.n	800e6bc <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	683a      	ldr	r2, [r7, #0]
 800e6ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e6bc:	697b      	ldr	r3, [r7, #20]
	}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
	...

0800e6c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b08e      	sub	sp, #56	; 0x38
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
 800e6d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d10c      	bne.n	800e6fe <xQueueGenericSend+0x36>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e8:	b672      	cpsid	i
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	b662      	cpsie	i
 800e6f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e6fa:	bf00      	nop
 800e6fc:	e7fe      	b.n	800e6fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d103      	bne.n	800e70c <xQueueGenericSend+0x44>
 800e704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d101      	bne.n	800e710 <xQueueGenericSend+0x48>
 800e70c:	2301      	movs	r3, #1
 800e70e:	e000      	b.n	800e712 <xQueueGenericSend+0x4a>
 800e710:	2300      	movs	r3, #0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10c      	bne.n	800e730 <xQueueGenericSend+0x68>
	__asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e71a:	b672      	cpsid	i
 800e71c:	f383 8811 	msr	BASEPRI, r3
 800e720:	f3bf 8f6f 	isb	sy
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	b662      	cpsie	i
 800e72a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e72c:	bf00      	nop
 800e72e:	e7fe      	b.n	800e72e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	2b02      	cmp	r3, #2
 800e734:	d103      	bne.n	800e73e <xQueueGenericSend+0x76>
 800e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d101      	bne.n	800e742 <xQueueGenericSend+0x7a>
 800e73e:	2301      	movs	r3, #1
 800e740:	e000      	b.n	800e744 <xQueueGenericSend+0x7c>
 800e742:	2300      	movs	r3, #0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d10c      	bne.n	800e762 <xQueueGenericSend+0x9a>
	__asm volatile
 800e748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74c:	b672      	cpsid	i
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	b662      	cpsie	i
 800e75c:	623b      	str	r3, [r7, #32]
}
 800e75e:	bf00      	nop
 800e760:	e7fe      	b.n	800e760 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e762:	f001 fc1b 	bl	800ff9c <xTaskGetSchedulerState>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d102      	bne.n	800e772 <xQueueGenericSend+0xaa>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <xQueueGenericSend+0xae>
 800e772:	2301      	movs	r3, #1
 800e774:	e000      	b.n	800e778 <xQueueGenericSend+0xb0>
 800e776:	2300      	movs	r3, #0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d10c      	bne.n	800e796 <xQueueGenericSend+0xce>
	__asm volatile
 800e77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e780:	b672      	cpsid	i
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	b662      	cpsie	i
 800e790:	61fb      	str	r3, [r7, #28]
}
 800e792:	bf00      	nop
 800e794:	e7fe      	b.n	800e794 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e796:	f001 ff51 	bl	801063c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d302      	bcc.n	800e7ac <xQueueGenericSend+0xe4>
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	2b02      	cmp	r3, #2
 800e7aa:	d129      	bne.n	800e800 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	68b9      	ldr	r1, [r7, #8]
 800e7b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7b2:	f000 fc82 	bl	800f0ba <prvCopyDataToQueue>
 800e7b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d010      	beq.n	800e7e2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c2:	3324      	adds	r3, #36	; 0x24
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f001 fa23 	bl	800fc10 <xTaskRemoveFromEventList>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d013      	beq.n	800e7f8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e7d0:	4b3f      	ldr	r3, [pc, #252]	; (800e8d0 <xQueueGenericSend+0x208>)
 800e7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d6:	601a      	str	r2, [r3, #0]
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	e00a      	b.n	800e7f8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d007      	beq.n	800e7f8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e7e8:	4b39      	ldr	r3, [pc, #228]	; (800e8d0 <xQueueGenericSend+0x208>)
 800e7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e7f8:	f001 ff54 	bl	80106a4 <vPortExitCritical>
				return pdPASS;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e063      	b.n	800e8c8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d103      	bne.n	800e80e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e806:	f001 ff4d 	bl	80106a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e80a:	2300      	movs	r3, #0
 800e80c:	e05c      	b.n	800e8c8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e810:	2b00      	cmp	r3, #0
 800e812:	d106      	bne.n	800e822 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e814:	f107 0314 	add.w	r3, r7, #20
 800e818:	4618      	mov	r0, r3
 800e81a:	f001 fa5d 	bl	800fcd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e81e:	2301      	movs	r3, #1
 800e820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e822:	f001 ff3f 	bl	80106a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e826:	f000 ffc3 	bl	800f7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e82a:	f001 ff07 	bl	801063c <vPortEnterCritical>
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e834:	b25b      	sxtb	r3, r3
 800e836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83a:	d103      	bne.n	800e844 <xQueueGenericSend+0x17c>
 800e83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83e:	2200      	movs	r2, #0
 800e840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e84a:	b25b      	sxtb	r3, r3
 800e84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e850:	d103      	bne.n	800e85a <xQueueGenericSend+0x192>
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	2200      	movs	r2, #0
 800e856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e85a:	f001 ff23 	bl	80106a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e85e:	1d3a      	adds	r2, r7, #4
 800e860:	f107 0314 	add.w	r3, r7, #20
 800e864:	4611      	mov	r1, r2
 800e866:	4618      	mov	r0, r3
 800e868:	f001 fa4c 	bl	800fd04 <xTaskCheckForTimeOut>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d124      	bne.n	800e8bc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e874:	f000 fd19 	bl	800f2aa <prvIsQueueFull>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d018      	beq.n	800e8b0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	3310      	adds	r3, #16
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	4611      	mov	r1, r2
 800e886:	4618      	mov	r0, r3
 800e888:	f001 f99c 	bl	800fbc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e88c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e88e:	f000 fca4 	bl	800f1da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e892:	f000 ff9b 	bl	800f7cc <xTaskResumeAll>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f47f af7c 	bne.w	800e796 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e89e:	4b0c      	ldr	r3, [pc, #48]	; (800e8d0 <xQueueGenericSend+0x208>)
 800e8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	e772      	b.n	800e796 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e8b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8b2:	f000 fc92 	bl	800f1da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8b6:	f000 ff89 	bl	800f7cc <xTaskResumeAll>
 800e8ba:	e76c      	b.n	800e796 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e8bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8be:	f000 fc8c 	bl	800f1da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8c2:	f000 ff83 	bl	800f7cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e8c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3738      	adds	r7, #56	; 0x38
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	e000ed04 	.word	0xe000ed04

0800e8d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b08e      	sub	sp, #56	; 0x38
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
 800e8e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10c      	bne.n	800e906 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f0:	b672      	cpsid	i
 800e8f2:	f383 8811 	msr	BASEPRI, r3
 800e8f6:	f3bf 8f6f 	isb	sy
 800e8fa:	f3bf 8f4f 	dsb	sy
 800e8fe:	b662      	cpsie	i
 800e900:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e902:	bf00      	nop
 800e904:	e7fe      	b.n	800e904 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d103      	bne.n	800e914 <xQueueGenericSendFromISR+0x40>
 800e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e910:	2b00      	cmp	r3, #0
 800e912:	d101      	bne.n	800e918 <xQueueGenericSendFromISR+0x44>
 800e914:	2301      	movs	r3, #1
 800e916:	e000      	b.n	800e91a <xQueueGenericSendFromISR+0x46>
 800e918:	2300      	movs	r3, #0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d10c      	bne.n	800e938 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e922:	b672      	cpsid	i
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	b662      	cpsie	i
 800e932:	623b      	str	r3, [r7, #32]
}
 800e934:	bf00      	nop
 800e936:	e7fe      	b.n	800e936 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	2b02      	cmp	r3, #2
 800e93c:	d103      	bne.n	800e946 <xQueueGenericSendFromISR+0x72>
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e942:	2b01      	cmp	r3, #1
 800e944:	d101      	bne.n	800e94a <xQueueGenericSendFromISR+0x76>
 800e946:	2301      	movs	r3, #1
 800e948:	e000      	b.n	800e94c <xQueueGenericSendFromISR+0x78>
 800e94a:	2300      	movs	r3, #0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d10c      	bne.n	800e96a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e954:	b672      	cpsid	i
 800e956:	f383 8811 	msr	BASEPRI, r3
 800e95a:	f3bf 8f6f 	isb	sy
 800e95e:	f3bf 8f4f 	dsb	sy
 800e962:	b662      	cpsie	i
 800e964:	61fb      	str	r3, [r7, #28]
}
 800e966:	bf00      	nop
 800e968:	e7fe      	b.n	800e968 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e96a:	f001 ff4f 	bl	801080c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e96e:	f3ef 8211 	mrs	r2, BASEPRI
 800e972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e976:	b672      	cpsid	i
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	b662      	cpsie	i
 800e986:	61ba      	str	r2, [r7, #24]
 800e988:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e98a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e98c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e996:	429a      	cmp	r2, r3
 800e998:	d302      	bcc.n	800e9a0 <xQueueGenericSendFromISR+0xcc>
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b02      	cmp	r3, #2
 800e99e:	d12c      	bne.n	800e9fa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9aa:	683a      	ldr	r2, [r7, #0]
 800e9ac:	68b9      	ldr	r1, [r7, #8]
 800e9ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9b0:	f000 fb83 	bl	800f0ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e9b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9bc:	d112      	bne.n	800e9e4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d016      	beq.n	800e9f4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c8:	3324      	adds	r3, #36	; 0x24
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f001 f920 	bl	800fc10 <xTaskRemoveFromEventList>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00e      	beq.n	800e9f4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00b      	beq.n	800e9f4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	601a      	str	r2, [r3, #0]
 800e9e2:	e007      	b.n	800e9f4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e9e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	b25a      	sxtb	r2, r3
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e9f8:	e001      	b.n	800e9fe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	637b      	str	r3, [r7, #52]	; 0x34
 800e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea00:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ea08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3738      	adds	r7, #56	; 0x38
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b08e      	sub	sp, #56	; 0x38
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d10c      	bne.n	800ea42 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800ea28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2c:	b672      	cpsid	i
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	b662      	cpsie	i
 800ea3c:	623b      	str	r3, [r7, #32]
}
 800ea3e:	bf00      	nop
 800ea40:	e7fe      	b.n	800ea40 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00c      	beq.n	800ea64 <xQueueGiveFromISR+0x50>
	__asm volatile
 800ea4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4e:	b672      	cpsid	i
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	b662      	cpsie	i
 800ea5e:	61fb      	str	r3, [r7, #28]
}
 800ea60:	bf00      	nop
 800ea62:	e7fe      	b.n	800ea62 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d103      	bne.n	800ea74 <xQueueGiveFromISR+0x60>
 800ea6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d101      	bne.n	800ea78 <xQueueGiveFromISR+0x64>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e000      	b.n	800ea7a <xQueueGiveFromISR+0x66>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d10c      	bne.n	800ea98 <xQueueGiveFromISR+0x84>
	__asm volatile
 800ea7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea82:	b672      	cpsid	i
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	b662      	cpsie	i
 800ea92:	61bb      	str	r3, [r7, #24]
}
 800ea94:	bf00      	nop
 800ea96:	e7fe      	b.n	800ea96 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea98:	f001 feb8 	bl	801080c <vPortValidateInterruptPriority>
	__asm volatile
 800ea9c:	f3ef 8211 	mrs	r2, BASEPRI
 800eaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa4:	b672      	cpsid	i
 800eaa6:	f383 8811 	msr	BASEPRI, r3
 800eaaa:	f3bf 8f6f 	isb	sy
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	b662      	cpsie	i
 800eab4:	617a      	str	r2, [r7, #20]
 800eab6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800eab8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eaba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d22b      	bcs.n	800eb24 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ead2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ead6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead8:	1c5a      	adds	r2, r3, #1
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eade:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae6:	d112      	bne.n	800eb0e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d016      	beq.n	800eb1e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf2:	3324      	adds	r3, #36	; 0x24
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f001 f88b 	bl	800fc10 <xTaskRemoveFromEventList>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00e      	beq.n	800eb1e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00b      	beq.n	800eb1e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	601a      	str	r2, [r3, #0]
 800eb0c:	e007      	b.n	800eb1e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eb0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb12:	3301      	adds	r3, #1
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	b25a      	sxtb	r2, r3
 800eb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	637b      	str	r3, [r7, #52]	; 0x34
 800eb22:	e001      	b.n	800eb28 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eb24:	2300      	movs	r3, #0
 800eb26:	637b      	str	r3, [r7, #52]	; 0x34
 800eb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	f383 8811 	msr	BASEPRI, r3
}
 800eb32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3738      	adds	r7, #56	; 0x38
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
	...

0800eb40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b08c      	sub	sp, #48	; 0x30
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10c      	bne.n	800eb74 <xQueueReceive+0x34>
	__asm volatile
 800eb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb5e:	b672      	cpsid	i
 800eb60:	f383 8811 	msr	BASEPRI, r3
 800eb64:	f3bf 8f6f 	isb	sy
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	b662      	cpsie	i
 800eb6e:	623b      	str	r3, [r7, #32]
}
 800eb70:	bf00      	nop
 800eb72:	e7fe      	b.n	800eb72 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d103      	bne.n	800eb82 <xQueueReceive+0x42>
 800eb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d101      	bne.n	800eb86 <xQueueReceive+0x46>
 800eb82:	2301      	movs	r3, #1
 800eb84:	e000      	b.n	800eb88 <xQueueReceive+0x48>
 800eb86:	2300      	movs	r3, #0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d10c      	bne.n	800eba6 <xQueueReceive+0x66>
	__asm volatile
 800eb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb90:	b672      	cpsid	i
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	b662      	cpsie	i
 800eba0:	61fb      	str	r3, [r7, #28]
}
 800eba2:	bf00      	nop
 800eba4:	e7fe      	b.n	800eba4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eba6:	f001 f9f9 	bl	800ff9c <xTaskGetSchedulerState>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d102      	bne.n	800ebb6 <xQueueReceive+0x76>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d101      	bne.n	800ebba <xQueueReceive+0x7a>
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e000      	b.n	800ebbc <xQueueReceive+0x7c>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10c      	bne.n	800ebda <xQueueReceive+0x9a>
	__asm volatile
 800ebc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc4:	b672      	cpsid	i
 800ebc6:	f383 8811 	msr	BASEPRI, r3
 800ebca:	f3bf 8f6f 	isb	sy
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	b662      	cpsie	i
 800ebd4:	61bb      	str	r3, [r7, #24]
}
 800ebd6:	bf00      	nop
 800ebd8:	e7fe      	b.n	800ebd8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ebda:	f001 fd2f 	bl	801063c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d01f      	beq.n	800ec2a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ebea:	68b9      	ldr	r1, [r7, #8]
 800ebec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebee:	f000 face 	bl	800f18e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	1e5a      	subs	r2, r3, #1
 800ebf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfc:	691b      	ldr	r3, [r3, #16]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d00f      	beq.n	800ec22 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec04:	3310      	adds	r3, #16
 800ec06:	4618      	mov	r0, r3
 800ec08:	f001 f802 	bl	800fc10 <xTaskRemoveFromEventList>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d007      	beq.n	800ec22 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ec12:	4b3d      	ldr	r3, [pc, #244]	; (800ed08 <xQueueReceive+0x1c8>)
 800ec14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec18:	601a      	str	r2, [r3, #0]
 800ec1a:	f3bf 8f4f 	dsb	sy
 800ec1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec22:	f001 fd3f 	bl	80106a4 <vPortExitCritical>
				return pdPASS;
 800ec26:	2301      	movs	r3, #1
 800ec28:	e069      	b.n	800ecfe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d103      	bne.n	800ec38 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec30:	f001 fd38 	bl	80106a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec34:	2300      	movs	r3, #0
 800ec36:	e062      	b.n	800ecfe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d106      	bne.n	800ec4c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec3e:	f107 0310 	add.w	r3, r7, #16
 800ec42:	4618      	mov	r0, r3
 800ec44:	f001 f848 	bl	800fcd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec4c:	f001 fd2a 	bl	80106a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec50:	f000 fdae 	bl	800f7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec54:	f001 fcf2 	bl	801063c <vPortEnterCritical>
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ec5e:	b25b      	sxtb	r3, r3
 800ec60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec64:	d103      	bne.n	800ec6e <xQueueReceive+0x12e>
 800ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec74:	b25b      	sxtb	r3, r3
 800ec76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec7a:	d103      	bne.n	800ec84 <xQueueReceive+0x144>
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec84:	f001 fd0e 	bl	80106a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec88:	1d3a      	adds	r2, r7, #4
 800ec8a:	f107 0310 	add.w	r3, r7, #16
 800ec8e:	4611      	mov	r1, r2
 800ec90:	4618      	mov	r0, r3
 800ec92:	f001 f837 	bl	800fd04 <xTaskCheckForTimeOut>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d123      	bne.n	800ece4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec9e:	f000 faee 	bl	800f27e <prvIsQueueEmpty>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d017      	beq.n	800ecd8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecaa:	3324      	adds	r3, #36	; 0x24
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	4611      	mov	r1, r2
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f000 ff87 	bl	800fbc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ecb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecb8:	f000 fa8f 	bl	800f1da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ecbc:	f000 fd86 	bl	800f7cc <xTaskResumeAll>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d189      	bne.n	800ebda <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ecc6:	4b10      	ldr	r3, [pc, #64]	; (800ed08 <xQueueReceive+0x1c8>)
 800ecc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eccc:	601a      	str	r2, [r3, #0]
 800ecce:	f3bf 8f4f 	dsb	sy
 800ecd2:	f3bf 8f6f 	isb	sy
 800ecd6:	e780      	b.n	800ebda <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ecd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecda:	f000 fa7e 	bl	800f1da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ecde:	f000 fd75 	bl	800f7cc <xTaskResumeAll>
 800ece2:	e77a      	b.n	800ebda <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ece4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ece6:	f000 fa78 	bl	800f1da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ecea:	f000 fd6f 	bl	800f7cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ecee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecf0:	f000 fac5 	bl	800f27e <prvIsQueueEmpty>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f43f af6f 	beq.w	800ebda <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ecfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3730      	adds	r7, #48	; 0x30
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	e000ed04 	.word	0xe000ed04

0800ed0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b08e      	sub	sp, #56	; 0x38
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ed16:	2300      	movs	r3, #0
 800ed18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ed22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d10c      	bne.n	800ed42 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800ed28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed2c:	b672      	cpsid	i
 800ed2e:	f383 8811 	msr	BASEPRI, r3
 800ed32:	f3bf 8f6f 	isb	sy
 800ed36:	f3bf 8f4f 	dsb	sy
 800ed3a:	b662      	cpsie	i
 800ed3c:	623b      	str	r3, [r7, #32]
}
 800ed3e:	bf00      	nop
 800ed40:	e7fe      	b.n	800ed40 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00c      	beq.n	800ed64 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ed4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4e:	b672      	cpsid	i
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	b662      	cpsie	i
 800ed5e:	61fb      	str	r3, [r7, #28]
}
 800ed60:	bf00      	nop
 800ed62:	e7fe      	b.n	800ed62 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ed64:	f001 f91a 	bl	800ff9c <xTaskGetSchedulerState>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d102      	bne.n	800ed74 <xQueueSemaphoreTake+0x68>
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d101      	bne.n	800ed78 <xQueueSemaphoreTake+0x6c>
 800ed74:	2301      	movs	r3, #1
 800ed76:	e000      	b.n	800ed7a <xQueueSemaphoreTake+0x6e>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d10c      	bne.n	800ed98 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ed7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed82:	b672      	cpsid	i
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	b662      	cpsie	i
 800ed92:	61bb      	str	r3, [r7, #24]
}
 800ed94:	bf00      	nop
 800ed96:	e7fe      	b.n	800ed96 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed98:	f001 fc50 	bl	801063c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ed9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d024      	beq.n	800edf2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edaa:	1e5a      	subs	r2, r3, #1
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800edb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d104      	bne.n	800edc2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800edb8:	f001 fab6 	bl	8010328 <pvTaskIncrementMutexHeldCount>
 800edbc:	4602      	mov	r2, r0
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800edc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00f      	beq.n	800edea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800edca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edcc:	3310      	adds	r3, #16
 800edce:	4618      	mov	r0, r3
 800edd0:	f000 ff1e 	bl	800fc10 <xTaskRemoveFromEventList>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d007      	beq.n	800edea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800edda:	4b55      	ldr	r3, [pc, #340]	; (800ef30 <xQueueSemaphoreTake+0x224>)
 800eddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ede0:	601a      	str	r2, [r3, #0]
 800ede2:	f3bf 8f4f 	dsb	sy
 800ede6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800edea:	f001 fc5b 	bl	80106a4 <vPortExitCritical>
				return pdPASS;
 800edee:	2301      	movs	r3, #1
 800edf0:	e099      	b.n	800ef26 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d113      	bne.n	800ee20 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00c      	beq.n	800ee18 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	b672      	cpsid	i
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	b662      	cpsie	i
 800ee12:	617b      	str	r3, [r7, #20]
}
 800ee14:	bf00      	nop
 800ee16:	e7fe      	b.n	800ee16 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ee18:	f001 fc44 	bl	80106a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	e082      	b.n	800ef26 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d106      	bne.n	800ee34 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee26:	f107 030c 	add.w	r3, r7, #12
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 ff54 	bl	800fcd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee30:	2301      	movs	r3, #1
 800ee32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee34:	f001 fc36 	bl	80106a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee38:	f000 fcba 	bl	800f7b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee3c:	f001 fbfe 	bl	801063c <vPortEnterCritical>
 800ee40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee46:	b25b      	sxtb	r3, r3
 800ee48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee4c:	d103      	bne.n	800ee56 <xQueueSemaphoreTake+0x14a>
 800ee4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee50:	2200      	movs	r2, #0
 800ee52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee5c:	b25b      	sxtb	r3, r3
 800ee5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee62:	d103      	bne.n	800ee6c <xQueueSemaphoreTake+0x160>
 800ee64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee66:	2200      	movs	r2, #0
 800ee68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee6c:	f001 fc1a 	bl	80106a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee70:	463a      	mov	r2, r7
 800ee72:	f107 030c 	add.w	r3, r7, #12
 800ee76:	4611      	mov	r1, r2
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f000 ff43 	bl	800fd04 <xTaskCheckForTimeOut>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d132      	bne.n	800eeea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee86:	f000 f9fa 	bl	800f27e <prvIsQueueEmpty>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d026      	beq.n	800eede <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d109      	bne.n	800eeac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ee98:	f001 fbd0 	bl	801063c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f001 f899 	bl	800ffd8 <xTaskPriorityInherit>
 800eea6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800eea8:	f001 fbfc 	bl	80106a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeae:	3324      	adds	r3, #36	; 0x24
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	4611      	mov	r1, r2
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 fe85 	bl	800fbc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eeba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eebc:	f000 f98d 	bl	800f1da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eec0:	f000 fc84 	bl	800f7cc <xTaskResumeAll>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f47f af66 	bne.w	800ed98 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800eecc:	4b18      	ldr	r3, [pc, #96]	; (800ef30 <xQueueSemaphoreTake+0x224>)
 800eece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eed2:	601a      	str	r2, [r3, #0]
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	f3bf 8f6f 	isb	sy
 800eedc:	e75c      	b.n	800ed98 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eee0:	f000 f97b 	bl	800f1da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eee4:	f000 fc72 	bl	800f7cc <xTaskResumeAll>
 800eee8:	e756      	b.n	800ed98 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800eeea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eeec:	f000 f975 	bl	800f1da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eef0:	f000 fc6c 	bl	800f7cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eef6:	f000 f9c2 	bl	800f27e <prvIsQueueEmpty>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f43f af4b 	beq.w	800ed98 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ef02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d00d      	beq.n	800ef24 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ef08:	f001 fb98 	bl	801063c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ef0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef0e:	f000 f8bc 	bl	800f08a <prvGetDisinheritPriorityAfterTimeout>
 800ef12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ef14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f001 f966 	bl	80101ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ef20:	f001 fbc0 	bl	80106a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3738      	adds	r7, #56	; 0x38
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	e000ed04 	.word	0xe000ed04

0800ef34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b08e      	sub	sp, #56	; 0x38
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10c      	bne.n	800ef64 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ef4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4e:	b672      	cpsid	i
 800ef50:	f383 8811 	msr	BASEPRI, r3
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	b662      	cpsie	i
 800ef5e:	623b      	str	r3, [r7, #32]
}
 800ef60:	bf00      	nop
 800ef62:	e7fe      	b.n	800ef62 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d103      	bne.n	800ef72 <xQueueReceiveFromISR+0x3e>
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d101      	bne.n	800ef76 <xQueueReceiveFromISR+0x42>
 800ef72:	2301      	movs	r3, #1
 800ef74:	e000      	b.n	800ef78 <xQueueReceiveFromISR+0x44>
 800ef76:	2300      	movs	r3, #0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d10c      	bne.n	800ef96 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800ef7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef80:	b672      	cpsid	i
 800ef82:	f383 8811 	msr	BASEPRI, r3
 800ef86:	f3bf 8f6f 	isb	sy
 800ef8a:	f3bf 8f4f 	dsb	sy
 800ef8e:	b662      	cpsie	i
 800ef90:	61fb      	str	r3, [r7, #28]
}
 800ef92:	bf00      	nop
 800ef94:	e7fe      	b.n	800ef94 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef96:	f001 fc39 	bl	801080c <vPortValidateInterruptPriority>
	__asm volatile
 800ef9a:	f3ef 8211 	mrs	r2, BASEPRI
 800ef9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa2:	b672      	cpsid	i
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	b662      	cpsie	i
 800efb2:	61ba      	str	r2, [r7, #24]
 800efb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800efb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d02f      	beq.n	800f026 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800efc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800efd0:	68b9      	ldr	r1, [r7, #8]
 800efd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efd4:	f000 f8db 	bl	800f18e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	1e5a      	subs	r2, r3, #1
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efde:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800efe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe8:	d112      	bne.n	800f010 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d016      	beq.n	800f020 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff4:	3310      	adds	r3, #16
 800eff6:	4618      	mov	r0, r3
 800eff8:	f000 fe0a 	bl	800fc10 <xTaskRemoveFromEventList>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00e      	beq.n	800f020 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d00b      	beq.n	800f020 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2201      	movs	r2, #1
 800f00c:	601a      	str	r2, [r3, #0]
 800f00e:	e007      	b.n	800f020 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f014:	3301      	adds	r3, #1
 800f016:	b2db      	uxtb	r3, r3
 800f018:	b25a      	sxtb	r2, r3
 800f01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f020:	2301      	movs	r3, #1
 800f022:	637b      	str	r3, [r7, #52]	; 0x34
 800f024:	e001      	b.n	800f02a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800f026:	2300      	movs	r3, #0
 800f028:	637b      	str	r3, [r7, #52]	; 0x34
 800f02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	f383 8811 	msr	BASEPRI, r3
}
 800f034:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3738      	adds	r7, #56	; 0x38
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d10c      	bne.n	800f06c <vQueueDelete+0x2c>
	__asm volatile
 800f052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f056:	b672      	cpsid	i
 800f058:	f383 8811 	msr	BASEPRI, r3
 800f05c:	f3bf 8f6f 	isb	sy
 800f060:	f3bf 8f4f 	dsb	sy
 800f064:	b662      	cpsie	i
 800f066:	60bb      	str	r3, [r7, #8]
}
 800f068:	bf00      	nop
 800f06a:	e7fe      	b.n	800f06a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f000 f935 	bl	800f2dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d102      	bne.n	800f082 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f001 fca8 	bl	80109d2 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f082:	bf00      	nop
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}

0800f08a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f08a:	b480      	push	{r7}
 800f08c:	b085      	sub	sp, #20
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f096:	2b00      	cmp	r3, #0
 800f098:	d006      	beq.n	800f0a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f1c3 0307 	rsb	r3, r3, #7
 800f0a4:	60fb      	str	r3, [r7, #12]
 800f0a6:	e001      	b.n	800f0ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
	}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3714      	adds	r7, #20
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr

0800f0ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b086      	sub	sp, #24
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	60f8      	str	r0, [r7, #12]
 800f0c2:	60b9      	str	r1, [r7, #8]
 800f0c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d10d      	bne.n	800f0f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d14d      	bne.n	800f17c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	689b      	ldr	r3, [r3, #8]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f000 fff7 	bl	80100d8 <xTaskPriorityDisinherit>
 800f0ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	609a      	str	r2, [r3, #8]
 800f0f2:	e043      	b.n	800f17c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d119      	bne.n	800f12e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6858      	ldr	r0, [r3, #4]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f102:	461a      	mov	r2, r3
 800f104:	68b9      	ldr	r1, [r7, #8]
 800f106:	f001 fca3 	bl	8010a50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	685a      	ldr	r2, [r3, #4]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f112:	441a      	add	r2, r3
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	429a      	cmp	r2, r3
 800f122:	d32b      	bcc.n	800f17c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	605a      	str	r2, [r3, #4]
 800f12c:	e026      	b.n	800f17c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	68d8      	ldr	r0, [r3, #12]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f136:	461a      	mov	r2, r3
 800f138:	68b9      	ldr	r1, [r7, #8]
 800f13a:	f001 fc89 	bl	8010a50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	68da      	ldr	r2, [r3, #12]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f146:	425b      	negs	r3, r3
 800f148:	441a      	add	r2, r3
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	68da      	ldr	r2, [r3, #12]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	429a      	cmp	r2, r3
 800f158:	d207      	bcs.n	800f16a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	689a      	ldr	r2, [r3, #8]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f162:	425b      	negs	r3, r3
 800f164:	441a      	add	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d105      	bne.n	800f17c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d002      	beq.n	800f17c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	3b01      	subs	r3, #1
 800f17a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	1c5a      	adds	r2, r3, #1
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f184:	697b      	ldr	r3, [r7, #20]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3718      	adds	r7, #24
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f18e:	b580      	push	{r7, lr}
 800f190:	b082      	sub	sp, #8
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
 800f196:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d018      	beq.n	800f1d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	68da      	ldr	r2, [r3, #12]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a8:	441a      	add	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	68da      	ldr	r2, [r3, #12]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d303      	bcc.n	800f1c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681a      	ldr	r2, [r3, #0]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	68d9      	ldr	r1, [r3, #12]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	6838      	ldr	r0, [r7, #0]
 800f1ce:	f001 fc3f 	bl	8010a50 <memcpy>
	}
}
 800f1d2:	bf00      	nop
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b084      	sub	sp, #16
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f1e2:	f001 fa2b 	bl	801063c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f1ee:	e011      	b.n	800f214 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d012      	beq.n	800f21e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	3324      	adds	r3, #36	; 0x24
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f000 fd07 	bl	800fc10 <xTaskRemoveFromEventList>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d001      	beq.n	800f20c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f208:	f000 fde2 	bl	800fdd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f20c:	7bfb      	ldrb	r3, [r7, #15]
 800f20e:	3b01      	subs	r3, #1
 800f210:	b2db      	uxtb	r3, r3
 800f212:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	dce9      	bgt.n	800f1f0 <prvUnlockQueue+0x16>
 800f21c:	e000      	b.n	800f220 <prvUnlockQueue+0x46>
					break;
 800f21e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	22ff      	movs	r2, #255	; 0xff
 800f224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f228:	f001 fa3c 	bl	80106a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f22c:	f001 fa06 	bl	801063c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f236:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f238:	e011      	b.n	800f25e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	691b      	ldr	r3, [r3, #16]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d012      	beq.n	800f268 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	3310      	adds	r3, #16
 800f246:	4618      	mov	r0, r3
 800f248:	f000 fce2 	bl	800fc10 <xTaskRemoveFromEventList>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f252:	f000 fdbd 	bl	800fdd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f256:	7bbb      	ldrb	r3, [r7, #14]
 800f258:	3b01      	subs	r3, #1
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f25e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f262:	2b00      	cmp	r3, #0
 800f264:	dce9      	bgt.n	800f23a <prvUnlockQueue+0x60>
 800f266:	e000      	b.n	800f26a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f268:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	22ff      	movs	r2, #255	; 0xff
 800f26e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f272:	f001 fa17 	bl	80106a4 <vPortExitCritical>
}
 800f276:	bf00      	nop
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b084      	sub	sp, #16
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f286:	f001 f9d9 	bl	801063c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d102      	bne.n	800f298 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f292:	2301      	movs	r3, #1
 800f294:	60fb      	str	r3, [r7, #12]
 800f296:	e001      	b.n	800f29c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f298:	2300      	movs	r3, #0
 800f29a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f29c:	f001 fa02 	bl	80106a4 <vPortExitCritical>

	return xReturn;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}

0800f2aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b084      	sub	sp, #16
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2b2:	f001 f9c3 	bl	801063c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d102      	bne.n	800f2c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	60fb      	str	r3, [r7, #12]
 800f2c6:	e001      	b.n	800f2cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f2cc:	f001 f9ea 	bl	80106a4 <vPortExitCritical>

	return xReturn;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
	...

0800f2dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	60fb      	str	r3, [r7, #12]
 800f2e8:	e016      	b.n	800f318 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f2ea:	4a10      	ldr	r2, [pc, #64]	; (800f32c <vQueueUnregisterQueue+0x50>)
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	00db      	lsls	r3, r3, #3
 800f2f0:	4413      	add	r3, r2
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d10b      	bne.n	800f312 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f2fa:	4a0c      	ldr	r2, [pc, #48]	; (800f32c <vQueueUnregisterQueue+0x50>)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	2100      	movs	r1, #0
 800f300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f304:	4a09      	ldr	r2, [pc, #36]	; (800f32c <vQueueUnregisterQueue+0x50>)
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	00db      	lsls	r3, r3, #3
 800f30a:	4413      	add	r3, r2
 800f30c:	2200      	movs	r2, #0
 800f30e:	605a      	str	r2, [r3, #4]
				break;
 800f310:	e006      	b.n	800f320 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	3301      	adds	r3, #1
 800f316:	60fb      	str	r3, [r7, #12]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2b07      	cmp	r3, #7
 800f31c:	d9e5      	bls.n	800f2ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f31e:	bf00      	nop
 800f320:	bf00      	nop
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	20004cc8 	.word	0x20004cc8

0800f330 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f330:	b580      	push	{r7, lr}
 800f332:	b08e      	sub	sp, #56	; 0x38
 800f334:	af04      	add	r7, sp, #16
 800f336:	60f8      	str	r0, [r7, #12]
 800f338:	60b9      	str	r1, [r7, #8]
 800f33a:	607a      	str	r2, [r7, #4]
 800f33c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10c      	bne.n	800f35e <xTaskCreateStatic+0x2e>
	__asm volatile
 800f344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f348:	b672      	cpsid	i
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	b662      	cpsie	i
 800f358:	623b      	str	r3, [r7, #32]
}
 800f35a:	bf00      	nop
 800f35c:	e7fe      	b.n	800f35c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10c      	bne.n	800f37e <xTaskCreateStatic+0x4e>
	__asm volatile
 800f364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f368:	b672      	cpsid	i
 800f36a:	f383 8811 	msr	BASEPRI, r3
 800f36e:	f3bf 8f6f 	isb	sy
 800f372:	f3bf 8f4f 	dsb	sy
 800f376:	b662      	cpsie	i
 800f378:	61fb      	str	r3, [r7, #28]
}
 800f37a:	bf00      	nop
 800f37c:	e7fe      	b.n	800f37c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f37e:	2358      	movs	r3, #88	; 0x58
 800f380:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	2b58      	cmp	r3, #88	; 0x58
 800f386:	d00c      	beq.n	800f3a2 <xTaskCreateStatic+0x72>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	b672      	cpsid	i
 800f38e:	f383 8811 	msr	BASEPRI, r3
 800f392:	f3bf 8f6f 	isb	sy
 800f396:	f3bf 8f4f 	dsb	sy
 800f39a:	b662      	cpsie	i
 800f39c:	61bb      	str	r3, [r7, #24]
}
 800f39e:	bf00      	nop
 800f3a0:	e7fe      	b.n	800f3a0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f3a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d01e      	beq.n	800f3e8 <xTaskCreateStatic+0xb8>
 800f3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d01b      	beq.n	800f3e8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	2202      	movs	r2, #2
 800f3be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	9303      	str	r3, [sp, #12]
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c8:	9302      	str	r3, [sp, #8]
 800f3ca:	f107 0314 	add.w	r3, r7, #20
 800f3ce:	9301      	str	r3, [sp, #4]
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d2:	9300      	str	r3, [sp, #0]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	68b9      	ldr	r1, [r7, #8]
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f000 f850 	bl	800f480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3e2:	f000 f8e1 	bl	800f5a8 <prvAddNewTaskToReadyList>
 800f3e6:	e001      	b.n	800f3ec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f3ec:	697b      	ldr	r3, [r7, #20]
	}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3728      	adds	r7, #40	; 0x28
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b08c      	sub	sp, #48	; 0x30
 800f3fa:	af04      	add	r7, sp, #16
 800f3fc:	60f8      	str	r0, [r7, #12]
 800f3fe:	60b9      	str	r1, [r7, #8]
 800f400:	603b      	str	r3, [r7, #0]
 800f402:	4613      	mov	r3, r2
 800f404:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f406:	88fb      	ldrh	r3, [r7, #6]
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4618      	mov	r0, r3
 800f40c:	f001 fad3 	bl	80109b6 <pvPortMalloc>
 800f410:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d00e      	beq.n	800f436 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f418:	2058      	movs	r0, #88	; 0x58
 800f41a:	f001 facc 	bl	80109b6 <pvPortMalloc>
 800f41e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d003      	beq.n	800f42e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	697a      	ldr	r2, [r7, #20]
 800f42a:	631a      	str	r2, [r3, #48]	; 0x30
 800f42c:	e005      	b.n	800f43a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f42e:	6978      	ldr	r0, [r7, #20]
 800f430:	f001 facf 	bl	80109d2 <vPortFree>
 800f434:	e001      	b.n	800f43a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f436:	2300      	movs	r3, #0
 800f438:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d017      	beq.n	800f470 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	2200      	movs	r2, #0
 800f444:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f448:	88fa      	ldrh	r2, [r7, #6]
 800f44a:	2300      	movs	r3, #0
 800f44c:	9303      	str	r3, [sp, #12]
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	9302      	str	r3, [sp, #8]
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	9301      	str	r3, [sp, #4]
 800f456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	68b9      	ldr	r1, [r7, #8]
 800f45e:	68f8      	ldr	r0, [r7, #12]
 800f460:	f000 f80e 	bl	800f480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f464:	69f8      	ldr	r0, [r7, #28]
 800f466:	f000 f89f 	bl	800f5a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f46a:	2301      	movs	r3, #1
 800f46c:	61bb      	str	r3, [r7, #24]
 800f46e:	e002      	b.n	800f476 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f470:	f04f 33ff 	mov.w	r3, #4294967295
 800f474:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f476:	69bb      	ldr	r3, [r7, #24]
	}
 800f478:	4618      	mov	r0, r3
 800f47a:	3720      	adds	r7, #32
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b088      	sub	sp, #32
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	607a      	str	r2, [r7, #4]
 800f48c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	009b      	lsls	r3, r3, #2
 800f496:	461a      	mov	r2, r3
 800f498:	21a5      	movs	r1, #165	; 0xa5
 800f49a:	f001 fae7 	bl	8010a6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f4a2:	6879      	ldr	r1, [r7, #4]
 800f4a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f4a8:	440b      	add	r3, r1
 800f4aa:	009b      	lsls	r3, r3, #2
 800f4ac:	4413      	add	r3, r2
 800f4ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	f023 0307 	bic.w	r3, r3, #7
 800f4b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	f003 0307 	and.w	r3, r3, #7
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d00c      	beq.n	800f4dc <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c6:	b672      	cpsid	i
 800f4c8:	f383 8811 	msr	BASEPRI, r3
 800f4cc:	f3bf 8f6f 	isb	sy
 800f4d0:	f3bf 8f4f 	dsb	sy
 800f4d4:	b662      	cpsie	i
 800f4d6:	617b      	str	r3, [r7, #20]
}
 800f4d8:	bf00      	nop
 800f4da:	e7fe      	b.n	800f4da <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d01f      	beq.n	800f522 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	61fb      	str	r3, [r7, #28]
 800f4e6:	e012      	b.n	800f50e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	7819      	ldrb	r1, [r3, #0]
 800f4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	3334      	adds	r3, #52	; 0x34
 800f4f8:	460a      	mov	r2, r1
 800f4fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f4fc:	68ba      	ldr	r2, [r7, #8]
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	4413      	add	r3, r2
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d006      	beq.n	800f516 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	3301      	adds	r3, #1
 800f50c:	61fb      	str	r3, [r7, #28]
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	2b0f      	cmp	r3, #15
 800f512:	d9e9      	bls.n	800f4e8 <prvInitialiseNewTask+0x68>
 800f514:	e000      	b.n	800f518 <prvInitialiseNewTask+0x98>
			{
				break;
 800f516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	2200      	movs	r2, #0
 800f51c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f520:	e003      	b.n	800f52a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	2200      	movs	r2, #0
 800f526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52c:	2b06      	cmp	r3, #6
 800f52e:	d901      	bls.n	800f534 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f530:	2306      	movs	r3, #6
 800f532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f53e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f542:	2200      	movs	r2, #0
 800f544:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f548:	3304      	adds	r3, #4
 800f54a:	4618      	mov	r0, r3
 800f54c:	f7fe fe68 	bl	800e220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f552:	3318      	adds	r3, #24
 800f554:	4618      	mov	r0, r3
 800f556:	f7fe fe63 	bl	800e220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f55e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	f1c3 0207 	rsb	r2, r3, #7
 800f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f56e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f572:	2200      	movs	r2, #0
 800f574:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f578:	2200      	movs	r2, #0
 800f57a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	2200      	movs	r2, #0
 800f580:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f584:	683a      	ldr	r2, [r7, #0]
 800f586:	68f9      	ldr	r1, [r7, #12]
 800f588:	69b8      	ldr	r0, [r7, #24]
 800f58a:	f000 ff47 	bl	801041c <pxPortInitialiseStack>
 800f58e:	4602      	mov	r2, r0
 800f590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d002      	beq.n	800f5a0 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f59e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5a0:	bf00      	nop
 800f5a2:	3720      	adds	r7, #32
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f5b0:	f001 f844 	bl	801063c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f5b4:	4b2a      	ldr	r3, [pc, #168]	; (800f660 <prvAddNewTaskToReadyList+0xb8>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	4a29      	ldr	r2, [pc, #164]	; (800f660 <prvAddNewTaskToReadyList+0xb8>)
 800f5bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f5be:	4b29      	ldr	r3, [pc, #164]	; (800f664 <prvAddNewTaskToReadyList+0xbc>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d109      	bne.n	800f5da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f5c6:	4a27      	ldr	r2, [pc, #156]	; (800f664 <prvAddNewTaskToReadyList+0xbc>)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f5cc:	4b24      	ldr	r3, [pc, #144]	; (800f660 <prvAddNewTaskToReadyList+0xb8>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d110      	bne.n	800f5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f5d4:	f000 fc22 	bl	800fe1c <prvInitialiseTaskLists>
 800f5d8:	e00d      	b.n	800f5f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f5da:	4b23      	ldr	r3, [pc, #140]	; (800f668 <prvAddNewTaskToReadyList+0xc0>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d109      	bne.n	800f5f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f5e2:	4b20      	ldr	r3, [pc, #128]	; (800f664 <prvAddNewTaskToReadyList+0xbc>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d802      	bhi.n	800f5f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f5f0:	4a1c      	ldr	r2, [pc, #112]	; (800f664 <prvAddNewTaskToReadyList+0xbc>)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f5f6:	4b1d      	ldr	r3, [pc, #116]	; (800f66c <prvAddNewTaskToReadyList+0xc4>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	4a1b      	ldr	r2, [pc, #108]	; (800f66c <prvAddNewTaskToReadyList+0xc4>)
 800f5fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f604:	2201      	movs	r2, #1
 800f606:	409a      	lsls	r2, r3
 800f608:	4b19      	ldr	r3, [pc, #100]	; (800f670 <prvAddNewTaskToReadyList+0xc8>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4313      	orrs	r3, r2
 800f60e:	4a18      	ldr	r2, [pc, #96]	; (800f670 <prvAddNewTaskToReadyList+0xc8>)
 800f610:	6013      	str	r3, [r2, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f616:	4613      	mov	r3, r2
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	4413      	add	r3, r2
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4a15      	ldr	r2, [pc, #84]	; (800f674 <prvAddNewTaskToReadyList+0xcc>)
 800f620:	441a      	add	r2, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	3304      	adds	r3, #4
 800f626:	4619      	mov	r1, r3
 800f628:	4610      	mov	r0, r2
 800f62a:	f7fe fe06 	bl	800e23a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f62e:	f001 f839 	bl	80106a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f632:	4b0d      	ldr	r3, [pc, #52]	; (800f668 <prvAddNewTaskToReadyList+0xc0>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00e      	beq.n	800f658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f63a:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <prvAddNewTaskToReadyList+0xbc>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f644:	429a      	cmp	r2, r3
 800f646:	d207      	bcs.n	800f658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f648:	4b0b      	ldr	r3, [pc, #44]	; (800f678 <prvAddNewTaskToReadyList+0xd0>)
 800f64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f658:	bf00      	nop
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	200008a8 	.word	0x200008a8
 800f664:	200007a8 	.word	0x200007a8
 800f668:	200008b4 	.word	0x200008b4
 800f66c:	200008c4 	.word	0x200008c4
 800f670:	200008b0 	.word	0x200008b0
 800f674:	200007ac 	.word	0x200007ac
 800f678:	e000ed04 	.word	0xe000ed04

0800f67c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f684:	2300      	movs	r3, #0
 800f686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d019      	beq.n	800f6c2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f68e:	4b14      	ldr	r3, [pc, #80]	; (800f6e0 <vTaskDelay+0x64>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00c      	beq.n	800f6b0 <vTaskDelay+0x34>
	__asm volatile
 800f696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69a:	b672      	cpsid	i
 800f69c:	f383 8811 	msr	BASEPRI, r3
 800f6a0:	f3bf 8f6f 	isb	sy
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	b662      	cpsie	i
 800f6aa:	60bb      	str	r3, [r7, #8]
}
 800f6ac:	bf00      	nop
 800f6ae:	e7fe      	b.n	800f6ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f6b0:	f000 f87e 	bl	800f7b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fe4a 	bl	8010350 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f6bc:	f000 f886 	bl	800f7cc <xTaskResumeAll>
 800f6c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d107      	bne.n	800f6d8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f6c8:	4b06      	ldr	r3, [pc, #24]	; (800f6e4 <vTaskDelay+0x68>)
 800f6ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ce:	601a      	str	r2, [r3, #0]
 800f6d0:	f3bf 8f4f 	dsb	sy
 800f6d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f6d8:	bf00      	nop
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	200008d0 	.word	0x200008d0
 800f6e4:	e000ed04 	.word	0xe000ed04

0800f6e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b08a      	sub	sp, #40	; 0x28
 800f6ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f6f6:	463a      	mov	r2, r7
 800f6f8:	1d39      	adds	r1, r7, #4
 800f6fa:	f107 0308 	add.w	r3, r7, #8
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7f0 ff6c 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f704:	6839      	ldr	r1, [r7, #0]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	9202      	str	r2, [sp, #8]
 800f70c:	9301      	str	r3, [sp, #4]
 800f70e:	2300      	movs	r3, #0
 800f710:	9300      	str	r3, [sp, #0]
 800f712:	2300      	movs	r3, #0
 800f714:	460a      	mov	r2, r1
 800f716:	4920      	ldr	r1, [pc, #128]	; (800f798 <vTaskStartScheduler+0xb0>)
 800f718:	4820      	ldr	r0, [pc, #128]	; (800f79c <vTaskStartScheduler+0xb4>)
 800f71a:	f7ff fe09 	bl	800f330 <xTaskCreateStatic>
 800f71e:	4603      	mov	r3, r0
 800f720:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <vTaskStartScheduler+0xb8>)
 800f722:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f724:	4b1e      	ldr	r3, [pc, #120]	; (800f7a0 <vTaskStartScheduler+0xb8>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f72c:	2301      	movs	r3, #1
 800f72e:	617b      	str	r3, [r7, #20]
 800f730:	e001      	b.n	800f736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f732:	2300      	movs	r3, #0
 800f734:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d118      	bne.n	800f76e <vTaskStartScheduler+0x86>
	__asm volatile
 800f73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f740:	b672      	cpsid	i
 800f742:	f383 8811 	msr	BASEPRI, r3
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	b662      	cpsie	i
 800f750:	613b      	str	r3, [r7, #16]
}
 800f752:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f754:	4b13      	ldr	r3, [pc, #76]	; (800f7a4 <vTaskStartScheduler+0xbc>)
 800f756:	f04f 32ff 	mov.w	r2, #4294967295
 800f75a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f75c:	4b12      	ldr	r3, [pc, #72]	; (800f7a8 <vTaskStartScheduler+0xc0>)
 800f75e:	2201      	movs	r2, #1
 800f760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f762:	4b12      	ldr	r3, [pc, #72]	; (800f7ac <vTaskStartScheduler+0xc4>)
 800f764:	2200      	movs	r2, #0
 800f766:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f768:	f000 feea 	bl	8010540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f76c:	e010      	b.n	800f790 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f774:	d10c      	bne.n	800f790 <vTaskStartScheduler+0xa8>
	__asm volatile
 800f776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77a:	b672      	cpsid	i
 800f77c:	f383 8811 	msr	BASEPRI, r3
 800f780:	f3bf 8f6f 	isb	sy
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	b662      	cpsie	i
 800f78a:	60fb      	str	r3, [r7, #12]
}
 800f78c:	bf00      	nop
 800f78e:	e7fe      	b.n	800f78e <vTaskStartScheduler+0xa6>
}
 800f790:	bf00      	nop
 800f792:	3718      	adds	r7, #24
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	08011bc0 	.word	0x08011bc0
 800f79c:	0800fde9 	.word	0x0800fde9
 800f7a0:	200008cc 	.word	0x200008cc
 800f7a4:	200008c8 	.word	0x200008c8
 800f7a8:	200008b4 	.word	0x200008b4
 800f7ac:	200008ac 	.word	0x200008ac

0800f7b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f7b4:	4b04      	ldr	r3, [pc, #16]	; (800f7c8 <vTaskSuspendAll+0x18>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	4a03      	ldr	r2, [pc, #12]	; (800f7c8 <vTaskSuspendAll+0x18>)
 800f7bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f7be:	bf00      	nop
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr
 800f7c8:	200008d0 	.word	0x200008d0

0800f7cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7da:	4b42      	ldr	r3, [pc, #264]	; (800f8e4 <xTaskResumeAll+0x118>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d10c      	bne.n	800f7fc <xTaskResumeAll+0x30>
	__asm volatile
 800f7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e6:	b672      	cpsid	i
 800f7e8:	f383 8811 	msr	BASEPRI, r3
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	f3bf 8f4f 	dsb	sy
 800f7f4:	b662      	cpsie	i
 800f7f6:	603b      	str	r3, [r7, #0]
}
 800f7f8:	bf00      	nop
 800f7fa:	e7fe      	b.n	800f7fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7fc:	f000 ff1e 	bl	801063c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f800:	4b38      	ldr	r3, [pc, #224]	; (800f8e4 <xTaskResumeAll+0x118>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	3b01      	subs	r3, #1
 800f806:	4a37      	ldr	r2, [pc, #220]	; (800f8e4 <xTaskResumeAll+0x118>)
 800f808:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f80a:	4b36      	ldr	r3, [pc, #216]	; (800f8e4 <xTaskResumeAll+0x118>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d161      	bne.n	800f8d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f812:	4b35      	ldr	r3, [pc, #212]	; (800f8e8 <xTaskResumeAll+0x11c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d05d      	beq.n	800f8d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f81a:	e02e      	b.n	800f87a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f81c:	4b33      	ldr	r3, [pc, #204]	; (800f8ec <xTaskResumeAll+0x120>)
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	3318      	adds	r3, #24
 800f828:	4618      	mov	r0, r3
 800f82a:	f7fe fd63 	bl	800e2f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	3304      	adds	r3, #4
 800f832:	4618      	mov	r0, r3
 800f834:	f7fe fd5e 	bl	800e2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f83c:	2201      	movs	r2, #1
 800f83e:	409a      	lsls	r2, r3
 800f840:	4b2b      	ldr	r3, [pc, #172]	; (800f8f0 <xTaskResumeAll+0x124>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4313      	orrs	r3, r2
 800f846:	4a2a      	ldr	r2, [pc, #168]	; (800f8f0 <xTaskResumeAll+0x124>)
 800f848:	6013      	str	r3, [r2, #0]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84e:	4613      	mov	r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	4413      	add	r3, r2
 800f854:	009b      	lsls	r3, r3, #2
 800f856:	4a27      	ldr	r2, [pc, #156]	; (800f8f4 <xTaskResumeAll+0x128>)
 800f858:	441a      	add	r2, r3
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3304      	adds	r3, #4
 800f85e:	4619      	mov	r1, r3
 800f860:	4610      	mov	r0, r2
 800f862:	f7fe fcea 	bl	800e23a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f86a:	4b23      	ldr	r3, [pc, #140]	; (800f8f8 <xTaskResumeAll+0x12c>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f870:	429a      	cmp	r2, r3
 800f872:	d302      	bcc.n	800f87a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f874:	4b21      	ldr	r3, [pc, #132]	; (800f8fc <xTaskResumeAll+0x130>)
 800f876:	2201      	movs	r2, #1
 800f878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f87a:	4b1c      	ldr	r3, [pc, #112]	; (800f8ec <xTaskResumeAll+0x120>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d1cc      	bne.n	800f81c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d001      	beq.n	800f88c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f888:	f000 fb68 	bl	800ff5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f88c:	4b1c      	ldr	r3, [pc, #112]	; (800f900 <xTaskResumeAll+0x134>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d010      	beq.n	800f8ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f898:	f000 f858 	bl	800f94c <xTaskIncrementTick>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d002      	beq.n	800f8a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f8a2:	4b16      	ldr	r3, [pc, #88]	; (800f8fc <xTaskResumeAll+0x130>)
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d1f1      	bne.n	800f898 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800f8b4:	4b12      	ldr	r3, [pc, #72]	; (800f900 <xTaskResumeAll+0x134>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f8ba:	4b10      	ldr	r3, [pc, #64]	; (800f8fc <xTaskResumeAll+0x130>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d009      	beq.n	800f8d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f8c6:	4b0f      	ldr	r3, [pc, #60]	; (800f904 <xTaskResumeAll+0x138>)
 800f8c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8d6:	f000 fee5 	bl	80106a4 <vPortExitCritical>

	return xAlreadyYielded;
 800f8da:	68bb      	ldr	r3, [r7, #8]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	200008d0 	.word	0x200008d0
 800f8e8:	200008a8 	.word	0x200008a8
 800f8ec:	20000868 	.word	0x20000868
 800f8f0:	200008b0 	.word	0x200008b0
 800f8f4:	200007ac 	.word	0x200007ac
 800f8f8:	200007a8 	.word	0x200007a8
 800f8fc:	200008bc 	.word	0x200008bc
 800f900:	200008b8 	.word	0x200008b8
 800f904:	e000ed04 	.word	0xe000ed04

0800f908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f90e:	4b05      	ldr	r3, [pc, #20]	; (800f924 <xTaskGetTickCount+0x1c>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f914:	687b      	ldr	r3, [r7, #4]
}
 800f916:	4618      	mov	r0, r3
 800f918:	370c      	adds	r7, #12
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	200008ac 	.word	0x200008ac

0800f928 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f92e:	f000 ff6d 	bl	801080c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f932:	2300      	movs	r3, #0
 800f934:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f936:	4b04      	ldr	r3, [pc, #16]	; (800f948 <xTaskGetTickCountFromISR+0x20>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f93c:	683b      	ldr	r3, [r7, #0]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	200008ac 	.word	0x200008ac

0800f94c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b086      	sub	sp, #24
 800f950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f952:	2300      	movs	r3, #0
 800f954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f956:	4b4f      	ldr	r3, [pc, #316]	; (800fa94 <xTaskIncrementTick+0x148>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f040 808a 	bne.w	800fa74 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f960:	4b4d      	ldr	r3, [pc, #308]	; (800fa98 <xTaskIncrementTick+0x14c>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	3301      	adds	r3, #1
 800f966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f968:	4a4b      	ldr	r2, [pc, #300]	; (800fa98 <xTaskIncrementTick+0x14c>)
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d122      	bne.n	800f9ba <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f974:	4b49      	ldr	r3, [pc, #292]	; (800fa9c <xTaskIncrementTick+0x150>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00c      	beq.n	800f998 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f982:	b672      	cpsid	i
 800f984:	f383 8811 	msr	BASEPRI, r3
 800f988:	f3bf 8f6f 	isb	sy
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	b662      	cpsie	i
 800f992:	603b      	str	r3, [r7, #0]
}
 800f994:	bf00      	nop
 800f996:	e7fe      	b.n	800f996 <xTaskIncrementTick+0x4a>
 800f998:	4b40      	ldr	r3, [pc, #256]	; (800fa9c <xTaskIncrementTick+0x150>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	60fb      	str	r3, [r7, #12]
 800f99e:	4b40      	ldr	r3, [pc, #256]	; (800faa0 <xTaskIncrementTick+0x154>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a3e      	ldr	r2, [pc, #248]	; (800fa9c <xTaskIncrementTick+0x150>)
 800f9a4:	6013      	str	r3, [r2, #0]
 800f9a6:	4a3e      	ldr	r2, [pc, #248]	; (800faa0 <xTaskIncrementTick+0x154>)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6013      	str	r3, [r2, #0]
 800f9ac:	4b3d      	ldr	r3, [pc, #244]	; (800faa4 <xTaskIncrementTick+0x158>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	4a3c      	ldr	r2, [pc, #240]	; (800faa4 <xTaskIncrementTick+0x158>)
 800f9b4:	6013      	str	r3, [r2, #0]
 800f9b6:	f000 fad1 	bl	800ff5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f9ba:	4b3b      	ldr	r3, [pc, #236]	; (800faa8 <xTaskIncrementTick+0x15c>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d348      	bcc.n	800fa56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9c4:	4b35      	ldr	r3, [pc, #212]	; (800fa9c <xTaskIncrementTick+0x150>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d104      	bne.n	800f9d8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9ce:	4b36      	ldr	r3, [pc, #216]	; (800faa8 <xTaskIncrementTick+0x15c>)
 800f9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d4:	601a      	str	r2, [r3, #0]
					break;
 800f9d6:	e03e      	b.n	800fa56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9d8:	4b30      	ldr	r3, [pc, #192]	; (800fa9c <xTaskIncrementTick+0x150>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9e8:	693a      	ldr	r2, [r7, #16]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d203      	bcs.n	800f9f8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9f0:	4a2d      	ldr	r2, [pc, #180]	; (800faa8 <xTaskIncrementTick+0x15c>)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9f6:	e02e      	b.n	800fa56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7fe fc79 	bl	800e2f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d004      	beq.n	800fa14 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	3318      	adds	r3, #24
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fe fc70 	bl	800e2f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa18:	2201      	movs	r2, #1
 800fa1a:	409a      	lsls	r2, r3
 800fa1c:	4b23      	ldr	r3, [pc, #140]	; (800faac <xTaskIncrementTick+0x160>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4313      	orrs	r3, r2
 800fa22:	4a22      	ldr	r2, [pc, #136]	; (800faac <xTaskIncrementTick+0x160>)
 800fa24:	6013      	str	r3, [r2, #0]
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4413      	add	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4a1f      	ldr	r2, [pc, #124]	; (800fab0 <xTaskIncrementTick+0x164>)
 800fa34:	441a      	add	r2, r3
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	f7fe fbfc 	bl	800e23a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa46:	4b1b      	ldr	r3, [pc, #108]	; (800fab4 <xTaskIncrementTick+0x168>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d3b9      	bcc.n	800f9c4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800fa50:	2301      	movs	r3, #1
 800fa52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa54:	e7b6      	b.n	800f9c4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa56:	4b17      	ldr	r3, [pc, #92]	; (800fab4 <xTaskIncrementTick+0x168>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5c:	4914      	ldr	r1, [pc, #80]	; (800fab0 <xTaskIncrementTick+0x164>)
 800fa5e:	4613      	mov	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	4413      	add	r3, r2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	440b      	add	r3, r1
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d907      	bls.n	800fa7e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	617b      	str	r3, [r7, #20]
 800fa72:	e004      	b.n	800fa7e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fa74:	4b10      	ldr	r3, [pc, #64]	; (800fab8 <xTaskIncrementTick+0x16c>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	4a0f      	ldr	r2, [pc, #60]	; (800fab8 <xTaskIncrementTick+0x16c>)
 800fa7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fa7e:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <xTaskIncrementTick+0x170>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d001      	beq.n	800fa8a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800fa86:	2301      	movs	r3, #1
 800fa88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fa8a:	697b      	ldr	r3, [r7, #20]
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	200008d0 	.word	0x200008d0
 800fa98:	200008ac 	.word	0x200008ac
 800fa9c:	20000860 	.word	0x20000860
 800faa0:	20000864 	.word	0x20000864
 800faa4:	200008c0 	.word	0x200008c0
 800faa8:	200008c8 	.word	0x200008c8
 800faac:	200008b0 	.word	0x200008b0
 800fab0:	200007ac 	.word	0x200007ac
 800fab4:	200007a8 	.word	0x200007a8
 800fab8:	200008b8 	.word	0x200008b8
 800fabc:	200008bc 	.word	0x200008bc

0800fac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b088      	sub	sp, #32
 800fac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fac6:	4b3a      	ldr	r3, [pc, #232]	; (800fbb0 <vTaskSwitchContext+0xf0>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d003      	beq.n	800fad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800face:	4b39      	ldr	r3, [pc, #228]	; (800fbb4 <vTaskSwitchContext+0xf4>)
 800fad0:	2201      	movs	r2, #1
 800fad2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fad4:	e068      	b.n	800fba8 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800fad6:	4b37      	ldr	r3, [pc, #220]	; (800fbb4 <vTaskSwitchContext+0xf4>)
 800fad8:	2200      	movs	r2, #0
 800fada:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fadc:	4b36      	ldr	r3, [pc, #216]	; (800fbb8 <vTaskSwitchContext+0xf8>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fae2:	61fb      	str	r3, [r7, #28]
 800fae4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fae8:	61bb      	str	r3, [r7, #24]
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	69ba      	ldr	r2, [r7, #24]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d111      	bne.n	800fb18 <vTaskSwitchContext+0x58>
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	3304      	adds	r3, #4
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	69ba      	ldr	r2, [r7, #24]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d10b      	bne.n	800fb18 <vTaskSwitchContext+0x58>
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	3308      	adds	r3, #8
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	69ba      	ldr	r2, [r7, #24]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d105      	bne.n	800fb18 <vTaskSwitchContext+0x58>
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	330c      	adds	r3, #12
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	69ba      	ldr	r2, [r7, #24]
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d008      	beq.n	800fb2a <vTaskSwitchContext+0x6a>
 800fb18:	4b27      	ldr	r3, [pc, #156]	; (800fbb8 <vTaskSwitchContext+0xf8>)
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	4b26      	ldr	r3, [pc, #152]	; (800fbb8 <vTaskSwitchContext+0xf8>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	3334      	adds	r3, #52	; 0x34
 800fb22:	4619      	mov	r1, r3
 800fb24:	4610      	mov	r0, r2
 800fb26:	f7f0 fd46 	bl	80005b6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb2a:	4b24      	ldr	r3, [pc, #144]	; (800fbbc <vTaskSwitchContext+0xfc>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	fab3 f383 	clz	r3, r3
 800fb36:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fb38:	7afb      	ldrb	r3, [r7, #11]
 800fb3a:	f1c3 031f 	rsb	r3, r3, #31
 800fb3e:	617b      	str	r3, [r7, #20]
 800fb40:	491f      	ldr	r1, [pc, #124]	; (800fbc0 <vTaskSwitchContext+0x100>)
 800fb42:	697a      	ldr	r2, [r7, #20]
 800fb44:	4613      	mov	r3, r2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4413      	add	r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	440b      	add	r3, r1
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10c      	bne.n	800fb6e <vTaskSwitchContext+0xae>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb58:	b672      	cpsid	i
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	b662      	cpsie	i
 800fb68:	607b      	str	r3, [r7, #4]
}
 800fb6a:	bf00      	nop
 800fb6c:	e7fe      	b.n	800fb6c <vTaskSwitchContext+0xac>
 800fb6e:	697a      	ldr	r2, [r7, #20]
 800fb70:	4613      	mov	r3, r2
 800fb72:	009b      	lsls	r3, r3, #2
 800fb74:	4413      	add	r3, r2
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4a11      	ldr	r2, [pc, #68]	; (800fbc0 <vTaskSwitchContext+0x100>)
 800fb7a:	4413      	add	r3, r2
 800fb7c:	613b      	str	r3, [r7, #16]
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	685a      	ldr	r2, [r3, #4]
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	605a      	str	r2, [r3, #4]
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	685a      	ldr	r2, [r3, #4]
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	3308      	adds	r3, #8
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d104      	bne.n	800fb9e <vTaskSwitchContext+0xde>
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	685a      	ldr	r2, [r3, #4]
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	605a      	str	r2, [r3, #4]
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	4a04      	ldr	r2, [pc, #16]	; (800fbb8 <vTaskSwitchContext+0xf8>)
 800fba6:	6013      	str	r3, [r2, #0]
}
 800fba8:	bf00      	nop
 800fbaa:	3720      	adds	r7, #32
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	200008d0 	.word	0x200008d0
 800fbb4:	200008bc 	.word	0x200008bc
 800fbb8:	200007a8 	.word	0x200007a8
 800fbbc:	200008b0 	.word	0x200008b0
 800fbc0:	200007ac 	.word	0x200007ac

0800fbc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d10c      	bne.n	800fbee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd8:	b672      	cpsid	i
 800fbda:	f383 8811 	msr	BASEPRI, r3
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	b662      	cpsie	i
 800fbe8:	60fb      	str	r3, [r7, #12]
}
 800fbea:	bf00      	nop
 800fbec:	e7fe      	b.n	800fbec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbee:	4b07      	ldr	r3, [pc, #28]	; (800fc0c <vTaskPlaceOnEventList+0x48>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	3318      	adds	r3, #24
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7fe fb43 	bl	800e282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fbfc:	2101      	movs	r1, #1
 800fbfe:	6838      	ldr	r0, [r7, #0]
 800fc00:	f000 fba6 	bl	8010350 <prvAddCurrentTaskToDelayedList>
}
 800fc04:	bf00      	nop
 800fc06:	3710      	adds	r7, #16
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	200007a8 	.word	0x200007a8

0800fc10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b086      	sub	sp, #24
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d10c      	bne.n	800fc40 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800fc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2a:	b672      	cpsid	i
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	b662      	cpsie	i
 800fc3a:	60fb      	str	r3, [r7, #12]
}
 800fc3c:	bf00      	nop
 800fc3e:	e7fe      	b.n	800fc3e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	3318      	adds	r3, #24
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fe fb55 	bl	800e2f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc4a:	4b1d      	ldr	r3, [pc, #116]	; (800fcc0 <xTaskRemoveFromEventList+0xb0>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d11c      	bne.n	800fc8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	3304      	adds	r3, #4
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fe fb4c 	bl	800e2f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc60:	2201      	movs	r2, #1
 800fc62:	409a      	lsls	r2, r3
 800fc64:	4b17      	ldr	r3, [pc, #92]	; (800fcc4 <xTaskRemoveFromEventList+0xb4>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	4a16      	ldr	r2, [pc, #88]	; (800fcc4 <xTaskRemoveFromEventList+0xb4>)
 800fc6c:	6013      	str	r3, [r2, #0]
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc72:	4613      	mov	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	4413      	add	r3, r2
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	4a13      	ldr	r2, [pc, #76]	; (800fcc8 <xTaskRemoveFromEventList+0xb8>)
 800fc7c:	441a      	add	r2, r3
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	3304      	adds	r3, #4
 800fc82:	4619      	mov	r1, r3
 800fc84:	4610      	mov	r0, r2
 800fc86:	f7fe fad8 	bl	800e23a <vListInsertEnd>
 800fc8a:	e005      	b.n	800fc98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	3318      	adds	r3, #24
 800fc90:	4619      	mov	r1, r3
 800fc92:	480e      	ldr	r0, [pc, #56]	; (800fccc <xTaskRemoveFromEventList+0xbc>)
 800fc94:	f7fe fad1 	bl	800e23a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc9c:	4b0c      	ldr	r3, [pc, #48]	; (800fcd0 <xTaskRemoveFromEventList+0xc0>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d905      	bls.n	800fcb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fca6:	2301      	movs	r3, #1
 800fca8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fcaa:	4b0a      	ldr	r3, [pc, #40]	; (800fcd4 <xTaskRemoveFromEventList+0xc4>)
 800fcac:	2201      	movs	r2, #1
 800fcae:	601a      	str	r2, [r3, #0]
 800fcb0:	e001      	b.n	800fcb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fcb6:	697b      	ldr	r3, [r7, #20]
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3718      	adds	r7, #24
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	200008d0 	.word	0x200008d0
 800fcc4:	200008b0 	.word	0x200008b0
 800fcc8:	200007ac 	.word	0x200007ac
 800fccc:	20000868 	.word	0x20000868
 800fcd0:	200007a8 	.word	0x200007a8
 800fcd4:	200008bc 	.word	0x200008bc

0800fcd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fce0:	4b06      	ldr	r3, [pc, #24]	; (800fcfc <vTaskInternalSetTimeOutState+0x24>)
 800fce2:	681a      	ldr	r2, [r3, #0]
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fce8:	4b05      	ldr	r3, [pc, #20]	; (800fd00 <vTaskInternalSetTimeOutState+0x28>)
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	605a      	str	r2, [r3, #4]
}
 800fcf0:	bf00      	nop
 800fcf2:	370c      	adds	r7, #12
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfa:	4770      	bx	lr
 800fcfc:	200008c0 	.word	0x200008c0
 800fd00:	200008ac 	.word	0x200008ac

0800fd04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b088      	sub	sp, #32
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d10c      	bne.n	800fd2e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd18:	b672      	cpsid	i
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	b662      	cpsie	i
 800fd28:	613b      	str	r3, [r7, #16]
}
 800fd2a:	bf00      	nop
 800fd2c:	e7fe      	b.n	800fd2c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d10c      	bne.n	800fd4e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800fd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd38:	b672      	cpsid	i
 800fd3a:	f383 8811 	msr	BASEPRI, r3
 800fd3e:	f3bf 8f6f 	isb	sy
 800fd42:	f3bf 8f4f 	dsb	sy
 800fd46:	b662      	cpsie	i
 800fd48:	60fb      	str	r3, [r7, #12]
}
 800fd4a:	bf00      	nop
 800fd4c:	e7fe      	b.n	800fd4c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800fd4e:	f000 fc75 	bl	801063c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fd52:	4b1d      	ldr	r3, [pc, #116]	; (800fdc8 <xTaskCheckForTimeOut+0xc4>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	69ba      	ldr	r2, [r7, #24]
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd6a:	d102      	bne.n	800fd72 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	61fb      	str	r3, [r7, #28]
 800fd70:	e023      	b.n	800fdba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	4b15      	ldr	r3, [pc, #84]	; (800fdcc <xTaskCheckForTimeOut+0xc8>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d007      	beq.n	800fd8e <xTaskCheckForTimeOut+0x8a>
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	69ba      	ldr	r2, [r7, #24]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d302      	bcc.n	800fd8e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	61fb      	str	r3, [r7, #28]
 800fd8c:	e015      	b.n	800fdba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	697a      	ldr	r2, [r7, #20]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d20b      	bcs.n	800fdb0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	1ad2      	subs	r2, r2, r3
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f7ff ff97 	bl	800fcd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	61fb      	str	r3, [r7, #28]
 800fdae:	e004      	b.n	800fdba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fdba:	f000 fc73 	bl	80106a4 <vPortExitCritical>

	return xReturn;
 800fdbe:	69fb      	ldr	r3, [r7, #28]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3720      	adds	r7, #32
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	200008ac 	.word	0x200008ac
 800fdcc:	200008c0 	.word	0x200008c0

0800fdd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fdd4:	4b03      	ldr	r3, [pc, #12]	; (800fde4 <vTaskMissedYield+0x14>)
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	601a      	str	r2, [r3, #0]
}
 800fdda:	bf00      	nop
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr
 800fde4:	200008bc 	.word	0x200008bc

0800fde8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b082      	sub	sp, #8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fdf0:	f000 f854 	bl	800fe9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fdf4:	4b07      	ldr	r3, [pc, #28]	; (800fe14 <prvIdleTask+0x2c>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d907      	bls.n	800fe0c <prvIdleTask+0x24>
			{
				taskYIELD();
 800fdfc:	4b06      	ldr	r3, [pc, #24]	; (800fe18 <prvIdleTask+0x30>)
 800fdfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe02:	601a      	str	r2, [r3, #0]
 800fe04:	f3bf 8f4f 	dsb	sy
 800fe08:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fe0c:	f7f0 fbcc 	bl	80005a8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fe10:	e7ee      	b.n	800fdf0 <prvIdleTask+0x8>
 800fe12:	bf00      	nop
 800fe14:	200007ac 	.word	0x200007ac
 800fe18:	e000ed04 	.word	0xe000ed04

0800fe1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe22:	2300      	movs	r3, #0
 800fe24:	607b      	str	r3, [r7, #4]
 800fe26:	e00c      	b.n	800fe42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4a12      	ldr	r2, [pc, #72]	; (800fe7c <prvInitialiseTaskLists+0x60>)
 800fe34:	4413      	add	r3, r2
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fe f9d2 	bl	800e1e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	607b      	str	r3, [r7, #4]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2b06      	cmp	r3, #6
 800fe46:	d9ef      	bls.n	800fe28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fe48:	480d      	ldr	r0, [pc, #52]	; (800fe80 <prvInitialiseTaskLists+0x64>)
 800fe4a:	f7fe f9c9 	bl	800e1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fe4e:	480d      	ldr	r0, [pc, #52]	; (800fe84 <prvInitialiseTaskLists+0x68>)
 800fe50:	f7fe f9c6 	bl	800e1e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fe54:	480c      	ldr	r0, [pc, #48]	; (800fe88 <prvInitialiseTaskLists+0x6c>)
 800fe56:	f7fe f9c3 	bl	800e1e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fe5a:	480c      	ldr	r0, [pc, #48]	; (800fe8c <prvInitialiseTaskLists+0x70>)
 800fe5c:	f7fe f9c0 	bl	800e1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fe60:	480b      	ldr	r0, [pc, #44]	; (800fe90 <prvInitialiseTaskLists+0x74>)
 800fe62:	f7fe f9bd 	bl	800e1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fe66:	4b0b      	ldr	r3, [pc, #44]	; (800fe94 <prvInitialiseTaskLists+0x78>)
 800fe68:	4a05      	ldr	r2, [pc, #20]	; (800fe80 <prvInitialiseTaskLists+0x64>)
 800fe6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <prvInitialiseTaskLists+0x7c>)
 800fe6e:	4a05      	ldr	r2, [pc, #20]	; (800fe84 <prvInitialiseTaskLists+0x68>)
 800fe70:	601a      	str	r2, [r3, #0]
}
 800fe72:	bf00      	nop
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	200007ac 	.word	0x200007ac
 800fe80:	20000838 	.word	0x20000838
 800fe84:	2000084c 	.word	0x2000084c
 800fe88:	20000868 	.word	0x20000868
 800fe8c:	2000087c 	.word	0x2000087c
 800fe90:	20000894 	.word	0x20000894
 800fe94:	20000860 	.word	0x20000860
 800fe98:	20000864 	.word	0x20000864

0800fe9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fea2:	e019      	b.n	800fed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fea4:	f000 fbca 	bl	801063c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fea8:	4b10      	ldr	r3, [pc, #64]	; (800feec <prvCheckTasksWaitingTermination+0x50>)
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	3304      	adds	r3, #4
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7fe fa1d 	bl	800e2f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800feba:	4b0d      	ldr	r3, [pc, #52]	; (800fef0 <prvCheckTasksWaitingTermination+0x54>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	3b01      	subs	r3, #1
 800fec0:	4a0b      	ldr	r2, [pc, #44]	; (800fef0 <prvCheckTasksWaitingTermination+0x54>)
 800fec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fec4:	4b0b      	ldr	r3, [pc, #44]	; (800fef4 <prvCheckTasksWaitingTermination+0x58>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	3b01      	subs	r3, #1
 800feca:	4a0a      	ldr	r2, [pc, #40]	; (800fef4 <prvCheckTasksWaitingTermination+0x58>)
 800fecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fece:	f000 fbe9 	bl	80106a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 f810 	bl	800fef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fed8:	4b06      	ldr	r3, [pc, #24]	; (800fef4 <prvCheckTasksWaitingTermination+0x58>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1e1      	bne.n	800fea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fee0:	bf00      	nop
 800fee2:	bf00      	nop
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	2000087c 	.word	0x2000087c
 800fef0:	200008a8 	.word	0x200008a8
 800fef4:	20000890 	.word	0x20000890

0800fef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d108      	bne.n	800ff1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f000 fd5f 	bl	80109d2 <vPortFree>
				vPortFree( pxTCB );
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 fd5c 	bl	80109d2 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ff1a:	e01a      	b.n	800ff52 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d103      	bne.n	800ff2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 fd53 	bl	80109d2 <vPortFree>
	}
 800ff2c:	e011      	b.n	800ff52 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	d00c      	beq.n	800ff52 <prvDeleteTCB+0x5a>
	__asm volatile
 800ff38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3c:	b672      	cpsid	i
 800ff3e:	f383 8811 	msr	BASEPRI, r3
 800ff42:	f3bf 8f6f 	isb	sy
 800ff46:	f3bf 8f4f 	dsb	sy
 800ff4a:	b662      	cpsie	i
 800ff4c:	60fb      	str	r3, [r7, #12]
}
 800ff4e:	bf00      	nop
 800ff50:	e7fe      	b.n	800ff50 <prvDeleteTCB+0x58>
	}
 800ff52:	bf00      	nop
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
	...

0800ff5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff62:	4b0c      	ldr	r3, [pc, #48]	; (800ff94 <prvResetNextTaskUnblockTime+0x38>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d104      	bne.n	800ff76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff6c:	4b0a      	ldr	r3, [pc, #40]	; (800ff98 <prvResetNextTaskUnblockTime+0x3c>)
 800ff6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ff74:	e008      	b.n	800ff88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff76:	4b07      	ldr	r3, [pc, #28]	; (800ff94 <prvResetNextTaskUnblockTime+0x38>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	4a04      	ldr	r2, [pc, #16]	; (800ff98 <prvResetNextTaskUnblockTime+0x3c>)
 800ff86:	6013      	str	r3, [r2, #0]
}
 800ff88:	bf00      	nop
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr
 800ff94:	20000860 	.word	0x20000860
 800ff98:	200008c8 	.word	0x200008c8

0800ff9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ffa2:	4b0b      	ldr	r3, [pc, #44]	; (800ffd0 <xTaskGetSchedulerState+0x34>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d102      	bne.n	800ffb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	607b      	str	r3, [r7, #4]
 800ffae:	e008      	b.n	800ffc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffb0:	4b08      	ldr	r3, [pc, #32]	; (800ffd4 <xTaskGetSchedulerState+0x38>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d102      	bne.n	800ffbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ffb8:	2302      	movs	r3, #2
 800ffba:	607b      	str	r3, [r7, #4]
 800ffbc:	e001      	b.n	800ffc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ffc2:	687b      	ldr	r3, [r7, #4]
	}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr
 800ffd0:	200008b4 	.word	0x200008b4
 800ffd4:	200008d0 	.word	0x200008d0

0800ffd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d069      	beq.n	80100c2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff2:	4b36      	ldr	r3, [pc, #216]	; (80100cc <xTaskPriorityInherit+0xf4>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d259      	bcs.n	80100b0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	699b      	ldr	r3, [r3, #24]
 8010000:	2b00      	cmp	r3, #0
 8010002:	db06      	blt.n	8010012 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010004:	4b31      	ldr	r3, [pc, #196]	; (80100cc <xTaskPriorityInherit+0xf4>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000a:	f1c3 0207 	rsb	r2, r3, #7
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	6959      	ldr	r1, [r3, #20]
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801001a:	4613      	mov	r3, r2
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	4413      	add	r3, r2
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	4a2b      	ldr	r2, [pc, #172]	; (80100d0 <xTaskPriorityInherit+0xf8>)
 8010024:	4413      	add	r3, r2
 8010026:	4299      	cmp	r1, r3
 8010028:	d13a      	bne.n	80100a0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	3304      	adds	r3, #4
 801002e:	4618      	mov	r0, r3
 8010030:	f7fe f960 	bl	800e2f4 <uxListRemove>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d115      	bne.n	8010066 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801003e:	4924      	ldr	r1, [pc, #144]	; (80100d0 <xTaskPriorityInherit+0xf8>)
 8010040:	4613      	mov	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	440b      	add	r3, r1
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10a      	bne.n	8010066 <xTaskPriorityInherit+0x8e>
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010054:	2201      	movs	r2, #1
 8010056:	fa02 f303 	lsl.w	r3, r2, r3
 801005a:	43da      	mvns	r2, r3
 801005c:	4b1d      	ldr	r3, [pc, #116]	; (80100d4 <xTaskPriorityInherit+0xfc>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4013      	ands	r3, r2
 8010062:	4a1c      	ldr	r2, [pc, #112]	; (80100d4 <xTaskPriorityInherit+0xfc>)
 8010064:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010066:	4b19      	ldr	r3, [pc, #100]	; (80100cc <xTaskPriorityInherit+0xf4>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010074:	2201      	movs	r2, #1
 8010076:	409a      	lsls	r2, r3
 8010078:	4b16      	ldr	r3, [pc, #88]	; (80100d4 <xTaskPriorityInherit+0xfc>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4313      	orrs	r3, r2
 801007e:	4a15      	ldr	r2, [pc, #84]	; (80100d4 <xTaskPriorityInherit+0xfc>)
 8010080:	6013      	str	r3, [r2, #0]
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010086:	4613      	mov	r3, r2
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	4413      	add	r3, r2
 801008c:	009b      	lsls	r3, r3, #2
 801008e:	4a10      	ldr	r2, [pc, #64]	; (80100d0 <xTaskPriorityInherit+0xf8>)
 8010090:	441a      	add	r2, r3
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	3304      	adds	r3, #4
 8010096:	4619      	mov	r1, r3
 8010098:	4610      	mov	r0, r2
 801009a:	f7fe f8ce 	bl	800e23a <vListInsertEnd>
 801009e:	e004      	b.n	80100aa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100a0:	4b0a      	ldr	r3, [pc, #40]	; (80100cc <xTaskPriorityInherit+0xf4>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80100aa:	2301      	movs	r3, #1
 80100ac:	60fb      	str	r3, [r7, #12]
 80100ae:	e008      	b.n	80100c2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100b4:	4b05      	ldr	r3, [pc, #20]	; (80100cc <xTaskPriorityInherit+0xf4>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d201      	bcs.n	80100c2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80100be:	2301      	movs	r3, #1
 80100c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100c2:	68fb      	ldr	r3, [r7, #12]
	}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3710      	adds	r7, #16
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	200007a8 	.word	0x200007a8
 80100d0:	200007ac 	.word	0x200007ac
 80100d4:	200008b0 	.word	0x200008b0

080100d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80100e4:	2300      	movs	r3, #0
 80100e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d072      	beq.n	80101d4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80100ee:	4b3c      	ldr	r3, [pc, #240]	; (80101e0 <xTaskPriorityDisinherit+0x108>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	693a      	ldr	r2, [r7, #16]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d00c      	beq.n	8010112 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80100f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100fc:	b672      	cpsid	i
 80100fe:	f383 8811 	msr	BASEPRI, r3
 8010102:	f3bf 8f6f 	isb	sy
 8010106:	f3bf 8f4f 	dsb	sy
 801010a:	b662      	cpsie	i
 801010c:	60fb      	str	r3, [r7, #12]
}
 801010e:	bf00      	nop
 8010110:	e7fe      	b.n	8010110 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010116:	2b00      	cmp	r3, #0
 8010118:	d10c      	bne.n	8010134 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801011a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011e:	b672      	cpsid	i
 8010120:	f383 8811 	msr	BASEPRI, r3
 8010124:	f3bf 8f6f 	isb	sy
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	b662      	cpsie	i
 801012e:	60bb      	str	r3, [r7, #8]
}
 8010130:	bf00      	nop
 8010132:	e7fe      	b.n	8010132 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010138:	1e5a      	subs	r2, r3, #1
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010146:	429a      	cmp	r2, r3
 8010148:	d044      	beq.n	80101d4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801014e:	2b00      	cmp	r3, #0
 8010150:	d140      	bne.n	80101d4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	3304      	adds	r3, #4
 8010156:	4618      	mov	r0, r3
 8010158:	f7fe f8cc 	bl	800e2f4 <uxListRemove>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d115      	bne.n	801018e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010166:	491f      	ldr	r1, [pc, #124]	; (80101e4 <xTaskPriorityDisinherit+0x10c>)
 8010168:	4613      	mov	r3, r2
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	4413      	add	r3, r2
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	440b      	add	r3, r1
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d10a      	bne.n	801018e <xTaskPriorityDisinherit+0xb6>
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017c:	2201      	movs	r2, #1
 801017e:	fa02 f303 	lsl.w	r3, r2, r3
 8010182:	43da      	mvns	r2, r3
 8010184:	4b18      	ldr	r3, [pc, #96]	; (80101e8 <xTaskPriorityDisinherit+0x110>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	4013      	ands	r3, r2
 801018a:	4a17      	ldr	r2, [pc, #92]	; (80101e8 <xTaskPriorityDisinherit+0x110>)
 801018c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019a:	f1c3 0207 	rsb	r2, r3, #7
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a6:	2201      	movs	r2, #1
 80101a8:	409a      	lsls	r2, r3
 80101aa:	4b0f      	ldr	r3, [pc, #60]	; (80101e8 <xTaskPriorityDisinherit+0x110>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	4a0d      	ldr	r2, [pc, #52]	; (80101e8 <xTaskPriorityDisinherit+0x110>)
 80101b2:	6013      	str	r3, [r2, #0]
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101b8:	4613      	mov	r3, r2
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	4413      	add	r3, r2
 80101be:	009b      	lsls	r3, r3, #2
 80101c0:	4a08      	ldr	r2, [pc, #32]	; (80101e4 <xTaskPriorityDisinherit+0x10c>)
 80101c2:	441a      	add	r2, r3
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	3304      	adds	r3, #4
 80101c8:	4619      	mov	r1, r3
 80101ca:	4610      	mov	r0, r2
 80101cc:	f7fe f835 	bl	800e23a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80101d0:	2301      	movs	r3, #1
 80101d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80101d4:	697b      	ldr	r3, [r7, #20]
	}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3718      	adds	r7, #24
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	200007a8 	.word	0x200007a8
 80101e4:	200007ac 	.word	0x200007ac
 80101e8:	200008b0 	.word	0x200008b0

080101ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b088      	sub	sp, #32
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80101fa:	2301      	movs	r3, #1
 80101fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	f000 8087 	beq.w	8010314 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801020a:	2b00      	cmp	r3, #0
 801020c:	d10c      	bne.n	8010228 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010212:	b672      	cpsid	i
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	b662      	cpsie	i
 8010222:	60fb      	str	r3, [r7, #12]
}
 8010224:	bf00      	nop
 8010226:	e7fe      	b.n	8010226 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801022c:	683a      	ldr	r2, [r7, #0]
 801022e:	429a      	cmp	r2, r3
 8010230:	d902      	bls.n	8010238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	61fb      	str	r3, [r7, #28]
 8010236:	e002      	b.n	801023e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801023c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801023e:	69bb      	ldr	r3, [r7, #24]
 8010240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010242:	69fa      	ldr	r2, [r7, #28]
 8010244:	429a      	cmp	r2, r3
 8010246:	d065      	beq.n	8010314 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801024c:	697a      	ldr	r2, [r7, #20]
 801024e:	429a      	cmp	r2, r3
 8010250:	d160      	bne.n	8010314 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010252:	4b32      	ldr	r3, [pc, #200]	; (801031c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	69ba      	ldr	r2, [r7, #24]
 8010258:	429a      	cmp	r2, r3
 801025a:	d10c      	bne.n	8010276 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 801025c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010260:	b672      	cpsid	i
 8010262:	f383 8811 	msr	BASEPRI, r3
 8010266:	f3bf 8f6f 	isb	sy
 801026a:	f3bf 8f4f 	dsb	sy
 801026e:	b662      	cpsie	i
 8010270:	60bb      	str	r3, [r7, #8]
}
 8010272:	bf00      	nop
 8010274:	e7fe      	b.n	8010274 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801027a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801027c:	69bb      	ldr	r3, [r7, #24]
 801027e:	69fa      	ldr	r2, [r7, #28]
 8010280:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	699b      	ldr	r3, [r3, #24]
 8010286:	2b00      	cmp	r3, #0
 8010288:	db04      	blt.n	8010294 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	f1c3 0207 	rsb	r2, r3, #7
 8010290:	69bb      	ldr	r3, [r7, #24]
 8010292:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	6959      	ldr	r1, [r3, #20]
 8010298:	693a      	ldr	r2, [r7, #16]
 801029a:	4613      	mov	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	4413      	add	r3, r2
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	4a1f      	ldr	r2, [pc, #124]	; (8010320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80102a4:	4413      	add	r3, r2
 80102a6:	4299      	cmp	r1, r3
 80102a8:	d134      	bne.n	8010314 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	3304      	adds	r3, #4
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fe f820 	bl	800e2f4 <uxListRemove>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d115      	bne.n	80102e6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102be:	4918      	ldr	r1, [pc, #96]	; (8010320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80102c0:	4613      	mov	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	009b      	lsls	r3, r3, #2
 80102c8:	440b      	add	r3, r1
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d10a      	bne.n	80102e6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d4:	2201      	movs	r2, #1
 80102d6:	fa02 f303 	lsl.w	r3, r2, r3
 80102da:	43da      	mvns	r2, r3
 80102dc:	4b11      	ldr	r3, [pc, #68]	; (8010324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4013      	ands	r3, r2
 80102e2:	4a10      	ldr	r2, [pc, #64]	; (8010324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80102e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102ea:	2201      	movs	r2, #1
 80102ec:	409a      	lsls	r2, r3
 80102ee:	4b0d      	ldr	r3, [pc, #52]	; (8010324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4313      	orrs	r3, r2
 80102f4:	4a0b      	ldr	r2, [pc, #44]	; (8010324 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80102f6:	6013      	str	r3, [r2, #0]
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fc:	4613      	mov	r3, r2
 80102fe:	009b      	lsls	r3, r3, #2
 8010300:	4413      	add	r3, r2
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	4a06      	ldr	r2, [pc, #24]	; (8010320 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010306:	441a      	add	r2, r3
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	3304      	adds	r3, #4
 801030c:	4619      	mov	r1, r3
 801030e:	4610      	mov	r0, r2
 8010310:	f7fd ff93 	bl	800e23a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010314:	bf00      	nop
 8010316:	3720      	adds	r7, #32
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	200007a8 	.word	0x200007a8
 8010320:	200007ac 	.word	0x200007ac
 8010324:	200008b0 	.word	0x200008b0

08010328 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010328:	b480      	push	{r7}
 801032a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801032c:	4b07      	ldr	r3, [pc, #28]	; (801034c <pvTaskIncrementMutexHeldCount+0x24>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d004      	beq.n	801033e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010334:	4b05      	ldr	r3, [pc, #20]	; (801034c <pvTaskIncrementMutexHeldCount+0x24>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801033a:	3201      	adds	r2, #1
 801033c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801033e:	4b03      	ldr	r3, [pc, #12]	; (801034c <pvTaskIncrementMutexHeldCount+0x24>)
 8010340:	681b      	ldr	r3, [r3, #0]
	}
 8010342:	4618      	mov	r0, r3
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr
 801034c:	200007a8 	.word	0x200007a8

08010350 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801035a:	4b29      	ldr	r3, [pc, #164]	; (8010400 <prvAddCurrentTaskToDelayedList+0xb0>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010360:	4b28      	ldr	r3, [pc, #160]	; (8010404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	3304      	adds	r3, #4
 8010366:	4618      	mov	r0, r3
 8010368:	f7fd ffc4 	bl	800e2f4 <uxListRemove>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10b      	bne.n	801038a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010372:	4b24      	ldr	r3, [pc, #144]	; (8010404 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010378:	2201      	movs	r2, #1
 801037a:	fa02 f303 	lsl.w	r3, r2, r3
 801037e:	43da      	mvns	r2, r3
 8010380:	4b21      	ldr	r3, [pc, #132]	; (8010408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4013      	ands	r3, r2
 8010386:	4a20      	ldr	r2, [pc, #128]	; (8010408 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010388:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010390:	d10a      	bne.n	80103a8 <prvAddCurrentTaskToDelayedList+0x58>
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d007      	beq.n	80103a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010398:	4b1a      	ldr	r3, [pc, #104]	; (8010404 <prvAddCurrentTaskToDelayedList+0xb4>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	3304      	adds	r3, #4
 801039e:	4619      	mov	r1, r3
 80103a0:	481a      	ldr	r0, [pc, #104]	; (801040c <prvAddCurrentTaskToDelayedList+0xbc>)
 80103a2:	f7fd ff4a 	bl	800e23a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80103a6:	e026      	b.n	80103f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4413      	add	r3, r2
 80103ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80103b0:	4b14      	ldr	r3, [pc, #80]	; (8010404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68ba      	ldr	r2, [r7, #8]
 80103b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80103b8:	68ba      	ldr	r2, [r7, #8]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d209      	bcs.n	80103d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103c0:	4b13      	ldr	r3, [pc, #76]	; (8010410 <prvAddCurrentTaskToDelayedList+0xc0>)
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	4b0f      	ldr	r3, [pc, #60]	; (8010404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	3304      	adds	r3, #4
 80103ca:	4619      	mov	r1, r3
 80103cc:	4610      	mov	r0, r2
 80103ce:	f7fd ff58 	bl	800e282 <vListInsert>
}
 80103d2:	e010      	b.n	80103f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103d4:	4b0f      	ldr	r3, [pc, #60]	; (8010414 <prvAddCurrentTaskToDelayedList+0xc4>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	4b0a      	ldr	r3, [pc, #40]	; (8010404 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	3304      	adds	r3, #4
 80103de:	4619      	mov	r1, r3
 80103e0:	4610      	mov	r0, r2
 80103e2:	f7fd ff4e 	bl	800e282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80103e6:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	68ba      	ldr	r2, [r7, #8]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d202      	bcs.n	80103f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80103f0:	4a09      	ldr	r2, [pc, #36]	; (8010418 <prvAddCurrentTaskToDelayedList+0xc8>)
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	6013      	str	r3, [r2, #0]
}
 80103f6:	bf00      	nop
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	200008ac 	.word	0x200008ac
 8010404:	200007a8 	.word	0x200007a8
 8010408:	200008b0 	.word	0x200008b0
 801040c:	20000894 	.word	0x20000894
 8010410:	20000864 	.word	0x20000864
 8010414:	20000860 	.word	0x20000860
 8010418:	200008c8 	.word	0x200008c8

0801041c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801041c:	b480      	push	{r7}
 801041e:	b085      	sub	sp, #20
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	3b04      	subs	r3, #4
 801042c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	3b04      	subs	r3, #4
 801043a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	f023 0201 	bic.w	r2, r3, #1
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	3b04      	subs	r3, #4
 801044a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801044c:	4a0c      	ldr	r2, [pc, #48]	; (8010480 <pxPortInitialiseStack+0x64>)
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	3b14      	subs	r3, #20
 8010456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	3b04      	subs	r3, #4
 8010462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	f06f 0202 	mvn.w	r2, #2
 801046a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	3b20      	subs	r3, #32
 8010470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010472:	68fb      	ldr	r3, [r7, #12]
}
 8010474:	4618      	mov	r0, r3
 8010476:	3714      	adds	r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr
 8010480:	08010485 	.word	0x08010485

08010484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801048a:	2300      	movs	r3, #0
 801048c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801048e:	4b14      	ldr	r3, [pc, #80]	; (80104e0 <prvTaskExitError+0x5c>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010496:	d00c      	beq.n	80104b2 <prvTaskExitError+0x2e>
	__asm volatile
 8010498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049c:	b672      	cpsid	i
 801049e:	f383 8811 	msr	BASEPRI, r3
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	f3bf 8f4f 	dsb	sy
 80104aa:	b662      	cpsie	i
 80104ac:	60fb      	str	r3, [r7, #12]
}
 80104ae:	bf00      	nop
 80104b0:	e7fe      	b.n	80104b0 <prvTaskExitError+0x2c>
	__asm volatile
 80104b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b6:	b672      	cpsid	i
 80104b8:	f383 8811 	msr	BASEPRI, r3
 80104bc:	f3bf 8f6f 	isb	sy
 80104c0:	f3bf 8f4f 	dsb	sy
 80104c4:	b662      	cpsie	i
 80104c6:	60bb      	str	r3, [r7, #8]
}
 80104c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80104ca:	bf00      	nop
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d0fc      	beq.n	80104cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80104d2:	bf00      	nop
 80104d4:	bf00      	nop
 80104d6:	3714      	adds	r7, #20
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr
 80104e0:	20000024 	.word	0x20000024
	...

080104f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80104f0:	4b07      	ldr	r3, [pc, #28]	; (8010510 <pxCurrentTCBConst2>)
 80104f2:	6819      	ldr	r1, [r3, #0]
 80104f4:	6808      	ldr	r0, [r1, #0]
 80104f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fa:	f380 8809 	msr	PSP, r0
 80104fe:	f3bf 8f6f 	isb	sy
 8010502:	f04f 0000 	mov.w	r0, #0
 8010506:	f380 8811 	msr	BASEPRI, r0
 801050a:	4770      	bx	lr
 801050c:	f3af 8000 	nop.w

08010510 <pxCurrentTCBConst2>:
 8010510:	200007a8 	.word	0x200007a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010514:	bf00      	nop
 8010516:	bf00      	nop

08010518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010518:	4808      	ldr	r0, [pc, #32]	; (801053c <prvPortStartFirstTask+0x24>)
 801051a:	6800      	ldr	r0, [r0, #0]
 801051c:	6800      	ldr	r0, [r0, #0]
 801051e:	f380 8808 	msr	MSP, r0
 8010522:	f04f 0000 	mov.w	r0, #0
 8010526:	f380 8814 	msr	CONTROL, r0
 801052a:	b662      	cpsie	i
 801052c:	b661      	cpsie	f
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	df00      	svc	0
 8010538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801053a:	bf00      	nop
 801053c:	e000ed08 	.word	0xe000ed08

08010540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010546:	4b37      	ldr	r3, [pc, #220]	; (8010624 <xPortStartScheduler+0xe4>)
 8010548:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	b2db      	uxtb	r3, r3
 8010550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	22ff      	movs	r2, #255	; 0xff
 8010556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	b2db      	uxtb	r3, r3
 801055e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010560:	78fb      	ldrb	r3, [r7, #3]
 8010562:	b2db      	uxtb	r3, r3
 8010564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010568:	b2da      	uxtb	r2, r3
 801056a:	4b2f      	ldr	r3, [pc, #188]	; (8010628 <xPortStartScheduler+0xe8>)
 801056c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801056e:	4b2f      	ldr	r3, [pc, #188]	; (801062c <xPortStartScheduler+0xec>)
 8010570:	2207      	movs	r2, #7
 8010572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010574:	e009      	b.n	801058a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010576:	4b2d      	ldr	r3, [pc, #180]	; (801062c <xPortStartScheduler+0xec>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	3b01      	subs	r3, #1
 801057c:	4a2b      	ldr	r2, [pc, #172]	; (801062c <xPortStartScheduler+0xec>)
 801057e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010580:	78fb      	ldrb	r3, [r7, #3]
 8010582:	b2db      	uxtb	r3, r3
 8010584:	005b      	lsls	r3, r3, #1
 8010586:	b2db      	uxtb	r3, r3
 8010588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801058a:	78fb      	ldrb	r3, [r7, #3]
 801058c:	b2db      	uxtb	r3, r3
 801058e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010592:	2b80      	cmp	r3, #128	; 0x80
 8010594:	d0ef      	beq.n	8010576 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010596:	4b25      	ldr	r3, [pc, #148]	; (801062c <xPortStartScheduler+0xec>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f1c3 0307 	rsb	r3, r3, #7
 801059e:	2b04      	cmp	r3, #4
 80105a0:	d00c      	beq.n	80105bc <xPortStartScheduler+0x7c>
	__asm volatile
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	b672      	cpsid	i
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	b662      	cpsie	i
 80105b6:	60bb      	str	r3, [r7, #8]
}
 80105b8:	bf00      	nop
 80105ba:	e7fe      	b.n	80105ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80105bc:	4b1b      	ldr	r3, [pc, #108]	; (801062c <xPortStartScheduler+0xec>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	021b      	lsls	r3, r3, #8
 80105c2:	4a1a      	ldr	r2, [pc, #104]	; (801062c <xPortStartScheduler+0xec>)
 80105c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80105c6:	4b19      	ldr	r3, [pc, #100]	; (801062c <xPortStartScheduler+0xec>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80105ce:	4a17      	ldr	r2, [pc, #92]	; (801062c <xPortStartScheduler+0xec>)
 80105d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	b2da      	uxtb	r2, r3
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80105da:	4b15      	ldr	r3, [pc, #84]	; (8010630 <xPortStartScheduler+0xf0>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a14      	ldr	r2, [pc, #80]	; (8010630 <xPortStartScheduler+0xf0>)
 80105e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80105e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80105e6:	4b12      	ldr	r3, [pc, #72]	; (8010630 <xPortStartScheduler+0xf0>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4a11      	ldr	r2, [pc, #68]	; (8010630 <xPortStartScheduler+0xf0>)
 80105ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80105f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80105f2:	f000 f8dd 	bl	80107b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80105f6:	4b0f      	ldr	r3, [pc, #60]	; (8010634 <xPortStartScheduler+0xf4>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80105fc:	f000 f8fc 	bl	80107f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010600:	4b0d      	ldr	r3, [pc, #52]	; (8010638 <xPortStartScheduler+0xf8>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	4a0c      	ldr	r2, [pc, #48]	; (8010638 <xPortStartScheduler+0xf8>)
 8010606:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801060a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801060c:	f7ff ff84 	bl	8010518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010610:	f7ff fa56 	bl	800fac0 <vTaskSwitchContext>
	prvTaskExitError();
 8010614:	f7ff ff36 	bl	8010484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010618:	2300      	movs	r3, #0
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	e000e400 	.word	0xe000e400
 8010628:	200008d4 	.word	0x200008d4
 801062c:	200008d8 	.word	0x200008d8
 8010630:	e000ed20 	.word	0xe000ed20
 8010634:	20000024 	.word	0x20000024
 8010638:	e000ef34 	.word	0xe000ef34

0801063c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
	__asm volatile
 8010642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010646:	b672      	cpsid	i
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	b662      	cpsie	i
 8010656:	607b      	str	r3, [r7, #4]
}
 8010658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801065a:	4b10      	ldr	r3, [pc, #64]	; (801069c <vPortEnterCritical+0x60>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	3301      	adds	r3, #1
 8010660:	4a0e      	ldr	r2, [pc, #56]	; (801069c <vPortEnterCritical+0x60>)
 8010662:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010664:	4b0d      	ldr	r3, [pc, #52]	; (801069c <vPortEnterCritical+0x60>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d111      	bne.n	8010690 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801066c:	4b0c      	ldr	r3, [pc, #48]	; (80106a0 <vPortEnterCritical+0x64>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	b2db      	uxtb	r3, r3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00c      	beq.n	8010690 <vPortEnterCritical+0x54>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067a:	b672      	cpsid	i
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	b662      	cpsie	i
 801068a:	603b      	str	r3, [r7, #0]
}
 801068c:	bf00      	nop
 801068e:	e7fe      	b.n	801068e <vPortEnterCritical+0x52>
	}
}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr
 801069c:	20000024 	.word	0x20000024
 80106a0:	e000ed04 	.word	0xe000ed04

080106a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80106aa:	4b13      	ldr	r3, [pc, #76]	; (80106f8 <vPortExitCritical+0x54>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d10c      	bne.n	80106cc <vPortExitCritical+0x28>
	__asm volatile
 80106b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b6:	b672      	cpsid	i
 80106b8:	f383 8811 	msr	BASEPRI, r3
 80106bc:	f3bf 8f6f 	isb	sy
 80106c0:	f3bf 8f4f 	dsb	sy
 80106c4:	b662      	cpsie	i
 80106c6:	607b      	str	r3, [r7, #4]
}
 80106c8:	bf00      	nop
 80106ca:	e7fe      	b.n	80106ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80106cc:	4b0a      	ldr	r3, [pc, #40]	; (80106f8 <vPortExitCritical+0x54>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3b01      	subs	r3, #1
 80106d2:	4a09      	ldr	r2, [pc, #36]	; (80106f8 <vPortExitCritical+0x54>)
 80106d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80106d6:	4b08      	ldr	r3, [pc, #32]	; (80106f8 <vPortExitCritical+0x54>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d105      	bne.n	80106ea <vPortExitCritical+0x46>
 80106de:	2300      	movs	r3, #0
 80106e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	f383 8811 	msr	BASEPRI, r3
}
 80106e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80106ea:	bf00      	nop
 80106ec:	370c      	adds	r7, #12
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop
 80106f8:	20000024 	.word	0x20000024
 80106fc:	00000000 	.word	0x00000000

08010700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010700:	f3ef 8009 	mrs	r0, PSP
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	4b15      	ldr	r3, [pc, #84]	; (8010760 <pxCurrentTCBConst>)
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	f01e 0f10 	tst.w	lr, #16
 8010710:	bf08      	it	eq
 8010712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071a:	6010      	str	r0, [r2, #0]
 801071c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010724:	b672      	cpsid	i
 8010726:	f380 8811 	msr	BASEPRI, r0
 801072a:	f3bf 8f4f 	dsb	sy
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	b662      	cpsie	i
 8010734:	f7ff f9c4 	bl	800fac0 <vTaskSwitchContext>
 8010738:	f04f 0000 	mov.w	r0, #0
 801073c:	f380 8811 	msr	BASEPRI, r0
 8010740:	bc09      	pop	{r0, r3}
 8010742:	6819      	ldr	r1, [r3, #0]
 8010744:	6808      	ldr	r0, [r1, #0]
 8010746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074a:	f01e 0f10 	tst.w	lr, #16
 801074e:	bf08      	it	eq
 8010750:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010754:	f380 8809 	msr	PSP, r0
 8010758:	f3bf 8f6f 	isb	sy
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop

08010760 <pxCurrentTCBConst>:
 8010760:	200007a8 	.word	0x200007a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010764:	bf00      	nop
 8010766:	bf00      	nop

08010768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
	__asm volatile
 801076e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010772:	b672      	cpsid	i
 8010774:	f383 8811 	msr	BASEPRI, r3
 8010778:	f3bf 8f6f 	isb	sy
 801077c:	f3bf 8f4f 	dsb	sy
 8010780:	b662      	cpsie	i
 8010782:	607b      	str	r3, [r7, #4]
}
 8010784:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010786:	f7ff f8e1 	bl	800f94c <xTaskIncrementTick>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d003      	beq.n	8010798 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010790:	4b06      	ldr	r3, [pc, #24]	; (80107ac <xPortSysTickHandler+0x44>)
 8010792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010796:	601a      	str	r2, [r3, #0]
 8010798:	2300      	movs	r3, #0
 801079a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	f383 8811 	msr	BASEPRI, r3
}
 80107a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80107a4:	bf00      	nop
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	e000ed04 	.word	0xe000ed04

080107b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80107b0:	b480      	push	{r7}
 80107b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80107b4:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <vPortSetupTimerInterrupt+0x34>)
 80107b6:	2200      	movs	r2, #0
 80107b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107ba:	4b0b      	ldr	r3, [pc, #44]	; (80107e8 <vPortSetupTimerInterrupt+0x38>)
 80107bc:	2200      	movs	r2, #0
 80107be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107c0:	4b0a      	ldr	r3, [pc, #40]	; (80107ec <vPortSetupTimerInterrupt+0x3c>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4a0a      	ldr	r2, [pc, #40]	; (80107f0 <vPortSetupTimerInterrupt+0x40>)
 80107c6:	fba2 2303 	umull	r2, r3, r2, r3
 80107ca:	099b      	lsrs	r3, r3, #6
 80107cc:	4a09      	ldr	r2, [pc, #36]	; (80107f4 <vPortSetupTimerInterrupt+0x44>)
 80107ce:	3b01      	subs	r3, #1
 80107d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80107d2:	4b04      	ldr	r3, [pc, #16]	; (80107e4 <vPortSetupTimerInterrupt+0x34>)
 80107d4:	2207      	movs	r2, #7
 80107d6:	601a      	str	r2, [r3, #0]
}
 80107d8:	bf00      	nop
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop
 80107e4:	e000e010 	.word	0xe000e010
 80107e8:	e000e018 	.word	0xe000e018
 80107ec:	20000004 	.word	0x20000004
 80107f0:	10624dd3 	.word	0x10624dd3
 80107f4:	e000e014 	.word	0xe000e014

080107f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80107f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010808 <vPortEnableVFP+0x10>
 80107fc:	6801      	ldr	r1, [r0, #0]
 80107fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010802:	6001      	str	r1, [r0, #0]
 8010804:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010806:	bf00      	nop
 8010808:	e000ed88 	.word	0xe000ed88

0801080c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801080c:	b480      	push	{r7}
 801080e:	b085      	sub	sp, #20
 8010810:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010812:	f3ef 8305 	mrs	r3, IPSR
 8010816:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2b0f      	cmp	r3, #15
 801081c:	d916      	bls.n	801084c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801081e:	4a19      	ldr	r2, [pc, #100]	; (8010884 <vPortValidateInterruptPriority+0x78>)
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	4413      	add	r3, r2
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010828:	4b17      	ldr	r3, [pc, #92]	; (8010888 <vPortValidateInterruptPriority+0x7c>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	7afa      	ldrb	r2, [r7, #11]
 801082e:	429a      	cmp	r2, r3
 8010830:	d20c      	bcs.n	801084c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010836:	b672      	cpsid	i
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	b662      	cpsie	i
 8010846:	607b      	str	r3, [r7, #4]
}
 8010848:	bf00      	nop
 801084a:	e7fe      	b.n	801084a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801084c:	4b0f      	ldr	r3, [pc, #60]	; (801088c <vPortValidateInterruptPriority+0x80>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010854:	4b0e      	ldr	r3, [pc, #56]	; (8010890 <vPortValidateInterruptPriority+0x84>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	429a      	cmp	r2, r3
 801085a:	d90c      	bls.n	8010876 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801085c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010860:	b672      	cpsid	i
 8010862:	f383 8811 	msr	BASEPRI, r3
 8010866:	f3bf 8f6f 	isb	sy
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	b662      	cpsie	i
 8010870:	603b      	str	r3, [r7, #0]
}
 8010872:	bf00      	nop
 8010874:	e7fe      	b.n	8010874 <vPortValidateInterruptPriority+0x68>
	}
 8010876:	bf00      	nop
 8010878:	3714      	adds	r7, #20
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	e000e3f0 	.word	0xe000e3f0
 8010888:	200008d4 	.word	0x200008d4
 801088c:	e000ed0c 	.word	0xe000ed0c
 8010890:	200008d8 	.word	0x200008d8

08010894 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 801089e:	4b24      	ldr	r3, [pc, #144]	; (8010930 <_sbrk_r+0x9c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d10e      	bne.n	80108c4 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 80108a6:	4a23      	ldr	r2, [pc, #140]	; (8010934 <_sbrk_r+0xa0>)
 80108a8:	4b23      	ldr	r3, [pc, #140]	; (8010938 <_sbrk_r+0xa4>)
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80108b0:	4a22      	ldr	r2, [pc, #136]	; (801093c <_sbrk_r+0xa8>)
 80108b2:	6013      	str	r3, [r2, #0]
 80108b4:	4a1f      	ldr	r2, [pc, #124]	; (8010934 <_sbrk_r+0xa0>)
 80108b6:	4b20      	ldr	r3, [pc, #128]	; (8010938 <_sbrk_r+0xa4>)
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80108be:	461a      	mov	r2, r3
 80108c0:	4b1b      	ldr	r3, [pc, #108]	; (8010930 <_sbrk_r+0x9c>)
 80108c2:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80108c4:	f7ff fb6a 	bl	800ff9c <xTaskGetSchedulerState>
 80108c8:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d101      	bne.n	80108d2 <_sbrk_r+0x3e>
 80108ce:	466b      	mov	r3, sp
 80108d0:	e000      	b.n	80108d4 <_sbrk_r+0x40>
 80108d2:	4b1b      	ldr	r3, [pc, #108]	; (8010940 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80108d4:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 80108d6:	f7fe ff6b 	bl	800f7b0 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 80108da:	4b1a      	ldr	r3, [pc, #104]	; (8010944 <_sbrk_r+0xb0>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 80108e0:	4b18      	ldr	r3, [pc, #96]	; (8010944 <_sbrk_r+0xb0>)
 80108e2:	681a      	ldr	r2, [r3, #0]
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	4413      	add	r3, r2
 80108e8:	68fa      	ldr	r2, [r7, #12]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d206      	bcs.n	80108fc <_sbrk_r+0x68>
        // Ooops, no more memory available...
        #if( configUSE_MALLOC_FAILED_HOOK == 1 )
          {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION(usis);
 80108ee:	f7fe ff6d 	bl	800f7cc <xTaskResumeAll>
            vApplicationMallocFailedHook();
 80108f2:	f7ef fe6b 	bl	80005cc <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 80108f6:	f04f 33ff 	mov.w	r3, #4294967295
 80108fa:	e014      	b.n	8010926 <_sbrk_r+0x92>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 80108fc:	4b11      	ldr	r3, [pc, #68]	; (8010944 <_sbrk_r+0xb0>)
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	4413      	add	r3, r2
 8010904:	4a0f      	ldr	r2, [pc, #60]	; (8010944 <_sbrk_r+0xb0>)
 8010906:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8010908:	4b0c      	ldr	r3, [pc, #48]	; (801093c <_sbrk_r+0xa8>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	4a0a      	ldr	r2, [pc, #40]	; (801093c <_sbrk_r+0xa8>)
 8010912:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 8010914:	4b0c      	ldr	r3, [pc, #48]	; (8010948 <_sbrk_r+0xb4>)
 8010916:	681a      	ldr	r2, [r3, #0]
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	4413      	add	r3, r2
 801091c:	4a0a      	ldr	r2, [pc, #40]	; (8010948 <_sbrk_r+0xb4>)
 801091e:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 8010920:	f7fe ff54 	bl	800f7cc <xTaskResumeAll>
    return (char *) previousHeapEnd;
 8010924:	68bb      	ldr	r3, [r7, #8]
}
 8010926:	4618      	mov	r0, r3
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	20004d0c 	.word	0x20004d0c
 8010934:	20050000 	.word	0x20050000
 8010938:	20004d28 	.word	0x20004d28
 801093c:	200008dc 	.word	0x200008dc
 8010940:	2004fe00 	.word	0x2004fe00
 8010944:	20000028 	.word	0x20000028
 8010948:	200008e0 	.word	0x200008e0

0801094c <__malloc_lock>:
//char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 801094c:	b580      	push	{r7, lr}
 801094e:	b086      	sub	sp, #24
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010954:	f3ef 8305 	mrs	r3, IPSR
 8010958:	613b      	str	r3, [r7, #16]
	if( ulCurrentInterrupt == 0 )
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d102      	bne.n	8010966 <__malloc_lock+0x1a>
		xReturn = pdFALSE;
 8010960:	2300      	movs	r3, #0
 8010962:	60fb      	str	r3, [r7, #12]
 8010964:	e001      	b.n	801096a <__malloc_lock+0x1e>
		xReturn = pdTRUE;
 8010966:	2301      	movs	r3, #1
 8010968:	60fb      	str	r3, [r7, #12]
	return xReturn;
 801096a:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 801096c:	2b00      	cmp	r3, #0
 801096e:	bf14      	ite	ne
 8010970:	2301      	movne	r3, #1
 8010972:	2300      	moveq	r3, #0
 8010974:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 8010976:	7dfb      	ldrb	r3, [r7, #23]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d00c      	beq.n	8010996 <__malloc_lock+0x4a>
	__asm volatile
 801097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010980:	b672      	cpsid	i
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	b662      	cpsie	i
 8010990:	60bb      	str	r3, [r7, #8]
}
 8010992:	bf00      	nop
 8010994:	e7fe      	b.n	8010994 <__malloc_lock+0x48>
    vTaskSuspendAll();
 8010996:	f7fe ff0b 	bl	800f7b0 <vTaskSuspendAll>
  #endif
};
 801099a:	bf00      	nop
 801099c:	3718      	adds	r7, #24
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b082      	sub	sp, #8
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 80109aa:	f7fe ff0f 	bl	800f7cc <xTaskResumeAll>
  #endif
};
 80109ae:	bf00      	nop
 80109b0:	3708      	adds	r7, #8
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}

080109b6 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 80109b6:	b580      	push	{r7, lr}
 80109b8:	b084      	sub	sp, #16
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f836 	bl	8010a30 <malloc>
 80109c4:	4603      	mov	r3, r0
 80109c6:	60fb      	str	r3, [r7, #12]
    return p;
 80109c8:	68fb      	ldr	r3, [r7, #12]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b082      	sub	sp, #8
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
    free(pv);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f000 f830 	bl	8010a40 <free>
};
 80109e0:	bf00      	nop
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <__libc_init_array>:
 80109e8:	b570      	push	{r4, r5, r6, lr}
 80109ea:	4d0d      	ldr	r5, [pc, #52]	; (8010a20 <__libc_init_array+0x38>)
 80109ec:	4c0d      	ldr	r4, [pc, #52]	; (8010a24 <__libc_init_array+0x3c>)
 80109ee:	1b64      	subs	r4, r4, r5
 80109f0:	10a4      	asrs	r4, r4, #2
 80109f2:	2600      	movs	r6, #0
 80109f4:	42a6      	cmp	r6, r4
 80109f6:	d109      	bne.n	8010a0c <__libc_init_array+0x24>
 80109f8:	4d0b      	ldr	r5, [pc, #44]	; (8010a28 <__libc_init_array+0x40>)
 80109fa:	4c0c      	ldr	r4, [pc, #48]	; (8010a2c <__libc_init_array+0x44>)
 80109fc:	f001 f854 	bl	8011aa8 <_init>
 8010a00:	1b64      	subs	r4, r4, r5
 8010a02:	10a4      	asrs	r4, r4, #2
 8010a04:	2600      	movs	r6, #0
 8010a06:	42a6      	cmp	r6, r4
 8010a08:	d105      	bne.n	8010a16 <__libc_init_array+0x2e>
 8010a0a:	bd70      	pop	{r4, r5, r6, pc}
 8010a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a10:	4798      	blx	r3
 8010a12:	3601      	adds	r6, #1
 8010a14:	e7ee      	b.n	80109f4 <__libc_init_array+0xc>
 8010a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a1a:	4798      	blx	r3
 8010a1c:	3601      	adds	r6, #1
 8010a1e:	e7f2      	b.n	8010a06 <__libc_init_array+0x1e>
 8010a20:	08014008 	.word	0x08014008
 8010a24:	08014008 	.word	0x08014008
 8010a28:	08014008 	.word	0x08014008
 8010a2c:	0801400c 	.word	0x0801400c

08010a30 <malloc>:
 8010a30:	4b02      	ldr	r3, [pc, #8]	; (8010a3c <malloc+0xc>)
 8010a32:	4601      	mov	r1, r0
 8010a34:	6818      	ldr	r0, [r3, #0]
 8010a36:	f000 b871 	b.w	8010b1c <_malloc_r>
 8010a3a:	bf00      	nop
 8010a3c:	2000002c 	.word	0x2000002c

08010a40 <free>:
 8010a40:	4b02      	ldr	r3, [pc, #8]	; (8010a4c <free+0xc>)
 8010a42:	4601      	mov	r1, r0
 8010a44:	6818      	ldr	r0, [r3, #0]
 8010a46:	f000 b819 	b.w	8010a7c <_free_r>
 8010a4a:	bf00      	nop
 8010a4c:	2000002c 	.word	0x2000002c

08010a50 <memcpy>:
 8010a50:	440a      	add	r2, r1
 8010a52:	4291      	cmp	r1, r2
 8010a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a58:	d100      	bne.n	8010a5c <memcpy+0xc>
 8010a5a:	4770      	bx	lr
 8010a5c:	b510      	push	{r4, lr}
 8010a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a66:	4291      	cmp	r1, r2
 8010a68:	d1f9      	bne.n	8010a5e <memcpy+0xe>
 8010a6a:	bd10      	pop	{r4, pc}

08010a6c <memset>:
 8010a6c:	4402      	add	r2, r0
 8010a6e:	4603      	mov	r3, r0
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d100      	bne.n	8010a76 <memset+0xa>
 8010a74:	4770      	bx	lr
 8010a76:	f803 1b01 	strb.w	r1, [r3], #1
 8010a7a:	e7f9      	b.n	8010a70 <memset+0x4>

08010a7c <_free_r>:
 8010a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a7e:	2900      	cmp	r1, #0
 8010a80:	d048      	beq.n	8010b14 <_free_r+0x98>
 8010a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a86:	9001      	str	r0, [sp, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8010a8e:	bfb8      	it	lt
 8010a90:	18e4      	addlt	r4, r4, r3
 8010a92:	f7ff ff5b 	bl	801094c <__malloc_lock>
 8010a96:	4a20      	ldr	r2, [pc, #128]	; (8010b18 <_free_r+0x9c>)
 8010a98:	9801      	ldr	r0, [sp, #4]
 8010a9a:	6813      	ldr	r3, [r2, #0]
 8010a9c:	4615      	mov	r5, r2
 8010a9e:	b933      	cbnz	r3, 8010aae <_free_r+0x32>
 8010aa0:	6063      	str	r3, [r4, #4]
 8010aa2:	6014      	str	r4, [r2, #0]
 8010aa4:	b003      	add	sp, #12
 8010aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aaa:	f7ff bf7a 	b.w	80109a2 <__malloc_unlock>
 8010aae:	42a3      	cmp	r3, r4
 8010ab0:	d90b      	bls.n	8010aca <_free_r+0x4e>
 8010ab2:	6821      	ldr	r1, [r4, #0]
 8010ab4:	1862      	adds	r2, r4, r1
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	bf04      	itt	eq
 8010aba:	681a      	ldreq	r2, [r3, #0]
 8010abc:	685b      	ldreq	r3, [r3, #4]
 8010abe:	6063      	str	r3, [r4, #4]
 8010ac0:	bf04      	itt	eq
 8010ac2:	1852      	addeq	r2, r2, r1
 8010ac4:	6022      	streq	r2, [r4, #0]
 8010ac6:	602c      	str	r4, [r5, #0]
 8010ac8:	e7ec      	b.n	8010aa4 <_free_r+0x28>
 8010aca:	461a      	mov	r2, r3
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	b10b      	cbz	r3, 8010ad4 <_free_r+0x58>
 8010ad0:	42a3      	cmp	r3, r4
 8010ad2:	d9fa      	bls.n	8010aca <_free_r+0x4e>
 8010ad4:	6811      	ldr	r1, [r2, #0]
 8010ad6:	1855      	adds	r5, r2, r1
 8010ad8:	42a5      	cmp	r5, r4
 8010ada:	d10b      	bne.n	8010af4 <_free_r+0x78>
 8010adc:	6824      	ldr	r4, [r4, #0]
 8010ade:	4421      	add	r1, r4
 8010ae0:	1854      	adds	r4, r2, r1
 8010ae2:	42a3      	cmp	r3, r4
 8010ae4:	6011      	str	r1, [r2, #0]
 8010ae6:	d1dd      	bne.n	8010aa4 <_free_r+0x28>
 8010ae8:	681c      	ldr	r4, [r3, #0]
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	6053      	str	r3, [r2, #4]
 8010aee:	4421      	add	r1, r4
 8010af0:	6011      	str	r1, [r2, #0]
 8010af2:	e7d7      	b.n	8010aa4 <_free_r+0x28>
 8010af4:	d902      	bls.n	8010afc <_free_r+0x80>
 8010af6:	230c      	movs	r3, #12
 8010af8:	6003      	str	r3, [r0, #0]
 8010afa:	e7d3      	b.n	8010aa4 <_free_r+0x28>
 8010afc:	6825      	ldr	r5, [r4, #0]
 8010afe:	1961      	adds	r1, r4, r5
 8010b00:	428b      	cmp	r3, r1
 8010b02:	bf04      	itt	eq
 8010b04:	6819      	ldreq	r1, [r3, #0]
 8010b06:	685b      	ldreq	r3, [r3, #4]
 8010b08:	6063      	str	r3, [r4, #4]
 8010b0a:	bf04      	itt	eq
 8010b0c:	1949      	addeq	r1, r1, r5
 8010b0e:	6021      	streq	r1, [r4, #0]
 8010b10:	6054      	str	r4, [r2, #4]
 8010b12:	e7c7      	b.n	8010aa4 <_free_r+0x28>
 8010b14:	b003      	add	sp, #12
 8010b16:	bd30      	pop	{r4, r5, pc}
 8010b18:	200008e4 	.word	0x200008e4

08010b1c <_malloc_r>:
 8010b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b1e:	1ccd      	adds	r5, r1, #3
 8010b20:	f025 0503 	bic.w	r5, r5, #3
 8010b24:	3508      	adds	r5, #8
 8010b26:	2d0c      	cmp	r5, #12
 8010b28:	bf38      	it	cc
 8010b2a:	250c      	movcc	r5, #12
 8010b2c:	2d00      	cmp	r5, #0
 8010b2e:	4606      	mov	r6, r0
 8010b30:	db01      	blt.n	8010b36 <_malloc_r+0x1a>
 8010b32:	42a9      	cmp	r1, r5
 8010b34:	d903      	bls.n	8010b3e <_malloc_r+0x22>
 8010b36:	230c      	movs	r3, #12
 8010b38:	6033      	str	r3, [r6, #0]
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b3e:	f7ff ff05 	bl	801094c <__malloc_lock>
 8010b42:	4921      	ldr	r1, [pc, #132]	; (8010bc8 <_malloc_r+0xac>)
 8010b44:	680a      	ldr	r2, [r1, #0]
 8010b46:	4614      	mov	r4, r2
 8010b48:	b99c      	cbnz	r4, 8010b72 <_malloc_r+0x56>
 8010b4a:	4f20      	ldr	r7, [pc, #128]	; (8010bcc <_malloc_r+0xb0>)
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	b923      	cbnz	r3, 8010b5a <_malloc_r+0x3e>
 8010b50:	4621      	mov	r1, r4
 8010b52:	4630      	mov	r0, r6
 8010b54:	f7ff fe9e 	bl	8010894 <_sbrk_r>
 8010b58:	6038      	str	r0, [r7, #0]
 8010b5a:	4629      	mov	r1, r5
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	f7ff fe99 	bl	8010894 <_sbrk_r>
 8010b62:	1c43      	adds	r3, r0, #1
 8010b64:	d123      	bne.n	8010bae <_malloc_r+0x92>
 8010b66:	230c      	movs	r3, #12
 8010b68:	6033      	str	r3, [r6, #0]
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f7ff ff19 	bl	80109a2 <__malloc_unlock>
 8010b70:	e7e3      	b.n	8010b3a <_malloc_r+0x1e>
 8010b72:	6823      	ldr	r3, [r4, #0]
 8010b74:	1b5b      	subs	r3, r3, r5
 8010b76:	d417      	bmi.n	8010ba8 <_malloc_r+0x8c>
 8010b78:	2b0b      	cmp	r3, #11
 8010b7a:	d903      	bls.n	8010b84 <_malloc_r+0x68>
 8010b7c:	6023      	str	r3, [r4, #0]
 8010b7e:	441c      	add	r4, r3
 8010b80:	6025      	str	r5, [r4, #0]
 8010b82:	e004      	b.n	8010b8e <_malloc_r+0x72>
 8010b84:	6863      	ldr	r3, [r4, #4]
 8010b86:	42a2      	cmp	r2, r4
 8010b88:	bf0c      	ite	eq
 8010b8a:	600b      	streq	r3, [r1, #0]
 8010b8c:	6053      	strne	r3, [r2, #4]
 8010b8e:	4630      	mov	r0, r6
 8010b90:	f7ff ff07 	bl	80109a2 <__malloc_unlock>
 8010b94:	f104 000b 	add.w	r0, r4, #11
 8010b98:	1d23      	adds	r3, r4, #4
 8010b9a:	f020 0007 	bic.w	r0, r0, #7
 8010b9e:	1ac2      	subs	r2, r0, r3
 8010ba0:	d0cc      	beq.n	8010b3c <_malloc_r+0x20>
 8010ba2:	1a1b      	subs	r3, r3, r0
 8010ba4:	50a3      	str	r3, [r4, r2]
 8010ba6:	e7c9      	b.n	8010b3c <_malloc_r+0x20>
 8010ba8:	4622      	mov	r2, r4
 8010baa:	6864      	ldr	r4, [r4, #4]
 8010bac:	e7cc      	b.n	8010b48 <_malloc_r+0x2c>
 8010bae:	1cc4      	adds	r4, r0, #3
 8010bb0:	f024 0403 	bic.w	r4, r4, #3
 8010bb4:	42a0      	cmp	r0, r4
 8010bb6:	d0e3      	beq.n	8010b80 <_malloc_r+0x64>
 8010bb8:	1a21      	subs	r1, r4, r0
 8010bba:	4630      	mov	r0, r6
 8010bbc:	f7ff fe6a 	bl	8010894 <_sbrk_r>
 8010bc0:	3001      	adds	r0, #1
 8010bc2:	d1dd      	bne.n	8010b80 <_malloc_r+0x64>
 8010bc4:	e7cf      	b.n	8010b66 <_malloc_r+0x4a>
 8010bc6:	bf00      	nop
 8010bc8:	200008e4 	.word	0x200008e4
 8010bcc:	200008e8 	.word	0x200008e8

08010bd0 <_puts_r>:
 8010bd0:	b570      	push	{r4, r5, r6, lr}
 8010bd2:	460e      	mov	r6, r1
 8010bd4:	4605      	mov	r5, r0
 8010bd6:	b118      	cbz	r0, 8010be0 <_puts_r+0x10>
 8010bd8:	6983      	ldr	r3, [r0, #24]
 8010bda:	b90b      	cbnz	r3, 8010be0 <_puts_r+0x10>
 8010bdc:	f000 fa7c 	bl	80110d8 <__sinit>
 8010be0:	69ab      	ldr	r3, [r5, #24]
 8010be2:	68ac      	ldr	r4, [r5, #8]
 8010be4:	b913      	cbnz	r3, 8010bec <_puts_r+0x1c>
 8010be6:	4628      	mov	r0, r5
 8010be8:	f000 fa76 	bl	80110d8 <__sinit>
 8010bec:	4b2c      	ldr	r3, [pc, #176]	; (8010ca0 <_puts_r+0xd0>)
 8010bee:	429c      	cmp	r4, r3
 8010bf0:	d120      	bne.n	8010c34 <_puts_r+0x64>
 8010bf2:	686c      	ldr	r4, [r5, #4]
 8010bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bf6:	07db      	lsls	r3, r3, #31
 8010bf8:	d405      	bmi.n	8010c06 <_puts_r+0x36>
 8010bfa:	89a3      	ldrh	r3, [r4, #12]
 8010bfc:	0598      	lsls	r0, r3, #22
 8010bfe:	d402      	bmi.n	8010c06 <_puts_r+0x36>
 8010c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c02:	f000 fb07 	bl	8011214 <__retarget_lock_acquire_recursive>
 8010c06:	89a3      	ldrh	r3, [r4, #12]
 8010c08:	0719      	lsls	r1, r3, #28
 8010c0a:	d51d      	bpl.n	8010c48 <_puts_r+0x78>
 8010c0c:	6923      	ldr	r3, [r4, #16]
 8010c0e:	b1db      	cbz	r3, 8010c48 <_puts_r+0x78>
 8010c10:	3e01      	subs	r6, #1
 8010c12:	68a3      	ldr	r3, [r4, #8]
 8010c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	60a3      	str	r3, [r4, #8]
 8010c1c:	bb39      	cbnz	r1, 8010c6e <_puts_r+0x9e>
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	da38      	bge.n	8010c94 <_puts_r+0xc4>
 8010c22:	4622      	mov	r2, r4
 8010c24:	210a      	movs	r1, #10
 8010c26:	4628      	mov	r0, r5
 8010c28:	f000 f87c 	bl	8010d24 <__swbuf_r>
 8010c2c:	3001      	adds	r0, #1
 8010c2e:	d011      	beq.n	8010c54 <_puts_r+0x84>
 8010c30:	250a      	movs	r5, #10
 8010c32:	e011      	b.n	8010c58 <_puts_r+0x88>
 8010c34:	4b1b      	ldr	r3, [pc, #108]	; (8010ca4 <_puts_r+0xd4>)
 8010c36:	429c      	cmp	r4, r3
 8010c38:	d101      	bne.n	8010c3e <_puts_r+0x6e>
 8010c3a:	68ac      	ldr	r4, [r5, #8]
 8010c3c:	e7da      	b.n	8010bf4 <_puts_r+0x24>
 8010c3e:	4b1a      	ldr	r3, [pc, #104]	; (8010ca8 <_puts_r+0xd8>)
 8010c40:	429c      	cmp	r4, r3
 8010c42:	bf08      	it	eq
 8010c44:	68ec      	ldreq	r4, [r5, #12]
 8010c46:	e7d5      	b.n	8010bf4 <_puts_r+0x24>
 8010c48:	4621      	mov	r1, r4
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f000 f8bc 	bl	8010dc8 <__swsetup_r>
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d0dd      	beq.n	8010c10 <_puts_r+0x40>
 8010c54:	f04f 35ff 	mov.w	r5, #4294967295
 8010c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c5a:	07da      	lsls	r2, r3, #31
 8010c5c:	d405      	bmi.n	8010c6a <_puts_r+0x9a>
 8010c5e:	89a3      	ldrh	r3, [r4, #12]
 8010c60:	059b      	lsls	r3, r3, #22
 8010c62:	d402      	bmi.n	8010c6a <_puts_r+0x9a>
 8010c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c66:	f000 fad6 	bl	8011216 <__retarget_lock_release_recursive>
 8010c6a:	4628      	mov	r0, r5
 8010c6c:	bd70      	pop	{r4, r5, r6, pc}
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	da04      	bge.n	8010c7c <_puts_r+0xac>
 8010c72:	69a2      	ldr	r2, [r4, #24]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	dc06      	bgt.n	8010c86 <_puts_r+0xb6>
 8010c78:	290a      	cmp	r1, #10
 8010c7a:	d004      	beq.n	8010c86 <_puts_r+0xb6>
 8010c7c:	6823      	ldr	r3, [r4, #0]
 8010c7e:	1c5a      	adds	r2, r3, #1
 8010c80:	6022      	str	r2, [r4, #0]
 8010c82:	7019      	strb	r1, [r3, #0]
 8010c84:	e7c5      	b.n	8010c12 <_puts_r+0x42>
 8010c86:	4622      	mov	r2, r4
 8010c88:	4628      	mov	r0, r5
 8010c8a:	f000 f84b 	bl	8010d24 <__swbuf_r>
 8010c8e:	3001      	adds	r0, #1
 8010c90:	d1bf      	bne.n	8010c12 <_puts_r+0x42>
 8010c92:	e7df      	b.n	8010c54 <_puts_r+0x84>
 8010c94:	6823      	ldr	r3, [r4, #0]
 8010c96:	250a      	movs	r5, #10
 8010c98:	1c5a      	adds	r2, r3, #1
 8010c9a:	6022      	str	r2, [r4, #0]
 8010c9c:	701d      	strb	r5, [r3, #0]
 8010c9e:	e7db      	b.n	8010c58 <_puts_r+0x88>
 8010ca0:	08013f8c 	.word	0x08013f8c
 8010ca4:	08013fac 	.word	0x08013fac
 8010ca8:	08013f6c 	.word	0x08013f6c

08010cac <puts>:
 8010cac:	4b02      	ldr	r3, [pc, #8]	; (8010cb8 <puts+0xc>)
 8010cae:	4601      	mov	r1, r0
 8010cb0:	6818      	ldr	r0, [r3, #0]
 8010cb2:	f7ff bf8d 	b.w	8010bd0 <_puts_r>
 8010cb6:	bf00      	nop
 8010cb8:	2000002c 	.word	0x2000002c

08010cbc <sniprintf>:
 8010cbc:	b40c      	push	{r2, r3}
 8010cbe:	b530      	push	{r4, r5, lr}
 8010cc0:	4b17      	ldr	r3, [pc, #92]	; (8010d20 <sniprintf+0x64>)
 8010cc2:	1e0c      	subs	r4, r1, #0
 8010cc4:	681d      	ldr	r5, [r3, #0]
 8010cc6:	b09d      	sub	sp, #116	; 0x74
 8010cc8:	da08      	bge.n	8010cdc <sniprintf+0x20>
 8010cca:	238b      	movs	r3, #139	; 0x8b
 8010ccc:	602b      	str	r3, [r5, #0]
 8010cce:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd2:	b01d      	add	sp, #116	; 0x74
 8010cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010cd8:	b002      	add	sp, #8
 8010cda:	4770      	bx	lr
 8010cdc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010ce0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ce4:	bf14      	ite	ne
 8010ce6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010cea:	4623      	moveq	r3, r4
 8010cec:	9304      	str	r3, [sp, #16]
 8010cee:	9307      	str	r3, [sp, #28]
 8010cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010cf4:	9002      	str	r0, [sp, #8]
 8010cf6:	9006      	str	r0, [sp, #24]
 8010cf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010cfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010cfe:	ab21      	add	r3, sp, #132	; 0x84
 8010d00:	a902      	add	r1, sp, #8
 8010d02:	4628      	mov	r0, r5
 8010d04:	9301      	str	r3, [sp, #4]
 8010d06:	f000 fb47 	bl	8011398 <_svfiprintf_r>
 8010d0a:	1c43      	adds	r3, r0, #1
 8010d0c:	bfbc      	itt	lt
 8010d0e:	238b      	movlt	r3, #139	; 0x8b
 8010d10:	602b      	strlt	r3, [r5, #0]
 8010d12:	2c00      	cmp	r4, #0
 8010d14:	d0dd      	beq.n	8010cd2 <sniprintf+0x16>
 8010d16:	9b02      	ldr	r3, [sp, #8]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	701a      	strb	r2, [r3, #0]
 8010d1c:	e7d9      	b.n	8010cd2 <sniprintf+0x16>
 8010d1e:	bf00      	nop
 8010d20:	2000002c 	.word	0x2000002c

08010d24 <__swbuf_r>:
 8010d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d26:	460e      	mov	r6, r1
 8010d28:	4614      	mov	r4, r2
 8010d2a:	4605      	mov	r5, r0
 8010d2c:	b118      	cbz	r0, 8010d36 <__swbuf_r+0x12>
 8010d2e:	6983      	ldr	r3, [r0, #24]
 8010d30:	b90b      	cbnz	r3, 8010d36 <__swbuf_r+0x12>
 8010d32:	f000 f9d1 	bl	80110d8 <__sinit>
 8010d36:	4b21      	ldr	r3, [pc, #132]	; (8010dbc <__swbuf_r+0x98>)
 8010d38:	429c      	cmp	r4, r3
 8010d3a:	d12b      	bne.n	8010d94 <__swbuf_r+0x70>
 8010d3c:	686c      	ldr	r4, [r5, #4]
 8010d3e:	69a3      	ldr	r3, [r4, #24]
 8010d40:	60a3      	str	r3, [r4, #8]
 8010d42:	89a3      	ldrh	r3, [r4, #12]
 8010d44:	071a      	lsls	r2, r3, #28
 8010d46:	d52f      	bpl.n	8010da8 <__swbuf_r+0x84>
 8010d48:	6923      	ldr	r3, [r4, #16]
 8010d4a:	b36b      	cbz	r3, 8010da8 <__swbuf_r+0x84>
 8010d4c:	6923      	ldr	r3, [r4, #16]
 8010d4e:	6820      	ldr	r0, [r4, #0]
 8010d50:	1ac0      	subs	r0, r0, r3
 8010d52:	6963      	ldr	r3, [r4, #20]
 8010d54:	b2f6      	uxtb	r6, r6
 8010d56:	4283      	cmp	r3, r0
 8010d58:	4637      	mov	r7, r6
 8010d5a:	dc04      	bgt.n	8010d66 <__swbuf_r+0x42>
 8010d5c:	4621      	mov	r1, r4
 8010d5e:	4628      	mov	r0, r5
 8010d60:	f000 f926 	bl	8010fb0 <_fflush_r>
 8010d64:	bb30      	cbnz	r0, 8010db4 <__swbuf_r+0x90>
 8010d66:	68a3      	ldr	r3, [r4, #8]
 8010d68:	3b01      	subs	r3, #1
 8010d6a:	60a3      	str	r3, [r4, #8]
 8010d6c:	6823      	ldr	r3, [r4, #0]
 8010d6e:	1c5a      	adds	r2, r3, #1
 8010d70:	6022      	str	r2, [r4, #0]
 8010d72:	701e      	strb	r6, [r3, #0]
 8010d74:	6963      	ldr	r3, [r4, #20]
 8010d76:	3001      	adds	r0, #1
 8010d78:	4283      	cmp	r3, r0
 8010d7a:	d004      	beq.n	8010d86 <__swbuf_r+0x62>
 8010d7c:	89a3      	ldrh	r3, [r4, #12]
 8010d7e:	07db      	lsls	r3, r3, #31
 8010d80:	d506      	bpl.n	8010d90 <__swbuf_r+0x6c>
 8010d82:	2e0a      	cmp	r6, #10
 8010d84:	d104      	bne.n	8010d90 <__swbuf_r+0x6c>
 8010d86:	4621      	mov	r1, r4
 8010d88:	4628      	mov	r0, r5
 8010d8a:	f000 f911 	bl	8010fb0 <_fflush_r>
 8010d8e:	b988      	cbnz	r0, 8010db4 <__swbuf_r+0x90>
 8010d90:	4638      	mov	r0, r7
 8010d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d94:	4b0a      	ldr	r3, [pc, #40]	; (8010dc0 <__swbuf_r+0x9c>)
 8010d96:	429c      	cmp	r4, r3
 8010d98:	d101      	bne.n	8010d9e <__swbuf_r+0x7a>
 8010d9a:	68ac      	ldr	r4, [r5, #8]
 8010d9c:	e7cf      	b.n	8010d3e <__swbuf_r+0x1a>
 8010d9e:	4b09      	ldr	r3, [pc, #36]	; (8010dc4 <__swbuf_r+0xa0>)
 8010da0:	429c      	cmp	r4, r3
 8010da2:	bf08      	it	eq
 8010da4:	68ec      	ldreq	r4, [r5, #12]
 8010da6:	e7ca      	b.n	8010d3e <__swbuf_r+0x1a>
 8010da8:	4621      	mov	r1, r4
 8010daa:	4628      	mov	r0, r5
 8010dac:	f000 f80c 	bl	8010dc8 <__swsetup_r>
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d0cb      	beq.n	8010d4c <__swbuf_r+0x28>
 8010db4:	f04f 37ff 	mov.w	r7, #4294967295
 8010db8:	e7ea      	b.n	8010d90 <__swbuf_r+0x6c>
 8010dba:	bf00      	nop
 8010dbc:	08013f8c 	.word	0x08013f8c
 8010dc0:	08013fac 	.word	0x08013fac
 8010dc4:	08013f6c 	.word	0x08013f6c

08010dc8 <__swsetup_r>:
 8010dc8:	4b32      	ldr	r3, [pc, #200]	; (8010e94 <__swsetup_r+0xcc>)
 8010dca:	b570      	push	{r4, r5, r6, lr}
 8010dcc:	681d      	ldr	r5, [r3, #0]
 8010dce:	4606      	mov	r6, r0
 8010dd0:	460c      	mov	r4, r1
 8010dd2:	b125      	cbz	r5, 8010dde <__swsetup_r+0x16>
 8010dd4:	69ab      	ldr	r3, [r5, #24]
 8010dd6:	b913      	cbnz	r3, 8010dde <__swsetup_r+0x16>
 8010dd8:	4628      	mov	r0, r5
 8010dda:	f000 f97d 	bl	80110d8 <__sinit>
 8010dde:	4b2e      	ldr	r3, [pc, #184]	; (8010e98 <__swsetup_r+0xd0>)
 8010de0:	429c      	cmp	r4, r3
 8010de2:	d10f      	bne.n	8010e04 <__swsetup_r+0x3c>
 8010de4:	686c      	ldr	r4, [r5, #4]
 8010de6:	89a3      	ldrh	r3, [r4, #12]
 8010de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010dec:	0719      	lsls	r1, r3, #28
 8010dee:	d42c      	bmi.n	8010e4a <__swsetup_r+0x82>
 8010df0:	06dd      	lsls	r5, r3, #27
 8010df2:	d411      	bmi.n	8010e18 <__swsetup_r+0x50>
 8010df4:	2309      	movs	r3, #9
 8010df6:	6033      	str	r3, [r6, #0]
 8010df8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010dfc:	81a3      	strh	r3, [r4, #12]
 8010dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8010e02:	e03e      	b.n	8010e82 <__swsetup_r+0xba>
 8010e04:	4b25      	ldr	r3, [pc, #148]	; (8010e9c <__swsetup_r+0xd4>)
 8010e06:	429c      	cmp	r4, r3
 8010e08:	d101      	bne.n	8010e0e <__swsetup_r+0x46>
 8010e0a:	68ac      	ldr	r4, [r5, #8]
 8010e0c:	e7eb      	b.n	8010de6 <__swsetup_r+0x1e>
 8010e0e:	4b24      	ldr	r3, [pc, #144]	; (8010ea0 <__swsetup_r+0xd8>)
 8010e10:	429c      	cmp	r4, r3
 8010e12:	bf08      	it	eq
 8010e14:	68ec      	ldreq	r4, [r5, #12]
 8010e16:	e7e6      	b.n	8010de6 <__swsetup_r+0x1e>
 8010e18:	0758      	lsls	r0, r3, #29
 8010e1a:	d512      	bpl.n	8010e42 <__swsetup_r+0x7a>
 8010e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e1e:	b141      	cbz	r1, 8010e32 <__swsetup_r+0x6a>
 8010e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e24:	4299      	cmp	r1, r3
 8010e26:	d002      	beq.n	8010e2e <__swsetup_r+0x66>
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f7ff fe27 	bl	8010a7c <_free_r>
 8010e2e:	2300      	movs	r3, #0
 8010e30:	6363      	str	r3, [r4, #52]	; 0x34
 8010e32:	89a3      	ldrh	r3, [r4, #12]
 8010e34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010e38:	81a3      	strh	r3, [r4, #12]
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	6063      	str	r3, [r4, #4]
 8010e3e:	6923      	ldr	r3, [r4, #16]
 8010e40:	6023      	str	r3, [r4, #0]
 8010e42:	89a3      	ldrh	r3, [r4, #12]
 8010e44:	f043 0308 	orr.w	r3, r3, #8
 8010e48:	81a3      	strh	r3, [r4, #12]
 8010e4a:	6923      	ldr	r3, [r4, #16]
 8010e4c:	b94b      	cbnz	r3, 8010e62 <__swsetup_r+0x9a>
 8010e4e:	89a3      	ldrh	r3, [r4, #12]
 8010e50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e58:	d003      	beq.n	8010e62 <__swsetup_r+0x9a>
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	f000 f9ff 	bl	8011260 <__smakebuf_r>
 8010e62:	89a0      	ldrh	r0, [r4, #12]
 8010e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e68:	f010 0301 	ands.w	r3, r0, #1
 8010e6c:	d00a      	beq.n	8010e84 <__swsetup_r+0xbc>
 8010e6e:	2300      	movs	r3, #0
 8010e70:	60a3      	str	r3, [r4, #8]
 8010e72:	6963      	ldr	r3, [r4, #20]
 8010e74:	425b      	negs	r3, r3
 8010e76:	61a3      	str	r3, [r4, #24]
 8010e78:	6923      	ldr	r3, [r4, #16]
 8010e7a:	b943      	cbnz	r3, 8010e8e <__swsetup_r+0xc6>
 8010e7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e80:	d1ba      	bne.n	8010df8 <__swsetup_r+0x30>
 8010e82:	bd70      	pop	{r4, r5, r6, pc}
 8010e84:	0781      	lsls	r1, r0, #30
 8010e86:	bf58      	it	pl
 8010e88:	6963      	ldrpl	r3, [r4, #20]
 8010e8a:	60a3      	str	r3, [r4, #8]
 8010e8c:	e7f4      	b.n	8010e78 <__swsetup_r+0xb0>
 8010e8e:	2000      	movs	r0, #0
 8010e90:	e7f7      	b.n	8010e82 <__swsetup_r+0xba>
 8010e92:	bf00      	nop
 8010e94:	2000002c 	.word	0x2000002c
 8010e98:	08013f8c 	.word	0x08013f8c
 8010e9c:	08013fac 	.word	0x08013fac
 8010ea0:	08013f6c 	.word	0x08013f6c

08010ea4 <__sflush_r>:
 8010ea4:	898a      	ldrh	r2, [r1, #12]
 8010ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eaa:	4605      	mov	r5, r0
 8010eac:	0710      	lsls	r0, r2, #28
 8010eae:	460c      	mov	r4, r1
 8010eb0:	d458      	bmi.n	8010f64 <__sflush_r+0xc0>
 8010eb2:	684b      	ldr	r3, [r1, #4]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	dc05      	bgt.n	8010ec4 <__sflush_r+0x20>
 8010eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	dc02      	bgt.n	8010ec4 <__sflush_r+0x20>
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ec6:	2e00      	cmp	r6, #0
 8010ec8:	d0f9      	beq.n	8010ebe <__sflush_r+0x1a>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ed0:	682f      	ldr	r7, [r5, #0]
 8010ed2:	602b      	str	r3, [r5, #0]
 8010ed4:	d032      	beq.n	8010f3c <__sflush_r+0x98>
 8010ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ed8:	89a3      	ldrh	r3, [r4, #12]
 8010eda:	075a      	lsls	r2, r3, #29
 8010edc:	d505      	bpl.n	8010eea <__sflush_r+0x46>
 8010ede:	6863      	ldr	r3, [r4, #4]
 8010ee0:	1ac0      	subs	r0, r0, r3
 8010ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ee4:	b10b      	cbz	r3, 8010eea <__sflush_r+0x46>
 8010ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ee8:	1ac0      	subs	r0, r0, r3
 8010eea:	2300      	movs	r3, #0
 8010eec:	4602      	mov	r2, r0
 8010eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ef0:	6a21      	ldr	r1, [r4, #32]
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	47b0      	blx	r6
 8010ef6:	1c43      	adds	r3, r0, #1
 8010ef8:	89a3      	ldrh	r3, [r4, #12]
 8010efa:	d106      	bne.n	8010f0a <__sflush_r+0x66>
 8010efc:	6829      	ldr	r1, [r5, #0]
 8010efe:	291d      	cmp	r1, #29
 8010f00:	d82c      	bhi.n	8010f5c <__sflush_r+0xb8>
 8010f02:	4a2a      	ldr	r2, [pc, #168]	; (8010fac <__sflush_r+0x108>)
 8010f04:	40ca      	lsrs	r2, r1
 8010f06:	07d6      	lsls	r6, r2, #31
 8010f08:	d528      	bpl.n	8010f5c <__sflush_r+0xb8>
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	6062      	str	r2, [r4, #4]
 8010f0e:	04d9      	lsls	r1, r3, #19
 8010f10:	6922      	ldr	r2, [r4, #16]
 8010f12:	6022      	str	r2, [r4, #0]
 8010f14:	d504      	bpl.n	8010f20 <__sflush_r+0x7c>
 8010f16:	1c42      	adds	r2, r0, #1
 8010f18:	d101      	bne.n	8010f1e <__sflush_r+0x7a>
 8010f1a:	682b      	ldr	r3, [r5, #0]
 8010f1c:	b903      	cbnz	r3, 8010f20 <__sflush_r+0x7c>
 8010f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8010f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f22:	602f      	str	r7, [r5, #0]
 8010f24:	2900      	cmp	r1, #0
 8010f26:	d0ca      	beq.n	8010ebe <__sflush_r+0x1a>
 8010f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f2c:	4299      	cmp	r1, r3
 8010f2e:	d002      	beq.n	8010f36 <__sflush_r+0x92>
 8010f30:	4628      	mov	r0, r5
 8010f32:	f7ff fda3 	bl	8010a7c <_free_r>
 8010f36:	2000      	movs	r0, #0
 8010f38:	6360      	str	r0, [r4, #52]	; 0x34
 8010f3a:	e7c1      	b.n	8010ec0 <__sflush_r+0x1c>
 8010f3c:	6a21      	ldr	r1, [r4, #32]
 8010f3e:	2301      	movs	r3, #1
 8010f40:	4628      	mov	r0, r5
 8010f42:	47b0      	blx	r6
 8010f44:	1c41      	adds	r1, r0, #1
 8010f46:	d1c7      	bne.n	8010ed8 <__sflush_r+0x34>
 8010f48:	682b      	ldr	r3, [r5, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d0c4      	beq.n	8010ed8 <__sflush_r+0x34>
 8010f4e:	2b1d      	cmp	r3, #29
 8010f50:	d001      	beq.n	8010f56 <__sflush_r+0xb2>
 8010f52:	2b16      	cmp	r3, #22
 8010f54:	d101      	bne.n	8010f5a <__sflush_r+0xb6>
 8010f56:	602f      	str	r7, [r5, #0]
 8010f58:	e7b1      	b.n	8010ebe <__sflush_r+0x1a>
 8010f5a:	89a3      	ldrh	r3, [r4, #12]
 8010f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f60:	81a3      	strh	r3, [r4, #12]
 8010f62:	e7ad      	b.n	8010ec0 <__sflush_r+0x1c>
 8010f64:	690f      	ldr	r7, [r1, #16]
 8010f66:	2f00      	cmp	r7, #0
 8010f68:	d0a9      	beq.n	8010ebe <__sflush_r+0x1a>
 8010f6a:	0793      	lsls	r3, r2, #30
 8010f6c:	680e      	ldr	r6, [r1, #0]
 8010f6e:	bf08      	it	eq
 8010f70:	694b      	ldreq	r3, [r1, #20]
 8010f72:	600f      	str	r7, [r1, #0]
 8010f74:	bf18      	it	ne
 8010f76:	2300      	movne	r3, #0
 8010f78:	eba6 0807 	sub.w	r8, r6, r7
 8010f7c:	608b      	str	r3, [r1, #8]
 8010f7e:	f1b8 0f00 	cmp.w	r8, #0
 8010f82:	dd9c      	ble.n	8010ebe <__sflush_r+0x1a>
 8010f84:	6a21      	ldr	r1, [r4, #32]
 8010f86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f88:	4643      	mov	r3, r8
 8010f8a:	463a      	mov	r2, r7
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	47b0      	blx	r6
 8010f90:	2800      	cmp	r0, #0
 8010f92:	dc06      	bgt.n	8010fa2 <__sflush_r+0xfe>
 8010f94:	89a3      	ldrh	r3, [r4, #12]
 8010f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f9a:	81a3      	strh	r3, [r4, #12]
 8010f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa0:	e78e      	b.n	8010ec0 <__sflush_r+0x1c>
 8010fa2:	4407      	add	r7, r0
 8010fa4:	eba8 0800 	sub.w	r8, r8, r0
 8010fa8:	e7e9      	b.n	8010f7e <__sflush_r+0xda>
 8010faa:	bf00      	nop
 8010fac:	20400001 	.word	0x20400001

08010fb0 <_fflush_r>:
 8010fb0:	b538      	push	{r3, r4, r5, lr}
 8010fb2:	690b      	ldr	r3, [r1, #16]
 8010fb4:	4605      	mov	r5, r0
 8010fb6:	460c      	mov	r4, r1
 8010fb8:	b913      	cbnz	r3, 8010fc0 <_fflush_r+0x10>
 8010fba:	2500      	movs	r5, #0
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	bd38      	pop	{r3, r4, r5, pc}
 8010fc0:	b118      	cbz	r0, 8010fca <_fflush_r+0x1a>
 8010fc2:	6983      	ldr	r3, [r0, #24]
 8010fc4:	b90b      	cbnz	r3, 8010fca <_fflush_r+0x1a>
 8010fc6:	f000 f887 	bl	80110d8 <__sinit>
 8010fca:	4b14      	ldr	r3, [pc, #80]	; (801101c <_fflush_r+0x6c>)
 8010fcc:	429c      	cmp	r4, r3
 8010fce:	d11b      	bne.n	8011008 <_fflush_r+0x58>
 8010fd0:	686c      	ldr	r4, [r5, #4]
 8010fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d0ef      	beq.n	8010fba <_fflush_r+0xa>
 8010fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010fdc:	07d0      	lsls	r0, r2, #31
 8010fde:	d404      	bmi.n	8010fea <_fflush_r+0x3a>
 8010fe0:	0599      	lsls	r1, r3, #22
 8010fe2:	d402      	bmi.n	8010fea <_fflush_r+0x3a>
 8010fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fe6:	f000 f915 	bl	8011214 <__retarget_lock_acquire_recursive>
 8010fea:	4628      	mov	r0, r5
 8010fec:	4621      	mov	r1, r4
 8010fee:	f7ff ff59 	bl	8010ea4 <__sflush_r>
 8010ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ff4:	07da      	lsls	r2, r3, #31
 8010ff6:	4605      	mov	r5, r0
 8010ff8:	d4e0      	bmi.n	8010fbc <_fflush_r+0xc>
 8010ffa:	89a3      	ldrh	r3, [r4, #12]
 8010ffc:	059b      	lsls	r3, r3, #22
 8010ffe:	d4dd      	bmi.n	8010fbc <_fflush_r+0xc>
 8011000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011002:	f000 f908 	bl	8011216 <__retarget_lock_release_recursive>
 8011006:	e7d9      	b.n	8010fbc <_fflush_r+0xc>
 8011008:	4b05      	ldr	r3, [pc, #20]	; (8011020 <_fflush_r+0x70>)
 801100a:	429c      	cmp	r4, r3
 801100c:	d101      	bne.n	8011012 <_fflush_r+0x62>
 801100e:	68ac      	ldr	r4, [r5, #8]
 8011010:	e7df      	b.n	8010fd2 <_fflush_r+0x22>
 8011012:	4b04      	ldr	r3, [pc, #16]	; (8011024 <_fflush_r+0x74>)
 8011014:	429c      	cmp	r4, r3
 8011016:	bf08      	it	eq
 8011018:	68ec      	ldreq	r4, [r5, #12]
 801101a:	e7da      	b.n	8010fd2 <_fflush_r+0x22>
 801101c:	08013f8c 	.word	0x08013f8c
 8011020:	08013fac 	.word	0x08013fac
 8011024:	08013f6c 	.word	0x08013f6c

08011028 <std>:
 8011028:	2300      	movs	r3, #0
 801102a:	b510      	push	{r4, lr}
 801102c:	4604      	mov	r4, r0
 801102e:	e9c0 3300 	strd	r3, r3, [r0]
 8011032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011036:	6083      	str	r3, [r0, #8]
 8011038:	8181      	strh	r1, [r0, #12]
 801103a:	6643      	str	r3, [r0, #100]	; 0x64
 801103c:	81c2      	strh	r2, [r0, #14]
 801103e:	6183      	str	r3, [r0, #24]
 8011040:	4619      	mov	r1, r3
 8011042:	2208      	movs	r2, #8
 8011044:	305c      	adds	r0, #92	; 0x5c
 8011046:	f7ff fd11 	bl	8010a6c <memset>
 801104a:	4b05      	ldr	r3, [pc, #20]	; (8011060 <std+0x38>)
 801104c:	6263      	str	r3, [r4, #36]	; 0x24
 801104e:	4b05      	ldr	r3, [pc, #20]	; (8011064 <std+0x3c>)
 8011050:	62a3      	str	r3, [r4, #40]	; 0x28
 8011052:	4b05      	ldr	r3, [pc, #20]	; (8011068 <std+0x40>)
 8011054:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011056:	4b05      	ldr	r3, [pc, #20]	; (801106c <std+0x44>)
 8011058:	6224      	str	r4, [r4, #32]
 801105a:	6323      	str	r3, [r4, #48]	; 0x30
 801105c:	bd10      	pop	{r4, pc}
 801105e:	bf00      	nop
 8011060:	080118c1 	.word	0x080118c1
 8011064:	080118e3 	.word	0x080118e3
 8011068:	0801191b 	.word	0x0801191b
 801106c:	0801193f 	.word	0x0801193f

08011070 <_cleanup_r>:
 8011070:	4901      	ldr	r1, [pc, #4]	; (8011078 <_cleanup_r+0x8>)
 8011072:	f000 b8af 	b.w	80111d4 <_fwalk_reent>
 8011076:	bf00      	nop
 8011078:	08010fb1 	.word	0x08010fb1

0801107c <__sfmoreglue>:
 801107c:	b570      	push	{r4, r5, r6, lr}
 801107e:	1e4a      	subs	r2, r1, #1
 8011080:	2568      	movs	r5, #104	; 0x68
 8011082:	4355      	muls	r5, r2
 8011084:	460e      	mov	r6, r1
 8011086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801108a:	f7ff fd47 	bl	8010b1c <_malloc_r>
 801108e:	4604      	mov	r4, r0
 8011090:	b140      	cbz	r0, 80110a4 <__sfmoreglue+0x28>
 8011092:	2100      	movs	r1, #0
 8011094:	e9c0 1600 	strd	r1, r6, [r0]
 8011098:	300c      	adds	r0, #12
 801109a:	60a0      	str	r0, [r4, #8]
 801109c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80110a0:	f7ff fce4 	bl	8010a6c <memset>
 80110a4:	4620      	mov	r0, r4
 80110a6:	bd70      	pop	{r4, r5, r6, pc}

080110a8 <__sfp_lock_acquire>:
 80110a8:	4801      	ldr	r0, [pc, #4]	; (80110b0 <__sfp_lock_acquire+0x8>)
 80110aa:	f000 b8b3 	b.w	8011214 <__retarget_lock_acquire_recursive>
 80110ae:	bf00      	nop
 80110b0:	20004d1c 	.word	0x20004d1c

080110b4 <__sfp_lock_release>:
 80110b4:	4801      	ldr	r0, [pc, #4]	; (80110bc <__sfp_lock_release+0x8>)
 80110b6:	f000 b8ae 	b.w	8011216 <__retarget_lock_release_recursive>
 80110ba:	bf00      	nop
 80110bc:	20004d1c 	.word	0x20004d1c

080110c0 <__sinit_lock_acquire>:
 80110c0:	4801      	ldr	r0, [pc, #4]	; (80110c8 <__sinit_lock_acquire+0x8>)
 80110c2:	f000 b8a7 	b.w	8011214 <__retarget_lock_acquire_recursive>
 80110c6:	bf00      	nop
 80110c8:	20004d17 	.word	0x20004d17

080110cc <__sinit_lock_release>:
 80110cc:	4801      	ldr	r0, [pc, #4]	; (80110d4 <__sinit_lock_release+0x8>)
 80110ce:	f000 b8a2 	b.w	8011216 <__retarget_lock_release_recursive>
 80110d2:	bf00      	nop
 80110d4:	20004d17 	.word	0x20004d17

080110d8 <__sinit>:
 80110d8:	b510      	push	{r4, lr}
 80110da:	4604      	mov	r4, r0
 80110dc:	f7ff fff0 	bl	80110c0 <__sinit_lock_acquire>
 80110e0:	69a3      	ldr	r3, [r4, #24]
 80110e2:	b11b      	cbz	r3, 80110ec <__sinit+0x14>
 80110e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110e8:	f7ff bff0 	b.w	80110cc <__sinit_lock_release>
 80110ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80110f0:	6523      	str	r3, [r4, #80]	; 0x50
 80110f2:	4b13      	ldr	r3, [pc, #76]	; (8011140 <__sinit+0x68>)
 80110f4:	4a13      	ldr	r2, [pc, #76]	; (8011144 <__sinit+0x6c>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80110fa:	42a3      	cmp	r3, r4
 80110fc:	bf04      	itt	eq
 80110fe:	2301      	moveq	r3, #1
 8011100:	61a3      	streq	r3, [r4, #24]
 8011102:	4620      	mov	r0, r4
 8011104:	f000 f820 	bl	8011148 <__sfp>
 8011108:	6060      	str	r0, [r4, #4]
 801110a:	4620      	mov	r0, r4
 801110c:	f000 f81c 	bl	8011148 <__sfp>
 8011110:	60a0      	str	r0, [r4, #8]
 8011112:	4620      	mov	r0, r4
 8011114:	f000 f818 	bl	8011148 <__sfp>
 8011118:	2200      	movs	r2, #0
 801111a:	60e0      	str	r0, [r4, #12]
 801111c:	2104      	movs	r1, #4
 801111e:	6860      	ldr	r0, [r4, #4]
 8011120:	f7ff ff82 	bl	8011028 <std>
 8011124:	68a0      	ldr	r0, [r4, #8]
 8011126:	2201      	movs	r2, #1
 8011128:	2109      	movs	r1, #9
 801112a:	f7ff ff7d 	bl	8011028 <std>
 801112e:	68e0      	ldr	r0, [r4, #12]
 8011130:	2202      	movs	r2, #2
 8011132:	2112      	movs	r1, #18
 8011134:	f7ff ff78 	bl	8011028 <std>
 8011138:	2301      	movs	r3, #1
 801113a:	61a3      	str	r3, [r4, #24]
 801113c:	e7d2      	b.n	80110e4 <__sinit+0xc>
 801113e:	bf00      	nop
 8011140:	08013f68 	.word	0x08013f68
 8011144:	08011071 	.word	0x08011071

08011148 <__sfp>:
 8011148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801114a:	4607      	mov	r7, r0
 801114c:	f7ff ffac 	bl	80110a8 <__sfp_lock_acquire>
 8011150:	4b1e      	ldr	r3, [pc, #120]	; (80111cc <__sfp+0x84>)
 8011152:	681e      	ldr	r6, [r3, #0]
 8011154:	69b3      	ldr	r3, [r6, #24]
 8011156:	b913      	cbnz	r3, 801115e <__sfp+0x16>
 8011158:	4630      	mov	r0, r6
 801115a:	f7ff ffbd 	bl	80110d8 <__sinit>
 801115e:	3648      	adds	r6, #72	; 0x48
 8011160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011164:	3b01      	subs	r3, #1
 8011166:	d503      	bpl.n	8011170 <__sfp+0x28>
 8011168:	6833      	ldr	r3, [r6, #0]
 801116a:	b30b      	cbz	r3, 80111b0 <__sfp+0x68>
 801116c:	6836      	ldr	r6, [r6, #0]
 801116e:	e7f7      	b.n	8011160 <__sfp+0x18>
 8011170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011174:	b9d5      	cbnz	r5, 80111ac <__sfp+0x64>
 8011176:	4b16      	ldr	r3, [pc, #88]	; (80111d0 <__sfp+0x88>)
 8011178:	60e3      	str	r3, [r4, #12]
 801117a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801117e:	6665      	str	r5, [r4, #100]	; 0x64
 8011180:	f000 f847 	bl	8011212 <__retarget_lock_init_recursive>
 8011184:	f7ff ff96 	bl	80110b4 <__sfp_lock_release>
 8011188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801118c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011190:	6025      	str	r5, [r4, #0]
 8011192:	61a5      	str	r5, [r4, #24]
 8011194:	2208      	movs	r2, #8
 8011196:	4629      	mov	r1, r5
 8011198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801119c:	f7ff fc66 	bl	8010a6c <memset>
 80111a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80111a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80111a8:	4620      	mov	r0, r4
 80111aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111ac:	3468      	adds	r4, #104	; 0x68
 80111ae:	e7d9      	b.n	8011164 <__sfp+0x1c>
 80111b0:	2104      	movs	r1, #4
 80111b2:	4638      	mov	r0, r7
 80111b4:	f7ff ff62 	bl	801107c <__sfmoreglue>
 80111b8:	4604      	mov	r4, r0
 80111ba:	6030      	str	r0, [r6, #0]
 80111bc:	2800      	cmp	r0, #0
 80111be:	d1d5      	bne.n	801116c <__sfp+0x24>
 80111c0:	f7ff ff78 	bl	80110b4 <__sfp_lock_release>
 80111c4:	230c      	movs	r3, #12
 80111c6:	603b      	str	r3, [r7, #0]
 80111c8:	e7ee      	b.n	80111a8 <__sfp+0x60>
 80111ca:	bf00      	nop
 80111cc:	08013f68 	.word	0x08013f68
 80111d0:	ffff0001 	.word	0xffff0001

080111d4 <_fwalk_reent>:
 80111d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111d8:	4606      	mov	r6, r0
 80111da:	4688      	mov	r8, r1
 80111dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111e0:	2700      	movs	r7, #0
 80111e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111e6:	f1b9 0901 	subs.w	r9, r9, #1
 80111ea:	d505      	bpl.n	80111f8 <_fwalk_reent+0x24>
 80111ec:	6824      	ldr	r4, [r4, #0]
 80111ee:	2c00      	cmp	r4, #0
 80111f0:	d1f7      	bne.n	80111e2 <_fwalk_reent+0xe>
 80111f2:	4638      	mov	r0, r7
 80111f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111f8:	89ab      	ldrh	r3, [r5, #12]
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d907      	bls.n	801120e <_fwalk_reent+0x3a>
 80111fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011202:	3301      	adds	r3, #1
 8011204:	d003      	beq.n	801120e <_fwalk_reent+0x3a>
 8011206:	4629      	mov	r1, r5
 8011208:	4630      	mov	r0, r6
 801120a:	47c0      	blx	r8
 801120c:	4307      	orrs	r7, r0
 801120e:	3568      	adds	r5, #104	; 0x68
 8011210:	e7e9      	b.n	80111e6 <_fwalk_reent+0x12>

08011212 <__retarget_lock_init_recursive>:
 8011212:	4770      	bx	lr

08011214 <__retarget_lock_acquire_recursive>:
 8011214:	4770      	bx	lr

08011216 <__retarget_lock_release_recursive>:
 8011216:	4770      	bx	lr

08011218 <__swhatbuf_r>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	460e      	mov	r6, r1
 801121c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011220:	2900      	cmp	r1, #0
 8011222:	b096      	sub	sp, #88	; 0x58
 8011224:	4614      	mov	r4, r2
 8011226:	461d      	mov	r5, r3
 8011228:	da07      	bge.n	801123a <__swhatbuf_r+0x22>
 801122a:	2300      	movs	r3, #0
 801122c:	602b      	str	r3, [r5, #0]
 801122e:	89b3      	ldrh	r3, [r6, #12]
 8011230:	061a      	lsls	r2, r3, #24
 8011232:	d410      	bmi.n	8011256 <__swhatbuf_r+0x3e>
 8011234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011238:	e00e      	b.n	8011258 <__swhatbuf_r+0x40>
 801123a:	466a      	mov	r2, sp
 801123c:	f000 fba6 	bl	801198c <_fstat_r>
 8011240:	2800      	cmp	r0, #0
 8011242:	dbf2      	blt.n	801122a <__swhatbuf_r+0x12>
 8011244:	9a01      	ldr	r2, [sp, #4]
 8011246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801124a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801124e:	425a      	negs	r2, r3
 8011250:	415a      	adcs	r2, r3
 8011252:	602a      	str	r2, [r5, #0]
 8011254:	e7ee      	b.n	8011234 <__swhatbuf_r+0x1c>
 8011256:	2340      	movs	r3, #64	; 0x40
 8011258:	2000      	movs	r0, #0
 801125a:	6023      	str	r3, [r4, #0]
 801125c:	b016      	add	sp, #88	; 0x58
 801125e:	bd70      	pop	{r4, r5, r6, pc}

08011260 <__smakebuf_r>:
 8011260:	898b      	ldrh	r3, [r1, #12]
 8011262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011264:	079d      	lsls	r5, r3, #30
 8011266:	4606      	mov	r6, r0
 8011268:	460c      	mov	r4, r1
 801126a:	d507      	bpl.n	801127c <__smakebuf_r+0x1c>
 801126c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011270:	6023      	str	r3, [r4, #0]
 8011272:	6123      	str	r3, [r4, #16]
 8011274:	2301      	movs	r3, #1
 8011276:	6163      	str	r3, [r4, #20]
 8011278:	b002      	add	sp, #8
 801127a:	bd70      	pop	{r4, r5, r6, pc}
 801127c:	ab01      	add	r3, sp, #4
 801127e:	466a      	mov	r2, sp
 8011280:	f7ff ffca 	bl	8011218 <__swhatbuf_r>
 8011284:	9900      	ldr	r1, [sp, #0]
 8011286:	4605      	mov	r5, r0
 8011288:	4630      	mov	r0, r6
 801128a:	f7ff fc47 	bl	8010b1c <_malloc_r>
 801128e:	b948      	cbnz	r0, 80112a4 <__smakebuf_r+0x44>
 8011290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011294:	059a      	lsls	r2, r3, #22
 8011296:	d4ef      	bmi.n	8011278 <__smakebuf_r+0x18>
 8011298:	f023 0303 	bic.w	r3, r3, #3
 801129c:	f043 0302 	orr.w	r3, r3, #2
 80112a0:	81a3      	strh	r3, [r4, #12]
 80112a2:	e7e3      	b.n	801126c <__smakebuf_r+0xc>
 80112a4:	4b0d      	ldr	r3, [pc, #52]	; (80112dc <__smakebuf_r+0x7c>)
 80112a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	6020      	str	r0, [r4, #0]
 80112ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112b0:	81a3      	strh	r3, [r4, #12]
 80112b2:	9b00      	ldr	r3, [sp, #0]
 80112b4:	6163      	str	r3, [r4, #20]
 80112b6:	9b01      	ldr	r3, [sp, #4]
 80112b8:	6120      	str	r0, [r4, #16]
 80112ba:	b15b      	cbz	r3, 80112d4 <__smakebuf_r+0x74>
 80112bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112c0:	4630      	mov	r0, r6
 80112c2:	f000 fb75 	bl	80119b0 <_isatty_r>
 80112c6:	b128      	cbz	r0, 80112d4 <__smakebuf_r+0x74>
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	f023 0303 	bic.w	r3, r3, #3
 80112ce:	f043 0301 	orr.w	r3, r3, #1
 80112d2:	81a3      	strh	r3, [r4, #12]
 80112d4:	89a0      	ldrh	r0, [r4, #12]
 80112d6:	4305      	orrs	r5, r0
 80112d8:	81a5      	strh	r5, [r4, #12]
 80112da:	e7cd      	b.n	8011278 <__smakebuf_r+0x18>
 80112dc:	08011071 	.word	0x08011071

080112e0 <__ssputs_r>:
 80112e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112e4:	688e      	ldr	r6, [r1, #8]
 80112e6:	429e      	cmp	r6, r3
 80112e8:	4682      	mov	sl, r0
 80112ea:	460c      	mov	r4, r1
 80112ec:	4690      	mov	r8, r2
 80112ee:	461f      	mov	r7, r3
 80112f0:	d838      	bhi.n	8011364 <__ssputs_r+0x84>
 80112f2:	898a      	ldrh	r2, [r1, #12]
 80112f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80112f8:	d032      	beq.n	8011360 <__ssputs_r+0x80>
 80112fa:	6825      	ldr	r5, [r4, #0]
 80112fc:	6909      	ldr	r1, [r1, #16]
 80112fe:	eba5 0901 	sub.w	r9, r5, r1
 8011302:	6965      	ldr	r5, [r4, #20]
 8011304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801130c:	3301      	adds	r3, #1
 801130e:	444b      	add	r3, r9
 8011310:	106d      	asrs	r5, r5, #1
 8011312:	429d      	cmp	r5, r3
 8011314:	bf38      	it	cc
 8011316:	461d      	movcc	r5, r3
 8011318:	0553      	lsls	r3, r2, #21
 801131a:	d531      	bpl.n	8011380 <__ssputs_r+0xa0>
 801131c:	4629      	mov	r1, r5
 801131e:	f7ff fbfd 	bl	8010b1c <_malloc_r>
 8011322:	4606      	mov	r6, r0
 8011324:	b950      	cbnz	r0, 801133c <__ssputs_r+0x5c>
 8011326:	230c      	movs	r3, #12
 8011328:	f8ca 3000 	str.w	r3, [sl]
 801132c:	89a3      	ldrh	r3, [r4, #12]
 801132e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011332:	81a3      	strh	r3, [r4, #12]
 8011334:	f04f 30ff 	mov.w	r0, #4294967295
 8011338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801133c:	6921      	ldr	r1, [r4, #16]
 801133e:	464a      	mov	r2, r9
 8011340:	f7ff fb86 	bl	8010a50 <memcpy>
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801134a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801134e:	81a3      	strh	r3, [r4, #12]
 8011350:	6126      	str	r6, [r4, #16]
 8011352:	6165      	str	r5, [r4, #20]
 8011354:	444e      	add	r6, r9
 8011356:	eba5 0509 	sub.w	r5, r5, r9
 801135a:	6026      	str	r6, [r4, #0]
 801135c:	60a5      	str	r5, [r4, #8]
 801135e:	463e      	mov	r6, r7
 8011360:	42be      	cmp	r6, r7
 8011362:	d900      	bls.n	8011366 <__ssputs_r+0x86>
 8011364:	463e      	mov	r6, r7
 8011366:	4632      	mov	r2, r6
 8011368:	6820      	ldr	r0, [r4, #0]
 801136a:	4641      	mov	r1, r8
 801136c:	f000 fb42 	bl	80119f4 <memmove>
 8011370:	68a3      	ldr	r3, [r4, #8]
 8011372:	6822      	ldr	r2, [r4, #0]
 8011374:	1b9b      	subs	r3, r3, r6
 8011376:	4432      	add	r2, r6
 8011378:	60a3      	str	r3, [r4, #8]
 801137a:	6022      	str	r2, [r4, #0]
 801137c:	2000      	movs	r0, #0
 801137e:	e7db      	b.n	8011338 <__ssputs_r+0x58>
 8011380:	462a      	mov	r2, r5
 8011382:	f000 fb51 	bl	8011a28 <_realloc_r>
 8011386:	4606      	mov	r6, r0
 8011388:	2800      	cmp	r0, #0
 801138a:	d1e1      	bne.n	8011350 <__ssputs_r+0x70>
 801138c:	6921      	ldr	r1, [r4, #16]
 801138e:	4650      	mov	r0, sl
 8011390:	f7ff fb74 	bl	8010a7c <_free_r>
 8011394:	e7c7      	b.n	8011326 <__ssputs_r+0x46>
	...

08011398 <_svfiprintf_r>:
 8011398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139c:	4698      	mov	r8, r3
 801139e:	898b      	ldrh	r3, [r1, #12]
 80113a0:	061b      	lsls	r3, r3, #24
 80113a2:	b09d      	sub	sp, #116	; 0x74
 80113a4:	4607      	mov	r7, r0
 80113a6:	460d      	mov	r5, r1
 80113a8:	4614      	mov	r4, r2
 80113aa:	d50e      	bpl.n	80113ca <_svfiprintf_r+0x32>
 80113ac:	690b      	ldr	r3, [r1, #16]
 80113ae:	b963      	cbnz	r3, 80113ca <_svfiprintf_r+0x32>
 80113b0:	2140      	movs	r1, #64	; 0x40
 80113b2:	f7ff fbb3 	bl	8010b1c <_malloc_r>
 80113b6:	6028      	str	r0, [r5, #0]
 80113b8:	6128      	str	r0, [r5, #16]
 80113ba:	b920      	cbnz	r0, 80113c6 <_svfiprintf_r+0x2e>
 80113bc:	230c      	movs	r3, #12
 80113be:	603b      	str	r3, [r7, #0]
 80113c0:	f04f 30ff 	mov.w	r0, #4294967295
 80113c4:	e0d1      	b.n	801156a <_svfiprintf_r+0x1d2>
 80113c6:	2340      	movs	r3, #64	; 0x40
 80113c8:	616b      	str	r3, [r5, #20]
 80113ca:	2300      	movs	r3, #0
 80113cc:	9309      	str	r3, [sp, #36]	; 0x24
 80113ce:	2320      	movs	r3, #32
 80113d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80113d8:	2330      	movs	r3, #48	; 0x30
 80113da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011584 <_svfiprintf_r+0x1ec>
 80113de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113e2:	f04f 0901 	mov.w	r9, #1
 80113e6:	4623      	mov	r3, r4
 80113e8:	469a      	mov	sl, r3
 80113ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113ee:	b10a      	cbz	r2, 80113f4 <_svfiprintf_r+0x5c>
 80113f0:	2a25      	cmp	r2, #37	; 0x25
 80113f2:	d1f9      	bne.n	80113e8 <_svfiprintf_r+0x50>
 80113f4:	ebba 0b04 	subs.w	fp, sl, r4
 80113f8:	d00b      	beq.n	8011412 <_svfiprintf_r+0x7a>
 80113fa:	465b      	mov	r3, fp
 80113fc:	4622      	mov	r2, r4
 80113fe:	4629      	mov	r1, r5
 8011400:	4638      	mov	r0, r7
 8011402:	f7ff ff6d 	bl	80112e0 <__ssputs_r>
 8011406:	3001      	adds	r0, #1
 8011408:	f000 80aa 	beq.w	8011560 <_svfiprintf_r+0x1c8>
 801140c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801140e:	445a      	add	r2, fp
 8011410:	9209      	str	r2, [sp, #36]	; 0x24
 8011412:	f89a 3000 	ldrb.w	r3, [sl]
 8011416:	2b00      	cmp	r3, #0
 8011418:	f000 80a2 	beq.w	8011560 <_svfiprintf_r+0x1c8>
 801141c:	2300      	movs	r3, #0
 801141e:	f04f 32ff 	mov.w	r2, #4294967295
 8011422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011426:	f10a 0a01 	add.w	sl, sl, #1
 801142a:	9304      	str	r3, [sp, #16]
 801142c:	9307      	str	r3, [sp, #28]
 801142e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011432:	931a      	str	r3, [sp, #104]	; 0x68
 8011434:	4654      	mov	r4, sl
 8011436:	2205      	movs	r2, #5
 8011438:	f814 1b01 	ldrb.w	r1, [r4], #1
 801143c:	4851      	ldr	r0, [pc, #324]	; (8011584 <_svfiprintf_r+0x1ec>)
 801143e:	f7ee fee7 	bl	8000210 <memchr>
 8011442:	9a04      	ldr	r2, [sp, #16]
 8011444:	b9d8      	cbnz	r0, 801147e <_svfiprintf_r+0xe6>
 8011446:	06d0      	lsls	r0, r2, #27
 8011448:	bf44      	itt	mi
 801144a:	2320      	movmi	r3, #32
 801144c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011450:	0711      	lsls	r1, r2, #28
 8011452:	bf44      	itt	mi
 8011454:	232b      	movmi	r3, #43	; 0x2b
 8011456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801145a:	f89a 3000 	ldrb.w	r3, [sl]
 801145e:	2b2a      	cmp	r3, #42	; 0x2a
 8011460:	d015      	beq.n	801148e <_svfiprintf_r+0xf6>
 8011462:	9a07      	ldr	r2, [sp, #28]
 8011464:	4654      	mov	r4, sl
 8011466:	2000      	movs	r0, #0
 8011468:	f04f 0c0a 	mov.w	ip, #10
 801146c:	4621      	mov	r1, r4
 801146e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011472:	3b30      	subs	r3, #48	; 0x30
 8011474:	2b09      	cmp	r3, #9
 8011476:	d94e      	bls.n	8011516 <_svfiprintf_r+0x17e>
 8011478:	b1b0      	cbz	r0, 80114a8 <_svfiprintf_r+0x110>
 801147a:	9207      	str	r2, [sp, #28]
 801147c:	e014      	b.n	80114a8 <_svfiprintf_r+0x110>
 801147e:	eba0 0308 	sub.w	r3, r0, r8
 8011482:	fa09 f303 	lsl.w	r3, r9, r3
 8011486:	4313      	orrs	r3, r2
 8011488:	9304      	str	r3, [sp, #16]
 801148a:	46a2      	mov	sl, r4
 801148c:	e7d2      	b.n	8011434 <_svfiprintf_r+0x9c>
 801148e:	9b03      	ldr	r3, [sp, #12]
 8011490:	1d19      	adds	r1, r3, #4
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	9103      	str	r1, [sp, #12]
 8011496:	2b00      	cmp	r3, #0
 8011498:	bfbb      	ittet	lt
 801149a:	425b      	neglt	r3, r3
 801149c:	f042 0202 	orrlt.w	r2, r2, #2
 80114a0:	9307      	strge	r3, [sp, #28]
 80114a2:	9307      	strlt	r3, [sp, #28]
 80114a4:	bfb8      	it	lt
 80114a6:	9204      	strlt	r2, [sp, #16]
 80114a8:	7823      	ldrb	r3, [r4, #0]
 80114aa:	2b2e      	cmp	r3, #46	; 0x2e
 80114ac:	d10c      	bne.n	80114c8 <_svfiprintf_r+0x130>
 80114ae:	7863      	ldrb	r3, [r4, #1]
 80114b0:	2b2a      	cmp	r3, #42	; 0x2a
 80114b2:	d135      	bne.n	8011520 <_svfiprintf_r+0x188>
 80114b4:	9b03      	ldr	r3, [sp, #12]
 80114b6:	1d1a      	adds	r2, r3, #4
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	9203      	str	r2, [sp, #12]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	bfb8      	it	lt
 80114c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80114c4:	3402      	adds	r4, #2
 80114c6:	9305      	str	r3, [sp, #20]
 80114c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011594 <_svfiprintf_r+0x1fc>
 80114cc:	7821      	ldrb	r1, [r4, #0]
 80114ce:	2203      	movs	r2, #3
 80114d0:	4650      	mov	r0, sl
 80114d2:	f7ee fe9d 	bl	8000210 <memchr>
 80114d6:	b140      	cbz	r0, 80114ea <_svfiprintf_r+0x152>
 80114d8:	2340      	movs	r3, #64	; 0x40
 80114da:	eba0 000a 	sub.w	r0, r0, sl
 80114de:	fa03 f000 	lsl.w	r0, r3, r0
 80114e2:	9b04      	ldr	r3, [sp, #16]
 80114e4:	4303      	orrs	r3, r0
 80114e6:	3401      	adds	r4, #1
 80114e8:	9304      	str	r3, [sp, #16]
 80114ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114ee:	4826      	ldr	r0, [pc, #152]	; (8011588 <_svfiprintf_r+0x1f0>)
 80114f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114f4:	2206      	movs	r2, #6
 80114f6:	f7ee fe8b 	bl	8000210 <memchr>
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d038      	beq.n	8011570 <_svfiprintf_r+0x1d8>
 80114fe:	4b23      	ldr	r3, [pc, #140]	; (801158c <_svfiprintf_r+0x1f4>)
 8011500:	bb1b      	cbnz	r3, 801154a <_svfiprintf_r+0x1b2>
 8011502:	9b03      	ldr	r3, [sp, #12]
 8011504:	3307      	adds	r3, #7
 8011506:	f023 0307 	bic.w	r3, r3, #7
 801150a:	3308      	adds	r3, #8
 801150c:	9303      	str	r3, [sp, #12]
 801150e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011510:	4433      	add	r3, r6
 8011512:	9309      	str	r3, [sp, #36]	; 0x24
 8011514:	e767      	b.n	80113e6 <_svfiprintf_r+0x4e>
 8011516:	fb0c 3202 	mla	r2, ip, r2, r3
 801151a:	460c      	mov	r4, r1
 801151c:	2001      	movs	r0, #1
 801151e:	e7a5      	b.n	801146c <_svfiprintf_r+0xd4>
 8011520:	2300      	movs	r3, #0
 8011522:	3401      	adds	r4, #1
 8011524:	9305      	str	r3, [sp, #20]
 8011526:	4619      	mov	r1, r3
 8011528:	f04f 0c0a 	mov.w	ip, #10
 801152c:	4620      	mov	r0, r4
 801152e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011532:	3a30      	subs	r2, #48	; 0x30
 8011534:	2a09      	cmp	r2, #9
 8011536:	d903      	bls.n	8011540 <_svfiprintf_r+0x1a8>
 8011538:	2b00      	cmp	r3, #0
 801153a:	d0c5      	beq.n	80114c8 <_svfiprintf_r+0x130>
 801153c:	9105      	str	r1, [sp, #20]
 801153e:	e7c3      	b.n	80114c8 <_svfiprintf_r+0x130>
 8011540:	fb0c 2101 	mla	r1, ip, r1, r2
 8011544:	4604      	mov	r4, r0
 8011546:	2301      	movs	r3, #1
 8011548:	e7f0      	b.n	801152c <_svfiprintf_r+0x194>
 801154a:	ab03      	add	r3, sp, #12
 801154c:	9300      	str	r3, [sp, #0]
 801154e:	462a      	mov	r2, r5
 8011550:	4b0f      	ldr	r3, [pc, #60]	; (8011590 <_svfiprintf_r+0x1f8>)
 8011552:	a904      	add	r1, sp, #16
 8011554:	4638      	mov	r0, r7
 8011556:	f3af 8000 	nop.w
 801155a:	1c42      	adds	r2, r0, #1
 801155c:	4606      	mov	r6, r0
 801155e:	d1d6      	bne.n	801150e <_svfiprintf_r+0x176>
 8011560:	89ab      	ldrh	r3, [r5, #12]
 8011562:	065b      	lsls	r3, r3, #25
 8011564:	f53f af2c 	bmi.w	80113c0 <_svfiprintf_r+0x28>
 8011568:	9809      	ldr	r0, [sp, #36]	; 0x24
 801156a:	b01d      	add	sp, #116	; 0x74
 801156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011570:	ab03      	add	r3, sp, #12
 8011572:	9300      	str	r3, [sp, #0]
 8011574:	462a      	mov	r2, r5
 8011576:	4b06      	ldr	r3, [pc, #24]	; (8011590 <_svfiprintf_r+0x1f8>)
 8011578:	a904      	add	r1, sp, #16
 801157a:	4638      	mov	r0, r7
 801157c:	f000 f87a 	bl	8011674 <_printf_i>
 8011580:	e7eb      	b.n	801155a <_svfiprintf_r+0x1c2>
 8011582:	bf00      	nop
 8011584:	08013fcc 	.word	0x08013fcc
 8011588:	08013fd6 	.word	0x08013fd6
 801158c:	00000000 	.word	0x00000000
 8011590:	080112e1 	.word	0x080112e1
 8011594:	08013fd2 	.word	0x08013fd2

08011598 <_printf_common>:
 8011598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801159c:	4616      	mov	r6, r2
 801159e:	4699      	mov	r9, r3
 80115a0:	688a      	ldr	r2, [r1, #8]
 80115a2:	690b      	ldr	r3, [r1, #16]
 80115a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80115a8:	4293      	cmp	r3, r2
 80115aa:	bfb8      	it	lt
 80115ac:	4613      	movlt	r3, r2
 80115ae:	6033      	str	r3, [r6, #0]
 80115b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80115b4:	4607      	mov	r7, r0
 80115b6:	460c      	mov	r4, r1
 80115b8:	b10a      	cbz	r2, 80115be <_printf_common+0x26>
 80115ba:	3301      	adds	r3, #1
 80115bc:	6033      	str	r3, [r6, #0]
 80115be:	6823      	ldr	r3, [r4, #0]
 80115c0:	0699      	lsls	r1, r3, #26
 80115c2:	bf42      	ittt	mi
 80115c4:	6833      	ldrmi	r3, [r6, #0]
 80115c6:	3302      	addmi	r3, #2
 80115c8:	6033      	strmi	r3, [r6, #0]
 80115ca:	6825      	ldr	r5, [r4, #0]
 80115cc:	f015 0506 	ands.w	r5, r5, #6
 80115d0:	d106      	bne.n	80115e0 <_printf_common+0x48>
 80115d2:	f104 0a19 	add.w	sl, r4, #25
 80115d6:	68e3      	ldr	r3, [r4, #12]
 80115d8:	6832      	ldr	r2, [r6, #0]
 80115da:	1a9b      	subs	r3, r3, r2
 80115dc:	42ab      	cmp	r3, r5
 80115de:	dc26      	bgt.n	801162e <_printf_common+0x96>
 80115e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80115e4:	1e13      	subs	r3, r2, #0
 80115e6:	6822      	ldr	r2, [r4, #0]
 80115e8:	bf18      	it	ne
 80115ea:	2301      	movne	r3, #1
 80115ec:	0692      	lsls	r2, r2, #26
 80115ee:	d42b      	bmi.n	8011648 <_printf_common+0xb0>
 80115f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80115f4:	4649      	mov	r1, r9
 80115f6:	4638      	mov	r0, r7
 80115f8:	47c0      	blx	r8
 80115fa:	3001      	adds	r0, #1
 80115fc:	d01e      	beq.n	801163c <_printf_common+0xa4>
 80115fe:	6823      	ldr	r3, [r4, #0]
 8011600:	68e5      	ldr	r5, [r4, #12]
 8011602:	6832      	ldr	r2, [r6, #0]
 8011604:	f003 0306 	and.w	r3, r3, #6
 8011608:	2b04      	cmp	r3, #4
 801160a:	bf08      	it	eq
 801160c:	1aad      	subeq	r5, r5, r2
 801160e:	68a3      	ldr	r3, [r4, #8]
 8011610:	6922      	ldr	r2, [r4, #16]
 8011612:	bf0c      	ite	eq
 8011614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011618:	2500      	movne	r5, #0
 801161a:	4293      	cmp	r3, r2
 801161c:	bfc4      	itt	gt
 801161e:	1a9b      	subgt	r3, r3, r2
 8011620:	18ed      	addgt	r5, r5, r3
 8011622:	2600      	movs	r6, #0
 8011624:	341a      	adds	r4, #26
 8011626:	42b5      	cmp	r5, r6
 8011628:	d11a      	bne.n	8011660 <_printf_common+0xc8>
 801162a:	2000      	movs	r0, #0
 801162c:	e008      	b.n	8011640 <_printf_common+0xa8>
 801162e:	2301      	movs	r3, #1
 8011630:	4652      	mov	r2, sl
 8011632:	4649      	mov	r1, r9
 8011634:	4638      	mov	r0, r7
 8011636:	47c0      	blx	r8
 8011638:	3001      	adds	r0, #1
 801163a:	d103      	bne.n	8011644 <_printf_common+0xac>
 801163c:	f04f 30ff 	mov.w	r0, #4294967295
 8011640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011644:	3501      	adds	r5, #1
 8011646:	e7c6      	b.n	80115d6 <_printf_common+0x3e>
 8011648:	18e1      	adds	r1, r4, r3
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	2030      	movs	r0, #48	; 0x30
 801164e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011652:	4422      	add	r2, r4
 8011654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801165c:	3302      	adds	r3, #2
 801165e:	e7c7      	b.n	80115f0 <_printf_common+0x58>
 8011660:	2301      	movs	r3, #1
 8011662:	4622      	mov	r2, r4
 8011664:	4649      	mov	r1, r9
 8011666:	4638      	mov	r0, r7
 8011668:	47c0      	blx	r8
 801166a:	3001      	adds	r0, #1
 801166c:	d0e6      	beq.n	801163c <_printf_common+0xa4>
 801166e:	3601      	adds	r6, #1
 8011670:	e7d9      	b.n	8011626 <_printf_common+0x8e>
	...

08011674 <_printf_i>:
 8011674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011678:	460c      	mov	r4, r1
 801167a:	4691      	mov	r9, r2
 801167c:	7e27      	ldrb	r7, [r4, #24]
 801167e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011680:	2f78      	cmp	r7, #120	; 0x78
 8011682:	4680      	mov	r8, r0
 8011684:	469a      	mov	sl, r3
 8011686:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801168a:	d807      	bhi.n	801169c <_printf_i+0x28>
 801168c:	2f62      	cmp	r7, #98	; 0x62
 801168e:	d80a      	bhi.n	80116a6 <_printf_i+0x32>
 8011690:	2f00      	cmp	r7, #0
 8011692:	f000 80d8 	beq.w	8011846 <_printf_i+0x1d2>
 8011696:	2f58      	cmp	r7, #88	; 0x58
 8011698:	f000 80a3 	beq.w	80117e2 <_printf_i+0x16e>
 801169c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80116a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80116a4:	e03a      	b.n	801171c <_printf_i+0xa8>
 80116a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80116aa:	2b15      	cmp	r3, #21
 80116ac:	d8f6      	bhi.n	801169c <_printf_i+0x28>
 80116ae:	a001      	add	r0, pc, #4	; (adr r0, 80116b4 <_printf_i+0x40>)
 80116b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80116b4:	0801170d 	.word	0x0801170d
 80116b8:	08011721 	.word	0x08011721
 80116bc:	0801169d 	.word	0x0801169d
 80116c0:	0801169d 	.word	0x0801169d
 80116c4:	0801169d 	.word	0x0801169d
 80116c8:	0801169d 	.word	0x0801169d
 80116cc:	08011721 	.word	0x08011721
 80116d0:	0801169d 	.word	0x0801169d
 80116d4:	0801169d 	.word	0x0801169d
 80116d8:	0801169d 	.word	0x0801169d
 80116dc:	0801169d 	.word	0x0801169d
 80116e0:	0801182d 	.word	0x0801182d
 80116e4:	08011751 	.word	0x08011751
 80116e8:	0801180f 	.word	0x0801180f
 80116ec:	0801169d 	.word	0x0801169d
 80116f0:	0801169d 	.word	0x0801169d
 80116f4:	0801184f 	.word	0x0801184f
 80116f8:	0801169d 	.word	0x0801169d
 80116fc:	08011751 	.word	0x08011751
 8011700:	0801169d 	.word	0x0801169d
 8011704:	0801169d 	.word	0x0801169d
 8011708:	08011817 	.word	0x08011817
 801170c:	680b      	ldr	r3, [r1, #0]
 801170e:	1d1a      	adds	r2, r3, #4
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	600a      	str	r2, [r1, #0]
 8011714:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801171c:	2301      	movs	r3, #1
 801171e:	e0a3      	b.n	8011868 <_printf_i+0x1f4>
 8011720:	6825      	ldr	r5, [r4, #0]
 8011722:	6808      	ldr	r0, [r1, #0]
 8011724:	062e      	lsls	r6, r5, #24
 8011726:	f100 0304 	add.w	r3, r0, #4
 801172a:	d50a      	bpl.n	8011742 <_printf_i+0xce>
 801172c:	6805      	ldr	r5, [r0, #0]
 801172e:	600b      	str	r3, [r1, #0]
 8011730:	2d00      	cmp	r5, #0
 8011732:	da03      	bge.n	801173c <_printf_i+0xc8>
 8011734:	232d      	movs	r3, #45	; 0x2d
 8011736:	426d      	negs	r5, r5
 8011738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801173c:	485e      	ldr	r0, [pc, #376]	; (80118b8 <_printf_i+0x244>)
 801173e:	230a      	movs	r3, #10
 8011740:	e019      	b.n	8011776 <_printf_i+0x102>
 8011742:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011746:	6805      	ldr	r5, [r0, #0]
 8011748:	600b      	str	r3, [r1, #0]
 801174a:	bf18      	it	ne
 801174c:	b22d      	sxthne	r5, r5
 801174e:	e7ef      	b.n	8011730 <_printf_i+0xbc>
 8011750:	680b      	ldr	r3, [r1, #0]
 8011752:	6825      	ldr	r5, [r4, #0]
 8011754:	1d18      	adds	r0, r3, #4
 8011756:	6008      	str	r0, [r1, #0]
 8011758:	0628      	lsls	r0, r5, #24
 801175a:	d501      	bpl.n	8011760 <_printf_i+0xec>
 801175c:	681d      	ldr	r5, [r3, #0]
 801175e:	e002      	b.n	8011766 <_printf_i+0xf2>
 8011760:	0669      	lsls	r1, r5, #25
 8011762:	d5fb      	bpl.n	801175c <_printf_i+0xe8>
 8011764:	881d      	ldrh	r5, [r3, #0]
 8011766:	4854      	ldr	r0, [pc, #336]	; (80118b8 <_printf_i+0x244>)
 8011768:	2f6f      	cmp	r7, #111	; 0x6f
 801176a:	bf0c      	ite	eq
 801176c:	2308      	moveq	r3, #8
 801176e:	230a      	movne	r3, #10
 8011770:	2100      	movs	r1, #0
 8011772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011776:	6866      	ldr	r6, [r4, #4]
 8011778:	60a6      	str	r6, [r4, #8]
 801177a:	2e00      	cmp	r6, #0
 801177c:	bfa2      	ittt	ge
 801177e:	6821      	ldrge	r1, [r4, #0]
 8011780:	f021 0104 	bicge.w	r1, r1, #4
 8011784:	6021      	strge	r1, [r4, #0]
 8011786:	b90d      	cbnz	r5, 801178c <_printf_i+0x118>
 8011788:	2e00      	cmp	r6, #0
 801178a:	d04d      	beq.n	8011828 <_printf_i+0x1b4>
 801178c:	4616      	mov	r6, r2
 801178e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011792:	fb03 5711 	mls	r7, r3, r1, r5
 8011796:	5dc7      	ldrb	r7, [r0, r7]
 8011798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801179c:	462f      	mov	r7, r5
 801179e:	42bb      	cmp	r3, r7
 80117a0:	460d      	mov	r5, r1
 80117a2:	d9f4      	bls.n	801178e <_printf_i+0x11a>
 80117a4:	2b08      	cmp	r3, #8
 80117a6:	d10b      	bne.n	80117c0 <_printf_i+0x14c>
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	07df      	lsls	r7, r3, #31
 80117ac:	d508      	bpl.n	80117c0 <_printf_i+0x14c>
 80117ae:	6923      	ldr	r3, [r4, #16]
 80117b0:	6861      	ldr	r1, [r4, #4]
 80117b2:	4299      	cmp	r1, r3
 80117b4:	bfde      	ittt	le
 80117b6:	2330      	movle	r3, #48	; 0x30
 80117b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80117bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80117c0:	1b92      	subs	r2, r2, r6
 80117c2:	6122      	str	r2, [r4, #16]
 80117c4:	f8cd a000 	str.w	sl, [sp]
 80117c8:	464b      	mov	r3, r9
 80117ca:	aa03      	add	r2, sp, #12
 80117cc:	4621      	mov	r1, r4
 80117ce:	4640      	mov	r0, r8
 80117d0:	f7ff fee2 	bl	8011598 <_printf_common>
 80117d4:	3001      	adds	r0, #1
 80117d6:	d14c      	bne.n	8011872 <_printf_i+0x1fe>
 80117d8:	f04f 30ff 	mov.w	r0, #4294967295
 80117dc:	b004      	add	sp, #16
 80117de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e2:	4835      	ldr	r0, [pc, #212]	; (80118b8 <_printf_i+0x244>)
 80117e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80117e8:	6823      	ldr	r3, [r4, #0]
 80117ea:	680e      	ldr	r6, [r1, #0]
 80117ec:	061f      	lsls	r7, r3, #24
 80117ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80117f2:	600e      	str	r6, [r1, #0]
 80117f4:	d514      	bpl.n	8011820 <_printf_i+0x1ac>
 80117f6:	07d9      	lsls	r1, r3, #31
 80117f8:	bf44      	itt	mi
 80117fa:	f043 0320 	orrmi.w	r3, r3, #32
 80117fe:	6023      	strmi	r3, [r4, #0]
 8011800:	b91d      	cbnz	r5, 801180a <_printf_i+0x196>
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	f023 0320 	bic.w	r3, r3, #32
 8011808:	6023      	str	r3, [r4, #0]
 801180a:	2310      	movs	r3, #16
 801180c:	e7b0      	b.n	8011770 <_printf_i+0xfc>
 801180e:	6823      	ldr	r3, [r4, #0]
 8011810:	f043 0320 	orr.w	r3, r3, #32
 8011814:	6023      	str	r3, [r4, #0]
 8011816:	2378      	movs	r3, #120	; 0x78
 8011818:	4828      	ldr	r0, [pc, #160]	; (80118bc <_printf_i+0x248>)
 801181a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801181e:	e7e3      	b.n	80117e8 <_printf_i+0x174>
 8011820:	065e      	lsls	r6, r3, #25
 8011822:	bf48      	it	mi
 8011824:	b2ad      	uxthmi	r5, r5
 8011826:	e7e6      	b.n	80117f6 <_printf_i+0x182>
 8011828:	4616      	mov	r6, r2
 801182a:	e7bb      	b.n	80117a4 <_printf_i+0x130>
 801182c:	680b      	ldr	r3, [r1, #0]
 801182e:	6826      	ldr	r6, [r4, #0]
 8011830:	6960      	ldr	r0, [r4, #20]
 8011832:	1d1d      	adds	r5, r3, #4
 8011834:	600d      	str	r5, [r1, #0]
 8011836:	0635      	lsls	r5, r6, #24
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	d501      	bpl.n	8011840 <_printf_i+0x1cc>
 801183c:	6018      	str	r0, [r3, #0]
 801183e:	e002      	b.n	8011846 <_printf_i+0x1d2>
 8011840:	0671      	lsls	r1, r6, #25
 8011842:	d5fb      	bpl.n	801183c <_printf_i+0x1c8>
 8011844:	8018      	strh	r0, [r3, #0]
 8011846:	2300      	movs	r3, #0
 8011848:	6123      	str	r3, [r4, #16]
 801184a:	4616      	mov	r6, r2
 801184c:	e7ba      	b.n	80117c4 <_printf_i+0x150>
 801184e:	680b      	ldr	r3, [r1, #0]
 8011850:	1d1a      	adds	r2, r3, #4
 8011852:	600a      	str	r2, [r1, #0]
 8011854:	681e      	ldr	r6, [r3, #0]
 8011856:	6862      	ldr	r2, [r4, #4]
 8011858:	2100      	movs	r1, #0
 801185a:	4630      	mov	r0, r6
 801185c:	f7ee fcd8 	bl	8000210 <memchr>
 8011860:	b108      	cbz	r0, 8011866 <_printf_i+0x1f2>
 8011862:	1b80      	subs	r0, r0, r6
 8011864:	6060      	str	r0, [r4, #4]
 8011866:	6863      	ldr	r3, [r4, #4]
 8011868:	6123      	str	r3, [r4, #16]
 801186a:	2300      	movs	r3, #0
 801186c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011870:	e7a8      	b.n	80117c4 <_printf_i+0x150>
 8011872:	6923      	ldr	r3, [r4, #16]
 8011874:	4632      	mov	r2, r6
 8011876:	4649      	mov	r1, r9
 8011878:	4640      	mov	r0, r8
 801187a:	47d0      	blx	sl
 801187c:	3001      	adds	r0, #1
 801187e:	d0ab      	beq.n	80117d8 <_printf_i+0x164>
 8011880:	6823      	ldr	r3, [r4, #0]
 8011882:	079b      	lsls	r3, r3, #30
 8011884:	d413      	bmi.n	80118ae <_printf_i+0x23a>
 8011886:	68e0      	ldr	r0, [r4, #12]
 8011888:	9b03      	ldr	r3, [sp, #12]
 801188a:	4298      	cmp	r0, r3
 801188c:	bfb8      	it	lt
 801188e:	4618      	movlt	r0, r3
 8011890:	e7a4      	b.n	80117dc <_printf_i+0x168>
 8011892:	2301      	movs	r3, #1
 8011894:	4632      	mov	r2, r6
 8011896:	4649      	mov	r1, r9
 8011898:	4640      	mov	r0, r8
 801189a:	47d0      	blx	sl
 801189c:	3001      	adds	r0, #1
 801189e:	d09b      	beq.n	80117d8 <_printf_i+0x164>
 80118a0:	3501      	adds	r5, #1
 80118a2:	68e3      	ldr	r3, [r4, #12]
 80118a4:	9903      	ldr	r1, [sp, #12]
 80118a6:	1a5b      	subs	r3, r3, r1
 80118a8:	42ab      	cmp	r3, r5
 80118aa:	dcf2      	bgt.n	8011892 <_printf_i+0x21e>
 80118ac:	e7eb      	b.n	8011886 <_printf_i+0x212>
 80118ae:	2500      	movs	r5, #0
 80118b0:	f104 0619 	add.w	r6, r4, #25
 80118b4:	e7f5      	b.n	80118a2 <_printf_i+0x22e>
 80118b6:	bf00      	nop
 80118b8:	08013fdd 	.word	0x08013fdd
 80118bc:	08013fee 	.word	0x08013fee

080118c0 <__sread>:
 80118c0:	b510      	push	{r4, lr}
 80118c2:	460c      	mov	r4, r1
 80118c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118c8:	f000 f8d4 	bl	8011a74 <_read_r>
 80118cc:	2800      	cmp	r0, #0
 80118ce:	bfab      	itete	ge
 80118d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80118d2:	89a3      	ldrhlt	r3, [r4, #12]
 80118d4:	181b      	addge	r3, r3, r0
 80118d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80118da:	bfac      	ite	ge
 80118dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80118de:	81a3      	strhlt	r3, [r4, #12]
 80118e0:	bd10      	pop	{r4, pc}

080118e2 <__swrite>:
 80118e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e6:	461f      	mov	r7, r3
 80118e8:	898b      	ldrh	r3, [r1, #12]
 80118ea:	05db      	lsls	r3, r3, #23
 80118ec:	4605      	mov	r5, r0
 80118ee:	460c      	mov	r4, r1
 80118f0:	4616      	mov	r6, r2
 80118f2:	d505      	bpl.n	8011900 <__swrite+0x1e>
 80118f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f8:	2302      	movs	r3, #2
 80118fa:	2200      	movs	r2, #0
 80118fc:	f000 f868 	bl	80119d0 <_lseek_r>
 8011900:	89a3      	ldrh	r3, [r4, #12]
 8011902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801190a:	81a3      	strh	r3, [r4, #12]
 801190c:	4632      	mov	r2, r6
 801190e:	463b      	mov	r3, r7
 8011910:	4628      	mov	r0, r5
 8011912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011916:	f000 b817 	b.w	8011948 <_write_r>

0801191a <__sseek>:
 801191a:	b510      	push	{r4, lr}
 801191c:	460c      	mov	r4, r1
 801191e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011922:	f000 f855 	bl	80119d0 <_lseek_r>
 8011926:	1c43      	adds	r3, r0, #1
 8011928:	89a3      	ldrh	r3, [r4, #12]
 801192a:	bf15      	itete	ne
 801192c:	6560      	strne	r0, [r4, #84]	; 0x54
 801192e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011936:	81a3      	strheq	r3, [r4, #12]
 8011938:	bf18      	it	ne
 801193a:	81a3      	strhne	r3, [r4, #12]
 801193c:	bd10      	pop	{r4, pc}

0801193e <__sclose>:
 801193e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011942:	f000 b813 	b.w	801196c <_close_r>
	...

08011948 <_write_r>:
 8011948:	b538      	push	{r3, r4, r5, lr}
 801194a:	4d07      	ldr	r5, [pc, #28]	; (8011968 <_write_r+0x20>)
 801194c:	4604      	mov	r4, r0
 801194e:	4608      	mov	r0, r1
 8011950:	4611      	mov	r1, r2
 8011952:	2200      	movs	r2, #0
 8011954:	602a      	str	r2, [r5, #0]
 8011956:	461a      	mov	r2, r3
 8011958:	f7ee fe5a 	bl	8000610 <_write>
 801195c:	1c43      	adds	r3, r0, #1
 801195e:	d102      	bne.n	8011966 <_write_r+0x1e>
 8011960:	682b      	ldr	r3, [r5, #0]
 8011962:	b103      	cbz	r3, 8011966 <_write_r+0x1e>
 8011964:	6023      	str	r3, [r4, #0]
 8011966:	bd38      	pop	{r3, r4, r5, pc}
 8011968:	20004d20 	.word	0x20004d20

0801196c <_close_r>:
 801196c:	b538      	push	{r3, r4, r5, lr}
 801196e:	4d06      	ldr	r5, [pc, #24]	; (8011988 <_close_r+0x1c>)
 8011970:	2300      	movs	r3, #0
 8011972:	4604      	mov	r4, r0
 8011974:	4608      	mov	r0, r1
 8011976:	602b      	str	r3, [r5, #0]
 8011978:	f7f1 f90f 	bl	8002b9a <_close>
 801197c:	1c43      	adds	r3, r0, #1
 801197e:	d102      	bne.n	8011986 <_close_r+0x1a>
 8011980:	682b      	ldr	r3, [r5, #0]
 8011982:	b103      	cbz	r3, 8011986 <_close_r+0x1a>
 8011984:	6023      	str	r3, [r4, #0]
 8011986:	bd38      	pop	{r3, r4, r5, pc}
 8011988:	20004d20 	.word	0x20004d20

0801198c <_fstat_r>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	4d07      	ldr	r5, [pc, #28]	; (80119ac <_fstat_r+0x20>)
 8011990:	2300      	movs	r3, #0
 8011992:	4604      	mov	r4, r0
 8011994:	4608      	mov	r0, r1
 8011996:	4611      	mov	r1, r2
 8011998:	602b      	str	r3, [r5, #0]
 801199a:	f7f1 f90a 	bl	8002bb2 <_fstat>
 801199e:	1c43      	adds	r3, r0, #1
 80119a0:	d102      	bne.n	80119a8 <_fstat_r+0x1c>
 80119a2:	682b      	ldr	r3, [r5, #0]
 80119a4:	b103      	cbz	r3, 80119a8 <_fstat_r+0x1c>
 80119a6:	6023      	str	r3, [r4, #0]
 80119a8:	bd38      	pop	{r3, r4, r5, pc}
 80119aa:	bf00      	nop
 80119ac:	20004d20 	.word	0x20004d20

080119b0 <_isatty_r>:
 80119b0:	b538      	push	{r3, r4, r5, lr}
 80119b2:	4d06      	ldr	r5, [pc, #24]	; (80119cc <_isatty_r+0x1c>)
 80119b4:	2300      	movs	r3, #0
 80119b6:	4604      	mov	r4, r0
 80119b8:	4608      	mov	r0, r1
 80119ba:	602b      	str	r3, [r5, #0]
 80119bc:	f7f1 f909 	bl	8002bd2 <_isatty>
 80119c0:	1c43      	adds	r3, r0, #1
 80119c2:	d102      	bne.n	80119ca <_isatty_r+0x1a>
 80119c4:	682b      	ldr	r3, [r5, #0]
 80119c6:	b103      	cbz	r3, 80119ca <_isatty_r+0x1a>
 80119c8:	6023      	str	r3, [r4, #0]
 80119ca:	bd38      	pop	{r3, r4, r5, pc}
 80119cc:	20004d20 	.word	0x20004d20

080119d0 <_lseek_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	4d07      	ldr	r5, [pc, #28]	; (80119f0 <_lseek_r+0x20>)
 80119d4:	4604      	mov	r4, r0
 80119d6:	4608      	mov	r0, r1
 80119d8:	4611      	mov	r1, r2
 80119da:	2200      	movs	r2, #0
 80119dc:	602a      	str	r2, [r5, #0]
 80119de:	461a      	mov	r2, r3
 80119e0:	f7f1 f902 	bl	8002be8 <_lseek>
 80119e4:	1c43      	adds	r3, r0, #1
 80119e6:	d102      	bne.n	80119ee <_lseek_r+0x1e>
 80119e8:	682b      	ldr	r3, [r5, #0]
 80119ea:	b103      	cbz	r3, 80119ee <_lseek_r+0x1e>
 80119ec:	6023      	str	r3, [r4, #0]
 80119ee:	bd38      	pop	{r3, r4, r5, pc}
 80119f0:	20004d20 	.word	0x20004d20

080119f4 <memmove>:
 80119f4:	4288      	cmp	r0, r1
 80119f6:	b510      	push	{r4, lr}
 80119f8:	eb01 0402 	add.w	r4, r1, r2
 80119fc:	d902      	bls.n	8011a04 <memmove+0x10>
 80119fe:	4284      	cmp	r4, r0
 8011a00:	4623      	mov	r3, r4
 8011a02:	d807      	bhi.n	8011a14 <memmove+0x20>
 8011a04:	1e43      	subs	r3, r0, #1
 8011a06:	42a1      	cmp	r1, r4
 8011a08:	d008      	beq.n	8011a1c <memmove+0x28>
 8011a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a12:	e7f8      	b.n	8011a06 <memmove+0x12>
 8011a14:	4402      	add	r2, r0
 8011a16:	4601      	mov	r1, r0
 8011a18:	428a      	cmp	r2, r1
 8011a1a:	d100      	bne.n	8011a1e <memmove+0x2a>
 8011a1c:	bd10      	pop	{r4, pc}
 8011a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a26:	e7f7      	b.n	8011a18 <memmove+0x24>

08011a28 <_realloc_r>:
 8011a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a2a:	4607      	mov	r7, r0
 8011a2c:	4614      	mov	r4, r2
 8011a2e:	460e      	mov	r6, r1
 8011a30:	b921      	cbnz	r1, 8011a3c <_realloc_r+0x14>
 8011a32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a36:	4611      	mov	r1, r2
 8011a38:	f7ff b870 	b.w	8010b1c <_malloc_r>
 8011a3c:	b922      	cbnz	r2, 8011a48 <_realloc_r+0x20>
 8011a3e:	f7ff f81d 	bl	8010a7c <_free_r>
 8011a42:	4625      	mov	r5, r4
 8011a44:	4628      	mov	r0, r5
 8011a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a48:	f000 f826 	bl	8011a98 <_malloc_usable_size_r>
 8011a4c:	42a0      	cmp	r0, r4
 8011a4e:	d20f      	bcs.n	8011a70 <_realloc_r+0x48>
 8011a50:	4621      	mov	r1, r4
 8011a52:	4638      	mov	r0, r7
 8011a54:	f7ff f862 	bl	8010b1c <_malloc_r>
 8011a58:	4605      	mov	r5, r0
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d0f2      	beq.n	8011a44 <_realloc_r+0x1c>
 8011a5e:	4631      	mov	r1, r6
 8011a60:	4622      	mov	r2, r4
 8011a62:	f7fe fff5 	bl	8010a50 <memcpy>
 8011a66:	4631      	mov	r1, r6
 8011a68:	4638      	mov	r0, r7
 8011a6a:	f7ff f807 	bl	8010a7c <_free_r>
 8011a6e:	e7e9      	b.n	8011a44 <_realloc_r+0x1c>
 8011a70:	4635      	mov	r5, r6
 8011a72:	e7e7      	b.n	8011a44 <_realloc_r+0x1c>

08011a74 <_read_r>:
 8011a74:	b538      	push	{r3, r4, r5, lr}
 8011a76:	4d07      	ldr	r5, [pc, #28]	; (8011a94 <_read_r+0x20>)
 8011a78:	4604      	mov	r4, r0
 8011a7a:	4608      	mov	r0, r1
 8011a7c:	4611      	mov	r1, r2
 8011a7e:	2200      	movs	r2, #0
 8011a80:	602a      	str	r2, [r5, #0]
 8011a82:	461a      	mov	r2, r3
 8011a84:	f7f1 f86c 	bl	8002b60 <_read>
 8011a88:	1c43      	adds	r3, r0, #1
 8011a8a:	d102      	bne.n	8011a92 <_read_r+0x1e>
 8011a8c:	682b      	ldr	r3, [r5, #0]
 8011a8e:	b103      	cbz	r3, 8011a92 <_read_r+0x1e>
 8011a90:	6023      	str	r3, [r4, #0]
 8011a92:	bd38      	pop	{r3, r4, r5, pc}
 8011a94:	20004d20 	.word	0x20004d20

08011a98 <_malloc_usable_size_r>:
 8011a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a9c:	1f18      	subs	r0, r3, #4
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	bfbc      	itt	lt
 8011aa2:	580b      	ldrlt	r3, [r1, r0]
 8011aa4:	18c0      	addlt	r0, r0, r3
 8011aa6:	4770      	bx	lr

08011aa8 <_init>:
 8011aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aaa:	bf00      	nop
 8011aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aae:	bc08      	pop	{r3}
 8011ab0:	469e      	mov	lr, r3
 8011ab2:	4770      	bx	lr

08011ab4 <_fini>:
 8011ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ab6:	bf00      	nop
 8011ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aba:	bc08      	pop	{r3}
 8011abc:	469e      	mov	lr, r3
 8011abe:	4770      	bx	lr
