
Disco_F746G_LCD_SD_FreeRTOS_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011870  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020cc  08011a40  08011a40  00021a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b0c  08013b0c  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08013b0c  08013b0c  00023b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b14  08013b14  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013b14  08013b14  00023b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013b18  08013b18  00023b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08013b1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ca4  20000088  08013ba4  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20004d2c  08013ba4  00034d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000334f1  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000656b  00000000  00000000  000635a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002978  00000000  00000000  00069b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026d0  00000000  00000000  0006c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030e11  00000000  00000000  0006eb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030282  00000000  00000000  0009f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c9ff  00000000  00000000  000cfbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ec5f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b790  00000000  00000000  001ec648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011a28 	.word	0x08011a28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08011a28 	.word	0x08011a28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000a4 	.word	0x200000a4
 800060c:	200000fc 	.word	0x200000fc

08000610 <_write>:
// /* USER CODE END Defines */
#define PRINTF

// WARNING UART6 is connected to st-link
int _write(int file, char *ptr, int len)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	b29a      	uxth	r2, r3
 8000620:	230a      	movs	r3, #10
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <_write+0x24>)
 8000626:	f009 fe23 	bl	800a270 <HAL_UART_Transmit>
	return len;
 800062a:	687b      	ldr	r3, [r7, #4]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000f80 	.word	0x20000f80

08000638 <LCD_Config>:

static void LCD_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	/* LCD Initialization */
	BSP_LCD_Init();
 800063c:	f002 fb0c 	bl	8002c58 <BSP_LCD_Init>

	/* LCD Initialization */
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000640:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000644:	2000      	movs	r0, #0
 8000646:	f002 fb9f 	bl	8002d88 <BSP_LCD_LayerDefaultInit>

	/* Enable the LCD */
	BSP_LCD_DisplayOn();
 800064a:	f002 fe25 	bl	8003298 <BSP_LCD_DisplayOn>

	/* Select the LCD Background Layer  */
	BSP_LCD_SelectLayer(0);
 800064e:	2000      	movs	r0, #0
 8000650:	f002 fbfa 	bl	8002e48 <BSP_LCD_SelectLayer>

	/* Clear the Background Layer */
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000654:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000658:	f002 fca2 	bl	8002fa0 <BSP_LCD_Clear>

	/* Configure the transparency for background */
	BSP_LCD_SetTransparency(0, 100);
 800065c:	2164      	movs	r1, #100	; 0x64
 800065e:	2000      	movs	r0, #0
 8000660:	f002 fc40 	bl	8002ee4 <BSP_LCD_SetTransparency>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <Screen_Init>:

	/* Enable D-Cache */
	SCB_EnableDCache();
}

static void Screen_Init(Screen *screen) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

	LCD_Config();
 8000670:	f7ff ffe2 	bl	8000638 <LCD_Config>

	screen->width  = BSP_LCD_GetXSize();
 8000674:	f002 fb60 	bl	8002d38 <BSP_LCD_GetXSize>
 8000678:	4602      	mov	r2, r0
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	609a      	str	r2, [r3, #8]
	screen->height = BSP_LCD_GetYSize();
 800067e:	f002 fb6f 	bl	8002d60 <BSP_LCD_GetYSize>
 8000682:	4602      	mov	r2, r0
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	60da      	str	r2, [r3, #12]
	screen->addr[0] = LCD_FB_START_ADDRESS;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800068e:	601a      	str	r2, [r3, #0]
	screen->addr[1] = LCD_FB_START_ADDRESS + screen->width * screen->height * 4;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	68d2      	ldr	r2, [r2, #12]
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80006a0:	009a      	lsls	r2, r3, #2
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	605a      	str	r2, [r3, #4]
	screen->front = 1;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2201      	movs	r2, #1
 80006aa:	611a      	str	r2, [r3, #16]

	BSP_LCD_LayerDefaultInit(0, screen->addr[0]);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	2000      	movs	r0, #0
 80006b4:	f002 fb68 	bl	8002d88 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, screen->addr[1]);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	4619      	mov	r1, r3
 80006be:	2001      	movs	r0, #1
 80006c0:	f002 fb62 	bl	8002d88 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SetLayerVisible(0, DISABLE);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2000      	movs	r0, #0
 80006c8:	f002 fbce 	bl	8002e68 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(1, ENABLE);
 80006cc:	2101      	movs	r1, #1
 80006ce:	2001      	movs	r0, #1
 80006d0:	f002 fbca 	bl	8002e68 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(0);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f002 fbb7 	bl	8002e48 <BSP_LCD_SelectLayer>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <Screen_Flip_Buffers>:

void Screen_Flip_Buffers(Screen *screen) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	// wait for VSYNC
	while (!(LTDC->CDSR & LTDC_CDSR_VSYNCS)) { };
 80006ec:	bf00      	nop
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <Screen_Flip_Buffers+0x50>)
 80006f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f9      	beq.n	80006ee <Screen_Flip_Buffers+0xa>

	BSP_LCD_SetLayerVisible(screen->front, DISABLE);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fbb1 	bl	8002e68 <BSP_LCD_SetLayerVisible>
	screen->front ^= 1;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	f083 0201 	eor.w	r2, r3, #1
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	611a      	str	r2, [r3, #16]
	BSP_LCD_SetLayerVisible(screen->front, ENABLE);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	2101      	movs	r1, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fba5 	bl	8002e68 <BSP_LCD_SetLayerVisible>
	BSP_LCD_SelectLayer(1-screen->front);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	f1c3 0301 	rsb	r3, r3, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f002 fb8e 	bl	8002e48 <BSP_LCD_SelectLayer>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40016800 	.word	0x40016800

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073e:	f003 fb63 	bl	8003e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000742:	f000 f83d 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000746:	f000 fdab 	bl	80012a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800074a:	f000 fd33 	bl	80011b4 <MX_DMA_Init>
  MX_ADC3_Init();
 800074e:	f000 f8e7 	bl	8000920 <MX_ADC3_Init>
  MX_CRC_Init();
 8000752:	f000 f937 	bl	80009c4 <MX_CRC_Init>
  MX_FMC_Init();
 8000756:	f000 fd53 	bl	8001200 <MX_FMC_Init>
  MX_LTDC_Init();
 800075a:	f000 f987 	bl	8000a6c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800075e:	f000 fa3d 	bl	8000bdc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000762:	f000 fa67 	bl	8000c34 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000766:	f000 fb0b 	bl	8000d80 <MX_SDMMC1_SD_Init>
  MX_TIM3_Init();
 800076a:	f000 fb39 	bl	8000de0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800076e:	f000 fbaf 	bl	8000ed0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000772:	f000 fc25 	bl	8000fc0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000776:	f000 fc77 	bl	8001068 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800077a:	f000 fcbb 	bl	80010f4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800077e:	f000 fce9 	bl	8001154 <MX_USART6_UART_Init>
  MX_DMA2D_Init();
 8000782:	f000 f941 	bl	8000a08 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */

	printf("Start in progress\n");
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <main+0x7c>)
 8000788:	f010 fa50 	bl	8010c2c <puts>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uSDThread */
  osThreadDef(uSDThread, StartuSDThread, osPriorityNormal, 0, 4096);
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <main+0x80>)
 800078e:	1d3c      	adds	r4, r7, #4
 8000790:	461d      	mov	r5, r3
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000796:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800079a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uSDThreadHandle = osThreadCreate(osThread(uSDThread), NULL);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00d fac9 	bl	800dd3a <osThreadCreate>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a04      	ldr	r2, [pc, #16]	; (80007bc <main+0x84>)
 80007ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007ae:	f00d faa1 	bl	800dcf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80007b2:	e7fe      	b.n	80007b2 <main+0x7a>
 80007b4:	08011a4c 	.word	0x08011a4c
 80007b8:	08011a60 	.word	0x08011a60
 80007bc:	2000108c 	.word	0x2000108c

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0b4      	sub	sp, #208	; 0xd0
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f010 f90c 	bl	80109ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2284      	movs	r2, #132	; 0x84
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f010 f8fd 	bl	80109ec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f2:	f005 fd3b 	bl	800626c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b47      	ldr	r3, [pc, #284]	; (8000914 <SystemClock_Config+0x154>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a46      	ldr	r2, [pc, #280]	; (8000914 <SystemClock_Config+0x154>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b44      	ldr	r3, [pc, #272]	; (8000914 <SystemClock_Config+0x154>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <SystemClock_Config+0x158>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a41      	ldr	r2, [pc, #260]	; (8000918 <SystemClock_Config+0x158>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <SystemClock_Config+0x158>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000826:	2309      	movs	r3, #9
 8000828:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000848:	2319      	movs	r3, #25
 800084a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800084e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000852:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800085c:	2309      	movs	r3, #9
 800085e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fe22 	bl	80064b0 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000872:	f001 fa43 	bl	8001cfc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000876:	f005 fd09 	bl	800628c <HAL_PWREx_EnableOverDrive>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000880:	f001 fa3c 	bl	8001cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800089a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008aa:	2106      	movs	r1, #6
 80008ac:	4618      	mov	r0, r3
 80008ae:	f006 f8a3 	bl	80069f8 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008b8:	f001 fa20 	bl	8001cfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <SystemClock_Config+0x15c>)
 80008be:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80008c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80008c6:	2305      	movs	r3, #5
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80008ce:	2303      	movs	r3, #3
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008e2:	2300      	movs	r3, #0
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80008e6:	2300      	movs	r3, #0
 80008e8:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80008ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4618      	mov	r0, r3
 80008fe:	f006 fa51 	bl	8006da4 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000908:	f001 f9f8 	bl	8001cfc <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	37d0      	adds	r7, #208	; 0xd0
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000
 800091c:	00a00868 	.word	0x00a00868

08000920 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <MX_ADC3_Init+0x9c>)
 8000936:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_ADC3_Init+0x98>)
 800093a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800093e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_ADC3_Init+0x98>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_ADC3_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000962:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <MX_ADC3_Init+0xa0>)
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_ADC3_Init+0x98>)
 800096e:	2201      	movs	r2, #1
 8000970:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_ADC3_Init+0x98>)
 800097c:	2201      	movs	r2, #1
 800097e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <MX_ADC3_Init+0x98>)
 8000982:	f003 fac3 	bl	8003f0c <HAL_ADC_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800098c:	f001 f9b6 	bl	8001cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000990:	2304      	movs	r3, #4
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000994:	2301      	movs	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_ADC3_Init+0x98>)
 80009a2:	f003 faf7 	bl	8003f94 <HAL_ADC_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009ac:	f001 f9a6 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000f38 	.word	0x20000f38
 80009bc:	40012200 	.word	0x40012200
 80009c0:	0f000001 	.word	0x0f000001

080009c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <MX_CRC_Init+0x40>)
 80009cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_CRC_Init+0x3c>)
 80009ee:	f003 fe27 	bl	8004640 <HAL_CRC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009f8:	f001 f980 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000930 	.word	0x20000930
 8000a04:	40023000 	.word	0x40023000

08000a08 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <MX_DMA2D_Init+0x60>)
 8000a10:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a3e:	f004 faed 	bl	800501c <HAL_DMA2D_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a48:	f001 f958 	bl	8001cfc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_DMA2D_Init+0x5c>)
 8000a50:	f004 fd52 	bl	80054f8 <HAL_DMA2D_ConfigLayer>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a5a:	f001 f94f 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20001600 	.word	0x20001600
 8000a68:	4002b000 	.word	0x4002b000

08000a6c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09a      	sub	sp, #104	; 0x68
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a76:	2234      	movs	r2, #52	; 0x34
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f00f ffb6 	bl	80109ec <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2234      	movs	r2, #52	; 0x34
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00f ffb0 	bl	80109ec <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a8c:	4b51      	ldr	r3, [pc, #324]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000a8e:	4a52      	ldr	r2, [pc, #328]	; (8000bd8 <MX_LTDC_Init+0x16c>)
 8000a90:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a92:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a98:	4b4e      	ldr	r3, [pc, #312]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aa4:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000aaa:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000aac:	2228      	movs	r2, #40	; 0x28
 8000aae:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ab0:	4b48      	ldr	r3, [pc, #288]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ab2:	2209      	movs	r2, #9
 8000ab4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ab6:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ab8:	2235      	movs	r2, #53	; 0x35
 8000aba:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000abc:	4b45      	ldr	r3, [pc, #276]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000abe:	220b      	movs	r2, #11
 8000ac0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ac4:	f240 2215 	movw	r2, #533	; 0x215
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000acc:	f240 121b 	movw	r2, #283	; 0x11b
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000ad2:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ad4:	f240 2235 	movw	r2, #565	; 0x235
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ada:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000adc:	f240 121d 	movw	r2, #285	; 0x11d
 8000ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000afa:	4836      	ldr	r0, [pc, #216]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000afc:	f005 f808 	bl	8005b10 <HAL_LTDC_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b06:	f001 f8f9 	bl	8001cfc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000b0e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000b18:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b1c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000b22:	23ff      	movs	r3, #255	; 0xff
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b2e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b30:	2307      	movs	r3, #7
 8000b32:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b34:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b38:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000b3a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000b40:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b44:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481c      	ldr	r0, [pc, #112]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000b62:	f005 f967 	bl	8005e34 <HAL_LTDC_ConfigLayer>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000b6c:	f001 f8c6 	bl	8001cfc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b92:	2305      	movs	r3, #5
 8000b94:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <MX_LTDC_Init+0x168>)
 8000bbc:	f005 f93a 	bl	8005e34 <HAL_LTDC_ConfigLayer>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_LTDC_Init+0x15e>
  {
    Error_Handler();
 8000bc6:	f001 f899 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3768      	adds	r7, #104	; 0x68
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000a88 	.word	0x20000a88
 8000bd8:	40016800 	.word	0x40016800

08000bdc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <MX_QUADSPI_Init+0x54>)
 8000be4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000bfa:	2218      	movs	r2, #24
 8000bfc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c00:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c04:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_QUADSPI_Init+0x50>)
 8000c1a:	f005 fb87 	bl	800632c <HAL_QSPI_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c24:	f001 f86a 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20004b20 	.word	0x20004b20
 8000c30:	a0001000 	.word	0xa0001000

08000c34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b092      	sub	sp, #72	; 0x48
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	222c      	movs	r2, #44	; 0x2c
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00f fec8 	bl	80109ec <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c5c:	4b46      	ldr	r3, [pc, #280]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c5e:	4a47      	ldr	r2, [pc, #284]	; (8000d7c <MX_RTC_Init+0x148>)
 8000c60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c62:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c6a:	227f      	movs	r2, #127	; 0x7f
 8000c6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c6e:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c70:	22ff      	movs	r2, #255	; 0xff
 8000c72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c74:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c7a:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c80:	4b3d      	ldr	r3, [pc, #244]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c86:	483c      	ldr	r0, [pc, #240]	; (8000d78 <MX_RTC_Init+0x144>)
 8000c88:	f006 fc7c 	bl	8007584 <HAL_RTC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000c92:	f001 f833 	bl	8001cfc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	482f      	ldr	r0, [pc, #188]	; (8000d78 <MX_RTC_Init+0x144>)
 8000cba:	f006 fcf5 	bl	80076a8 <HAL_RTC_SetTime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000cc4:	f001 f81a 	bl	8001cfc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ce0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <MX_RTC_Init+0x144>)
 8000cea:	f006 fd9b 	bl	8007824 <HAL_RTC_SetDate>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000cf4:	f001 f802 	bl	8001cfc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4812      	ldr	r0, [pc, #72]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d30:	f006 fe20 	bl	8007974 <HAL_RTC_SetAlarm>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000d3a:	f000 ffdf 	bl	8001cfc <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	2201      	movs	r2, #1
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d4c:	f006 fe12 	bl	8007974 <HAL_RTC_SetAlarm>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d56:	f000 ffd1 	bl	8001cfc <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4806      	ldr	r0, [pc, #24]	; (8000d78 <MX_RTC_Init+0x144>)
 8000d60:	f006 ff92 	bl	8007c88 <HAL_RTCEx_SetTimeStamp>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000d6a:	f000 ffc7 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3748      	adds	r7, #72	; 0x48
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20001090 	.word	0x20001090
 8000d7c:	40002800 	.word	0x40002800

08000d80 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d86:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <MX_SDMMC1_SD_Init+0x5c>)
 8000d88:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000dae:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000db0:	f006 ffc0 	bl	8007d34 <HAL_SD_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000dba:	f000 ff9f 	bl	8001cfc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000dbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_SDMMC1_SD_Init+0x58>)
 8000dc4:	f007 fd84 	bl	80088d0 <HAL_SD_ConfigWideBusOperation>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000dce:	f000 ff95 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000968 	.word	0x20000968
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e14:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <MX_TIM3_Init+0xec>)
 8000e16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e38:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e3a:	f008 fb21 	bl	8009480 <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e44:	f000 ff5a 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e52:	4619      	mov	r1, r3
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e56:	f008 fcd1 	bl	80097fc <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e60:	f000 ff4c 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e66:	f008 fb62 	bl	800952e <HAL_TIM_PWM_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e70:	f000 ff44 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000e84:	f009 f918 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e8e:	f000 ff35 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e92:	2360      	movs	r3, #96	; 0x60
 8000e94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000eaa:	f008 fb97 	bl	80095dc <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000eb4:	f000 ff22 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_TIM3_Init+0xe8>)
 8000eba:	f001 fc1b 	bl	80026f4 <HAL_TIM_MspPostInit>

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	; 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000a38 	.word	0x20000a38
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f04:	4a2d      	ldr	r2, [pc, #180]	; (8000fbc <MX_TIM5_Init+0xec>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f16:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f28:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f2a:	f008 faa9 	bl	8009480 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8000f34:	f000 fee2 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f42:	4619      	mov	r1, r3
 8000f44:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f46:	f008 fc59 	bl	80097fc <HAL_TIM_ConfigClockSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000f50:	f000 fed4 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f54:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f56:	f008 faea 	bl	800952e <HAL_TIM_PWM_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8000f60:	f000 fecc 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f74:	f009 f8a0 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000f7e:	f000 febd 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f82:	2360      	movs	r3, #96	; 0x60
 8000f84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	220c      	movs	r2, #12
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000f9a:	f008 fb1f 	bl	80095dc <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8000fa4:	f000 feaa 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM5_Init+0xe8>)
 8000faa:	f001 fba3 	bl	80026f4 <HAL_TIM_MspPostInit>

}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	; 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200009ec 	.word	0x200009ec
 8000fbc:	40000c00 	.word	0x40000c00

08000fc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <MX_TIM8_Init+0xa4>)
 8000fe2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_TIM8_Init+0xa0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_TIM8_Init+0xa0>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_TIM8_Init+0xa0>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800100a:	4815      	ldr	r0, [pc, #84]	; (8001060 <MX_TIM8_Init+0xa0>)
 800100c:	f008 fa38 	bl	8009480 <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001016:	f000 fe71 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <MX_TIM8_Init+0xa0>)
 8001028:	f008 fbe8 	bl	80097fc <HAL_TIM_ConfigClockSource>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001032:	f000 fe63 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_TIM8_Init+0xa0>)
 8001048:	f009 f836 	bl	800a0b8 <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001052:	f000 fe53 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200008e4 	.word	0x200008e4
 8001064:	40010400 	.word	0x40010400

08001068 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_TIM12_Init+0x84>)
 8001082:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_TIM12_Init+0x88>)
 8001084:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_TIM12_Init+0x84>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_TIM12_Init+0x84>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_TIM12_Init+0x84>)
 8001094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001098:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_TIM12_Init+0x84>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_TIM12_Init+0x84>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80010a6:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_TIM12_Init+0x84>)
 80010a8:	f008 fa41 	bl	800952e <HAL_TIM_PWM_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80010b2:	f000 fe23 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	; 0x60
 80010b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM12_Init+0x84>)
 80010ce:	f008 fa85 	bl	80095dc <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80010d8:	f000 fe10 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM12_Init+0x84>)
 80010de:	f001 fb09 	bl	80026f4 <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20001640 	.word	0x20001640
 80010f0:	40001800 	.word	0x40001800

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART1_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <MX_USART1_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_USART1_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART1_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART1_UART_Init+0x58>)
 8001138:	f009 f84c 	bl	800a1d4 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 fddb 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000f80 	.word	0x20000f80
 8001150:	40011000 	.word	0x40011000

08001154 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_USART6_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART6_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART6_UART_Init+0x58>)
 8001198:	f009 f81c 	bl	800a1d4 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f000 fdab 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000157c 	.word	0x2000157c
 80011b0:	40011400 	.word	0x40011400

080011b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_DMA_Init+0x48>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <MX_DMA_Init+0x48>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <MX_DMA_Init+0x48>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2106      	movs	r1, #6
 80011d6:	203b      	movs	r0, #59	; 0x3b
 80011d8:	f003 f9fb 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011dc:	203b      	movs	r0, #59	; 0x3b
 80011de:	f003 fa14 	bl	800460a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2106      	movs	r1, #6
 80011e6:	2045      	movs	r0, #69	; 0x45
 80011e8:	f003 f9f3 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80011ec:	2045      	movs	r0, #69	; 0x45
 80011ee:	f003 fa0c 	bl	800460a <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <MX_FMC_Init+0x98>)
 800121a:	4a20      	ldr	r2, [pc, #128]	; (800129c <MX_FMC_Init+0x9c>)
 800121c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_FMC_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_FMC_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_FMC_Init+0x98>)
 800122c:	2204      	movs	r2, #4
 800122e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_FMC_Init+0x98>)
 8001232:	2210      	movs	r2, #16
 8001234:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_FMC_Init+0x98>)
 8001238:	2240      	movs	r2, #64	; 0x40
 800123a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_FMC_Init+0x98>)
 800123e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001242:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_FMC_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_FMC_Init+0x98>)
 800124c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001250:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_FMC_Init+0x98>)
 8001254:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_FMC_Init+0x98>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001264:	2307      	movs	r3, #7
 8001266:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800126c:	2307      	movs	r3, #7
 800126e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001270:	2303      	movs	r3, #3
 8001272:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_FMC_Init+0x98>)
 8001282:	f008 f87e 	bl	8009382 <HAL_SDRAM_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800128c:	f000 fd36 	bl	8001cfc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001290:	bf00      	nop
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000168c 	.word	0x2000168c
 800129c:	a0000140 	.word	0xa0000140

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b090      	sub	sp, #64	; 0x40
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b6:	4bae      	ldr	r3, [pc, #696]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4aad      	ldr	r2, [pc, #692]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4bab      	ldr	r3, [pc, #684]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ce:	4ba8      	ldr	r3, [pc, #672]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4aa7      	ldr	r2, [pc, #668]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4ba5      	ldr	r3, [pc, #660]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4ba2      	ldr	r3, [pc, #648]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4aa1      	ldr	r2, [pc, #644]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b9f      	ldr	r3, [pc, #636]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b9c      	ldr	r3, [pc, #624]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a9b      	ldr	r2, [pc, #620]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b99      	ldr	r3, [pc, #612]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b96      	ldr	r3, [pc, #600]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a95      	ldr	r2, [pc, #596]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b93      	ldr	r3, [pc, #588]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a8f      	ldr	r2, [pc, #572]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b8d      	ldr	r3, [pc, #564]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001346:	4b8a      	ldr	r3, [pc, #552]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a89      	ldr	r2, [pc, #548]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800134c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b87      	ldr	r3, [pc, #540]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800135e:	4b84      	ldr	r3, [pc, #528]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a83      	ldr	r2, [pc, #524]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b81      	ldr	r3, [pc, #516]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001376:	4b7e      	ldr	r3, [pc, #504]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a7d      	ldr	r2, [pc, #500]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800137c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a77      	ldr	r2, [pc, #476]	; (8001570 <MX_GPIO_Init+0x2d0>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b75      	ldr	r3, [pc, #468]	; (8001570 <MX_GPIO_Init+0x2d0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	4b72      	ldr	r3, [pc, #456]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a71      	ldr	r2, [pc, #452]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b6f      	ldr	r3, [pc, #444]	; (8001570 <MX_GPIO_Init+0x2d0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2120      	movs	r1, #32
 80013c2:	486c      	ldr	r0, [pc, #432]	; (8001574 <MX_GPIO_Init+0x2d4>)
 80013c4:	f004 fb8a 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	210c      	movs	r1, #12
 80013cc:	486a      	ldr	r0, [pc, #424]	; (8001578 <MX_GPIO_Init+0x2d8>)
 80013ce:	f004 fb85 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2108      	movs	r1, #8
 80013d6:	4869      	ldr	r0, [pc, #420]	; (800157c <MX_GPIO_Init+0x2dc>)
 80013d8:	f004 fb80 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	4865      	ldr	r0, [pc, #404]	; (8001578 <MX_GPIO_Init+0x2d8>)
 80013e4:	f004 fb7a 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ee:	4864      	ldr	r0, [pc, #400]	; (8001580 <MX_GPIO_Init+0x2e0>)
 80013f0:	f004 fb74 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	21c8      	movs	r1, #200	; 0xc8
 80013f8:	4862      	ldr	r0, [pc, #392]	; (8001584 <MX_GPIO_Init+0x2e4>)
 80013fa:	f004 fb6f 	bl	8005adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80013fe:	2308      	movs	r3, #8
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140e:	4619      	mov	r1, r3
 8001410:	485d      	ldr	r0, [pc, #372]	; (8001588 <MX_GPIO_Init+0x2e8>)
 8001412:	f004 f99f 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001416:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001428:	230b      	movs	r3, #11
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001430:	4619      	mov	r1, r3
 8001432:	4854      	ldr	r0, [pc, #336]	; (8001584 <MX_GPIO_Init+0x2e4>)
 8001434:	f004 f98e 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001438:	f44f 7340 	mov.w	r3, #768	; 0x300
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143e:	2312      	movs	r3, #18
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001442:	2301      	movs	r3, #1
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800144a:	2304      	movs	r3, #4
 800144c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001452:	4619      	mov	r1, r3
 8001454:	484d      	ldr	r0, [pc, #308]	; (800158c <MX_GPIO_Init+0x2ec>)
 8001456:	f004 f97d 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800145a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800146c:	230a      	movs	r3, #10
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001474:	4619      	mov	r1, r3
 8001476:	4845      	ldr	r0, [pc, #276]	; (800158c <MX_GPIO_Init+0x2ec>)
 8001478:	f004 f96c 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800148c:	2308      	movs	r3, #8
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001494:	4619      	mov	r1, r3
 8001496:	4837      	ldr	r0, [pc, #220]	; (8001574 <MX_GPIO_Init+0x2d4>)
 8001498:	f004 f95c 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800149c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ae:	2301      	movs	r3, #1
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b6:	4619      	mov	r1, r3
 80014b8:	4835      	ldr	r0, [pc, #212]	; (8001590 <MX_GPIO_Init+0x2f0>)
 80014ba:	f004 f94b 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80014be:	2360      	movs	r3, #96	; 0x60
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014ce:	230d      	movs	r3, #13
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d6:	4619      	mov	r1, r3
 80014d8:	482b      	ldr	r0, [pc, #172]	; (8001588 <MX_GPIO_Init+0x2e8>)
 80014da:	f004 f93b 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f0:	4619      	mov	r1, r3
 80014f2:	4828      	ldr	r0, [pc, #160]	; (8001594 <MX_GPIO_Init+0x2f4>)
 80014f4:	f004 f92e 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80014f8:	2340      	movs	r3, #64	; 0x40
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <MX_GPIO_Init+0x2f8>)
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001508:	4619      	mov	r1, r3
 800150a:	481a      	ldr	r0, [pc, #104]	; (8001574 <MX_GPIO_Init+0x2d4>)
 800150c:	f004 f922 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001510:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001522:	230a      	movs	r3, #10
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152a:	4619      	mov	r1, r3
 800152c:	4818      	ldr	r0, [pc, #96]	; (8001590 <MX_GPIO_Init+0x2f0>)
 800152e:	f004 f911 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001532:	23f0      	movs	r3, #240	; 0xf0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001542:	230a      	movs	r3, #10
 8001544:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154a:	4619      	mov	r1, r3
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <MX_GPIO_Init+0x2d8>)
 800154e:	f004 f901 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001564:	230a      	movs	r3, #10
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156c:	4619      	mov	r1, r3
 800156e:	e015      	b.n	800159c <MX_GPIO_Init+0x2fc>
 8001570:	40023800 	.word	0x40023800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40022000 	.word	0x40022000
 800157c:	40022800 	.word	0x40022800
 8001580:	40021c00 	.word	0x40021c00
 8001584:	40021800 	.word	0x40021800
 8001588:	40021000 	.word	0x40021000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020000 	.word	0x40020000
 8001594:	40022400 	.word	0x40022400
 8001598:	10120000 	.word	0x10120000
 800159c:	48b1      	ldr	r0, [pc, #708]	; (8001864 <MX_GPIO_Init+0x5c4>)
 800159e:	f004 f8d9 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015a2:	2320      	movs	r3, #32
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b6:	4619      	mov	r1, r3
 80015b8:	48ab      	ldr	r0, [pc, #684]	; (8001868 <MX_GPIO_Init+0x5c8>)
 80015ba:	f004 f8cb 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80015be:	2308      	movs	r3, #8
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015ce:	230d      	movs	r3, #13
 80015d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015d6:	4619      	mov	r1, r3
 80015d8:	48a3      	ldr	r0, [pc, #652]	; (8001868 <MX_GPIO_Init+0x5c8>)
 80015da:	f004 f8bb 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80015de:	f241 030c 	movw	r3, #4108	; 0x100c
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f4:	4619      	mov	r1, r3
 80015f6:	489d      	ldr	r0, [pc, #628]	; (800186c <MX_GPIO_Init+0x5cc>)
 80015f8:	f004 f8ac 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160e:	4619      	mov	r1, r3
 8001610:	4897      	ldr	r0, [pc, #604]	; (8001870 <MX_GPIO_Init+0x5d0>)
 8001612:	f004 f89f 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001616:	2308      	movs	r3, #8
 8001618:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	4891      	ldr	r0, [pc, #580]	; (8001874 <MX_GPIO_Init+0x5d4>)
 800162e:	f004 f891 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001644:	230d      	movs	r3, #13
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164c:	4619      	mov	r1, r3
 800164e:	4885      	ldr	r0, [pc, #532]	; (8001864 <MX_GPIO_Init+0x5c4>)
 8001650:	f004 f880 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001654:	2310      	movs	r3, #16
 8001656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001664:	4619      	mov	r1, r3
 8001666:	4880      	ldr	r0, [pc, #512]	; (8001868 <MX_GPIO_Init+0x5c8>)
 8001668:	f004 f874 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800166c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800167a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167e:	4619      	mov	r1, r3
 8001680:	487d      	ldr	r0, [pc, #500]	; (8001878 <MX_GPIO_Init+0x5d8>)
 8001682:	f004 f867 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001686:	2302      	movs	r3, #2
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001696:	2305      	movs	r3, #5
 8001698:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169e:	4619      	mov	r1, r3
 80016a0:	4872      	ldr	r0, [pc, #456]	; (800186c <MX_GPIO_Init+0x5cc>)
 80016a2:	f004 f857 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80016a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016bc:	4619      	mov	r1, r3
 80016be:	486e      	ldr	r0, [pc, #440]	; (8001878 <MX_GPIO_Init+0x5d8>)
 80016c0:	f004 f848 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80016c4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016d6:	230d      	movs	r3, #13
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016de:	4619      	mov	r1, r3
 80016e0:	4865      	ldr	r0, [pc, #404]	; (8001878 <MX_GPIO_Init+0x5d8>)
 80016e2:	f004 f837 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001700:	4619      	mov	r1, r3
 8001702:	485e      	ldr	r0, [pc, #376]	; (800187c <MX_GPIO_Init+0x5dc>)
 8001704:	f004 f826 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800170e:	4b5c      	ldr	r3, [pc, #368]	; (8001880 <MX_GPIO_Init+0x5e0>)
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171a:	4619      	mov	r1, r3
 800171c:	4853      	ldr	r0, [pc, #332]	; (800186c <MX_GPIO_Init+0x5cc>)
 800171e:	f004 f819 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001722:	2310      	movs	r3, #16
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001732:	230a      	movs	r3, #10
 8001734:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173a:	4619      	mov	r1, r3
 800173c:	484e      	ldr	r0, [pc, #312]	; (8001878 <MX_GPIO_Init+0x5d8>)
 800173e:	f004 f809 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001742:	23c8      	movs	r3, #200	; 0xc8
 8001744:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001756:	4619      	mov	r1, r3
 8001758:	4842      	ldr	r0, [pc, #264]	; (8001864 <MX_GPIO_Init+0x5c4>)
 800175a:	f003 fffb 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800175e:	2305      	movs	r3, #5
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800176e:	230a      	movs	r3, #10
 8001770:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	483d      	ldr	r0, [pc, #244]	; (8001870 <MX_GPIO_Init+0x5d0>)
 800177a:	f003 ffeb 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800177e:	2332      	movs	r3, #50	; 0x32
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800178e:	230b      	movs	r3, #11
 8001790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	4619      	mov	r1, r3
 8001798:	4835      	ldr	r0, [pc, #212]	; (8001870 <MX_GPIO_Init+0x5d0>)
 800179a:	f003 ffdb 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800179e:	2304      	movs	r3, #4
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	4619      	mov	r1, r3
 80017b0:	482c      	ldr	r0, [pc, #176]	; (8001864 <MX_GPIO_Init+0x5c4>)
 80017b2:	f003 ffcf 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017b6:	2386      	movs	r3, #134	; 0x86
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017c6:	230b      	movs	r3, #11
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	482a      	ldr	r0, [pc, #168]	; (800187c <MX_GPIO_Init+0x5dc>)
 80017d2:	f003 ffbf 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80017d6:	2350      	movs	r3, #80	; 0x50
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017e6:	230d      	movs	r3, #13
 80017e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ee:	4619      	mov	r1, r3
 80017f0:	4822      	ldr	r0, [pc, #136]	; (800187c <MX_GPIO_Init+0x5dc>)
 80017f2:	f003 ffaf 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80017f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017fc:	2312      	movs	r3, #18
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001800:	2301      	movs	r3, #1
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001808:	2304      	movs	r3, #4
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	4819      	ldr	r0, [pc, #100]	; (8001878 <MX_GPIO_Init+0x5d8>)
 8001814:	f003 ff9e 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001818:	2328      	movs	r3, #40	; 0x28
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001828:	230a      	movs	r3, #10
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001830:	4619      	mov	r1, r3
 8001832:	4812      	ldr	r0, [pc, #72]	; (800187c <MX_GPIO_Init+0x5dc>)
 8001834:	f003 ff8e 	bl	8005754 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001838:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184a:	2305      	movs	r3, #5
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	4619      	mov	r1, r3
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <MX_GPIO_Init+0x5e4>)
 8001856:	f003 ff7d 	bl	8005754 <HAL_GPIO_Init>

}
 800185a:	bf00      	nop
 800185c:	3740      	adds	r7, #64	; 0x40
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021800 	.word	0x40021800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40022000 	.word	0x40022000
 8001870:	40020800 	.word	0x40020800
 8001874:	40022800 	.word	0x40022800
 8001878:	40021c00 	.word	0x40021c00
 800187c:	40020000 	.word	0x40020000
 8001880:	10120000 	.word	0x10120000
 8001884:	40020400 	.word	0x40020400

08001888 <scan_files>:

/* USER CODE BEGIN 4 */
FRESULT scan_files (char* path, DIR* items, UINT *items_sz)        /* Start node to be scanned (***also used as work area***) */
{
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b0b4      	sub	sp, #208	; 0xd0
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
	DIR dir;
	UINT i;
	static FILINFO fno;
	char buffer[128];

	res = f_opendir(&dir, path);                       /* Open the directory */
 8001894:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	4618      	mov	r0, r3
 800189c:	f00b ff6a 	bl	800d774 <f_opendir>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	if (res == FR_OK) {
 80018a6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d16e      	bne.n	800198c <scan_files+0x104>
		items[*items_sz]=dir;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2234      	movs	r2, #52	; 0x34
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	4413      	add	r3, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	602b      	str	r3, [r5, #0]
		(*items_sz)++;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
		for (;;) {
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80018dc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018e0:	492d      	ldr	r1, [pc, #180]	; (8001998 <scan_files+0x110>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00b ffff 	bl	800d8e6 <f_readdir>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

			if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80018ee:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d145      	bne.n	8001982 <scan_files+0xfa>
 80018f6:	4b28      	ldr	r3, [pc, #160]	; (8001998 <scan_files+0x110>)
 80018f8:	7d9b      	ldrb	r3, [r3, #22]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d041      	beq.n	8001982 <scan_files+0xfa>
//				res = scan_files(path, items, items_sz);     /* Enter the directory */
//				if (res != FR_OK) break;
//				path[i] = 0;
//			} else
			{                                       /* It is a file. */
				snprintf(buffer, sizeof(buffer), "%s/%s\n", path, fno.fname);
 80018fe:	f107 0010 	add.w	r0, r7, #16
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <scan_files+0x114>)
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <scan_files+0x118>)
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	f00f f996 	bl	8010c3c <sniprintf>
				printf("%s\n", buffer);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f00f f989 	bl	8010c2c <puts>
				if (*items_sz>255) break;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d82e      	bhi.n	8001980 <scan_files+0xf8>
				items[*items_sz]=dir;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2234      	movs	r2, #52	; 0x34
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	4413      	add	r3, r2
 8001930:	461d      	mov	r5, r3
 8001932:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	602b      	str	r3, [r5, #0]
				snprintf(buffer, sizeof(buffer), "DIR.dir pointer %x %x\n", dir.dir, items[*items_sz].dir);
 8001946:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2234      	movs	r2, #52	; 0x34
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	4413      	add	r3, r2
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	f107 0010 	add.w	r0, r7, #16
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	460b      	mov	r3, r1
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <scan_files+0x11c>)
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	f00f f969 	bl	8010c3c <sniprintf>
				printf("%s\n", buffer);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4618      	mov	r0, r3
 8001970:	f00f f95c 	bl	8010c2c <puts>
				(*items_sz)++;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
			res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800197e:	e7ad      	b.n	80018dc <scan_files+0x54>
				if (*items_sz>255) break;
 8001980:	bf00      	nop
			}
		}
		f_closedir(&dir);
 8001982:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001986:	4618      	mov	r0, r3
 8001988:	f00b ff82 	bl	800d890 <f_closedir>
	}

	return res;
 800198c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8001990:	4618      	mov	r0, r3
 8001992:	37c8      	adds	r7, #200	; 0xc8
 8001994:	46bd      	mov	sp, r7
 8001996:	bdb0      	pop	{r4, r5, r7, pc}
 8001998:	20000300 	.word	0x20000300
 800199c:	20000316 	.word	0x20000316
 80019a0:	08011a7c 	.word	0x08011a7c
 80019a4:	08011a84 	.word	0x08011a84

080019a8 <read_filename>:

FRESULT read_filename(char* path, DIR target_dir, char* fname)        /* Start node to be scanned (***also used as work area***) */
{
 80019a8:	b084      	sub	sp, #16
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b0b2      	sub	sp, #200	; 0xc8
 80019ae:	af02      	add	r7, sp, #8
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 80019b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	DIR dir;
	UINT i;
	static FILINFO fno;
	char buffer[STRING_SZ];

	res = f_opendir(&dir, path);                       /* Open the directory */
 80019ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00b fed7 	bl	800d774 <f_opendir>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	if (res == FR_OK) {
 80019cc:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d135      	bne.n	8001a40 <read_filename+0x98>
		res = f_readdir(&target_dir, &fno);                   /* Read a directory item */
 80019d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d8:	4920      	ldr	r1, [pc, #128]	; (8001a5c <read_filename+0xb4>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f00b ff83 	bl	800d8e6 <f_readdir>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if (res != FR_OK || fno.fname[0] == 0) {
 80019e6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d103      	bne.n	80019f6 <read_filename+0x4e>
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <read_filename+0xb4>)
 80019f0:	7d9b      	ldrb	r3, [r3, #22]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <read_filename+0x64>
			fname[0]=0;
 80019f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 80019fe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00b ff44 	bl	800d890 <f_closedir>
			return FR_INT_ERR;  /* Break on error or end of dir */
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e020      	b.n	8001a4e <read_filename+0xa6>
		}
		if (fno.fattrib & AM_DIR) {
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <read_filename+0xb4>)
 8001a0e:	7a1b      	ldrb	r3, [r3, #8]
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <read_filename+0x86>
			fname[0]=0;
 8001a18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 8001a20:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00b ff33 	bl	800d890 <f_closedir>
			return FR_INT_ERR;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e00f      	b.n	8001a4e <read_filename+0xa6>
		}

		snprintf(fname, STRING_SZ, "%s/%s", path, fno.fname);
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <read_filename+0xb8>)
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <read_filename+0xbc>)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001a3c:	f00f f8fe 	bl	8010c3c <sniprintf>
	}
	f_closedir(&dir);
 8001a40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00b ff23 	bl	800d890 <f_closedir>

	return res;
 8001a4a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	37c0      	adds	r7, #192	; 0xc0
 8001a52:	46bd      	mov	sp, r7
 8001a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a58:	b004      	add	sp, #16
 8001a5a:	4770      	bx	lr
 8001a5c:	20000418 	.word	0x20000418
 8001a60:	2000042e 	.word	0x2000042e
 8001a64:	08011a9c 	.word	0x08011a9c

08001a68 <StartuSDThread>:
 * @retval None
 */

/* USER CODE END Header_StartuSDThread */
void StartuSDThread(void const * argument)
{
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6a:	b095      	sub	sp, #84	; 0x54
 8001a6c:	af0c      	add	r7, sp, #48	; 0x30
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	BSP_LED_Off(LED1);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f001 f8d9 	bl	8002c28 <BSP_LED_Off>

	Screen_Init(&screen);
 8001a76:	4895      	ldr	r0, [pc, #596]	; (8001ccc <StartuSDThread+0x264>)
 8001a78:	f7fe fdf6 	bl	8000668 <Screen_Init>
//
	Screen_Flip_Buffers(&screen);
 8001a7c:	4893      	ldr	r0, [pc, #588]	; (8001ccc <StartuSDThread+0x264>)
 8001a7e:	f7fe fe31 	bl	80006e4 <Screen_Flip_Buffers>
	BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001a82:	4893      	ldr	r0, [pc, #588]	; (8001cd0 <StartuSDThread+0x268>)
 8001a84:	f001 fa8c 	bl	8002fa0 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001a88:	4892      	ldr	r0, [pc, #584]	; (8001cd4 <StartuSDThread+0x26c>)
 8001a8a:	f001 fa55 	bl	8002f38 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a92:	f001 fa39 	bl	8002f08 <BSP_LCD_SetTextColor>
//
	Screen_Flip_Buffers(&screen);
 8001a96:	488d      	ldr	r0, [pc, #564]	; (8001ccc <StartuSDThread+0x264>)
 8001a98:	f7fe fe24 	bl	80006e4 <Screen_Flip_Buffers>
	BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001a9c:	488c      	ldr	r0, [pc, #560]	; (8001cd0 <StartuSDThread+0x268>)
 8001a9e:	f001 fa7f 	bl	8002fa0 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001aa2:	488c      	ldr	r0, [pc, #560]	; (8001cd4 <StartuSDThread+0x26c>)
 8001aa4:	f001 fa48 	bl	8002f38 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f001 fa2c 	bl	8002f08 <BSP_LCD_SetTextColor>

	/*##-1- Link the micro SD disk I/O driver ##################################*/
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001ab0:	4989      	ldr	r1, [pc, #548]	; (8001cd8 <StartuSDThread+0x270>)
 8001ab2:	488a      	ldr	r0, [pc, #552]	; (8001cdc <StartuSDThread+0x274>)
 8001ab4:	f00b ffbc 	bl	800da30 <FATFS_LinkDriver>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 8093 	bne.w	8001be6 <StartuSDThread+0x17e>
	{
		/*##-2- Register the file system object to the FatFs module ##############*/
		if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4985      	ldr	r1, [pc, #532]	; (8001cd8 <StartuSDThread+0x270>)
 8001ac4:	4886      	ldr	r0, [pc, #536]	; (8001ce0 <StartuSDThread+0x278>)
 8001ac6:	f00b fdf1 	bl	800d6ac <f_mount>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <StartuSDThread+0x6c>
		{
			/* FatFs Initialization Error */
			Error_Handler();
 8001ad0:	f000 f914 	bl	8001cfc <Error_Handler>
		}
		/*##-3- Create a FAT file system (format) on the logical drive #########*/
		char path[2]="/";
 8001ad4:	232f      	movs	r3, #47	; 0x2f
 8001ad6:	81bb      	strh	r3, [r7, #12]
		FRESULT res = scan_files(path, items, &items_sz);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4a81      	ldr	r2, [pc, #516]	; (8001ce4 <StartuSDThread+0x27c>)
 8001ade:	4982      	ldr	r1, [pc, #520]	; (8001ce8 <StartuSDThread+0x280>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fed1 	bl	8001888 <scan_files>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	74fb      	strb	r3, [r7, #19]
		snprintf(buffer, sizeof(buffer), "==============================================");
 8001aea:	4a80      	ldr	r2, [pc, #512]	; (8001cec <StartuSDThread+0x284>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	4880      	ldr	r0, [pc, #512]	; (8001cf0 <StartuSDThread+0x288>)
 8001af0:	f00f f8a4 	bl	8010c3c <sniprintf>
		printf("%s\n", buffer);
 8001af4:	487e      	ldr	r0, [pc, #504]	; (8001cf0 <StartuSDThread+0x288>)
 8001af6:	f00f f899 	bl	8010c2c <puts>

		for (UINT it=0; it<items_sz; it++){
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	e036      	b.n	8001b6e <StartuSDThread+0x106>
			snprintf(buffer, sizeof(buffer), "dir %x", items[it].dir);
 8001b00:	4a79      	ldr	r2, [pc, #484]	; (8001ce8 <StartuSDThread+0x280>)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	2134      	movs	r1, #52	; 0x34
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3320      	adds	r3, #32
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a78      	ldr	r2, [pc, #480]	; (8001cf4 <StartuSDThread+0x28c>)
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	4876      	ldr	r0, [pc, #472]	; (8001cf0 <StartuSDThread+0x288>)
 8001b16:	f00f f891 	bl	8010c3c <sniprintf>
			printf("%s\n", buffer);
 8001b1a:	4875      	ldr	r0, [pc, #468]	; (8001cf0 <StartuSDThread+0x288>)
 8001b1c:	f00f f886 	bl	8010c2c <puts>
			FRESULT res = read_filename(path, items[it], buffer);
 8001b20:	4a71      	ldr	r2, [pc, #452]	; (8001ce8 <StartuSDThread+0x280>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	2134      	movs	r1, #52	; 0x34
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	18d6      	adds	r6, r2, r3
 8001b2c:	f107 0c0c 	add.w	ip, r7, #12
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <StartuSDThread+0x288>)
 8001b32:	930a      	str	r3, [sp, #40]	; 0x28
 8001b34:	466d      	mov	r5, sp
 8001b36:	f106 040c 	add.w	r4, r6, #12
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b4e:	4660      	mov	r0, ip
 8001b50:	f7ff ff2a 	bl	80019a8 <read_filename>
 8001b54:	4603      	mov	r3, r0
 8001b56:	747b      	strb	r3, [r7, #17]
			if (res != FR_OK) continue;
 8001b58:	7c7b      	ldrb	r3, [r7, #17]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <StartuSDThread+0xfe>
			printf("%s\n", buffer);
 8001b5e:	4864      	ldr	r0, [pc, #400]	; (8001cf0 <StartuSDThread+0x288>)
 8001b60:	f00f f864 	bl	8010c2c <puts>
 8001b64:	e000      	b.n	8001b68 <StartuSDThread+0x100>
			if (res != FR_OK) continue;
 8001b66:	bf00      	nop
		for (UINT it=0; it<items_sz; it++){
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <StartuSDThread+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3c3      	bcc.n	8001b00 <StartuSDThread+0x98>
		}

		snprintf(buffer, sizeof(buffer), "==============================================");
 8001b78:	4a5c      	ldr	r2, [pc, #368]	; (8001cec <StartuSDThread+0x284>)
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	485c      	ldr	r0, [pc, #368]	; (8001cf0 <StartuSDThread+0x288>)
 8001b7e:	f00f f85d 	bl	8010c3c <sniprintf>
		printf("%s\n", buffer);
 8001b82:	485b      	ldr	r0, [pc, #364]	; (8001cf0 <StartuSDThread+0x288>)
 8001b84:	f00f f852 	bl	8010c2c <puts>

		for (UINT it=0; it<items_sz; it++){
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	e026      	b.n	8001bdc <StartuSDThread+0x174>
			FRESULT res = read_filename(path, items[it], buffer);
 8001b8e:	4a56      	ldr	r2, [pc, #344]	; (8001ce8 <StartuSDThread+0x280>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2134      	movs	r1, #52	; 0x34
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	18d6      	adds	r6, r2, r3
 8001b9a:	f107 0c0c 	add.w	ip, r7, #12
 8001b9e:	4b54      	ldr	r3, [pc, #336]	; (8001cf0 <StartuSDThread+0x288>)
 8001ba0:	930a      	str	r3, [sp, #40]	; 0x28
 8001ba2:	466d      	mov	r5, sp
 8001ba4:	f106 040c 	add.w	r4, r6, #12
 8001ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bb8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001bbc:	4660      	mov	r0, ip
 8001bbe:	f7ff fef3 	bl	80019a8 <read_filename>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	74bb      	strb	r3, [r7, #18]
			if (res != FR_OK) continue;
 8001bc6:	7cbb      	ldrb	r3, [r7, #18]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <StartuSDThread+0x16c>
			printf("%s\n", buffer);
 8001bcc:	4848      	ldr	r0, [pc, #288]	; (8001cf0 <StartuSDThread+0x288>)
 8001bce:	f00f f82d 	bl	8010c2c <puts>
 8001bd2:	e000      	b.n	8001bd6 <StartuSDThread+0x16e>
			if (res != FR_OK) continue;
 8001bd4:	bf00      	nop
		for (UINT it=0; it<items_sz; it++){
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <StartuSDThread+0x27c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d3d3      	bcc.n	8001b8e <StartuSDThread+0x126>
	}

	/* Infinite Loop */
	for( ;; )
	{
		osDelay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f00c f8f3 	bl	800ddd2 <osDelay>

		BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001bec:	4838      	ldr	r0, [pc, #224]	; (8001cd0 <StartuSDThread+0x268>)
 8001bee:	f001 f9d7 	bl	8002fa0 <BSP_LCD_Clear>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001bf2:	4838      	ldr	r0, [pc, #224]	; (8001cd4 <StartuSDThread+0x26c>)
 8001bf4:	f001 f9a0 	bl	8002f38 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f001 f984 	bl	8002f08 <BSP_LCD_SetTextColor>

		for (UINT it=0; it<items_sz; it++){
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e054      	b.n	8001cb0 <StartuSDThread+0x248>
			char path[2]="/";
 8001c06:	232f      	movs	r3, #47	; 0x2f
 8001c08:	813b      	strh	r3, [r7, #8]
			FRESULT res = read_filename(path, items[it], buffer);
 8001c0a:	4a37      	ldr	r2, [pc, #220]	; (8001ce8 <StartuSDThread+0x280>)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2134      	movs	r1, #52	; 0x34
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	18d6      	adds	r6, r2, r3
 8001c16:	f107 0c08 	add.w	ip, r7, #8
 8001c1a:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <StartuSDThread+0x288>)
 8001c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8001c1e:	466d      	mov	r5, sp
 8001c20:	f106 040c 	add.w	r4, r6, #12
 8001c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c30:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c34:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c38:	4660      	mov	r0, ip
 8001c3a:	f7ff feb5 	bl	80019a8 <read_filename>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	743b      	strb	r3, [r7, #16]
			if (res != FR_OK) continue;
 8001c42:	7c3b      	ldrb	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d12f      	bne.n	8001ca8 <StartuSDThread+0x240>
			BSP_LCD_DisplayStringAt(0, 24*(it%11)+5, (uint8_t*)buffer, LEFT_MODE);
 8001c48:	6979      	ldr	r1, [r7, #20]
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <StartuSDThread+0x290>)
 8001c4c:	fba3 2301 	umull	r2, r3, r3, r1
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	1aca      	subs	r2, r1, r3
 8001c5e:	b293      	uxth	r3, r2
 8001c60:	461a      	mov	r2, r3
 8001c62:	0052      	lsls	r2, r2, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	3305      	adds	r3, #5
 8001c6c:	b299      	uxth	r1, r3
 8001c6e:	2303      	movs	r3, #3
 8001c70:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <StartuSDThread+0x288>)
 8001c72:	2000      	movs	r0, #0
 8001c74:	f001 fa00 	bl	8003078 <BSP_LCD_DisplayStringAt>
			if ((it%11)==10){
 8001c78:	6979      	ldr	r1, [r7, #20]
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <StartuSDThread+0x290>)
 8001c7c:	fba3 2301 	umull	r2, r3, r3, r1
 8001c80:	08da      	lsrs	r2, r3, #3
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4413      	add	r3, r2
 8001c8c:	1aca      	subs	r2, r1, r3
 8001c8e:	2a0a      	cmp	r2, #10
 8001c90:	d10b      	bne.n	8001caa <StartuSDThread+0x242>
			   Screen_Flip_Buffers(&screen);
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <StartuSDThread+0x264>)
 8001c94:	f7fe fd26 	bl	80006e4 <Screen_Flip_Buffers>
			   BSP_LCD_Clear(LCD_COLOR_RED);//clear the LCD on blue color
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <StartuSDThread+0x268>)
 8001c9a:	f001 f981 	bl	8002fa0 <BSP_LCD_Clear>
			   osDelay(1000);
 8001c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ca2:	f00c f896 	bl	800ddd2 <osDelay>
 8001ca6:	e000      	b.n	8001caa <StartuSDThread+0x242>
			if (res != FR_OK) continue;
 8001ca8:	bf00      	nop
		for (UINT it=0; it<items_sz; it++){
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <StartuSDThread+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3a5      	bcc.n	8001c06 <StartuSDThread+0x19e>
			}
		}
		Screen_Flip_Buffers(&screen);
 8001cba:	4804      	ldr	r0, [pc, #16]	; (8001ccc <StartuSDThread+0x264>)
 8001cbc:	f7fe fd12 	bl	80006e4 <Screen_Flip_Buffers>
		osDelay(1000);
 8001cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc4:	f00c f885 	bl	800ddd2 <osDelay>
		osDelay(1);
 8001cc8:	e78d      	b.n	8001be6 <StartuSDThread+0x17e>
 8001cca:	bf00      	nop
 8001ccc:	20000954 	.word	0x20000954
 8001cd0:	ffff0000 	.word	0xffff0000
 8001cd4:	ff0000ff 	.word	0xff0000ff
 8001cd8:	20001084 	.word	0x20001084
 8001cdc:	08011b48 	.word	0x08011b48
 8001ce0:	200010b0 	.word	0x200010b0
 8001ce4:	200002fc 	.word	0x200002fc
 8001ce8:	20001720 	.word	0x20001720
 8001cec:	08011aa4 	.word	0x08011aa4
 8001cf0:	20001004 	.word	0x20001004
 8001cf4:	08011ad4 	.word	0x08011ad4
 8001cf8:	ba2e8ba3 	.word	0xba2e8ba3

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d04:	e7fe      	b.n	8001d04 <Error_Handler+0x8>
	...

08001d08 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <SD_CheckStatus+0x38>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8001d18:	f001 fe7c 	bl	8003a14 <BSP_SD_GetCardState>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d107      	bne.n	8001d32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <SD_CheckStatus+0x38>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SD_CheckStatus+0x38>)
 8001d30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8001d32:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <SD_CheckStatus+0x38>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b2db      	uxtb	r3, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000000 	.word	0x20000000

08001d44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <SD_initialize+0x6c>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8001d54:	f00b ffd5 	bl	800dd02 <osKernelRunning>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d020      	beq.n	8001da0 <SD_initialize+0x5c>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8001d5e:	f001 fcb3 	bl	80036c8 <BSP_SD_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffcc 	bl	8001d08 <SD_CheckStatus>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <SD_initialize+0x6c>)
 8001d76:	701a      	strb	r2, [r3, #0]

    /*
     * if the SD is correctly initialized, create the operation queue
     */

    if (Stat != STA_NOINIT)
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <SD_initialize+0x6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d00e      	beq.n	8001da0 <SD_initialize+0x5c>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <SD_initialize+0x70>)
 8001d84:	f107 0408 	add.w	r4, r7, #8
 8001d88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00c f906 	bl	800dfa6 <osMessageCreate>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <SD_initialize+0x74>)
 8001d9e:	6013      	str	r3, [r2, #0]
    }
  }

  return Stat;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <SD_initialize+0x6c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd90      	pop	{r4, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000
 8001db4:	08011ae8 	.word	0x08011ae8
 8001db8:	20000530 	.word	0x20000530

08001dbc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff9d 	bl	8001d08 <SD_CheckStatus>
 8001dce:	4603      	mov	r3, r0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4603      	mov	r3, r0
 8001de6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t timer;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	68b8      	ldr	r0, [r7, #8]
 8001df4:	f001 fcca 	bl	800378c <BSP_SD_ReadBlocks_DMA>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d125      	bne.n	8001e4a <SD_read+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <SD_read+0x80>)
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00c f934 	bl	800e078 <osMessageGet>

    if (event.status == osEventMessage)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d119      	bne.n	8001e4a <SD_read+0x72>
    {
      if (event.value.v == READ_CPLT_MSG)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d116      	bne.n	8001e4a <SD_read+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8001e1c:	f00b ff7d 	bl	800dd1a <osKernelSysTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f247 5330 	movw	r3, #30000	; 0x7530
 8001e26:	4413      	add	r3, r2
 8001e28:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 8001e2a:	e008      	b.n	8001e3e <SD_read+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001e2c:	f001 fdf2 	bl	8003a14 <BSP_SD_GetCardState>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d103      	bne.n	8001e3e <SD_read+0x66>
          {
            res = RES_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
               adjust the address and the D-Cache size to invalidate accordingly.
             */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8001e3c:	e005      	b.n	8001e4a <SD_read+0x72>
        while(timer > osKernelSysTick())
 8001e3e:	f00b ff6c 	bl	800dd1a <osKernelSysTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d8f0      	bhi.n	8001e2c <SD_read+0x54>
        }
      }
    }
  }

  return res;
 8001e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000530 	.word	0x20000530

08001e5c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  osEvent event;
  DRESULT res = RES_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif


  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	68b8      	ldr	r0, [r7, #8]
 8001e78:	f001 fca0 	bl	80037bc <BSP_SD_WriteBlocks_DMA>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d125      	bne.n	8001ece <SD_write+0x72>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <SD_write+0x80>)
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	f247 5230 	movw	r2, #30000	; 0x7530
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00c f8f2 	bl	800e078 <osMessageGet>

    if (event.status == osEventMessage)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d119      	bne.n	8001ece <SD_write+0x72>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d116      	bne.n	8001ece <SD_write+0x72>
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8001ea0:	f00b ff3b 	bl	800dd1a <osKernelSysTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f247 5330 	movw	r3, #30000	; 0x7530
 8001eaa:	4413      	add	r3, r2
 8001eac:	623b      	str	r3, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 8001eae:	e008      	b.n	8001ec2 <SD_write+0x66>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8001eb0:	f001 fdb0 	bl	8003a14 <BSP_SD_GetCardState>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d103      	bne.n	8001ec2 <SD_write+0x66>
          {
            res = RES_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8001ec0:	e005      	b.n	8001ece <SD_write+0x72>
        while(timer > osKernelSysTick())
 8001ec2:	f00b ff2a 	bl	800dd1a <osKernelSysTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d8f0      	bhi.n	8001eb0 <SD_write+0x54>
        }
      }
    }
  }

  return res;
 8001ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000530 	.word	0x20000530

08001ee0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	603a      	str	r2, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
 8001eec:	460b      	mov	r3, r1
 8001eee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <SD_ioctl+0xac>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SD_ioctl+0x28>
 8001f04:	2303      	movs	r3, #3
 8001f06:	e03c      	b.n	8001f82 <SD_ioctl+0xa2>

  switch (cmd)
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d834      	bhi.n	8001f78 <SD_ioctl+0x98>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <SD_ioctl+0x34>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f2d 	.word	0x08001f2d
 8001f1c:	08001f45 	.word	0x08001f45
 8001f20:	08001f5f 	.word	0x08001f5f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f2a:	e028      	b.n	8001f7e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 fd7f 	bl	8003a34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8001f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f42:	e01c      	b.n	8001f7e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 fd73 	bl	8003a34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f5c:	e00f      	b.n	8001f7e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4618      	mov	r0, r3
 8001f64:	f001 fd66 	bl	8003a34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	0a5a      	lsrs	r2, r3, #9
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8001f76:	e002      	b.n	8001f7e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8001f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3730      	adds	r7, #48	; 0x30
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000000 	.word	0x20000000

08001f90 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <BSP_SD_WriteCpltCallback+0x18>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00c f82a 	bl	800dff8 <osMessagePut>
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000530 	.word	0x20000530

08001fac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
   osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <BSP_SD_ReadCpltCallback+0x18>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00c f81c 	bl	800dff8 <osMessagePut>
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000530 	.word	0x20000530

08001fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_MspInit+0x4c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_MspInit+0x4c>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_MspInit+0x4c>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_MspInit+0x4c>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	210f      	movs	r1, #15
 8002002:	f06f 0001 	mvn.w	r0, #1
 8002006:	f002 fae4 	bl	80045d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a21      	ldr	r2, [pc, #132]	; (80020bc <HAL_ADC_MspInit+0xa4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d13c      	bne.n	80020b4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 8002040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002052:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 8002058:	f043 0320 	orr.w	r3, r3, #32
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_ADC_MspInit+0xa8>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002082:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002086:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002088:	2303      	movs	r3, #3
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	480b      	ldr	r0, [pc, #44]	; (80020c4 <HAL_ADC_MspInit+0xac>)
 8002098:	f003 fb5c 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800209c:	2301      	movs	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a0:	2303      	movs	r3, #3
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <HAL_ADC_MspInit+0xb0>)
 80020b0:	f003 fb50 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020b4:	bf00      	nop
 80020b6:	3728      	adds	r7, #40	; 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40012200 	.word	0x40012200
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40021400 	.word	0x40021400
 80020c8:	40020000 	.word	0x40020000

080020cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_CRC_MspInit+0x38>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10b      	bne.n	80020f6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_CRC_MspInit+0x3c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_CRC_MspInit+0x3c>)
 80020e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_CRC_MspInit+0x3c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40023000 	.word	0x40023000
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_DMA2D_MspInit+0x44>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d113      	bne.n	8002146 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_DMA2D_MspInit+0x48>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <HAL_DMA2D_MspInit+0x48>)
 8002124:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_DMA2D_MspInit+0x48>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2105      	movs	r1, #5
 800213a:	205a      	movs	r0, #90	; 0x5a
 800213c:	f002 fa49 	bl	80045d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002140:	205a      	movs	r0, #90	; 0x5a
 8002142:	f002 fa62 	bl	800460a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	4002b000 	.word	0x4002b000
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08e      	sub	sp, #56	; 0x38
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a55      	ldr	r2, [pc, #340]	; (80022cc <HAL_LTDC_MspInit+0x174>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f040 80a3 	bne.w	80022c2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800217c:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	4a53      	ldr	r2, [pc, #332]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 8002182:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002186:	6453      	str	r3, [r2, #68]	; 0x44
 8002188:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002194:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a4d      	ldr	r2, [pc, #308]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80021ac:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a47      	ldr	r2, [pc, #284]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80021c4:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	4a41      	ldr	r2, [pc, #260]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ce:	6313      	str	r3, [r2, #48]	; 0x30
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021dc:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a3b      	ldr	r2, [pc, #236]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021f4:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	4a35      	ldr	r2, [pc, #212]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002200:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_LTDC_MspInit+0x178>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800220c:	2310      	movs	r3, #16
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800221c:	230e      	movs	r3, #14
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	482b      	ldr	r0, [pc, #172]	; (80022d4 <HAL_LTDC_MspInit+0x17c>)
 8002228:	f003 fa94 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800222c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800223e:	230e      	movs	r3, #14
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002246:	4619      	mov	r1, r3
 8002248:	4823      	ldr	r0, [pc, #140]	; (80022d8 <HAL_LTDC_MspInit+0x180>)
 800224a:	f003 fa83 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800224e:	23f7      	movs	r3, #247	; 0xf7
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800225e:	230e      	movs	r3, #14
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	4619      	mov	r1, r3
 8002268:	481c      	ldr	r0, [pc, #112]	; (80022dc <HAL_LTDC_MspInit+0x184>)
 800226a:	f003 fa73 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800226e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002280:	2309      	movs	r3, #9
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	4815      	ldr	r0, [pc, #84]	; (80022e0 <HAL_LTDC_MspInit+0x188>)
 800228c:	f003 fa62 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002290:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022a2:	230e      	movs	r3, #14
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <HAL_LTDC_MspInit+0x18c>)
 80022ae:	f003 fa51 	bl	8005754 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2105      	movs	r1, #5
 80022b6:	2058      	movs	r0, #88	; 0x58
 80022b8:	f002 f98b 	bl	80045d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80022bc:	2058      	movs	r0, #88	; 0x58
 80022be:	f002 f9a4 	bl	800460a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	3738      	adds	r7, #56	; 0x38
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40016800 	.word	0x40016800
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40022400 	.word	0x40022400
 80022dc:	40022800 	.word	0x40022800
 80022e0:	40021800 	.word	0x40021800
 80022e4:	40022000 	.word	0x40022000

080022e8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	; 0x30
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <HAL_QSPI_MspInit+0x10c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d170      	bne.n	80023ec <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	4a3a      	ldr	r2, [pc, #232]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6393      	str	r3, [r2, #56]	; 0x38
 8002316:	4b38      	ldr	r3, [pc, #224]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a34      	ldr	r2, [pc, #208]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002328:	f043 0310 	orr.w	r3, r3, #16
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_QSPI_MspInit+0x110>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800236a:	2304      	movs	r3, #4
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800237a:	2309      	movs	r3, #9
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	4619      	mov	r1, r3
 8002384:	481d      	ldr	r0, [pc, #116]	; (80023fc <HAL_QSPI_MspInit+0x114>)
 8002386:	f003 f9e5 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800238a:	2340      	movs	r3, #64	; 0x40
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800239a:	230a      	movs	r3, #10
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	4619      	mov	r1, r3
 80023a4:	4816      	ldr	r0, [pc, #88]	; (8002400 <HAL_QSPI_MspInit+0x118>)
 80023a6:	f003 f9d5 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023aa:	2304      	movs	r3, #4
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023ba:	2309      	movs	r3, #9
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4619      	mov	r1, r3
 80023c4:	480e      	ldr	r0, [pc, #56]	; (8002400 <HAL_QSPI_MspInit+0x118>)
 80023c6:	f003 f9c5 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80023ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023dc:	2309      	movs	r3, #9
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	4807      	ldr	r0, [pc, #28]	; (8002404 <HAL_QSPI_MspInit+0x11c>)
 80023e8:	f003 f9b4 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3730      	adds	r7, #48	; 0x30
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	a0001000 	.word	0xa0001000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40021000 	.word	0x40021000
 8002400:	40020400 	.word	0x40020400
 8002404:	40020c00 	.word	0x40020c00

08002408 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_RTC_MspInit+0x2c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d105      	bne.n	8002426 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_RTC_MspInit+0x30>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a06      	ldr	r2, [pc, #24]	; (8002438 <HAL_RTC_MspInit+0x30>)
 8002420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40002800 	.word	0x40002800
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6a      	ldr	r2, [pc, #424]	; (8002604 <HAL_SD_MspInit+0x1c8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	f040 80ce 	bne.w	80025fc <HAL_SD_MspInit+0x1c0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002460:	4b69      	ldr	r3, [pc, #420]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	4a68      	ldr	r2, [pc, #416]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 8002466:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800246a:	6453      	str	r3, [r2, #68]	; 0x44
 800246c:	4b66      	ldr	r3, [pc, #408]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002478:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a62      	ldr	r2, [pc, #392]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	6313      	str	r3, [r2, #48]	; 0x30
 8002484:	4b60      	ldr	r3, [pc, #384]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002490:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4a5c      	ldr	r2, [pc, #368]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	6313      	str	r3, [r2, #48]	; 0x30
 800249c:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <HAL_SD_MspInit+0x1cc>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin;
 80024a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b6:	2303      	movs	r3, #3
 80024b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024ba:	230c      	movs	r3, #12
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CK_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	4619      	mov	r1, r3
 80024c4:	4851      	ldr	r0, [pc, #324]	; (800260c <HAL_SD_MspInit+0x1d0>)
 80024c6:	f003 f945 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9|GPIO_PIN_8;
 80024ca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80024ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024dc:	230c      	movs	r3, #12
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	4849      	ldr	r0, [pc, #292]	; (800260c <HAL_SD_MspInit+0x1d0>)
 80024e8:	f003 f934 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80024ec:	2304      	movs	r3, #4
 80024ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024fc:	230c      	movs	r3, #12
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	4842      	ldr	r0, [pc, #264]	; (8002610 <HAL_SD_MspInit+0x1d4>)
 8002508:	f003 f924 	bl	8005754 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800250c:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 800250e:	4a42      	ldr	r2, [pc, #264]	; (8002618 <HAL_SD_MspInit+0x1dc>)
 8002510:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002512:	4b40      	ldr	r3, [pc, #256]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002514:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002518:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800251a:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002520:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002526:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002528:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800252c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002534:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002536:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002538:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800253c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800253e:	4b35      	ldr	r3, [pc, #212]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002540:	2220      	movs	r2, #32
 8002542:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002546:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800254a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800254c:	4b31      	ldr	r3, [pc, #196]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 800254e:	2204      	movs	r2, #4
 8002550:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002554:	2203      	movs	r2, #3
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 800255a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002562:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002568:	482a      	ldr	r0, [pc, #168]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 800256a:	f002 f953 	bl	8004814 <HAL_DMA_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_SD_MspInit+0x13c>
    {
      Error_Handler();
 8002574:	f7ff fbc2 	bl	8001cfc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a26      	ldr	r2, [pc, #152]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
 800257e:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_SD_MspInit+0x1d8>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_SD_MspInit+0x1e0>)
 8002586:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_SD_MspInit+0x1e4>)
 8002588:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_SD_MspInit+0x1e0>)
 800258c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002590:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_SD_MspInit+0x1e0>)
 8002594:	2240      	movs	r2, #64	; 0x40
 8002596:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_SD_MspInit+0x1e0>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025a4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025a6:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025ac:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025ae:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025b4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80025b6:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025b8:	2220      	movs	r2, #32
 80025ba:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025c6:	2204      	movs	r2, #4
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025cc:	2203      	movs	r2, #3
 80025ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80025e0:	480e      	ldr	r0, [pc, #56]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025e2:	f002 f917 	bl	8004814 <HAL_DMA_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_SD_MspInit+0x1b4>
    {
      Error_Handler();
 80025ec:	f7ff fb86 	bl	8001cfc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_SD_MspInit+0x1e0>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80025fc:	bf00      	nop
 80025fe:	3728      	adds	r7, #40	; 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40023800 	.word	0x40023800
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	2000151c 	.word	0x2000151c
 8002618:	40026458 	.word	0x40026458
 800261c:	200016c0 	.word	0x200016c0
 8002620:	400264a0 	.word	0x400264a0

08002624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_TIM_Base_MspInit+0x80>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10c      	bne.n	8002650 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002636:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800264e:	e022      	b.n	8002696 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a15      	ldr	r2, [pc, #84]	; (80026ac <HAL_TIM_Base_MspInit+0x88>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d10c      	bne.n	8002674 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	6413      	str	r3, [r2, #64]	; 0x40
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
}
 8002672:	e010      	b.n	8002696 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0d      	ldr	r2, [pc, #52]	; (80026b0 <HAL_TIM_Base_MspInit+0x8c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10b      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_TIM_Base_MspInit+0x84>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40000400 	.word	0x40000400
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40000c00 	.word	0x40000c00
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <HAL_TIM_PWM_MspInit+0x38>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10b      	bne.n	80026de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80026cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
 80026d2:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40001800 	.word	0x40001800
 80026f0:	40023800 	.word	0x40023800

080026f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a33      	ldr	r2, [pc, #204]	; (80027e0 <HAL_TIM_MspPostInit+0xec>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d11c      	bne.n	8002750 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a32      	ldr	r2, [pc, #200]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800272e:	2310      	movs	r3, #16
 8002730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800273e:	2302      	movs	r3, #2
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	4827      	ldr	r0, [pc, #156]	; (80027e8 <HAL_TIM_MspPostInit+0xf4>)
 800274a:	f003 f803 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800274e:	e042      	b.n	80027d6 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM5)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_TIM_MspPostInit+0xf8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d11c      	bne.n	8002794 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800275a:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002772:	2301      	movs	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002782:	2302      	movs	r3, #2
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	4818      	ldr	r0, [pc, #96]	; (80027f0 <HAL_TIM_MspPostInit+0xfc>)
 800278e:	f002 ffe1 	bl	8005754 <HAL_GPIO_Init>
}
 8002792:	e020      	b.n	80027d6 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM12)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <HAL_TIM_MspPostInit+0x100>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d11b      	bne.n	80027d6 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 80027a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_TIM_MspPostInit+0xf0>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80027b6:	2340      	movs	r3, #64	; 0x40
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80027c6:	2309      	movs	r3, #9
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	4809      	ldr	r0, [pc, #36]	; (80027f8 <HAL_TIM_MspPostInit+0x104>)
 80027d2:	f002 ffbf 	bl	8005754 <HAL_GPIO_Init>
}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020400 	.word	0x40020400
 80027ec:	40000c00 	.word	0x40000c00
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40001800 	.word	0x40001800
 80027f8:	40021c00 	.word	0x40021c00

080027fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	; 0x30
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a3c      	ldr	r2, [pc, #240]	; (800290c <HAL_UART_MspInit+0x110>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d145      	bne.n	80028aa <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800281e:	4b3c      	ldr	r3, [pc, #240]	; (8002910 <HAL_UART_MspInit+0x114>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a3b      	ldr	r2, [pc, #236]	; (8002910 <HAL_UART_MspInit+0x114>)
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_UART_MspInit+0x114>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_UART_MspInit+0x114>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a35      	ldr	r2, [pc, #212]	; (8002910 <HAL_UART_MspInit+0x114>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_UART_MspInit+0x114>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <HAL_UART_MspInit+0x114>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a2f      	ldr	r2, [pc, #188]	; (8002910 <HAL_UART_MspInit+0x114>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <HAL_UART_MspInit+0x114>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002876:	2307      	movs	r3, #7
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 031c 	add.w	r3, r7, #28
 800287e:	4619      	mov	r1, r3
 8002880:	4824      	ldr	r0, [pc, #144]	; (8002914 <HAL_UART_MspInit+0x118>)
 8002882:	f002 ff67 	bl	8005754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002898:	2307      	movs	r3, #7
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	4619      	mov	r1, r3
 80028a2:	481d      	ldr	r0, [pc, #116]	; (8002918 <HAL_UART_MspInit+0x11c>)
 80028a4:	f002 ff56 	bl	8005754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028a8:	e02c      	b.n	8002904 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_UART_MspInit+0x120>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d127      	bne.n	8002904 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_UART_MspInit+0x114>)
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	4a15      	ldr	r2, [pc, #84]	; (8002910 <HAL_UART_MspInit+0x114>)
 80028ba:	f043 0320 	orr.w	r3, r3, #32
 80028be:	6453      	str	r3, [r2, #68]	; 0x44
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_UART_MspInit+0x114>)
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_UART_MspInit+0x114>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <HAL_UART_MspInit+0x114>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6313      	str	r3, [r2, #48]	; 0x30
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <HAL_UART_MspInit+0x114>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80028e4:	23c0      	movs	r3, #192	; 0xc0
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028f4:	2308      	movs	r3, #8
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4808      	ldr	r0, [pc, #32]	; (8002920 <HAL_UART_MspInit+0x124>)
 8002900:	f002 ff28 	bl	8005754 <HAL_GPIO_Init>
}
 8002904:	bf00      	nop
 8002906:	3730      	adds	r7, #48	; 0x30
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40011000 	.word	0x40011000
 8002910:	40023800 	.word	0x40023800
 8002914:	40020400 	.word	0x40020400
 8002918:	40020000 	.word	0x40020000
 800291c:	40011400 	.word	0x40011400
 8002920:	40020800 	.word	0x40020800

08002924 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002938:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_FMC_MspInit+0x100>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d16d      	bne.n	8002a1c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002940:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_FMC_MspInit+0x100>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002946:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_FMC_MspInit+0x104>)
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	4a37      	ldr	r2, [pc, #220]	; (8002a28 <HAL_FMC_MspInit+0x104>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6393      	str	r3, [r2, #56]	; 0x38
 8002952:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <HAL_FMC_MspInit+0x104>)
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800295e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002962:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	2303      	movs	r3, #3
 800296e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002970:	230c      	movs	r3, #12
 8002972:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	4619      	mov	r1, r3
 8002978:	482c      	ldr	r0, [pc, #176]	; (8002a2c <HAL_FMC_MspInit+0x108>)
 800297a:	f002 feeb 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800297e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002982:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002990:	230c      	movs	r3, #12
 8002992:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	4619      	mov	r1, r3
 8002998:	4825      	ldr	r0, [pc, #148]	; (8002a30 <HAL_FMC_MspInit+0x10c>)
 800299a:	f002 fedb 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800299e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029a2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029b0:	230c      	movs	r3, #12
 80029b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	481e      	ldr	r0, [pc, #120]	; (8002a34 <HAL_FMC_MspInit+0x110>)
 80029ba:	f002 fecb 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80029be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80029c2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029d0:	230c      	movs	r3, #12
 80029d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4817      	ldr	r0, [pc, #92]	; (8002a38 <HAL_FMC_MspInit+0x114>)
 80029da:	f002 febb 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80029de:	2328      	movs	r3, #40	; 0x28
 80029e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ee:	230c      	movs	r3, #12
 80029f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4811      	ldr	r0, [pc, #68]	; (8002a3c <HAL_FMC_MspInit+0x118>)
 80029f8:	f002 feac 	bl	8005754 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80029fc:	2308      	movs	r3, #8
 80029fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	480a      	ldr	r0, [pc, #40]	; (8002a40 <HAL_FMC_MspInit+0x11c>)
 8002a16:	f002 fe9d 	bl	8005754 <HAL_GPIO_Init>
 8002a1a:	e000      	b.n	8002a1e <HAL_FMC_MspInit+0xfa>
    return;
 8002a1c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000534 	.word	0x20000534
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40021800 	.word	0x40021800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021400 	.word	0x40021400
 8002a3c:	40021c00 	.word	0x40021c00
 8002a40:	40020800 	.word	0x40020800

08002a44 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a4c:	f7ff ff6a 	bl	8002924 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <NMI_Handler+0x4>

08002a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a62:	e7fe      	b.n	8002a62 <HardFault_Handler+0x4>

08002a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <MemManage_Handler+0x4>

08002a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <BusFault_Handler+0x4>

08002a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <UsageFault_Handler+0x4>

08002a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a88:	f001 f9fc 	bl	8003e84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002a8c:	f00d fa46 	bl	800ff1c <xTaskGetSchedulerState>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002a96:	f00d fe27 	bl	80106e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002aa4:	4802      	ldr	r0, [pc, #8]	; (8002ab0 <LTDC_IRQHandler+0x10>)
 8002aa6:	f003 f903 	bl	8005cb0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000a88 	.word	0x20000a88

08002ab4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <DMA2D_IRQHandler+0x10>)
 8002aba:	f002 fc0d 	bl	80052d8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20001600 	.word	0x20001600

08002ac8 <SDMMC1_IRQHandler>:
  * @brief  This function handles SDMMC1 global interrupt request.
  * @param  None
  * @retval None
  */
void BSP_SDMMC_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  HAL_SD_IRQHandler(&uSdHandle);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <SDMMC1_IRQHandler+0x10>)
 8002ace:	f005 fbaf 	bl	8008230 <HAL_SD_IRQHandler>
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20004c14 	.word	0x20004c14

08002adc <DMA2_Stream6_IRQHandler>:
* @brief  This function handles DMA2 Stream 6 interrupt request.
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Tx_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(uSdHandle.hdmatx);
 8002ae0:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <DMA2_Stream6_IRQHandler+0x14>)
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 f823 	bl	8004b30 <HAL_DMA_IRQHandler>
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20004c14 	.word	0x20004c14

08002af4 <DMA2_Stream3_IRQHandler>:
* @brief  This function handles DMA2 Stream 3 interrupt request.
* @param  None
* @retval None
*/
void BSP_SDMMC_DMA_Rx_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(uSdHandle.hdmarx);
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <DMA2_Stream3_IRQHandler+0x14>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 f817 	bl	8004b30 <HAL_DMA_IRQHandler>
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20004c14 	.word	0x20004c14

08002b0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e00a      	b.n	8002b34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b1e:	f3af 8000 	nop.w
 8002b22:	4601      	mov	r1, r0
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	60ba      	str	r2, [r7, #8]
 8002b2a:	b2ca      	uxtb	r2, r1
 8002b2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3301      	adds	r3, #1
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	dbf0      	blt.n	8002b1e <_read+0x12>
	}

return len;
 8002b3c:	687b      	ldr	r3, [r7, #4]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_isatty>:

int _isatty(int file)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
	return 1;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
	return 0;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <SystemInit+0x20>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <SystemInit+0x20>)
 8002bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bda:	490e      	ldr	r1, [pc, #56]	; (8002c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be0:	e002      	b.n	8002be8 <LoopCopyDataInit>

08002be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be6:	3304      	adds	r3, #4

08002be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bec:	d3f9      	bcc.n	8002be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bf0:	4c0b      	ldr	r4, [pc, #44]	; (8002c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf4:	e001      	b.n	8002bfa <LoopFillZerobss>

08002bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf8:	3204      	adds	r2, #4

08002bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bfc:	d3fb      	bcc.n	8002bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bfe:	f7ff ffd7 	bl	8002bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c02:	f00d feb1 	bl	8010968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c06:	f7fd fd97 	bl	8000738 <main>
  bx  lr    
 8002c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c0c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c14:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002c18:	08013b1c 	.word	0x08013b1c
  ldr r2, =_sbss
 8002c1c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002c20:	20004d2c 	.word	0x20004d2c

08002c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c24:	e7fe      	b.n	8002c24 <ADC_IRQHandler>
	...

08002c28 <BSP_LED_Off>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d108      	bne.n	8002c4a <BSP_LED_Off+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <BSP_LED_Off+0x2c>)
 8002c3a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2200      	movs	r2, #0
 8002c42:	4619      	mov	r1, r3
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f002 ff49 	bl	8005adc <HAL_GPIO_WritePin>
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40022000 	.word	0x40022000

08002c58 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002c5c:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c5e:	2228      	movs	r2, #40	; 0x28
 8002c60:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002c62:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c64:	2209      	movs	r2, #9
 8002c66:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c68:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c6a:	2235      	movs	r2, #53	; 0x35
 8002c6c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c70:	220b      	movs	r2, #11
 8002c72:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c76:	f240 121b 	movw	r2, #283	; 0x11b
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c7e:	f240 2215 	movw	r2, #533	; 0x215
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c86:	f240 121d 	movw	r2, #285	; 0x11d
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c8e:	f240 2235 	movw	r2, #565	; 0x235
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002c94:	2100      	movs	r1, #0
 8002c96:	4823      	ldr	r0, [pc, #140]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c98:	f000 fbf6 	bl	8003488 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002c9c:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002c9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ca2:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002ca6:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002caa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002cac:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002cc4:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <BSP_LCD_Init+0xd0>)
 8002ce0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002ce2:	4810      	ldr	r0, [pc, #64]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002ce4:	f003 f91a 	bl	8005f1c <HAL_LTDC_GetState>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002cee:	2100      	movs	r1, #0
 8002cf0:	480c      	ldr	r0, [pc, #48]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cf2:	f000 faef 	bl	80032d4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002cf6:	480b      	ldr	r0, [pc, #44]	; (8002d24 <BSP_LCD_Init+0xcc>)
 8002cf8:	f002 ff0a 	bl	8005b10 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d02:	480a      	ldr	r0, [pc, #40]	; (8002d2c <BSP_LCD_Init+0xd4>)
 8002d04:	f002 feea 	bl	8005adc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2108      	movs	r1, #8
 8002d0c:	4808      	ldr	r0, [pc, #32]	; (8002d30 <BSP_LCD_Init+0xd8>)
 8002d0e:	f002 fee5 	bl	8005adc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002d12:	f000 fec3 	bl	8003a9c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002d16:	4807      	ldr	r0, [pc, #28]	; (8002d34 <BSP_LCD_Init+0xdc>)
 8002d18:	f000 f928 	bl	8002f6c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20004b6c 	.word	0x20004b6c
 8002d28:	40016800 	.word	0x40016800
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40022800 	.word	0x40022800
 8002d34:	20000008 	.word	0x20000008

08002d38 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <BSP_LCD_GetXSize+0x20>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a06      	ldr	r2, [pc, #24]	; (8002d5c <BSP_LCD_GetXSize+0x24>)
 8002d42:	2134      	movs	r1, #52	; 0x34
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3360      	adds	r3, #96	; 0x60
 8002d4c:	681b      	ldr	r3, [r3, #0]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	20000578 	.word	0x20000578
 8002d5c:	20004b6c 	.word	0x20004b6c

08002d60 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <BSP_LCD_GetYSize+0x20>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <BSP_LCD_GetYSize+0x24>)
 8002d6a:	2134      	movs	r1, #52	; 0x34
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3364      	adds	r3, #100	; 0x64
 8002d74:	681b      	ldr	r3, [r3, #0]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	20000578 	.word	0x20000578
 8002d84:	20004b6c 	.word	0x20004b6c

08002d88 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b090      	sub	sp, #64	; 0x40
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002d98:	f7ff ffce 	bl	8002d38 <BSP_LCD_GetXSize>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002da4:	f7ff ffdc 	bl	8002d60 <BSP_LCD_GetYSize>
 8002da8:	4603      	mov	r3, r0
 8002daa:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002db4:	23ff      	movs	r3, #255	; 0xff
 8002db6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002dce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002dd4:	2307      	movs	r3, #7
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002dd8:	f7ff ffae 	bl	8002d38 <BSP_LCD_GetXSize>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002de0:	f7ff ffbe 	bl	8002d60 <BSP_LCD_GetYSize>
 8002de4:	4603      	mov	r3, r0
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002de8:	88fa      	ldrh	r2, [r7, #6]
 8002dea:	f107 030c 	add.w	r3, r7, #12
 8002dee:	4619      	mov	r1, r3
 8002df0:	4812      	ldr	r0, [pc, #72]	; (8002e3c <BSP_LCD_LayerDefaultInit+0xb4>)
 8002df2:	f003 f81f 	bl	8005e34 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	4911      	ldr	r1, [pc, #68]	; (8002e40 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3304      	adds	r3, #4
 8002e06:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	490c      	ldr	r1, [pc, #48]	; (8002e40 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	4a09      	ldr	r2, [pc, #36]	; (8002e44 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e1e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	4907      	ldr	r1, [pc, #28]	; (8002e40 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002e32:	601a      	str	r2, [r3, #0]
}
 8002e34:	bf00      	nop
 8002e36:	3740      	adds	r7, #64	; 0x40
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20004b6c 	.word	0x20004b6c
 8002e40:	2000057c 	.word	0x2000057c
 8002e44:	20000008 	.word	0x20000008

08002e48 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <BSP_LCD_SelectLayer+0x1c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6013      	str	r3, [r2, #0]
} 
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000578 	.word	0x20000578

08002e68 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d112      	bne.n	8002ea0 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <BSP_LCD_SetLayerVisible+0x78>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	01db      	lsls	r3, r3, #7
 8002e84:	4413      	add	r3, r2
 8002e86:	3384      	adds	r3, #132	; 0x84
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <BSP_LCD_SetLayerVisible+0x78>)
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	01d2      	lsls	r2, r2, #7
 8002e94:	440a      	add	r2, r1
 8002e96:	3284      	adds	r2, #132	; 0x84
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	e011      	b.n	8002ec4 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <BSP_LCD_SetLayerVisible+0x78>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	01db      	lsls	r3, r3, #7
 8002eaa:	4413      	add	r3, r2
 8002eac:	3384      	adds	r3, #132	; 0x84
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <BSP_LCD_SetLayerVisible+0x78>)
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	01d2      	lsls	r2, r2, #7
 8002eba:	440a      	add	r2, r1
 8002ebc:	3284      	adds	r2, #132	; 0x84
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <BSP_LCD_SetLayerVisible+0x78>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <BSP_LCD_SetLayerVisible+0x78>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
} 
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	20004b6c 	.word	0x20004b6c

08002ee4 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4803      	ldr	r0, [pc, #12]	; (8002f04 <BSP_LCD_SetTransparency+0x20>)
 8002ef8:	f002 ffda 	bl	8005eb0 <HAL_LTDC_SetAlpha>
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20004b6c 	.word	0x20004b6c

08002f08 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <BSP_LCD_SetTextColor+0x28>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <BSP_LCD_SetTextColor+0x2c>)
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	601a      	str	r2, [r3, #0]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	20000578 	.word	0x20000578
 8002f34:	2000057c 	.word	0x2000057c

08002f38 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <BSP_LCD_SetBackColor+0x2c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4908      	ldr	r1, [pc, #32]	; (8002f68 <BSP_LCD_SetBackColor+0x30>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3304      	adds	r3, #4
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000578 	.word	0x20000578
 8002f68:	2000057c 	.word	0x2000057c

08002f6c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002f74:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <BSP_LCD_SetFont+0x2c>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4908      	ldr	r1, [pc, #32]	; (8002f9c <BSP_LCD_SetFont+0x30>)
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3308      	adds	r3, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000578 	.word	0x20000578
 8002f9c:	2000057c 	.word	0x2000057c

08002fa0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <BSP_LCD_Clear+0x48>)
 8002faa:	681c      	ldr	r4, [r3, #0]
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <BSP_LCD_Clear+0x48>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <BSP_LCD_Clear+0x4c>)
 8002fb2:	2134      	movs	r1, #52	; 0x34
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	335c      	adds	r3, #92	; 0x5c
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	461e      	mov	r6, r3
 8002fc0:	f7ff feba 	bl	8002d38 <BSP_LCD_GetXSize>
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	f7ff fecb 	bl	8002d60 <BSP_LCD_GetYSize>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	462a      	mov	r2, r5
 8002fd8:	4631      	mov	r1, r6
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f000 fb28 	bl	8003630 <LL_FillBuffer>
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe8:	20000578 	.word	0x20000578
 8002fec:	20004b6c 	.word	0x20004b6c

08002ff0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	80bb      	strh	r3, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <BSP_LCD_DisplayChar+0x80>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	491b      	ldr	r1, [pc, #108]	; (8003074 <BSP_LCD_DisplayChar+0x84>)
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	3308      	adds	r3, #8
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <BSP_LCD_DisplayChar+0x80>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4c14      	ldr	r4, [pc, #80]	; (8003074 <BSP_LCD_DisplayChar+0x84>)
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4423      	add	r3, r4
 800302e:	3308      	adds	r3, #8
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003034:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <BSP_LCD_DisplayChar+0x80>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <BSP_LCD_DisplayChar+0x84>)
 800303e:	4613      	mov	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4423      	add	r3, r4
 8003048:	3308      	adds	r3, #8
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	889b      	ldrh	r3, [r3, #4]
 800304e:	3307      	adds	r3, #7
 8003050:	2b00      	cmp	r3, #0
 8003052:	da00      	bge.n	8003056 <BSP_LCD_DisplayChar+0x66>
 8003054:	3307      	adds	r3, #7
 8003056:	10db      	asrs	r3, r3, #3
 8003058:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800305c:	18ca      	adds	r2, r1, r3
 800305e:	88b9      	ldrh	r1, [r7, #4]
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fa2c 	bl	80034c0 <DrawChar>
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bd90      	pop	{r4, r7, pc}
 8003070:	20000578 	.word	0x20000578
 8003074:	2000057c 	.word	0x2000057c

08003078 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	60ba      	str	r2, [r7, #8]
 8003080:	461a      	mov	r2, r3
 8003082:	4603      	mov	r3, r0
 8003084:	81fb      	strh	r3, [r7, #14]
 8003086:	460b      	mov	r3, r1
 8003088:	81bb      	strh	r3, [r7, #12]
 800308a:	4613      	mov	r3, r2
 800308c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800308e:	2301      	movs	r3, #1
 8003090:	83fb      	strh	r3, [r7, #30]
 8003092:	2300      	movs	r3, #0
 8003094:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80030a2:	e002      	b.n	80030aa <BSP_LCD_DisplayStringAt+0x32>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	3301      	adds	r3, #1
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	617a      	str	r2, [r7, #20]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f6      	bne.n	80030a4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80030b6:	f7ff fe3f 	bl	8002d38 <BSP_LCD_GetXSize>
 80030ba:	4601      	mov	r1, r0
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <BSP_LCD_DisplayStringAt+0x188>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4850      	ldr	r0, [pc, #320]	; (8003204 <BSP_LCD_DisplayStringAt+0x18c>)
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4403      	add	r3, r0
 80030cc:	3308      	adds	r3, #8
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	889b      	ldrh	r3, [r3, #4]
 80030d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d01c      	beq.n	8003118 <BSP_LCD_DisplayStringAt+0xa0>
 80030de:	2b03      	cmp	r3, #3
 80030e0:	dc33      	bgt.n	800314a <BSP_LCD_DisplayStringAt+0xd2>
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d002      	beq.n	80030ec <BSP_LCD_DisplayStringAt+0x74>
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d019      	beq.n	800311e <BSP_LCD_DisplayStringAt+0xa6>
 80030ea:	e02e      	b.n	800314a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	1ad1      	subs	r1, r2, r3
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <BSP_LCD_DisplayStringAt+0x188>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4843      	ldr	r0, [pc, #268]	; (8003204 <BSP_LCD_DisplayStringAt+0x18c>)
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4403      	add	r3, r0
 8003102:	3308      	adds	r3, #8
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	889b      	ldrh	r3, [r3, #4]
 8003108:	fb03 f301 	mul.w	r3, r3, r1
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	89fb      	ldrh	r3, [r7, #14]
 8003112:	4413      	add	r3, r2
 8003114:	83fb      	strh	r3, [r7, #30]
      break;
 8003116:	e01b      	b.n	8003150 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003118:	89fb      	ldrh	r3, [r7, #14]
 800311a:	83fb      	strh	r3, [r7, #30]
      break;
 800311c:	e018      	b.n	8003150 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	b299      	uxth	r1, r3
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <BSP_LCD_DisplayStringAt+0x188>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4836      	ldr	r0, [pc, #216]	; (8003204 <BSP_LCD_DisplayStringAt+0x18c>)
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4403      	add	r3, r0
 8003136:	3308      	adds	r3, #8
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	889b      	ldrh	r3, [r3, #4]
 800313c:	fb11 f303 	smulbb	r3, r1, r3
 8003140:	b29a      	uxth	r2, r3
 8003142:	89fb      	ldrh	r3, [r7, #14]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	83fb      	strh	r3, [r7, #30]
      break;
 8003148:	e002      	b.n	8003150 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800314a:	89fb      	ldrh	r3, [r7, #14]
 800314c:	83fb      	strh	r3, [r7, #30]
      break;
 800314e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003150:	8bfb      	ldrh	r3, [r7, #30]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <BSP_LCD_DisplayStringAt+0xe6>
 8003156:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800315a:	2b00      	cmp	r3, #0
 800315c:	da1d      	bge.n	800319a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800315e:	2301      	movs	r3, #1
 8003160:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003162:	e01a      	b.n	800319a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	89b9      	ldrh	r1, [r7, #12]
 800316a:	8bfb      	ldrh	r3, [r7, #30]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff3f 	bl	8002ff0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <BSP_LCD_DisplayStringAt+0x188>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4923      	ldr	r1, [pc, #140]	; (8003204 <BSP_LCD_DisplayStringAt+0x18c>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	3308      	adds	r3, #8
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	889a      	ldrh	r2, [r3, #4]
 8003188:	8bfb      	ldrh	r3, [r7, #30]
 800318a:	4413      	add	r3, r2
 800318c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3301      	adds	r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
    i++;
 8003194:	8bbb      	ldrh	r3, [r7, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2dc      	uxtb	r4, r3
 80031a8:	f7ff fdc6 	bl	8002d38 <BSP_LCD_GetXSize>
 80031ac:	8bb9      	ldrh	r1, [r7, #28]
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <BSP_LCD_DisplayStringAt+0x188>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4d14      	ldr	r5, [pc, #80]	; (8003204 <BSP_LCD_DisplayStringAt+0x18c>)
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	442b      	add	r3, r5
 80031be:	3308      	adds	r3, #8
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	889b      	ldrh	r3, [r3, #4]
 80031c4:	fb03 f301 	mul.w	r3, r3, r1
 80031c8:	1ac3      	subs	r3, r0, r3
 80031ca:	b299      	uxth	r1, r3
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <BSP_LCD_DisplayStringAt+0x188>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	480c      	ldr	r0, [pc, #48]	; (8003204 <BSP_LCD_DisplayStringAt+0x18c>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4403      	add	r3, r0
 80031dc:	3308      	adds	r3, #8
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	889b      	ldrh	r3, [r3, #4]
 80031e2:	4299      	cmp	r1, r3
 80031e4:	bf2c      	ite	cs
 80031e6:	2301      	movcs	r3, #1
 80031e8:	2300      	movcc	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	4023      	ands	r3, r4
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1b7      	bne.n	8003164 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bdb0      	pop	{r4, r5, r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000578 	.word	0x20000578
 8003204:	2000057c 	.word	0x2000057c

08003208 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	603a      	str	r2, [r7, #0]
 8003212:	80fb      	strh	r3, [r7, #6]
 8003214:	460b      	mov	r3, r1
 8003216:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <BSP_LCD_DrawPixel+0x88>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <BSP_LCD_DrawPixel+0x8c>)
 800321e:	2134      	movs	r1, #52	; 0x34
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3348      	adds	r3, #72	; 0x48
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d116      	bne.n	800325c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800322e:	4b18      	ldr	r3, [pc, #96]	; (8003290 <BSP_LCD_DrawPixel+0x88>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <BSP_LCD_DrawPixel+0x8c>)
 8003234:	2134      	movs	r1, #52	; 0x34
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	335c      	adds	r3, #92	; 0x5c
 800323e:	681c      	ldr	r4, [r3, #0]
 8003240:	88bd      	ldrh	r5, [r7, #4]
 8003242:	f7ff fd79 	bl	8002d38 <BSP_LCD_GetXSize>
 8003246:	4603      	mov	r3, r0
 8003248:	fb03 f205 	mul.w	r2, r3, r5
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	4413      	add	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4423      	add	r3, r4
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	b292      	uxth	r2, r2
 8003258:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800325a:	e015      	b.n	8003288 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <BSP_LCD_DrawPixel+0x88>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <BSP_LCD_DrawPixel+0x8c>)
 8003262:	2134      	movs	r1, #52	; 0x34
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	335c      	adds	r3, #92	; 0x5c
 800326c:	681c      	ldr	r4, [r3, #0]
 800326e:	88bd      	ldrh	r5, [r7, #4]
 8003270:	f7ff fd62 	bl	8002d38 <BSP_LCD_GetXSize>
 8003274:	4603      	mov	r3, r0
 8003276:	fb03 f205 	mul.w	r2, r3, r5
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4423      	add	r3, r4
 8003282:	461a      	mov	r2, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6013      	str	r3, [r2, #0]
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bdb0      	pop	{r4, r5, r7, pc}
 8003290:	20000578 	.word	0x20000578
 8003294:	20004b6c 	.word	0x20004b6c

08003298 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <BSP_LCD_DisplayOn+0x30>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <BSP_LCD_DisplayOn+0x30>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80032ac:	2201      	movs	r2, #1
 80032ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032b2:	4806      	ldr	r0, [pc, #24]	; (80032cc <BSP_LCD_DisplayOn+0x34>)
 80032b4:	f002 fc12 	bl	8005adc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80032b8:	2201      	movs	r2, #1
 80032ba:	2108      	movs	r1, #8
 80032bc:	4804      	ldr	r0, [pc, #16]	; (80032d0 <BSP_LCD_DisplayOn+0x38>)
 80032be:	f002 fc0d 	bl	8005adc <HAL_GPIO_WritePin>
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20004b6c 	.word	0x20004b6c
 80032cc:	40022000 	.word	0x40022000
 80032d0:	40022800 	.word	0x40022800

080032d4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b090      	sub	sp, #64	; 0x40
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80032de:	4b64      	ldr	r3, [pc, #400]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	4a63      	ldr	r2, [pc, #396]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 80032e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032e8:	6453      	str	r3, [r2, #68]	; 0x44
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80032f6:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 80032fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800330e:	4b58      	ldr	r3, [pc, #352]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a57      	ldr	r2, [pc, #348]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003314:	f043 0310 	orr.w	r3, r3, #16
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b55      	ldr	r3, [pc, #340]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003326:	4b52      	ldr	r3, [pc, #328]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a51      	ldr	r2, [pc, #324]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 800332c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b4f      	ldr	r3, [pc, #316]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a4b      	ldr	r2, [pc, #300]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003356:	4b46      	ldr	r3, [pc, #280]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a45      	ldr	r2, [pc, #276]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 800335c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b43      	ldr	r3, [pc, #268]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800336e:	4b40      	ldr	r3, [pc, #256]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a3f      	ldr	r2, [pc, #252]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003378:	6313      	str	r3, [r2, #48]	; 0x30
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003386:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a39      	ldr	r2, [pc, #228]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 800338c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b37      	ldr	r3, [pc, #220]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800339e:	4b34      	ldr	r3, [pc, #208]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a33      	ldr	r2, [pc, #204]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 80033a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <BSP_LCD_MspInit+0x19c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80033b6:	2310      	movs	r3, #16
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80033c2:	2302      	movs	r3, #2
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80033c6:	230e      	movs	r3, #14
 80033c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80033ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ce:	4619      	mov	r1, r3
 80033d0:	4828      	ldr	r0, [pc, #160]	; (8003474 <BSP_LCD_MspInit+0x1a0>)
 80033d2:	f002 f9bf 	bl	8005754 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80033d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80033e0:	2309      	movs	r3, #9
 80033e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80033e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e8:	4619      	mov	r1, r3
 80033ea:	4823      	ldr	r0, [pc, #140]	; (8003478 <BSP_LCD_MspInit+0x1a4>)
 80033ec:	f002 f9b2 	bl	8005754 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80033f0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033fa:	230e      	movs	r3, #14
 80033fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80033fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003402:	4619      	mov	r1, r3
 8003404:	481d      	ldr	r0, [pc, #116]	; (800347c <BSP_LCD_MspInit+0x1a8>)
 8003406:	f002 f9a5 	bl	8005754 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800340a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003414:	230e      	movs	r3, #14
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341c:	4619      	mov	r1, r3
 800341e:	4818      	ldr	r0, [pc, #96]	; (8003480 <BSP_LCD_MspInit+0x1ac>)
 8003420:	f002 f998 	bl	8005754 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003424:	23f7      	movs	r3, #247	; 0xf7
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800342c:	230e      	movs	r3, #14
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003434:	4619      	mov	r1, r3
 8003436:	4813      	ldr	r0, [pc, #76]	; (8003484 <BSP_LCD_MspInit+0x1b0>)
 8003438:	f002 f98c 	bl	8005754 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800343c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003442:	2301      	movs	r3, #1
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800344a:	4619      	mov	r1, r3
 800344c:	480b      	ldr	r0, [pc, #44]	; (800347c <BSP_LCD_MspInit+0x1a8>)
 800344e:	f002 f981 	bl	8005754 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003452:	2308      	movs	r3, #8
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003456:	2301      	movs	r3, #1
 8003458:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800345a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345e:	4619      	mov	r1, r3
 8003460:	4808      	ldr	r0, [pc, #32]	; (8003484 <BSP_LCD_MspInit+0x1b0>)
 8003462:	f002 f977 	bl	8005754 <HAL_GPIO_Init>
}
 8003466:	bf00      	nop
 8003468:	3740      	adds	r7, #64	; 0x40
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	40021000 	.word	0x40021000
 8003478:	40021800 	.word	0x40021800
 800347c:	40022000 	.word	0x40022000
 8003480:	40022400 	.word	0x40022400
 8003484:	40022800 	.word	0x40022800

08003488 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <BSP_LCD_ClockConfig+0x34>)
 8003494:	2208      	movs	r2, #8
 8003496:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <BSP_LCD_ClockConfig+0x34>)
 800349a:	22c0      	movs	r2, #192	; 0xc0
 800349c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <BSP_LCD_ClockConfig+0x34>)
 80034a0:	2205      	movs	r2, #5
 80034a2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <BSP_LCD_ClockConfig+0x34>)
 80034a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034aa:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80034ac:	4803      	ldr	r0, [pc, #12]	; (80034bc <BSP_LCD_ClockConfig+0x34>)
 80034ae:	f003 fc79 	bl	8006da4 <HAL_RCCEx_PeriphCLKConfig>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000594 	.word	0x20000594

080034c0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	603a      	str	r2, [r7, #0]
 80034ca:	80fb      	strh	r3, [r7, #6]
 80034cc:	460b      	mov	r3, r1
 80034ce:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
 80034d4:	2300      	movs	r3, #0
 80034d6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <DrawChar+0x168>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4953      	ldr	r1, [pc, #332]	; (800362c <DrawChar+0x16c>)
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3308      	adds	r3, #8
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	88db      	ldrh	r3, [r3, #6]
 80034ee:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80034f0:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <DrawChar+0x168>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	494d      	ldr	r1, [pc, #308]	; (800362c <DrawChar+0x16c>)
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3308      	adds	r3, #8
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	889b      	ldrh	r3, [r3, #4]
 8003506:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003508:	8a3b      	ldrh	r3, [r7, #16]
 800350a:	3307      	adds	r3, #7
 800350c:	2b00      	cmp	r3, #0
 800350e:	da00      	bge.n	8003512 <DrawChar+0x52>
 8003510:	3307      	adds	r3, #7
 8003512:	10db      	asrs	r3, r3, #3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	b2da      	uxtb	r2, r3
 800351a:	8a3b      	ldrh	r3, [r7, #16]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	e076      	b.n	8003616 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003528:	8a3b      	ldrh	r3, [r7, #16]
 800352a:	3307      	adds	r3, #7
 800352c:	2b00      	cmp	r3, #0
 800352e:	da00      	bge.n	8003532 <DrawChar+0x72>
 8003530:	3307      	adds	r3, #7
 8003532:	10db      	asrs	r3, r3, #3
 8003534:	461a      	mov	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fb03 f302 	mul.w	r3, r3, r2
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	4413      	add	r3, r2
 8003540:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003542:	8a3b      	ldrh	r3, [r7, #16]
 8003544:	3307      	adds	r3, #7
 8003546:	2b00      	cmp	r3, #0
 8003548:	da00      	bge.n	800354c <DrawChar+0x8c>
 800354a:	3307      	adds	r3, #7
 800354c:	10db      	asrs	r3, r3, #3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d002      	beq.n	8003558 <DrawChar+0x98>
 8003552:	2b02      	cmp	r3, #2
 8003554:	d004      	beq.n	8003560 <DrawChar+0xa0>
 8003556:	e00c      	b.n	8003572 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	617b      	str	r3, [r7, #20]
      break;
 800355e:	e016      	b.n	800358e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	3201      	adds	r2, #1
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
      break;
 8003570:	e00d      	b.n	800358e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	041a      	lsls	r2, r3, #16
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	3301      	adds	r3, #1
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	4313      	orrs	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	3202      	adds	r2, #2
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
      break;
 800358c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	e036      	b.n	8003602 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003594:	8a3a      	ldrh	r2, [r7, #16]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	1ad2      	subs	r2, r2, r3
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	4413      	add	r3, r2
 800359e:	3b01      	subs	r3, #1
 80035a0:	2201      	movs	r2, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d012      	beq.n	80035d6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	4413      	add	r3, r2
 80035b8:	b298      	uxth	r0, r3
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <DrawChar+0x168>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	491b      	ldr	r1, [pc, #108]	; (800362c <DrawChar+0x16c>)
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	88bb      	ldrh	r3, [r7, #4]
 80035ce:	4619      	mov	r1, r3
 80035d0:	f7ff fe1a 	bl	8003208 <BSP_LCD_DrawPixel>
 80035d4:	e012      	b.n	80035fc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	b29a      	uxth	r2, r3
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	4413      	add	r3, r2
 80035de:	b298      	uxth	r0, r3
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <DrawChar+0x168>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4911      	ldr	r1, [pc, #68]	; (800362c <DrawChar+0x16c>)
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3304      	adds	r3, #4
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	88bb      	ldrh	r3, [r7, #4]
 80035f6:	4619      	mov	r1, r3
 80035f8:	f7ff fe06 	bl	8003208 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	3301      	adds	r3, #1
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	8a3b      	ldrh	r3, [r7, #16]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	429a      	cmp	r2, r3
 8003608:	d3c4      	bcc.n	8003594 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800360a:	88bb      	ldrh	r3, [r7, #4]
 800360c:	3301      	adds	r3, #1
 800360e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	8a7b      	ldrh	r3, [r7, #18]
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	429a      	cmp	r2, r3
 800361c:	d384      	bcc.n	8003528 <DrawChar+0x68>
  }
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000578 	.word	0x20000578
 800362c:	2000057c 	.word	0x2000057c

08003630 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <LL_FillBuffer+0x88>)
 8003640:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003644:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <LL_FillBuffer+0x8c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <LL_FillBuffer+0x90>)
 800364c:	2134      	movs	r1, #52	; 0x34
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	4413      	add	r3, r2
 8003654:	3348      	adds	r3, #72	; 0x48
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d103      	bne.n	8003664 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800365c:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <LL_FillBuffer+0x88>)
 800365e:	2202      	movs	r2, #2
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	e002      	b.n	800366a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <LL_FillBuffer+0x88>)
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <LL_FillBuffer+0x88>)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <LL_FillBuffer+0x88>)
 8003672:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <LL_FillBuffer+0x94>)
 8003674:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003676:	4810      	ldr	r0, [pc, #64]	; (80036b8 <LL_FillBuffer+0x88>)
 8003678:	f001 fcd0 	bl	800501c <HAL_DMA2D_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d115      	bne.n	80036ae <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	480c      	ldr	r0, [pc, #48]	; (80036b8 <LL_FillBuffer+0x88>)
 8003686:	f001 ff37 	bl	80054f8 <HAL_DMA2D_ConfigLayer>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10e      	bne.n	80036ae <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69f9      	ldr	r1, [r7, #28]
 800369a:	4807      	ldr	r0, [pc, #28]	; (80036b8 <LL_FillBuffer+0x88>)
 800369c:	f001 fd08 	bl	80050b0 <HAL_DMA2D_Start>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80036a6:	210a      	movs	r1, #10
 80036a8:	4803      	ldr	r0, [pc, #12]	; (80036b8 <LL_FillBuffer+0x88>)
 80036aa:	f001 fd2c 	bl	8005106 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000538 	.word	0x20000538
 80036bc:	20000578 	.word	0x20000578
 80036c0:	20004b6c 	.word	0x20004b6c
 80036c4:	4002b000 	.word	0x4002b000

080036c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDMMC1;
 80036d2:	4b20      	ldr	r3, [pc, #128]	; (8003754 <BSP_SD_Init+0x8c>)
 80036d4:	4a20      	ldr	r2, [pc, #128]	; (8003758 <BSP_SD_Init+0x90>)
 80036d6:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80036d8:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <BSP_SD_Init+0x8c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <BSP_SD_Init+0x8c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <BSP_SD_Init+0x8c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <BSP_SD_Init+0x8c>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80036f0:	4b18      	ldr	r3, [pc, #96]	; (8003754 <BSP_SD_Init+0x8c>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 80036f6:	4b17      	ldr	r3, [pc, #92]	; (8003754 <BSP_SD_Init+0x8c>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 80036fc:	2100      	movs	r1, #0
 80036fe:	4815      	ldr	r0, [pc, #84]	; (8003754 <BSP_SD_Init+0x8c>)
 8003700:	f000 f960 	bl	80039c4 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 8003704:	f000 f82a 	bl	800375c <BSP_SD_IsDetected>
 8003708:	4603      	mov	r3, r0
 800370a:	2b01      	cmp	r3, #1
 800370c:	d001      	beq.n	8003712 <BSP_SD_Init+0x4a>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800370e:	2302      	movs	r3, #2
 8003710:	e01c      	b.n	800374c <BSP_SD_Init+0x84>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 8003712:	2100      	movs	r1, #0
 8003714:	480f      	ldr	r0, [pc, #60]	; (8003754 <BSP_SD_Init+0x8c>)
 8003716:	f000 f869 	bl	80037ec <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 800371a:	480e      	ldr	r0, [pc, #56]	; (8003754 <BSP_SD_Init+0x8c>)
 800371c:	f004 fb0a 	bl	8007d34 <HAL_SD_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <BSP_SD_Init+0x62>
  {
    sd_state = MSD_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10c      	bne.n	800374a <BSP_SD_Init+0x82>
  {
    /* Enable wide operation */ 
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8003730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003734:	4807      	ldr	r0, [pc, #28]	; (8003754 <BSP_SD_Init+0x8c>)
 8003736:	f005 f8cb 	bl	80088d0 <HAL_SD_ConfigWideBusOperation>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <BSP_SD_Init+0x7e>
    {
      sd_state = MSD_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	71fb      	strb	r3, [r7, #7]
 8003744:	e001      	b.n	800374a <BSP_SD_Init+0x82>
    }
    else
    {
      sd_state = MSD_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 800374a:	79fb      	ldrb	r3, [r7, #7]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20004c14 	.word	0x20004c14
 8003758:	40012c00 	.word	0x40012c00

0800375c <BSP_SD_IsDetected>:
/**
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  __IO uint8_t      status = SD_PRESENT;
 8003762:	2301      	movs	r3, #1
 8003764:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 8003766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800376a:	4807      	ldr	r0, [pc, #28]	; (8003788 <BSP_SD_IsDetected+0x2c>)
 800376c:	f002 f99e 	bl	8005aac <HAL_GPIO_ReadPin>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 8003776:	2300      	movs	r3, #0
 8003778:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	b2db      	uxtb	r3, r3
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40020800 	.word	0x40020800

0800378c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{  
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	68f9      	ldr	r1, [r7, #12]
 800379e:	4806      	ldr	r0, [pc, #24]	; (80037b8 <BSP_SD_ReadBlocks_DMA+0x2c>)
 80037a0:	f004 fb7e 	bl	8007ea0 <HAL_SD_ReadBlocks_DMA>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <BSP_SD_ReadBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <BSP_SD_ReadBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 80037ae:	2300      	movs	r3, #0
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20004c14 	.word	0x20004c14

080037bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{ 
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	4806      	ldr	r0, [pc, #24]	; (80037e8 <BSP_SD_WriteBlocks_DMA+0x2c>)
 80037d0:	f004 fc48 	bl	8008064 <HAL_SD_WriteBlocks_DMA>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <BSP_SD_WriteBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <BSP_SD_WriteBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 80037de:	2300      	movs	r3, #0
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20004c14 	.word	0x20004c14

080037ec <BSP_SD_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80037f6:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a6b      	ldr	r2, [pc, #428]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 80037fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	4b69      	ldr	r3, [pc, #420]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 800380e:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 8003814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003826:	4b60      	ldr	r3, [pc, #384]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a5f      	ldr	r2, [pc, #380]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b5d      	ldr	r3, [pc, #372]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800383e:	4b5a      	ldr	r3, [pc, #360]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a59      	ldr	r2, [pc, #356]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <BSP_SD_MspInit+0x1bc>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003856:	2302      	movs	r3, #2
 8003858:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800385a:	2301      	movs	r3, #1
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800385e:	2303      	movs	r3, #3
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8003862:	230c      	movs	r3, #12
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8003866:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800386a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800386c:	f107 031c 	add.w	r3, r7, #28
 8003870:	4619      	mov	r1, r3
 8003872:	484e      	ldr	r0, [pc, #312]	; (80039ac <BSP_SD_MspInit+0x1c0>)
 8003874:	f001 ff6e 	bl	8005754 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 8003878:	2304      	movs	r3, #4
 800387a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800387c:	f107 031c 	add.w	r3, r7, #28
 8003880:	4619      	mov	r1, r3
 8003882:	484b      	ldr	r0, [pc, #300]	; (80039b0 <BSP_SD_MspInit+0x1c4>)
 8003884:	f001 ff66 	bl	8005754 <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8003888:	2200      	movs	r2, #0
 800388a:	210e      	movs	r1, #14
 800388c:	2031      	movs	r0, #49	; 0x31
 800388e:	f000 fea0 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003892:	2031      	movs	r0, #49	; 0x31
 8003894:	f000 feb9 	bl	800460a <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8003898:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 800389a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800389e:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80038a0:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80038a6:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80038ac:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038b2:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038b4:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038ba:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80038bc:	4b3d      	ldr	r3, [pc, #244]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038c2:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80038c4:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038c6:	2220      	movs	r2, #32
 80038c8:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80038ca:	4b3a      	ldr	r3, [pc, #232]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038d0:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80038d2:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038d4:	2204      	movs	r2, #4
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80038d8:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038da:	2203      	movs	r2, #3
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80038de:	4b35      	ldr	r3, [pc, #212]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038e4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80038e6:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80038ee:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038f0:	4a31      	ldr	r2, [pc, #196]	; (80039b8 <BSP_SD_MspInit+0x1cc>)
 80038f2:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a2f      	ldr	r2, [pc, #188]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
 80038fa:	4a2e      	ldr	r2, [pc, #184]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 8003900:	482c      	ldr	r0, [pc, #176]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 8003902:	f001 f835 	bl	8004970 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8003906:	482b      	ldr	r0, [pc, #172]	; (80039b4 <BSP_SD_MspInit+0x1c8>)
 8003908:	f000 ff84 	bl	8004814 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 800390e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003912:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003914:	4b29      	ldr	r3, [pc, #164]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003920:	4b26      	ldr	r3, [pc, #152]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003926:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 800392a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800392e:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003930:	4b22      	ldr	r3, [pc, #136]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003936:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 800393a:	2220      	movs	r2, #32
 800393c:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800393e:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003940:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003944:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003948:	2204      	movs	r2, #4
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 800394e:	2203      	movs	r2, #3
 8003950:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003954:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 800395c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003962:	4b16      	ldr	r3, [pc, #88]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003964:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <BSP_SD_MspInit+0x1d4>)
 8003966:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a14      	ldr	r2, [pc, #80]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 800396c:	63da      	str	r2, [r3, #60]	; 0x3c
 800396e:	4a13      	ldr	r2, [pc, #76]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 8003974:	4811      	ldr	r0, [pc, #68]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 8003976:	f000 fffb 	bl	8004970 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 800397a:	4810      	ldr	r0, [pc, #64]	; (80039bc <BSP_SD_MspInit+0x1d0>)
 800397c:	f000 ff4a 	bl	8004814 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 8003980:	2200      	movs	r2, #0
 8003982:	210f      	movs	r1, #15
 8003984:	203b      	movs	r0, #59	; 0x3b
 8003986:	f000 fe24 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 800398a:	203b      	movs	r0, #59	; 0x3b
 800398c:	f000 fe3d 	bl	800460a <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 8003990:	2200      	movs	r2, #0
 8003992:	210f      	movs	r1, #15
 8003994:	2045      	movs	r0, #69	; 0x45
 8003996:	f000 fe1c 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 800399a:	2045      	movs	r0, #69	; 0x45
 800399c:	f000 fe35 	bl	800460a <HAL_NVIC_EnableIRQ>
}
 80039a0:	bf00      	nop
 80039a2:	3730      	adds	r7, #48	; 0x30
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020c00 	.word	0x40020c00
 80039b4:	20000618 	.word	0x20000618
 80039b8:	40026458 	.word	0x40026458
 80039bc:	20000678 	.word	0x20000678
 80039c0:	400264a0 	.word	0x400264a0

080039c4 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <BSP_SD_Detect_MspInit+0x48>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <BSP_SD_Detect_MspInit+0x48>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <BSP_SD_Detect_MspInit+0x48>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 80039e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039ea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80039f0:	2301      	movs	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	4619      	mov	r1, r3
 80039fe:	4804      	ldr	r0, [pc, #16]	; (8003a10 <BSP_SD_Detect_MspInit+0x4c>)
 8003a00:	f001 fea8 	bl	8005754 <HAL_GPIO_Init>
}
 8003a04:	bf00      	nop
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40020800 	.word	0x40020800

08003a14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <BSP_SD_GetCardState+0x1c>)
 8003a1a:	f004 fff3 	bl	8008a04 <HAL_SD_GetCardState>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	bf14      	ite	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	2300      	moveq	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20004c14 	.word	0x20004c14

08003a34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4803      	ldr	r0, [pc, #12]	; (8003a4c <BSP_SD_GetCardInfo+0x18>)
 8003a40:	f004 ff1a 	bl	8008878 <HAL_SD_GetCardInfo>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20004c14 	.word	0x20004c14

08003a50 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8003a58:	f000 f818 	bl	8003a8c <BSP_SD_AbortCallback>
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8003a6c:	f7fe fa90 	bl	8001f90 <BSP_SD_WriteCpltCallback>
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8003a80:	f7fe fa94 	bl	8001fac <BSP_SD_ReadCpltCallback>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callbacks
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0

}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003aa0:	4b29      	ldr	r3, [pc, #164]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <BSP_SDRAM_Init+0xb0>)
 8003aa4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003aa6:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <BSP_SDRAM_Init+0xb4>)
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003aac:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <BSP_SDRAM_Init+0xb4>)
 8003aae:	2207      	movs	r2, #7
 8003ab0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003ab2:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <BSP_SDRAM_Init+0xb4>)
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003ab8:	4b25      	ldr	r3, [pc, #148]	; (8003b50 <BSP_SDRAM_Init+0xb4>)
 8003aba:	2207      	movs	r2, #7
 8003abc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <BSP_SDRAM_Init+0xb4>)
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <BSP_SDRAM_Init+0xb4>)
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003aca:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <BSP_SDRAM_Init+0xb4>)
 8003acc:	2202      	movs	r2, #2
 8003ace:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003ad6:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003ade:	2204      	movs	r2, #4
 8003ae0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003ae8:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003aea:	2240      	movs	r2, #64	; 0x40
 8003aec:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003aee:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003afe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b02:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003b06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003b12:	2100      	movs	r1, #0
 8003b14:	480c      	ldr	r0, [pc, #48]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003b16:	f000 f87f 	bl	8003c18 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003b1a:	490d      	ldr	r1, [pc, #52]	; (8003b50 <BSP_SDRAM_Init+0xb4>)
 8003b1c:	480a      	ldr	r0, [pc, #40]	; (8003b48 <BSP_SDRAM_Init+0xac>)
 8003b1e:	f005 fc30 	bl	8009382 <HAL_SDRAM_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <BSP_SDRAM_Init+0xb8>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	e002      	b.n	8003b36 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <BSP_SDRAM_Init+0xb8>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003b36:	f240 6003 	movw	r0, #1539	; 0x603
 8003b3a:	f000 f80d 	bl	8003b58 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <BSP_SDRAM_Init+0xb8>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20004c98 	.word	0x20004c98
 8003b4c:	a0000140 	.word	0xa0000140
 8003b50:	200006d8 	.word	0x200006d8
 8003b54:	20000010 	.word	0x20000010

08003b58 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003b64:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003b76:	4b26      	ldr	r3, [pc, #152]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b80:	4923      	ldr	r1, [pc, #140]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b82:	4824      	ldr	r0, [pc, #144]	; (8003c14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003b84:	f005 fc31 	bl	80093ea <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f000 f99b 	bl	8003ec4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b90:	2202      	movs	r2, #2
 8003b92:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b94:	4b1e      	ldr	r3, [pc, #120]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b96:	2210      	movs	r2, #16
 8003b98:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003b9a:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003baa:	4919      	ldr	r1, [pc, #100]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bac:	4819      	ldr	r0, [pc, #100]	; (8003c14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bae:	f005 fc1c 	bl	80093ea <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003bb2:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bba:	2210      	movs	r2, #16
 8003bbc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003bbe:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003bc4:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bce:	4910      	ldr	r1, [pc, #64]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bd0:	4810      	ldr	r0, [pc, #64]	; (8003c14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bd2:	f005 fc0a 	bl	80093ea <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003bd6:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003bda:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bde:	2204      	movs	r2, #4
 8003be0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003be4:	2210      	movs	r2, #16
 8003be6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a07      	ldr	r2, [pc, #28]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bf2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bf8:	4905      	ldr	r1, [pc, #20]	; (8003c10 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bfa:	4806      	ldr	r0, [pc, #24]	; (8003c14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bfc:	f005 fbf5 	bl	80093ea <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4804      	ldr	r0, [pc, #16]	; (8003c14 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c04:	f005 fc1c 	bl	8009440 <HAL_SDRAM_ProgramRefreshRate>
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	200006f4 	.word	0x200006f4
 8003c14:	20004c98 	.word	0x20004c98

08003c18 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b090      	sub	sp, #64	; 0x40
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c22:	4b70      	ldr	r3, [pc, #448]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	4a6f      	ldr	r2, [pc, #444]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6393      	str	r3, [r2, #56]	; 0x38
 8003c2e:	4b6d      	ldr	r3, [pc, #436]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003c3a:	4b6a      	ldr	r3, [pc, #424]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	4a69      	ldr	r2, [pc, #420]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c44:	6313      	str	r3, [r2, #48]	; 0x30
 8003c46:	4b67      	ldr	r3, [pc, #412]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c52:	4b64      	ldr	r3, [pc, #400]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4a63      	ldr	r2, [pc, #396]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5e:	4b61      	ldr	r3, [pc, #388]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c6a:	4b5e      	ldr	r3, [pc, #376]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4a5d      	ldr	r2, [pc, #372]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c70:	f043 0308 	orr.w	r3, r3, #8
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
 8003c76:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c82:	4b58      	ldr	r3, [pc, #352]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	4a57      	ldr	r2, [pc, #348]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c88:	f043 0310 	orr.w	r3, r3, #16
 8003c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8e:	4b55      	ldr	r3, [pc, #340]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c9a:	4b52      	ldr	r3, [pc, #328]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4a51      	ldr	r2, [pc, #324]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003ca0:	f043 0320 	orr.w	r3, r3, #32
 8003ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca6:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cb2:	4b4c      	ldr	r3, [pc, #304]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4b49      	ldr	r3, [pc, #292]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cca:	4b46      	ldr	r3, [pc, #280]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a45      	ldr	r2, [pc, #276]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <BSP_SDRAM_MspInit+0x1cc>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003cea:	2302      	movs	r3, #2
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003cee:	230c      	movs	r3, #12
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	483a      	ldr	r0, [pc, #232]	; (8003de8 <BSP_SDRAM_MspInit+0x1d0>)
 8003cfe:	f001 fd29 	bl	8005754 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003d02:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4837      	ldr	r0, [pc, #220]	; (8003dec <BSP_SDRAM_MspInit+0x1d4>)
 8003d10:	f001 fd20 	bl	8005754 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003d14:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4833      	ldr	r0, [pc, #204]	; (8003df0 <BSP_SDRAM_MspInit+0x1d8>)
 8003d22:	f001 fd17 	bl	8005754 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003d26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d30:	4619      	mov	r1, r3
 8003d32:	4830      	ldr	r0, [pc, #192]	; (8003df4 <BSP_SDRAM_MspInit+0x1dc>)
 8003d34:	f001 fd0e 	bl	8005754 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003d38:	f248 1333 	movw	r3, #33075	; 0x8133
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d42:	4619      	mov	r1, r3
 8003d44:	482c      	ldr	r0, [pc, #176]	; (8003df8 <BSP_SDRAM_MspInit+0x1e0>)
 8003d46:	f001 fd05 	bl	8005754 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003d4a:	2328      	movs	r3, #40	; 0x28
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d52:	4619      	mov	r1, r3
 8003d54:	4829      	ldr	r0, [pc, #164]	; (8003dfc <BSP_SDRAM_MspInit+0x1e4>)
 8003d56:	f001 fcfd 	bl	8005754 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003d60:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d62:	2280      	movs	r2, #128	; 0x80
 8003d64:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d74:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d76:	4b22      	ldr	r3, [pc, #136]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d7c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003d7e:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d84:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003d86:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003d8c:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d92:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003d9a:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003dac:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003dae:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <BSP_SDRAM_MspInit+0x1ec>)
 8003db0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003dbe:	4810      	ldr	r0, [pc, #64]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003dc0:	f000 fdd6 	bl	8004970 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003dc4:	480e      	ldr	r0, [pc, #56]	; (8003e00 <BSP_SDRAM_MspInit+0x1e8>)
 8003dc6:	f000 fd25 	bl	8004814 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	210f      	movs	r1, #15
 8003dce:	2038      	movs	r0, #56	; 0x38
 8003dd0:	f000 fbff 	bl	80045d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003dd4:	2038      	movs	r0, #56	; 0x38
 8003dd6:	f000 fc18 	bl	800460a <HAL_NVIC_EnableIRQ>
}
 8003dda:	bf00      	nop
 8003ddc:	3740      	adds	r7, #64	; 0x40
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40020800 	.word	0x40020800
 8003dec:	40020c00 	.word	0x40020c00
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40021400 	.word	0x40021400
 8003df8:	40021800 	.word	0x40021800
 8003dfc:	40021c00 	.word	0x40021c00
 8003e00:	20000704 	.word	0x20000704
 8003e04:	40026410 	.word	0x40026410

08003e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e0c:	2003      	movs	r0, #3
 8003e0e:	f000 fbd5 	bl	80045bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e12:	200f      	movs	r0, #15
 8003e14:	f000 f806 	bl	8003e24 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003e18:	f7fe f8d6 	bl	8001fc8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <HAL_InitTick+0x54>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_InitTick+0x58>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	4619      	mov	r1, r3
 8003e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fbef 	bl	8004626 <HAL_SYSTICK_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e00e      	b.n	8003e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d80a      	bhi.n	8003e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e58:	2200      	movs	r2, #0
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	f000 fbb7 	bl	80045d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e64:	4a06      	ldr	r2, [pc, #24]	; (8003e80 <HAL_InitTick+0x5c>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000004 	.word	0x20000004
 8003e7c:	20000018 	.word	0x20000018
 8003e80:	20000014 	.word	0x20000014

08003e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_IncTick+0x20>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_IncTick+0x24>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_IncTick+0x24>)
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000018 	.word	0x20000018
 8003ea8:	20004ccc 	.word	0x20004ccc

08003eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_GetTick+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20004ccc 	.word	0x20004ccc

08003ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ecc:	f7ff ffee 	bl	8003eac <HAL_GetTick>
 8003ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d005      	beq.n	8003eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_Delay+0x44>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eea:	bf00      	nop
 8003eec:	f7ff ffde 	bl	8003eac <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d8f7      	bhi.n	8003eec <HAL_Delay+0x28>
  {
  }
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000018 	.word	0x20000018

08003f0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e031      	b.n	8003f86 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe f874 	bl	8002018 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d116      	bne.n	8003f78 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_ADC_Init+0x84>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f964 	bl	8004228 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
 8003f76:	e001      	b.n	8003f7c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	ffffeefd 	.word	0xffffeefd

08003f94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x1c>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e12a      	b.n	8004206 <HAL_ADC_ConfigChannel+0x272>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b09      	cmp	r3, #9
 8003fbe:	d93a      	bls.n	8004036 <HAL_ADC_ConfigChannel+0xa2>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fc8:	d035      	beq.n	8004036 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68d9      	ldr	r1, [r3, #12]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	3b1e      	subs	r3, #30
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	400a      	ands	r2, r1
 8003fee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a87      	ldr	r2, [pc, #540]	; (8004214 <HAL_ADC_ConfigChannel+0x280>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10a      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68d9      	ldr	r1, [r3, #12]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	061a      	lsls	r2, r3, #24
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800400e:	e035      	b.n	800407c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	4618      	mov	r0, r3
 8004022:	4603      	mov	r3, r0
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4403      	add	r3, r0
 8004028:	3b1e      	subs	r3, #30
 800402a:	409a      	lsls	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004034:	e022      	b.n	800407c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6919      	ldr	r1, [r3, #16]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	2207      	movs	r2, #7
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43da      	mvns	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	400a      	ands	r2, r1
 8004058:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6919      	ldr	r1, [r3, #16]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	4618      	mov	r0, r3
 800406c:	4603      	mov	r3, r0
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4403      	add	r3, r0
 8004072:	409a      	lsls	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b06      	cmp	r3, #6
 8004082:	d824      	bhi.n	80040ce <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	3b05      	subs	r3, #5
 8004096:	221f      	movs	r2, #31
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43da      	mvns	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	400a      	ands	r2, r1
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	4618      	mov	r0, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	3b05      	subs	r3, #5
 80040c0:	fa00 f203 	lsl.w	r2, r0, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	635a      	str	r2, [r3, #52]	; 0x34
 80040cc:	e04c      	b.n	8004168 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d824      	bhi.n	8004120 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	3b23      	subs	r3, #35	; 0x23
 80040e8:	221f      	movs	r2, #31
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	400a      	ands	r2, r1
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	4618      	mov	r0, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	3b23      	subs	r3, #35	; 0x23
 8004112:	fa00 f203 	lsl.w	r2, r0, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
 800411e:	e023      	b.n	8004168 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3b41      	subs	r3, #65	; 0x41
 8004132:	221f      	movs	r2, #31
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43da      	mvns	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	400a      	ands	r2, r1
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	4618      	mov	r0, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	3b41      	subs	r3, #65	; 0x41
 800415c:	fa00 f203 	lsl.w	r2, r0, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2a      	ldr	r2, [pc, #168]	; (8004218 <HAL_ADC_ConfigChannel+0x284>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d10a      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x1f4>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800417a:	d105      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800417c:	4b27      	ldr	r3, [pc, #156]	; (800421c <HAL_ADC_ConfigChannel+0x288>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <HAL_ADC_ConfigChannel+0x288>)
 8004182:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004186:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <HAL_ADC_ConfigChannel+0x284>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d109      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x212>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b12      	cmp	r3, #18
 8004198:	d105      	bne.n	80041a6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_ADC_ConfigChannel+0x288>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	4a1f      	ldr	r2, [pc, #124]	; (800421c <HAL_ADC_ConfigChannel+0x288>)
 80041a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <HAL_ADC_ConfigChannel+0x284>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d125      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x268>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a17      	ldr	r2, [pc, #92]	; (8004214 <HAL_ADC_ConfigChannel+0x280>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <HAL_ADC_ConfigChannel+0x22e>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b11      	cmp	r3, #17
 80041c0:	d11c      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <HAL_ADC_ConfigChannel+0x288>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4a15      	ldr	r2, [pc, #84]	; (800421c <HAL_ADC_ConfigChannel+0x288>)
 80041c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a10      	ldr	r2, [pc, #64]	; (8004214 <HAL_ADC_ConfigChannel+0x280>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d111      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80041d8:	4b11      	ldr	r3, [pc, #68]	; (8004220 <HAL_ADC_ConfigChannel+0x28c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a11      	ldr	r2, [pc, #68]	; (8004224 <HAL_ADC_ConfigChannel+0x290>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	0c9a      	lsrs	r2, r3, #18
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80041ee:	e002      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f9      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	10000012 	.word	0x10000012
 8004218:	40012000 	.word	0x40012000
 800421c:	40012300 	.word	0x40012300
 8004220:	20000004 	.word	0x20000004
 8004224:	431bde83 	.word	0x431bde83

08004228 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004230:	4b78      	ldr	r3, [pc, #480]	; (8004414 <ADC_Init+0x1ec>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a77      	ldr	r2, [pc, #476]	; (8004414 <ADC_Init+0x1ec>)
 8004236:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800423a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800423c:	4b75      	ldr	r3, [pc, #468]	; (8004414 <ADC_Init+0x1ec>)
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4973      	ldr	r1, [pc, #460]	; (8004414 <ADC_Init+0x1ec>)
 8004246:	4313      	orrs	r3, r2
 8004248:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	021a      	lsls	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800427c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6899      	ldr	r1, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	4a58      	ldr	r2, [pc, #352]	; (8004418 <ADC_Init+0x1f0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d022      	beq.n	8004302 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6899      	ldr	r1, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6899      	ldr	r1, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	e00f      	b.n	8004322 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004320:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0202 	bic.w	r2, r2, #2
 8004330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	005a      	lsls	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800435e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800436e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	3b01      	subs	r3, #1
 800437c:	035a      	lsls	r2, r3, #13
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
 8004386:	e007      	b.n	8004398 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004396:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	051a      	lsls	r2, r3, #20
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6899      	ldr	r1, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043da:	025a      	lsls	r2, r3, #9
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6899      	ldr	r1, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	029a      	lsls	r2, r3, #10
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40012300 	.word	0x40012300
 8004418:	0f000001 	.word	0x0f000001

0800441c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <__NVIC_SetPriorityGrouping+0x40>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004438:	4013      	ands	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <__NVIC_SetPriorityGrouping+0x44>)
 8004446:	4313      	orrs	r3, r2
 8004448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800444a:	4a04      	ldr	r2, [pc, #16]	; (800445c <__NVIC_SetPriorityGrouping+0x40>)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	60d3      	str	r3, [r2, #12]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000ed00 	.word	0xe000ed00
 8004460:	05fa0000 	.word	0x05fa0000

08004464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004468:	4b04      	ldr	r3, [pc, #16]	; (800447c <__NVIC_GetPriorityGrouping+0x18>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	0a1b      	lsrs	r3, r3, #8
 800446e:	f003 0307 	and.w	r3, r3, #7
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	2b00      	cmp	r3, #0
 8004490:	db0b      	blt.n	80044aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	f003 021f 	and.w	r2, r3, #31
 8004498:	4907      	ldr	r1, [pc, #28]	; (80044b8 <__NVIC_EnableIRQ+0x38>)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2001      	movs	r0, #1
 80044a2:	fa00 f202 	lsl.w	r2, r0, r2
 80044a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	e000e100 	.word	0xe000e100

080044bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	6039      	str	r1, [r7, #0]
 80044c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	db0a      	blt.n	80044e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	490c      	ldr	r1, [pc, #48]	; (8004508 <__NVIC_SetPriority+0x4c>)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	0112      	lsls	r2, r2, #4
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	440b      	add	r3, r1
 80044e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044e4:	e00a      	b.n	80044fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4908      	ldr	r1, [pc, #32]	; (800450c <__NVIC_SetPriority+0x50>)
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	3b04      	subs	r3, #4
 80044f4:	0112      	lsls	r2, r2, #4
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	440b      	add	r3, r1
 80044fa:	761a      	strb	r2, [r3, #24]
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	e000e100 	.word	0xe000e100
 800450c:	e000ed00 	.word	0xe000ed00

08004510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f1c3 0307 	rsb	r3, r3, #7
 800452a:	2b04      	cmp	r3, #4
 800452c:	bf28      	it	cs
 800452e:	2304      	movcs	r3, #4
 8004530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3304      	adds	r3, #4
 8004536:	2b06      	cmp	r3, #6
 8004538:	d902      	bls.n	8004540 <NVIC_EncodePriority+0x30>
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	3b03      	subs	r3, #3
 800453e:	e000      	b.n	8004542 <NVIC_EncodePriority+0x32>
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	401a      	ands	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004558:	f04f 31ff 	mov.w	r1, #4294967295
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa01 f303 	lsl.w	r3, r1, r3
 8004562:	43d9      	mvns	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004568:	4313      	orrs	r3, r2
         );
}
 800456a:	4618      	mov	r0, r3
 800456c:	3724      	adds	r7, #36	; 0x24
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3b01      	subs	r3, #1
 8004584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004588:	d301      	bcc.n	800458e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800458a:	2301      	movs	r3, #1
 800458c:	e00f      	b.n	80045ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800458e:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <SysTick_Config+0x40>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3b01      	subs	r3, #1
 8004594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004596:	210f      	movs	r1, #15
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	f7ff ff8e 	bl	80044bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <SysTick_Config+0x40>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <SysTick_Config+0x40>)
 80045a8:	2207      	movs	r2, #7
 80045aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	e000e010 	.word	0xe000e010

080045bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff29 	bl	800441c <__NVIC_SetPriorityGrouping>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b086      	sub	sp, #24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	4603      	mov	r3, r0
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045e4:	f7ff ff3e 	bl	8004464 <__NVIC_GetPriorityGrouping>
 80045e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	6978      	ldr	r0, [r7, #20]
 80045f0:	f7ff ff8e 	bl	8004510 <NVIC_EncodePriority>
 80045f4:	4602      	mov	r2, r0
 80045f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff5d 	bl	80044bc <__NVIC_SetPriority>
}
 8004602:	bf00      	nop
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	4603      	mov	r3, r0
 8004612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff31 	bl	8004480 <__NVIC_EnableIRQ>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ffa2 	bl	8004578 <SysTick_Config>
 8004634:	4603      	mov	r3, r0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e054      	b.n	80046fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	7f5b      	ldrb	r3, [r3, #29]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fd fd32 	bl	80020cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	791b      	ldrb	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10c      	bne.n	8004690 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a22      	ldr	r2, [pc, #136]	; (8004704 <HAL_CRC_Init+0xc4>)
 800467c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0218 	bic.w	r2, r2, #24
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	e00c      	b.n	80046aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6899      	ldr	r1, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	461a      	mov	r2, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f834 	bl	8004708 <HAL_CRCEx_Polynomial_Set>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e028      	b.n	80046fc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	795b      	ldrb	r3, [r3, #5]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ba:	611a      	str	r2, [r3, #16]
 80046bc:	e004      	b.n	80046c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6912      	ldr	r2, [r2, #16]
 80046c6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699a      	ldr	r2, [r3, #24]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	04c11db7 	.word	0x04c11db7

08004708 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004718:	231f      	movs	r3, #31
 800471a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800471c:	bf00      	nop
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1e5a      	subs	r2, r3, #1
 8004722:	613a      	str	r2, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_CRCEx_Polynomial_Set+0x34>
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_CRCEx_Polynomial_Set+0x16>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b18      	cmp	r3, #24
 8004740:	d846      	bhi.n	80047d0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	080047d7 	.word	0x080047d7
 800474c:	080047d1 	.word	0x080047d1
 8004750:	080047d1 	.word	0x080047d1
 8004754:	080047d1 	.word	0x080047d1
 8004758:	080047d1 	.word	0x080047d1
 800475c:	080047d1 	.word	0x080047d1
 8004760:	080047d1 	.word	0x080047d1
 8004764:	080047d1 	.word	0x080047d1
 8004768:	080047c5 	.word	0x080047c5
 800476c:	080047d1 	.word	0x080047d1
 8004770:	080047d1 	.word	0x080047d1
 8004774:	080047d1 	.word	0x080047d1
 8004778:	080047d1 	.word	0x080047d1
 800477c:	080047d1 	.word	0x080047d1
 8004780:	080047d1 	.word	0x080047d1
 8004784:	080047d1 	.word	0x080047d1
 8004788:	080047b9 	.word	0x080047b9
 800478c:	080047d1 	.word	0x080047d1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d1 	.word	0x080047d1
 8004798:	080047d1 	.word	0x080047d1
 800479c:	080047d1 	.word	0x080047d1
 80047a0:	080047d1 	.word	0x080047d1
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047ad 	.word	0x080047ad
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d913      	bls.n	80047da <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047b6:	e010      	b.n	80047da <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b07      	cmp	r3, #7
 80047bc:	d90f      	bls.n	80047de <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047c2:	e00c      	b.n	80047de <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d90b      	bls.n	80047e2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047ce:	e008      	b.n	80047e2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	75fb      	strb	r3, [r7, #23]
      break;
 80047d4:	e006      	b.n	80047e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047d6:	bf00      	nop
 80047d8:	e004      	b.n	80047e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047e2:	bf00      	nop
  }
  if (status == HAL_OK)
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 0118 	bic.w	r1, r3, #24
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
}
 8004808:	4618      	mov	r0, r3
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004820:	f7ff fb44 	bl	8003eac <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e099      	b.n	8004964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004850:	e00f      	b.n	8004872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004852:	f7ff fb2b 	bl	8003eac <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b05      	cmp	r3, #5
 800485e:	d908      	bls.n	8004872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2203      	movs	r2, #3
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e078      	b.n	8004964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e8      	bne.n	8004852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	4b38      	ldr	r3, [pc, #224]	; (800496c <HAL_DMA_Init+0x158>)
 800488c:	4013      	ands	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800489e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d107      	bne.n	80048dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	4313      	orrs	r3, r2
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2b04      	cmp	r3, #4
 8004904:	d117      	bne.n	8004936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00e      	beq.n	8004936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fb03 	bl	8004f24 <DMA_CheckFifoParam>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004932:	2301      	movs	r3, #1
 8004934:	e016      	b.n	8004964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 faba 	bl	8004eb8 <DMA_CalcBaseAndBitshift>
 8004944:	4603      	mov	r3, r0
 8004946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	223f      	movs	r2, #63	; 0x3f
 800494e:	409a      	lsls	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	f010803f 	.word	0xf010803f

08004970 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e050      	b.n	8004a24 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d101      	bne.n	8004992 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800498e:	2302      	movs	r3, #2
 8004990:	e048      	b.n	8004a24 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2200      	movs	r2, #0
 80049b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2221      	movs	r2, #33	; 0x21
 80049d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fa70 	bl	8004eb8 <DMA_CalcBaseAndBitshift>
 80049d8:	4603      	mov	r3, r0
 80049da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e0:	223f      	movs	r2, #63	; 0x3f
 80049e2:	409a      	lsls	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_DMA_Start_IT+0x26>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e048      	b.n	8004ae4 <HAL_DMA_Start_IT+0xb8>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d137      	bne.n	8004ad6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f9ee 	bl	8004e5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a84:	223f      	movs	r2, #63	; 0x3f
 8004a86:	409a      	lsls	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0216 	orr.w	r2, r2, #22
 8004a9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004aaa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0208 	orr.w	r2, r2, #8
 8004ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e005      	b.n	8004ae2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d004      	beq.n	8004b0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2280      	movs	r2, #128	; 0x80
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e00c      	b.n	8004b24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2205      	movs	r2, #5
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004b3c:	4b92      	ldr	r3, [pc, #584]	; (8004d88 <HAL_DMA_IRQHandler+0x258>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a92      	ldr	r2, [pc, #584]	; (8004d8c <HAL_DMA_IRQHandler+0x25c>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0a9b      	lsrs	r3, r3, #10
 8004b48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01a      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0204 	bic.w	r2, r2, #4
 8004b82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b88:	2208      	movs	r2, #8
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	f043 0201 	orr.w	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d012      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f043 0202 	orr.w	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d012      	beq.n	8004c08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f043 0204 	orr.w	r2, r3, #4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d043      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d03c      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d018      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d024      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
 8004c5e:	e01f      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
 8004c70:	e016      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d107      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0208 	bic.w	r2, r2, #8
 8004c8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 808e 	beq.w	8004dce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8086 	beq.w	8004dce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d136      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0216 	bic.w	r2, r2, #22
 8004ce8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <HAL_DMA_IRQHandler+0x1da>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0208 	bic.w	r2, r2, #8
 8004d18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	223f      	movs	r2, #63	; 0x3f
 8004d20:	409a      	lsls	r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d07d      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	4798      	blx	r3
        }
        return;
 8004d46:	e078      	b.n	8004e3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01c      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d108      	bne.n	8004d76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d030      	beq.n	8004dce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
 8004d74:	e02b      	b.n	8004dce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d027      	beq.n	8004dce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
 8004d86:	e022      	b.n	8004dce <HAL_DMA_IRQHandler+0x29e>
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10f      	bne.n	8004dbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0210 	bic.w	r2, r2, #16
 8004dac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d032      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d022      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2205      	movs	r2, #5
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	60bb      	str	r3, [r7, #8]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d307      	bcc.n	8004e16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f2      	bne.n	8004dfa <HAL_DMA_IRQHandler+0x2ca>
 8004e14:	e000      	b.n	8004e18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004e16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
 8004e38:	e000      	b.n	8004e3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e3a:	bf00      	nop
    }
  }
}
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop

08004e44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d108      	bne.n	8004e9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e9a:	e007      	b.n	8004eac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3b10      	subs	r3, #16
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <DMA_CalcBaseAndBitshift+0x60>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ed2:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <DMA_CalcBaseAndBitshift+0x64>)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d908      	bls.n	8004ef8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <DMA_CalcBaseAndBitshift+0x68>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ef6:	e006      	b.n	8004f06 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b08      	ldr	r3, [pc, #32]	; (8004f20 <DMA_CalcBaseAndBitshift+0x68>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	aaaaaaab 	.word	0xaaaaaaab
 8004f1c:	0801362c 	.word	0x0801362c
 8004f20:	fffffc00 	.word	0xfffffc00

08004f24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11f      	bne.n	8004f7e <DMA_CheckFifoParam+0x5a>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d856      	bhi.n	8004ff2 <DMA_CheckFifoParam+0xce>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <DMA_CheckFifoParam+0x28>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6f 	.word	0x08004f6f
 8004f54:	08004f5d 	.word	0x08004f5d
 8004f58:	08004ff3 	.word	0x08004ff3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d046      	beq.n	8004ff6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6c:	e043      	b.n	8004ff6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f76:	d140      	bne.n	8004ffa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7c:	e03d      	b.n	8004ffa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	d121      	bne.n	8004fcc <DMA_CheckFifoParam+0xa8>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d837      	bhi.n	8004ffe <DMA_CheckFifoParam+0xda>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <DMA_CheckFifoParam+0x70>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fab 	.word	0x08004fab
 8004f9c:	08004fa5 	.word	0x08004fa5
 8004fa0:	08004fbd 	.word	0x08004fbd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa8:	e030      	b.n	800500c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d025      	beq.n	8005002 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fba:	e022      	b.n	8005002 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc4:	d11f      	bne.n	8005006 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fca:	e01c      	b.n	8005006 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d903      	bls.n	8004fda <DMA_CheckFifoParam+0xb6>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d003      	beq.n	8004fe0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fd8:	e018      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fde:	e015      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff0:	e00b      	b.n	800500a <DMA_CheckFifoParam+0xe6>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e00a      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e008      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e006      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8004ffe:	bf00      	nop
 8005000:	e004      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 8005002:	bf00      	nop
 8005004:	e002      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;   
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <DMA_CheckFifoParam+0xe8>
      break;
 800500a:	bf00      	nop
    }
  } 
  
  return status; 
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop

0800501c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e039      	b.n	80050a2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fd f862 	bl	800210c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	f023 0107 	bic.w	r1, r3, #7
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_DMA2D_Init+0x90>)
 8005084:	4013      	ands	r3, r2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68d1      	ldr	r1, [r2, #12]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	430b      	orrs	r3, r1
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	ffffc000 	.word	0xffffc000

080050b0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_DMA2D_Start+0x1c>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e018      	b.n	80050fe <HAL_DMA2D_Start+0x4e>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fa98 	bl	800561c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d056      	beq.n	80051d0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005122:	f7fe fec3 	bl	8003eac <HAL_GetTick>
 8005126:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005128:	e04b      	b.n	80051c2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005138:	2b00      	cmp	r3, #0
 800513a:	d023      	beq.n	8005184 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514a:	f043 0202 	orr.w	r2, r3, #2
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2221      	movs	r2, #33	; 0x21
 800516e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0a5      	b.n	80052d0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d01a      	beq.n	80051c2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800518c:	f7fe fe8e 	bl	8003eac <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d302      	bcc.n	80051a2 <HAL_DMA2D_PollForTransfer+0x9c>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	f043 0220 	orr.w	r2, r3, #32
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2203      	movs	r2, #3
 80051b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e086      	b.n	80052d0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ac      	beq.n	800512a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d061      	beq.n	80052b6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80051f2:	f7fe fe5b 	bl	8003eac <HAL_GetTick>
 80051f6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80051f8:	e056      	b.n	80052a8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02e      	beq.n	800526a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	f043 0204 	orr.w	r2, r3, #4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005230:	f043 0202 	orr.w	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2229      	movs	r2, #41	; 0x29
 8005254:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2204      	movs	r2, #4
 800525a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e032      	b.n	80052d0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d01a      	beq.n	80052a8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fe fe1b 	bl	8003eac <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <HAL_DMA2D_PollForTransfer+0x182>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528c:	f043 0220 	orr.w	r2, r3, #32
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2203      	movs	r2, #3
 8005298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e013      	b.n	80052d0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 0310 	and.w	r3, r3, #16
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0a1      	beq.n	80051fa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2212      	movs	r2, #18
 80052bc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d026      	beq.n	8005348 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d021      	beq.n	8005348 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005312:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	f043 0201 	orr.w	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2201      	movs	r2, #1
 8005326:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2204      	movs	r2, #4
 800532c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d026      	beq.n	80053a0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d021      	beq.n	80053a0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2220      	movs	r2, #32
 8005372:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	f043 0202 	orr.w	r2, r3, #2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2204      	movs	r2, #4
 8005384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d026      	beq.n	80053f8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d021      	beq.n	80053f8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053c2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2208      	movs	r2, #8
 80053ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	f043 0204 	orr.w	r2, r3, #4
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2204      	movs	r2, #4
 80053dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d013      	beq.n	800542a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00e      	beq.n	800542a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2204      	movs	r2, #4
 8005422:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f853 	bl	80054d0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d024      	beq.n	800547e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01f      	beq.n	800547e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800544c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2202      	movs	r2, #2
 8005454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01f      	beq.n	80054c8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01a      	beq.n	80054c8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054a0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2210      	movs	r2, #16
 80054a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f80e 	bl	80054e4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80054c8:	bf00      	nop
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_DMA2D_ConfigLayer+0x20>
 8005514:	2302      	movs	r3, #2
 8005516:	e079      	b.n	800560c <HAL_DMA2D_ConfigLayer+0x114>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	3318      	adds	r3, #24
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4413      	add	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005542:	4b35      	ldr	r3, [pc, #212]	; (8005618 <HAL_DMA2D_ConfigLayer+0x120>)
 8005544:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b0a      	cmp	r3, #10
 800554c:	d003      	beq.n	8005556 <HAL_DMA2D_ConfigLayer+0x5e>
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b09      	cmp	r3, #9
 8005554:	d107      	bne.n	8005566 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e005      	b.n	8005572 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d120      	bne.n	80055ba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	43db      	mvns	r3, r3
 8005582:	ea02 0103 	and.w	r1, r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	430a      	orrs	r2, r1
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b0a      	cmp	r3, #10
 80055a0:	d003      	beq.n	80055aa <HAL_DMA2D_ConfigLayer+0xb2>
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b09      	cmp	r3, #9
 80055a8:	d127      	bne.n	80055fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055b6:	629a      	str	r2, [r3, #40]	; 0x28
 80055b8:	e01f      	b.n	80055fa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	43db      	mvns	r3, r3
 80055c4:	ea02 0103 	and.w	r1, r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b0a      	cmp	r3, #10
 80055e2:	d003      	beq.n	80055ec <HAL_DMA2D_ConfigLayer+0xf4>
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b09      	cmp	r3, #9
 80055ea:	d106      	bne.n	80055fa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055f8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	ff03000f 	.word	0xff03000f

0800561c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800561c:	b480      	push	{r7}
 800561e:	b08b      	sub	sp, #44	; 0x2c
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005630:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	041a      	lsls	r2, r3, #16
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	431a      	orrs	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005654:	d174      	bne.n	8005740 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800565c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005664:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800566c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	431a      	orrs	r2, r3
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	4313      	orrs	r3, r2
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
 800568c:	e053      	b.n	8005736 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d106      	bne.n	80056a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	4313      	orrs	r3, r2
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
 80056a2:	e048      	b.n	8005736 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d111      	bne.n	80056d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	0cdb      	lsrs	r3, r3, #19
 80056b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	0a9b      	lsrs	r3, r3, #10
 80056b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	08db      	lsrs	r3, r3, #3
 80056bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	02db      	lsls	r3, r3, #11
 80056c6:	4313      	orrs	r3, r2
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	e032      	b.n	8005736 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d117      	bne.n	8005708 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	0fdb      	lsrs	r3, r3, #31
 80056dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	0cdb      	lsrs	r3, r3, #19
 80056e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	0adb      	lsrs	r3, r3, #11
 80056e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	08db      	lsrs	r3, r3, #3
 80056ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	029b      	lsls	r3, r3, #10
 80056f8:	431a      	orrs	r2, r3
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	03db      	lsls	r3, r3, #15
 80056fe:	4313      	orrs	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
 8005706:	e016      	b.n	8005736 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	0f1b      	lsrs	r3, r3, #28
 800570c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	0d1b      	lsrs	r3, r3, #20
 8005712:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	0b1b      	lsrs	r3, r3, #12
 8005718:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	011a      	lsls	r2, r3, #4
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	431a      	orrs	r2, r3
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	031b      	lsls	r3, r3, #12
 800572e:	4313      	orrs	r3, r2
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800573e:	e003      	b.n	8005748 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	60da      	str	r2, [r3, #12]
}
 8005748:	bf00      	nop
 800574a:	372c      	adds	r7, #44	; 0x2c
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005754:	b480      	push	{r7}
 8005756:	b089      	sub	sp, #36	; 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e175      	b.n	8005a60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005774:	2201      	movs	r2, #1
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	429a      	cmp	r2, r3
 800578e:	f040 8164 	bne.w	8005a5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d00b      	beq.n	80057b2 <HAL_GPIO_Init+0x5e>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d007      	beq.n	80057b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80057a6:	2b11      	cmp	r3, #17
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	2b12      	cmp	r3, #18
 80057b0:	d130      	bne.n	8005814 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	2203      	movs	r2, #3
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	4013      	ands	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4313      	orrs	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057e8:	2201      	movs	r2, #1
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	f003 0201 	and.w	r2, r3, #1
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	2203      	movs	r2, #3
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d003      	beq.n	8005854 <HAL_GPIO_Init+0x100>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b12      	cmp	r3, #18
 8005852:	d123      	bne.n	800589c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	08da      	lsrs	r2, r3, #3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3208      	adds	r2, #8
 800585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4013      	ands	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	08da      	lsrs	r2, r3, #3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3208      	adds	r2, #8
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	2203      	movs	r2, #3
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	43db      	mvns	r3, r3
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4013      	ands	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 0203 	and.w	r2, r3, #3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80be 	beq.w	8005a5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058de:	4b66      	ldr	r3, [pc, #408]	; (8005a78 <HAL_GPIO_Init+0x324>)
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	4a65      	ldr	r2, [pc, #404]	; (8005a78 <HAL_GPIO_Init+0x324>)
 80058e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058e8:	6453      	str	r3, [r2, #68]	; 0x44
 80058ea:	4b63      	ldr	r3, [pc, #396]	; (8005a78 <HAL_GPIO_Init+0x324>)
 80058ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80058f6:	4a61      	ldr	r2, [pc, #388]	; (8005a7c <HAL_GPIO_Init+0x328>)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	089b      	lsrs	r3, r3, #2
 80058fc:	3302      	adds	r3, #2
 80058fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005902:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	220f      	movs	r2, #15
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43db      	mvns	r3, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a58      	ldr	r2, [pc, #352]	; (8005a80 <HAL_GPIO_Init+0x32c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d037      	beq.n	8005992 <HAL_GPIO_Init+0x23e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a57      	ldr	r2, [pc, #348]	; (8005a84 <HAL_GPIO_Init+0x330>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d031      	beq.n	800598e <HAL_GPIO_Init+0x23a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a56      	ldr	r2, [pc, #344]	; (8005a88 <HAL_GPIO_Init+0x334>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02b      	beq.n	800598a <HAL_GPIO_Init+0x236>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a55      	ldr	r2, [pc, #340]	; (8005a8c <HAL_GPIO_Init+0x338>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d025      	beq.n	8005986 <HAL_GPIO_Init+0x232>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a54      	ldr	r2, [pc, #336]	; (8005a90 <HAL_GPIO_Init+0x33c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01f      	beq.n	8005982 <HAL_GPIO_Init+0x22e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a53      	ldr	r2, [pc, #332]	; (8005a94 <HAL_GPIO_Init+0x340>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d019      	beq.n	800597e <HAL_GPIO_Init+0x22a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a52      	ldr	r2, [pc, #328]	; (8005a98 <HAL_GPIO_Init+0x344>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <HAL_GPIO_Init+0x226>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a51      	ldr	r2, [pc, #324]	; (8005a9c <HAL_GPIO_Init+0x348>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00d      	beq.n	8005976 <HAL_GPIO_Init+0x222>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a50      	ldr	r2, [pc, #320]	; (8005aa0 <HAL_GPIO_Init+0x34c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d007      	beq.n	8005972 <HAL_GPIO_Init+0x21e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a4f      	ldr	r2, [pc, #316]	; (8005aa4 <HAL_GPIO_Init+0x350>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d101      	bne.n	800596e <HAL_GPIO_Init+0x21a>
 800596a:	2309      	movs	r3, #9
 800596c:	e012      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800596e:	230a      	movs	r3, #10
 8005970:	e010      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005972:	2308      	movs	r3, #8
 8005974:	e00e      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005976:	2307      	movs	r3, #7
 8005978:	e00c      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800597a:	2306      	movs	r3, #6
 800597c:	e00a      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800597e:	2305      	movs	r3, #5
 8005980:	e008      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005982:	2304      	movs	r3, #4
 8005984:	e006      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005986:	2303      	movs	r3, #3
 8005988:	e004      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800598a:	2302      	movs	r3, #2
 800598c:	e002      	b.n	8005994 <HAL_GPIO_Init+0x240>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <HAL_GPIO_Init+0x240>
 8005992:	2300      	movs	r3, #0
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	f002 0203 	and.w	r2, r2, #3
 800599a:	0092      	lsls	r2, r2, #2
 800599c:	4093      	lsls	r3, r2
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059a4:	4935      	ldr	r1, [pc, #212]	; (8005a7c <HAL_GPIO_Init+0x328>)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	089b      	lsrs	r3, r3, #2
 80059aa:	3302      	adds	r3, #2
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059b2:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059dc:	4b32      	ldr	r3, [pc, #200]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a00:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a06:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a2a:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <HAL_GPIO_Init+0x354>)
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b0f      	cmp	r3, #15
 8005a64:	f67f ae86 	bls.w	8005774 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	3724      	adds	r7, #36	; 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	40013800 	.word	0x40013800
 8005a80:	40020000 	.word	0x40020000
 8005a84:	40020400 	.word	0x40020400
 8005a88:	40020800 	.word	0x40020800
 8005a8c:	40020c00 	.word	0x40020c00
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40021400 	.word	0x40021400
 8005a98:	40021800 	.word	0x40021800
 8005a9c:	40021c00 	.word	0x40021c00
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	40022400 	.word	0x40022400
 8005aa8:	40013c00 	.word	0x40013c00

08005aac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
 8005ac8:	e001      	b.n	8005ace <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	807b      	strh	r3, [r7, #2]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005aec:	787b      	ldrb	r3, [r7, #1]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005af2:	887a      	ldrh	r2, [r7, #2]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005af8:	e003      	b.n	8005b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005afa:	887b      	ldrh	r3, [r7, #2]
 8005afc:	041a      	lsls	r2, r3, #16
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	619a      	str	r2, [r3, #24]
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e0bf      	b.n	8005ca2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc fb0e 	bl	8002158 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b52:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6899      	ldr	r1, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b4a      	ldr	r3, [pc, #296]	; (8005cac <HAL_LTDC_Init+0x19c>)
 8005b84:	400b      	ands	r3, r1
 8005b86:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68d9      	ldr	r1, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <HAL_LTDC_Init+0x19c>)
 8005bb2:	400b      	ands	r3, r1
 8005bb4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68d9      	ldr	r1, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6919      	ldr	r1, [r3, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b33      	ldr	r3, [pc, #204]	; (8005cac <HAL_LTDC_Init+0x19c>)
 8005be0:	400b      	ands	r3, r1
 8005be2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	041b      	lsls	r3, r3, #16
 8005bea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6919      	ldr	r1, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6959      	ldr	r1, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b27      	ldr	r3, [pc, #156]	; (8005cac <HAL_LTDC_Init+0x19c>)
 8005c0e:	400b      	ands	r3, r1
 8005c10:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	041b      	lsls	r3, r3, #16
 8005c18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6959      	ldr	r1, [r3, #20]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0206 	orr.w	r2, r2, #6
 8005c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	f000f800 	.word	0xf000f800

08005cb0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d023      	beq.n	8005d1a <HAL_LTDC_IRQHandler+0x6a>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01e      	beq.n	8005d1a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0204 	bic.w	r2, r2, #4
 8005cea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2204      	movs	r2, #4
 8005d08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f86f 	bl	8005df8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d023      	beq.n	8005d6c <HAL_LTDC_IRQHandler+0xbc>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01e      	beq.n	8005d6c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0202 	bic.w	r2, r2, #2
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2202      	movs	r2, #2
 8005d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d4c:	f043 0202 	orr.w	r2, r3, #2
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2204      	movs	r2, #4
 8005d5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f846 	bl	8005df8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01b      	beq.n	8005dae <HAL_LTDC_IRQHandler+0xfe>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d016      	beq.n	8005dae <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2201      	movs	r2, #1
 8005d96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f82f 	bl	8005e0c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01b      	beq.n	8005df0 <HAL_LTDC_IRQHandler+0x140>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d016      	beq.n	8005df0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0208 	bic.w	r2, r2, #8
 8005dd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f818 	bl	8005e20 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005df0:	bf00      	nop
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e34:	b5b0      	push	{r4, r5, r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_LTDC_ConfigLayer+0x1a>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e02c      	b.n	8005ea8 <HAL_LTDC_ConfigLayer+0x74>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2134      	movs	r1, #52	; 0x34
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	4413      	add	r3, r2
 8005e6a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f855 	bl	8005f38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2201      	movs	r2, #1
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bdb0      	pop	{r4, r5, r7, pc}

08005eb0 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_LTDC_SetAlpha+0x1a>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e024      	b.n	8005f14 <HAL_LTDC_SetAlpha+0x64>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2234      	movs	r2, #52	; 0x34
 8005ede:	fb02 f303 	mul.w	r3, r2, r3
 8005ee2:	3338      	adds	r3, #56	; 0x38
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6979      	ldr	r1, [r7, #20]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f81f 	bl	8005f38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2201      	movs	r2, #1
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f2a:	b2db      	uxtb	r3, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b089      	sub	sp, #36	; 0x24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f54:	4413      	add	r3, r2
 8005f56:	041b      	lsls	r3, r3, #16
 8005f58:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	01db      	lsls	r3, r3, #7
 8005f64:	4413      	add	r3, r2
 8005f66:	3384      	adds	r3, #132	; 0x84
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	4611      	mov	r1, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	01d2      	lsls	r2, r2, #7
 8005f74:	440a      	add	r2, r1
 8005f76:	3284      	adds	r2, #132	; 0x84
 8005f78:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f7c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8e:	4413      	add	r3, r2
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	01db      	lsls	r3, r3, #7
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3384      	adds	r3, #132	; 0x84
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fb6:	4413      	add	r3, r2
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	01db      	lsls	r3, r3, #7
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3384      	adds	r3, #132	; 0x84
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	01d2      	lsls	r2, r2, #7
 8005fd6:	440a      	add	r2, r1
 8005fd8:	3284      	adds	r2, #132	; 0x84
 8005fda:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005fde:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fee:	4413      	add	r3, r2
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	01db      	lsls	r3, r3, #7
 8005ffc:	440b      	add	r3, r1
 8005ffe:	3384      	adds	r3, #132	; 0x84
 8006000:	4619      	mov	r1, r3
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4313      	orrs	r3, r2
 8006006:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	01db      	lsls	r3, r3, #7
 8006012:	4413      	add	r3, r2
 8006014:	3384      	adds	r3, #132	; 0x84
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	4611      	mov	r1, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	01d2      	lsls	r2, r2, #7
 8006022:	440a      	add	r2, r1
 8006024:	3284      	adds	r2, #132	; 0x84
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	461a      	mov	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	01db      	lsls	r3, r3, #7
 8006036:	4413      	add	r3, r2
 8006038:	3384      	adds	r3, #132	; 0x84
 800603a:	461a      	mov	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	061b      	lsls	r3, r3, #24
 800605c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	01db      	lsls	r3, r3, #7
 8006068:	4413      	add	r3, r2
 800606a:	3384      	adds	r3, #132	; 0x84
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	4413      	add	r3, r2
 800607a:	3384      	adds	r3, #132	; 0x84
 800607c:	461a      	mov	r2, r3
 800607e:	2300      	movs	r3, #0
 8006080:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006088:	461a      	mov	r2, r3
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	431a      	orrs	r2, r3
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	431a      	orrs	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4619      	mov	r1, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	440b      	add	r3, r1
 800609e:	3384      	adds	r3, #132	; 0x84
 80060a0:	4619      	mov	r1, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	01db      	lsls	r3, r3, #7
 80060b2:	4413      	add	r3, r2
 80060b4:	3384      	adds	r3, #132	; 0x84
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	4611      	mov	r1, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	01d2      	lsls	r2, r2, #7
 80060c2:	440a      	add	r2, r1
 80060c4:	3284      	adds	r2, #132	; 0x84
 80060c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	01db      	lsls	r3, r3, #7
 80060d6:	4413      	add	r3, r2
 80060d8:	3384      	adds	r3, #132	; 0x84
 80060da:	461a      	mov	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	01db      	lsls	r3, r3, #7
 80060ec:	4413      	add	r3, r2
 80060ee:	3384      	adds	r3, #132	; 0x84
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	01db      	lsls	r3, r3, #7
 80060fc:	440b      	add	r3, r1
 80060fe:	3384      	adds	r3, #132	; 0x84
 8006100:	4619      	mov	r1, r3
 8006102:	4b58      	ldr	r3, [pc, #352]	; (8006264 <LTDC_SetConfig+0x32c>)
 8006104:	4013      	ands	r3, r2
 8006106:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	68f9      	ldr	r1, [r7, #12]
 8006112:	6809      	ldr	r1, [r1, #0]
 8006114:	4608      	mov	r0, r1
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	01c9      	lsls	r1, r1, #7
 800611a:	4401      	add	r1, r0
 800611c:	3184      	adds	r1, #132	; 0x84
 800611e:	4313      	orrs	r3, r2
 8006120:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	01db      	lsls	r3, r3, #7
 800612c:	4413      	add	r3, r2
 800612e:	3384      	adds	r3, #132	; 0x84
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	01db      	lsls	r3, r3, #7
 800613c:	4413      	add	r3, r2
 800613e:	3384      	adds	r3, #132	; 0x84
 8006140:	461a      	mov	r2, r3
 8006142:	2300      	movs	r3, #0
 8006144:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	01db      	lsls	r3, r3, #7
 8006150:	4413      	add	r3, r2
 8006152:	3384      	adds	r3, #132	; 0x84
 8006154:	461a      	mov	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006164:	2304      	movs	r3, #4
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	e01b      	b.n	80061a2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d102      	bne.n	8006178 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006172:	2303      	movs	r3, #3
 8006174:	61fb      	str	r3, [r7, #28]
 8006176:	e014      	b.n	80061a2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b04      	cmp	r3, #4
 800617e:	d00b      	beq.n	8006198 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006184:	2b02      	cmp	r3, #2
 8006186:	d007      	beq.n	8006198 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800618c:	2b03      	cmp	r3, #3
 800618e:	d003      	beq.n	8006198 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006194:	2b07      	cmp	r3, #7
 8006196:	d102      	bne.n	800619e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006198:	2302      	movs	r3, #2
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	e001      	b.n	80061a2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800619e:	2301      	movs	r3, #1
 80061a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	01db      	lsls	r3, r3, #7
 80061ac:	4413      	add	r3, r2
 80061ae:	3384      	adds	r3, #132	; 0x84
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	4611      	mov	r1, r2
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	01d2      	lsls	r2, r2, #7
 80061bc:	440a      	add	r2, r1
 80061be:	3284      	adds	r2, #132	; 0x84
 80061c0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80061c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	041a      	lsls	r2, r3, #16
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6859      	ldr	r1, [r3, #4]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	1acb      	subs	r3, r1, r3
 80061dc:	69f9      	ldr	r1, [r7, #28]
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	3303      	adds	r3, #3
 80061e4:	68f9      	ldr	r1, [r7, #12]
 80061e6:	6809      	ldr	r1, [r1, #0]
 80061e8:	4608      	mov	r0, r1
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	01c9      	lsls	r1, r1, #7
 80061ee:	4401      	add	r1, r0
 80061f0:	3184      	adds	r1, #132	; 0x84
 80061f2:	4313      	orrs	r3, r2
 80061f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	01db      	lsls	r3, r3, #7
 8006200:	4413      	add	r3, r2
 8006202:	3384      	adds	r3, #132	; 0x84
 8006204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4619      	mov	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	01db      	lsls	r3, r3, #7
 8006210:	440b      	add	r3, r1
 8006212:	3384      	adds	r3, #132	; 0x84
 8006214:	4619      	mov	r1, r3
 8006216:	4b14      	ldr	r3, [pc, #80]	; (8006268 <LTDC_SetConfig+0x330>)
 8006218:	4013      	ands	r3, r2
 800621a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	01db      	lsls	r3, r3, #7
 8006226:	4413      	add	r3, r2
 8006228:	3384      	adds	r3, #132	; 0x84
 800622a:	461a      	mov	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	01db      	lsls	r3, r3, #7
 800623c:	4413      	add	r3, r2
 800623e:	3384      	adds	r3, #132	; 0x84
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	4611      	mov	r1, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	01d2      	lsls	r2, r2, #7
 800624c:	440a      	add	r2, r1
 800624e:	3284      	adds	r2, #132	; 0x84
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	6013      	str	r3, [r2, #0]
}
 8006256:	bf00      	nop
 8006258:	3724      	adds	r7, #36	; 0x24
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	fffff8f8 	.word	0xfffff8f8
 8006268:	fffff800 	.word	0xfffff800

0800626c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006270:	4b05      	ldr	r3, [pc, #20]	; (8006288 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a04      	ldr	r2, [pc, #16]	; (8006288 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627a:	6013      	str	r3, [r2, #0]
}
 800627c:	bf00      	nop
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40007000 	.word	0x40007000

0800628c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006296:	4b23      	ldr	r3, [pc, #140]	; (8006324 <HAL_PWREx_EnableOverDrive+0x98>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	4a22      	ldr	r2, [pc, #136]	; (8006324 <HAL_PWREx_EnableOverDrive+0x98>)
 800629c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a0:	6413      	str	r3, [r2, #64]	; 0x40
 80062a2:	4b20      	ldr	r3, [pc, #128]	; (8006324 <HAL_PWREx_EnableOverDrive+0x98>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062ae:	4b1e      	ldr	r3, [pc, #120]	; (8006328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1d      	ldr	r2, [pc, #116]	; (8006328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062ba:	f7fd fdf7 	bl	8003eac <HAL_GetTick>
 80062be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062c0:	e009      	b.n	80062d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062c2:	f7fd fdf3 	bl	8003eac <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d0:	d901      	bls.n	80062d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e022      	b.n	800631c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062d6:	4b14      	ldr	r3, [pc, #80]	; (8006328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e2:	d1ee      	bne.n	80062c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062e4:	4b10      	ldr	r3, [pc, #64]	; (8006328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a0f      	ldr	r2, [pc, #60]	; (8006328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062f0:	f7fd fddc 	bl	8003eac <HAL_GetTick>
 80062f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062f6:	e009      	b.n	800630c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062f8:	f7fd fdd8 	bl	8003eac <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006306:	d901      	bls.n	800630c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e007      	b.n	800631c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <HAL_PWREx_EnableOverDrive+0x9c>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006318:	d1ee      	bne.n	80062f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40023800 	.word	0x40023800
 8006328:	40007000 	.word	0x40007000

0800632c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af02      	add	r7, sp, #8
 8006332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006334:	f7fd fdba 	bl	8003eac <HAL_GetTick>
 8006338:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e067      	b.n	8006414 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7fb ffc5 	bl	80022e8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800635e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f85e 	bl	8006424 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	3b01      	subs	r3, #1
 8006378:	021a      	lsls	r2, r3, #8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	2120      	movs	r1, #32
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f856 	bl	8006440 <QSPI_WaitFlagStateUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006398:	7afb      	ldrb	r3, [r7, #11]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d135      	bne.n	800640a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	4b1d      	ldr	r3, [pc, #116]	; (800641c <HAL_QSPI_Init+0xf0>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6852      	ldr	r2, [r2, #4]
 80063ac:	0611      	lsls	r1, r2, #24
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68d2      	ldr	r2, [r2, #12]
 80063b2:	4311      	orrs	r1, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	69d2      	ldr	r2, [r2, #28]
 80063b8:	4311      	orrs	r1, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6a12      	ldr	r2, [r2, #32]
 80063be:	4311      	orrs	r1, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	4b14      	ldr	r3, [pc, #80]	; (8006420 <HAL_QSPI_Init+0xf4>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6912      	ldr	r2, [r2, #16]
 80063d6:	0411      	lsls	r1, r2, #16
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6952      	ldr	r2, [r2, #20]
 80063dc:	4311      	orrs	r1, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6992      	ldr	r2, [r2, #24]
 80063e2:	4311      	orrs	r1, r2
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006412:	7afb      	ldrb	r3, [r7, #11]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	00ffff2f 	.word	0x00ffff2f
 8006420:	ffe0f8fe 	.word	0xffe0f8fe

08006424 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006450:	e01a      	b.n	8006488 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d016      	beq.n	8006488 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645a:	f7fd fd27 	bl	8003eac <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2204      	movs	r2, #4
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647c:	f043 0201 	orr.w	r2, r3, #1
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e00e      	b.n	80064a6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d1d6      	bne.n	8006452 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80064b8:	2300      	movs	r3, #0
 80064ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e291      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8087 	beq.w	80065e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064d4:	4b96      	ldr	r3, [pc, #600]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 030c 	and.w	r3, r3, #12
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d00c      	beq.n	80064fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064e0:	4b93      	ldr	r3, [pc, #588]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 030c 	and.w	r3, r3, #12
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d112      	bne.n	8006512 <HAL_RCC_OscConfig+0x62>
 80064ec:	4b90      	ldr	r3, [pc, #576]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064f8:	d10b      	bne.n	8006512 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fa:	4b8d      	ldr	r3, [pc, #564]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d06c      	beq.n	80065e0 <HAL_RCC_OscConfig+0x130>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d168      	bne.n	80065e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e26b      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651a:	d106      	bne.n	800652a <HAL_RCC_OscConfig+0x7a>
 800651c:	4b84      	ldr	r3, [pc, #528]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a83      	ldr	r2, [pc, #524]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	e02e      	b.n	8006588 <HAL_RCC_OscConfig+0xd8>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10c      	bne.n	800654c <HAL_RCC_OscConfig+0x9c>
 8006532:	4b7f      	ldr	r3, [pc, #508]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a7e      	ldr	r2, [pc, #504]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	4b7c      	ldr	r3, [pc, #496]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a7b      	ldr	r2, [pc, #492]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	e01d      	b.n	8006588 <HAL_RCC_OscConfig+0xd8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006554:	d10c      	bne.n	8006570 <HAL_RCC_OscConfig+0xc0>
 8006556:	4b76      	ldr	r3, [pc, #472]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a75      	ldr	r2, [pc, #468]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800655c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	4b73      	ldr	r3, [pc, #460]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a72      	ldr	r2, [pc, #456]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	e00b      	b.n	8006588 <HAL_RCC_OscConfig+0xd8>
 8006570:	4b6f      	ldr	r3, [pc, #444]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a6e      	ldr	r2, [pc, #440]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	4b6c      	ldr	r3, [pc, #432]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a6b      	ldr	r2, [pc, #428]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d013      	beq.n	80065b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fd fc8c 	bl	8003eac <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7fd fc88 	bl	8003eac <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	; 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e21f      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065aa:	4b61      	ldr	r3, [pc, #388]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCC_OscConfig+0xe8>
 80065b6:	e014      	b.n	80065e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fd fc78 	bl	8003eac <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c0:	f7fd fc74 	bl	8003eac <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b64      	cmp	r3, #100	; 0x64
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e20b      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065d2:	4b57      	ldr	r3, [pc, #348]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x110>
 80065de:	e000      	b.n	80065e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d069      	beq.n	80066c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065ee:	4b50      	ldr	r3, [pc, #320]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 030c 	and.w	r3, r3, #12
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065fa:	4b4d      	ldr	r3, [pc, #308]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 030c 	and.w	r3, r3, #12
 8006602:	2b08      	cmp	r3, #8
 8006604:	d11c      	bne.n	8006640 <HAL_RCC_OscConfig+0x190>
 8006606:	4b4a      	ldr	r3, [pc, #296]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d116      	bne.n	8006640 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006612:	4b47      	ldr	r3, [pc, #284]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <HAL_RCC_OscConfig+0x17a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d001      	beq.n	800662a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e1df      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800662a:	4b41      	ldr	r3, [pc, #260]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	493d      	ldr	r1, [pc, #244]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800663a:	4313      	orrs	r3, r2
 800663c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800663e:	e040      	b.n	80066c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d023      	beq.n	8006690 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006648:	4b39      	ldr	r3, [pc, #228]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a38      	ldr	r2, [pc, #224]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006654:	f7fd fc2a 	bl	8003eac <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800665c:	f7fd fc26 	bl	8003eac <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e1bd      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800666e:	4b30      	ldr	r3, [pc, #192]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f0      	beq.n	800665c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800667a:	4b2d      	ldr	r3, [pc, #180]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	4929      	ldr	r1, [pc, #164]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800668a:	4313      	orrs	r3, r2
 800668c:	600b      	str	r3, [r1, #0]
 800668e:	e018      	b.n	80066c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006690:	4b27      	ldr	r3, [pc, #156]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a26      	ldr	r2, [pc, #152]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800669c:	f7fd fc06 	bl	8003eac <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066a4:	f7fd fc02 	bl	8003eac <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e199      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066b6:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f0      	bne.n	80066a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d038      	beq.n	8006740 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d019      	beq.n	800670a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066d6:	4b16      	ldr	r3, [pc, #88]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80066d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066da:	4a15      	ldr	r2, [pc, #84]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e2:	f7fd fbe3 	bl	8003eac <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ea:	f7fd fbdf 	bl	8003eac <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e176      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fc:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 80066fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <HAL_RCC_OscConfig+0x23a>
 8006708:	e01a      	b.n	8006740 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 800670c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670e:	4a08      	ldr	r2, [pc, #32]	; (8006730 <HAL_RCC_OscConfig+0x280>)
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006716:	f7fd fbc9 	bl	8003eac <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800671c:	e00a      	b.n	8006734 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800671e:	f7fd fbc5 	bl	8003eac <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d903      	bls.n	8006734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e15c      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
 8006730:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006734:	4b91      	ldr	r3, [pc, #580]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1ee      	bne.n	800671e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80a4 	beq.w	8006896 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800674e:	4b8b      	ldr	r3, [pc, #556]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10d      	bne.n	8006776 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800675a:	4b88      	ldr	r3, [pc, #544]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	4a87      	ldr	r2, [pc, #540]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006764:	6413      	str	r3, [r2, #64]	; 0x40
 8006766:	4b85      	ldr	r3, [pc, #532]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676e:	60bb      	str	r3, [r7, #8]
 8006770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006776:	4b82      	ldr	r3, [pc, #520]	; (8006980 <HAL_RCC_OscConfig+0x4d0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677e:	2b00      	cmp	r3, #0
 8006780:	d118      	bne.n	80067b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006782:	4b7f      	ldr	r3, [pc, #508]	; (8006980 <HAL_RCC_OscConfig+0x4d0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a7e      	ldr	r2, [pc, #504]	; (8006980 <HAL_RCC_OscConfig+0x4d0>)
 8006788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678e:	f7fd fb8d 	bl	8003eac <HAL_GetTick>
 8006792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006796:	f7fd fb89 	bl	8003eac <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b64      	cmp	r3, #100	; 0x64
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e120      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a8:	4b75      	ldr	r3, [pc, #468]	; (8006980 <HAL_RCC_OscConfig+0x4d0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d106      	bne.n	80067ca <HAL_RCC_OscConfig+0x31a>
 80067bc:	4b6f      	ldr	r3, [pc, #444]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80067be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c0:	4a6e      	ldr	r2, [pc, #440]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	6713      	str	r3, [r2, #112]	; 0x70
 80067c8:	e02d      	b.n	8006826 <HAL_RCC_OscConfig+0x376>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10c      	bne.n	80067ec <HAL_RCC_OscConfig+0x33c>
 80067d2:	4b6a      	ldr	r3, [pc, #424]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	4a69      	ldr	r2, [pc, #420]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	6713      	str	r3, [r2, #112]	; 0x70
 80067de:	4b67      	ldr	r3, [pc, #412]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4a66      	ldr	r2, [pc, #408]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80067e4:	f023 0304 	bic.w	r3, r3, #4
 80067e8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ea:	e01c      	b.n	8006826 <HAL_RCC_OscConfig+0x376>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b05      	cmp	r3, #5
 80067f2:	d10c      	bne.n	800680e <HAL_RCC_OscConfig+0x35e>
 80067f4:	4b61      	ldr	r3, [pc, #388]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80067f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f8:	4a60      	ldr	r2, [pc, #384]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80067fa:	f043 0304 	orr.w	r3, r3, #4
 80067fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006800:	4b5e      	ldr	r3, [pc, #376]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006804:	4a5d      	ldr	r2, [pc, #372]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	6713      	str	r3, [r2, #112]	; 0x70
 800680c:	e00b      	b.n	8006826 <HAL_RCC_OscConfig+0x376>
 800680e:	4b5b      	ldr	r3, [pc, #364]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	4a5a      	ldr	r2, [pc, #360]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	6713      	str	r3, [r2, #112]	; 0x70
 800681a:	4b58      	ldr	r3, [pc, #352]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	4a57      	ldr	r2, [pc, #348]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006820:	f023 0304 	bic.w	r3, r3, #4
 8006824:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d015      	beq.n	800685a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682e:	f7fd fb3d 	bl	8003eac <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006834:	e00a      	b.n	800684c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fd fb39 	bl	8003eac <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e0ce      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800684c:	4b4b      	ldr	r3, [pc, #300]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ee      	beq.n	8006836 <HAL_RCC_OscConfig+0x386>
 8006858:	e014      	b.n	8006884 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685a:	f7fd fb27 	bl	8003eac <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006860:	e00a      	b.n	8006878 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fd fb23 	bl	8003eac <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e0b8      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006878:	4b40      	ldr	r3, [pc, #256]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1ee      	bne.n	8006862 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688a:	4b3c      	ldr	r3, [pc, #240]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	4a3b      	ldr	r2, [pc, #236]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006894:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a4 	beq.w	80069e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068a0:	4b36      	ldr	r3, [pc, #216]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 030c 	and.w	r3, r3, #12
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d06b      	beq.n	8006984 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d149      	bne.n	8006948 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b4:	4b31      	ldr	r3, [pc, #196]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a30      	ldr	r2, [pc, #192]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80068ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fd faf4 	bl	8003eac <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fd faf0 	bl	8003eac <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e087      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068da:	4b28      	ldr	r3, [pc, #160]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69da      	ldr	r2, [r3, #28]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	019b      	lsls	r3, r3, #6
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	3b01      	subs	r3, #1
 8006900:	041b      	lsls	r3, r3, #16
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	061b      	lsls	r3, r3, #24
 800690a:	4313      	orrs	r3, r2
 800690c:	4a1b      	ldr	r2, [pc, #108]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800690e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006912:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006914:	4b19      	ldr	r3, [pc, #100]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a18      	ldr	r2, [pc, #96]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800691a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800691e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006920:	f7fd fac4 	bl	8003eac <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006928:	f7fd fac0 	bl	8003eac <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e057      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693a:	4b10      	ldr	r3, [pc, #64]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x478>
 8006946:	e04f      	b.n	80069e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a0b      	ldr	r2, [pc, #44]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 800694e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fd faaa 	bl	8003eac <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800695c:	f7fd faa6 	bl	8003eac <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e03d      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696e:	4b03      	ldr	r3, [pc, #12]	; (800697c <HAL_RCC_OscConfig+0x4cc>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f0      	bne.n	800695c <HAL_RCC_OscConfig+0x4ac>
 800697a:	e035      	b.n	80069e8 <HAL_RCC_OscConfig+0x538>
 800697c:	40023800 	.word	0x40023800
 8006980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006984:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <HAL_RCC_OscConfig+0x544>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d028      	beq.n	80069e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800699c:	429a      	cmp	r2, r3
 800699e:	d121      	bne.n	80069e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d11a      	bne.n	80069e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069b4:	4013      	ands	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069bc:	4293      	cmp	r3, r2
 80069be:	d111      	bne.n	80069e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	3b01      	subs	r3, #1
 80069ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d107      	bne.n	80069e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d001      	beq.n	80069e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40023800 	.word	0x40023800

080069f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0d0      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a10:	4b6a      	ldr	r3, [pc, #424]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d910      	bls.n	8006a40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1e:	4b67      	ldr	r3, [pc, #412]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f023 020f 	bic.w	r2, r3, #15
 8006a26:	4965      	ldr	r1, [pc, #404]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2e:	4b63      	ldr	r3, [pc, #396]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d001      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e0b8      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d020      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a58:	4b59      	ldr	r3, [pc, #356]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	4a58      	ldr	r2, [pc, #352]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a70:	4b53      	ldr	r3, [pc, #332]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	4a52      	ldr	r2, [pc, #328]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a7c:	4b50      	ldr	r3, [pc, #320]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	494d      	ldr	r1, [pc, #308]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d040      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d107      	bne.n	8006ab2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aa2:	4b47      	ldr	r3, [pc, #284]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d115      	bne.n	8006ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e07f      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d107      	bne.n	8006aca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aba:	4b41      	ldr	r3, [pc, #260]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e073      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aca:	4b3d      	ldr	r3, [pc, #244]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e06b      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ada:	4b39      	ldr	r3, [pc, #228]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f023 0203 	bic.w	r2, r3, #3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4936      	ldr	r1, [pc, #216]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aec:	f7fd f9de 	bl	8003eac <HAL_GetTick>
 8006af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af2:	e00a      	b.n	8006b0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af4:	f7fd f9da 	bl	8003eac <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e053      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0a:	4b2d      	ldr	r3, [pc, #180]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 020c 	and.w	r2, r3, #12
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d1eb      	bne.n	8006af4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b27      	ldr	r3, [pc, #156]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d210      	bcs.n	8006b4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 020f 	bic.w	r2, r3, #15
 8006b32:	4922      	ldr	r1, [pc, #136]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b20      	ldr	r3, [pc, #128]	; (8006bbc <HAL_RCC_ClockConfig+0x1c4>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e032      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d008      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b58:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	4916      	ldr	r1, [pc, #88]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d009      	beq.n	8006b8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b76:	4b12      	ldr	r3, [pc, #72]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	490e      	ldr	r1, [pc, #56]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b8a:	f000 f821 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	091b      	lsrs	r3, r3, #4
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	490a      	ldr	r1, [pc, #40]	; (8006bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8006b9c:	5ccb      	ldrb	r3, [r1, r3]
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8006ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <HAL_RCC_ClockConfig+0x1d4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fd f93a 	bl	8003e24 <HAL_InitTick>

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40023c00 	.word	0x40023c00
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	08011b5c 	.word	0x08011b5c
 8006bc8:	20000004 	.word	0x20000004
 8006bcc:	20000014 	.word	0x20000014

08006bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bd0:	b5b0      	push	{r4, r5, r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6079      	str	r1, [r7, #4]
 8006bda:	2100      	movs	r1, #0
 8006bdc:	60f9      	str	r1, [r7, #12]
 8006bde:	2100      	movs	r1, #0
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006be2:	2100      	movs	r1, #0
 8006be4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006be6:	4952      	ldr	r1, [pc, #328]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8006be8:	6889      	ldr	r1, [r1, #8]
 8006bea:	f001 010c 	and.w	r1, r1, #12
 8006bee:	2908      	cmp	r1, #8
 8006bf0:	d00d      	beq.n	8006c0e <HAL_RCC_GetSysClockFreq+0x3e>
 8006bf2:	2908      	cmp	r1, #8
 8006bf4:	f200 8094 	bhi.w	8006d20 <HAL_RCC_GetSysClockFreq+0x150>
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	d002      	beq.n	8006c02 <HAL_RCC_GetSysClockFreq+0x32>
 8006bfc:	2904      	cmp	r1, #4
 8006bfe:	d003      	beq.n	8006c08 <HAL_RCC_GetSysClockFreq+0x38>
 8006c00:	e08e      	b.n	8006d20 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c02:	4b4c      	ldr	r3, [pc, #304]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x164>)
 8006c04:	60bb      	str	r3, [r7, #8]
      break;
 8006c06:	e08e      	b.n	8006d26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c08:	4b4b      	ldr	r3, [pc, #300]	; (8006d38 <HAL_RCC_GetSysClockFreq+0x168>)
 8006c0a:	60bb      	str	r3, [r7, #8]
      break;
 8006c0c:	e08b      	b.n	8006d26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c0e:	4948      	ldr	r1, [pc, #288]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c10:	6849      	ldr	r1, [r1, #4]
 8006c12:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006c16:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c18:	4945      	ldr	r1, [pc, #276]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c1a:	6849      	ldr	r1, [r1, #4]
 8006c1c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d024      	beq.n	8006c6e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c24:	4942      	ldr	r1, [pc, #264]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c26:	6849      	ldr	r1, [r1, #4]
 8006c28:	0989      	lsrs	r1, r1, #6
 8006c2a:	4608      	mov	r0, r1
 8006c2c:	f04f 0100 	mov.w	r1, #0
 8006c30:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006c34:	f04f 0500 	mov.w	r5, #0
 8006c38:	ea00 0204 	and.w	r2, r0, r4
 8006c3c:	ea01 0305 	and.w	r3, r1, r5
 8006c40:	493d      	ldr	r1, [pc, #244]	; (8006d38 <HAL_RCC_GetSysClockFreq+0x168>)
 8006c42:	fb01 f003 	mul.w	r0, r1, r3
 8006c46:	2100      	movs	r1, #0
 8006c48:	fb01 f102 	mul.w	r1, r1, r2
 8006c4c:	1844      	adds	r4, r0, r1
 8006c4e:	493a      	ldr	r1, [pc, #232]	; (8006d38 <HAL_RCC_GetSysClockFreq+0x168>)
 8006c50:	fba2 0101 	umull	r0, r1, r2, r1
 8006c54:	1863      	adds	r3, r4, r1
 8006c56:	4619      	mov	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	f7f9 fb26 	bl	80002b0 <__aeabi_uldivmod>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4613      	mov	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	e04a      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6e:	4b30      	ldr	r3, [pc, #192]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	099b      	lsrs	r3, r3, #6
 8006c74:	461a      	mov	r2, r3
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c7e:	f04f 0100 	mov.w	r1, #0
 8006c82:	ea02 0400 	and.w	r4, r2, r0
 8006c86:	ea03 0501 	and.w	r5, r3, r1
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	014b      	lsls	r3, r1, #5
 8006c98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c9c:	0142      	lsls	r2, r0, #5
 8006c9e:	4610      	mov	r0, r2
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	1b00      	subs	r0, r0, r4
 8006ca4:	eb61 0105 	sbc.w	r1, r1, r5
 8006ca8:	f04f 0200 	mov.w	r2, #0
 8006cac:	f04f 0300 	mov.w	r3, #0
 8006cb0:	018b      	lsls	r3, r1, #6
 8006cb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006cb6:	0182      	lsls	r2, r0, #6
 8006cb8:	1a12      	subs	r2, r2, r0
 8006cba:	eb63 0301 	sbc.w	r3, r3, r1
 8006cbe:	f04f 0000 	mov.w	r0, #0
 8006cc2:	f04f 0100 	mov.w	r1, #0
 8006cc6:	00d9      	lsls	r1, r3, #3
 8006cc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ccc:	00d0      	lsls	r0, r2, #3
 8006cce:	4602      	mov	r2, r0
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	1912      	adds	r2, r2, r4
 8006cd4:	eb45 0303 	adc.w	r3, r5, r3
 8006cd8:	f04f 0000 	mov.w	r0, #0
 8006cdc:	f04f 0100 	mov.w	r1, #0
 8006ce0:	0299      	lsls	r1, r3, #10
 8006ce2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ce6:	0290      	lsls	r0, r2, #10
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4610      	mov	r0, r2
 8006cee:	4619      	mov	r1, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	f7f9 fada 	bl	80002b0 <__aeabi_uldivmod>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4613      	mov	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	0c1b      	lsrs	r3, r3, #16
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	3301      	adds	r3, #1
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	60bb      	str	r3, [r7, #8]
      break;
 8006d1e:	e002      	b.n	8006d26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x164>)
 8006d22:	60bb      	str	r3, [r7, #8]
      break;
 8006d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d26:	68bb      	ldr	r3, [r7, #8]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8006d30:	40023800 	.word	0x40023800
 8006d34:	00f42400 	.word	0x00f42400
 8006d38:	017d7840 	.word	0x017d7840

08006d3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d40:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d42:	681b      	ldr	r3, [r3, #0]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000004 	.word	0x20000004

08006d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d58:	f7ff fff0 	bl	8006d3c <HAL_RCC_GetHCLKFreq>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	0a9b      	lsrs	r3, r3, #10
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	4903      	ldr	r1, [pc, #12]	; (8006d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d6a:	5ccb      	ldrb	r3, [r1, r3]
 8006d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40023800 	.word	0x40023800
 8006d78:	08011b6c 	.word	0x08011b6c

08006d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d80:	f7ff ffdc 	bl	8006d3c <HAL_RCC_GetHCLKFreq>
 8006d84:	4602      	mov	r2, r0
 8006d86:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	0b5b      	lsrs	r3, r3, #13
 8006d8c:	f003 0307 	and.w	r3, r3, #7
 8006d90:	4903      	ldr	r1, [pc, #12]	; (8006da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d92:	5ccb      	ldrb	r3, [r1, r3]
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	08011b6c 	.word	0x08011b6c

08006da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d012      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dcc:	4b69      	ldr	r3, [pc, #420]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4a68      	ldr	r2, [pc, #416]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dd6:	6093      	str	r3, [r2, #8]
 8006dd8:	4b66      	ldr	r3, [pc, #408]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de0:	4964      	ldr	r1, [pc, #400]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006dee:	2301      	movs	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d017      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dfe:	4b5d      	ldr	r3, [pc, #372]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0c:	4959      	ldr	r1, [pc, #356]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d017      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e3a:	4b4e      	ldr	r3, [pc, #312]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	494a      	ldr	r1, [pc, #296]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e58:	d101      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e66:	2301      	movs	r3, #1
 8006e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e76:	2301      	movs	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 808b 	beq.w	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e88:	4b3a      	ldr	r3, [pc, #232]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8c:	4a39      	ldr	r2, [pc, #228]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e92:	6413      	str	r3, [r2, #64]	; 0x40
 8006e94:	4b37      	ldr	r3, [pc, #220]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ea0:	4b35      	ldr	r3, [pc, #212]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a34      	ldr	r2, [pc, #208]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eac:	f7fc fffe 	bl	8003eac <HAL_GetTick>
 8006eb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb4:	f7fc fffa 	bl	8003eac <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b64      	cmp	r3, #100	; 0x64
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e357      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ec6:	4b2c      	ldr	r3, [pc, #176]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f0      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ed2:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d035      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d02e      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ef0:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006efa:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efe:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f06:	4b1b      	ldr	r3, [pc, #108]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f12:	4a18      	ldr	r2, [pc, #96]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f18:	4b16      	ldr	r3, [pc, #88]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d114      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f24:	f7fc ffc2 	bl	8003eac <HAL_GetTick>
 8006f28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2a:	e00a      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fc ffbe 	bl	8003eac <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e319      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0ee      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f5a:	d111      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f6a:	400b      	ands	r3, r1
 8006f6c:	4901      	ldr	r1, [pc, #4]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
 8006f72:	e00b      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f74:	40023800 	.word	0x40023800
 8006f78:	40007000 	.word	0x40007000
 8006f7c:	0ffffcff 	.word	0x0ffffcff
 8006f80:	4bb1      	ldr	r3, [pc, #708]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	4ab0      	ldr	r2, [pc, #704]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f8a:	6093      	str	r3, [r2, #8]
 8006f8c:	4bae      	ldr	r3, [pc, #696]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f98:	49ab      	ldr	r1, [pc, #684]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006faa:	4ba7      	ldr	r3, [pc, #668]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb0:	4aa5      	ldr	r2, [pc, #660]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006fba:	4ba3      	ldr	r3, [pc, #652]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	49a0      	ldr	r1, [pc, #640]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fd8:	4b9b      	ldr	r3, [pc, #620]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe6:	4998      	ldr	r1, [pc, #608]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ffa:	4b93      	ldr	r3, [pc, #588]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007008:	498f      	ldr	r1, [pc, #572]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800701c:	4b8a      	ldr	r3, [pc, #552]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702a:	4987      	ldr	r1, [pc, #540]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800703e:	4b82      	ldr	r3, [pc, #520]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007044:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704c:	497e      	ldr	r1, [pc, #504]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007060:	4b79      	ldr	r3, [pc, #484]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007066:	f023 0203 	bic.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	4976      	ldr	r1, [pc, #472]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007082:	4b71      	ldr	r3, [pc, #452]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007088:	f023 020c 	bic.w	r2, r3, #12
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007090:	496d      	ldr	r1, [pc, #436]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070a4:	4b68      	ldr	r3, [pc, #416]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b2:	4965      	ldr	r1, [pc, #404]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070c6:	4b60      	ldr	r3, [pc, #384]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	495c      	ldr	r1, [pc, #368]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00a      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070e8:	4b57      	ldr	r3, [pc, #348]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	4954      	ldr	r1, [pc, #336]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800710a:	4b4f      	ldr	r3, [pc, #316]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007110:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007118:	494b      	ldr	r1, [pc, #300]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800712c:	4b46      	ldr	r3, [pc, #280]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800712e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713a:	4943      	ldr	r1, [pc, #268]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800713c:	4313      	orrs	r3, r2
 800713e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800714e:	4b3e      	ldr	r3, [pc, #248]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715c:	493a      	ldr	r1, [pc, #232]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007170:	4b35      	ldr	r3, [pc, #212]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717e:	4932      	ldr	r1, [pc, #200]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d011      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007192:	4b2d      	ldr	r3, [pc, #180]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a0:	4929      	ldr	r1, [pc, #164]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071b0:	d101      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071d2:	4b1d      	ldr	r3, [pc, #116]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e0:	4919      	ldr	r1, [pc, #100]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071f4:	4b14      	ldr	r3, [pc, #80]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007204:	4910      	ldr	r1, [pc, #64]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d006      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 80d9 	beq.w	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007220:	4b09      	ldr	r3, [pc, #36]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a08      	ldr	r2, [pc, #32]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800722a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722c:	f7fc fe3e 	bl	8003eac <HAL_GetTick>
 8007230:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007232:	e00b      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007234:	f7fc fe3a 	bl	8003eac <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b64      	cmp	r3, #100	; 0x64
 8007240:	d904      	bls.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e197      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007246:	bf00      	nop
 8007248:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800724c:	4b6c      	ldr	r3, [pc, #432]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1ed      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d021      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11d      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800726c:	4b64      	ldr	r3, [pc, #400]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800726e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007272:	0c1b      	lsrs	r3, r3, #16
 8007274:	f003 0303 	and.w	r3, r3, #3
 8007278:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800727a:	4b61      	ldr	r3, [pc, #388]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800727c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007280:	0e1b      	lsrs	r3, r3, #24
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	019a      	lsls	r2, r3, #6
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	041b      	lsls	r3, r3, #16
 8007292:	431a      	orrs	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	061b      	lsls	r3, r3, #24
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	071b      	lsls	r3, r3, #28
 80072a0:	4957      	ldr	r1, [pc, #348]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072bc:	d00a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d02e      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072d2:	d129      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072d4:	4b4a      	ldr	r3, [pc, #296]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80072e2:	4b47      	ldr	r3, [pc, #284]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80072e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e8:	0f1b      	lsrs	r3, r3, #28
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	019a      	lsls	r2, r3, #6
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	041b      	lsls	r3, r3, #16
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	061b      	lsls	r3, r3, #24
 8007302:	431a      	orrs	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	071b      	lsls	r3, r3, #28
 8007308:	493d      	ldr	r1, [pc, #244]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007310:	4b3b      	ldr	r3, [pc, #236]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007316:	f023 021f 	bic.w	r2, r3, #31
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	3b01      	subs	r3, #1
 8007320:	4937      	ldr	r1, [pc, #220]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01d      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007334:	4b32      	ldr	r3, [pc, #200]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800733a:	0e1b      	lsrs	r3, r3, #24
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007342:	4b2f      	ldr	r3, [pc, #188]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007348:	0f1b      	lsrs	r3, r3, #28
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	019a      	lsls	r2, r3, #6
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	431a      	orrs	r2, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	061b      	lsls	r3, r3, #24
 8007362:	431a      	orrs	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	071b      	lsls	r3, r3, #28
 8007368:	4925      	ldr	r1, [pc, #148]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d011      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	019a      	lsls	r2, r3, #6
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	061b      	lsls	r3, r3, #24
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	071b      	lsls	r3, r3, #28
 8007398:	4919      	ldr	r1, [pc, #100]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073a0:	4b17      	ldr	r3, [pc, #92]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a16      	ldr	r2, [pc, #88]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ac:	f7fc fd7e 	bl	8003eac <HAL_GetTick>
 80073b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073b4:	f7fc fd7a 	bl	8003eac <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b64      	cmp	r3, #100	; 0x64
 80073c0:	d901      	bls.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e0d7      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073c6:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0f0      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	f040 80cd 	bne.w	8007574 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a08      	ldr	r2, [pc, #32]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e6:	f7fc fd61 	bl	8003eac <HAL_GetTick>
 80073ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80073ec:	e00a      	b.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073ee:	f7fc fd5d 	bl	8003eac <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b64      	cmp	r3, #100	; 0x64
 80073fa:	d903      	bls.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e0ba      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007400:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007404:	4b5e      	ldr	r3, [pc, #376]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800740c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007410:	d0ed      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800742e:	2b00      	cmp	r3, #0
 8007430:	d02e      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d12a      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800743a:	4b51      	ldr	r3, [pc, #324]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007440:	0c1b      	lsrs	r3, r3, #16
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007448:	4b4d      	ldr	r3, [pc, #308]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800744a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744e:	0f1b      	lsrs	r3, r3, #28
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	019a      	lsls	r2, r3, #6
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	041b      	lsls	r3, r3, #16
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	061b      	lsls	r3, r3, #24
 8007468:	431a      	orrs	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	071b      	lsls	r3, r3, #28
 800746e:	4944      	ldr	r1, [pc, #272]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007476:	4b42      	ldr	r3, [pc, #264]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800747c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	3b01      	subs	r3, #1
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	493d      	ldr	r1, [pc, #244]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d022      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074a4:	d11d      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074a6:	4b36      	ldr	r3, [pc, #216]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ac:	0e1b      	lsrs	r3, r3, #24
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074b4:	4b32      	ldr	r3, [pc, #200]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ba:	0f1b      	lsrs	r3, r3, #28
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	019a      	lsls	r2, r3, #6
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1b      	ldr	r3, [r3, #32]
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	431a      	orrs	r2, r3
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	061b      	lsls	r3, r3, #24
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	071b      	lsls	r3, r3, #28
 80074da:	4929      	ldr	r1, [pc, #164]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d028      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074ee:	4b24      	ldr	r3, [pc, #144]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f4:	0e1b      	lsrs	r3, r3, #24
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074fc:	4b20      	ldr	r3, [pc, #128]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007502:	0c1b      	lsrs	r3, r3, #16
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	019a      	lsls	r2, r3, #6
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	041b      	lsls	r3, r3, #16
 8007514:	431a      	orrs	r2, r3
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	061b      	lsls	r3, r3, #24
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	071b      	lsls	r3, r3, #28
 8007522:	4917      	ldr	r1, [pc, #92]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800752a:	4b15      	ldr	r3, [pc, #84]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800752c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	4911      	ldr	r1, [pc, #68]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800753a:	4313      	orrs	r3, r2
 800753c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007540:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a0e      	ldr	r2, [pc, #56]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800754a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754c:	f7fc fcae 	bl	8003eac <HAL_GetTick>
 8007550:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007552:	e008      	b.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007554:	f7fc fcaa 	bl	8003eac <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b64      	cmp	r3, #100	; 0x64
 8007560:	d901      	bls.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e007      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800756e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007572:	d1ef      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40023800 	.word	0x40023800

08007584 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e081      	b.n	800769a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	7f5b      	ldrb	r3, [r3, #29]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fa ff2e 	bl	8002408 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	22ca      	movs	r2, #202	; 0xca
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2253      	movs	r2, #83	; 0x53
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fb16 	bl	8007bf4 <RTC_EnterInitMode>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d008      	beq.n	80075e0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	22ff      	movs	r2, #255	; 0xff
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2204      	movs	r2, #4
 80075da:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e05c      	b.n	800769a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6899      	ldr	r1, [r3, #8]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4b2e      	ldr	r3, [pc, #184]	; (80076a4 <HAL_RTC_Init+0x120>)
 80075ec:	400b      	ands	r3, r1
 80075ee:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6899      	ldr	r1, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	68d2      	ldr	r2, [r2, #12]
 8007616:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6919      	ldr	r1, [r3, #16]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	041a      	lsls	r2, r3, #16
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800763a:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10e      	bne.n	8007668 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 faaa 	bl	8007ba4 <HAL_RTC_WaitForSynchro>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d008      	beq.n	8007668 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	22ff      	movs	r2, #255	; 0xff
 800765c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2204      	movs	r2, #4
 8007662:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e018      	b.n	800769a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0208 	bic.w	r2, r2, #8
 8007676:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	430a      	orrs	r2, r1
 8007688:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	22ff      	movs	r2, #255	; 0xff
 8007690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007698:	2300      	movs	r3, #0
  }
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	ff8fffbf 	.word	0xff8fffbf

080076a8 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	7f1b      	ldrb	r3, [r3, #28]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_RTC_SetTime+0x1c>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e0a8      	b.n	8007816 <HAL_RTC_SetTime+0x16e>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2201      	movs	r2, #1
 80076c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2202      	movs	r2, #2
 80076ce:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d126      	bne.n	8007724 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 faac 	bl	8007c4c <RTC_ByteToBcd2>
 80076f4:	4603      	mov	r3, r0
 80076f6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 faa5 	bl	8007c4c <RTC_ByteToBcd2>
 8007702:	4603      	mov	r3, r0
 8007704:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007706:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	789b      	ldrb	r3, [r3, #2]
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fa9d 	bl	8007c4c <RTC_ByteToBcd2>
 8007712:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007714:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	7b1b      	ldrb	r3, [r3, #12]
 800771c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	e018      	b.n	8007756 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d102      	bne.n	8007738 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	785b      	ldrb	r3, [r3, #1]
 8007742:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007744:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800774a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	7b1b      	ldrb	r3, [r3, #12]
 8007750:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	22ca      	movs	r2, #202	; 0xca
 800775c:	625a      	str	r2, [r3, #36]	; 0x24
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2253      	movs	r2, #83	; 0x53
 8007764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fa44 	bl	8007bf4 <RTC_EnterInitMode>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	22ff      	movs	r2, #255	; 0xff
 8007778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2204      	movs	r2, #4
 800777e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e045      	b.n	8007816 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	6979      	ldr	r1, [r7, #20]
 8007790:	4b23      	ldr	r3, [pc, #140]	; (8007820 <HAL_RTC_SetTime+0x178>)
 8007792:	400b      	ands	r3, r1
 8007794:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077a4:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6899      	ldr	r1, [r3, #8]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	431a      	orrs	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077cc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0320 	and.w	r3, r3, #32
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d111      	bne.n	8007800 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 f9e1 	bl	8007ba4 <HAL_RTC_WaitForSynchro>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	22ff      	movs	r2, #255	; 0xff
 80077ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2204      	movs	r2, #4
 80077f4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e00a      	b.n	8007816 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	22ff      	movs	r2, #255	; 0xff
 8007806:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007814:	2300      	movs	r3, #0
  }
}
 8007816:	4618      	mov	r0, r3
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd90      	pop	{r4, r7, pc}
 800781e:	bf00      	nop
 8007820:	007f7f7f 	.word	0x007f7f7f

08007824 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007824:	b590      	push	{r4, r7, lr}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	7f1b      	ldrb	r3, [r3, #28]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_RTC_SetDate+0x1c>
 800783c:	2302      	movs	r3, #2
 800783e:	e092      	b.n	8007966 <HAL_RTC_SetDate+0x142>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2202      	movs	r2, #2
 800784a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10e      	bne.n	8007870 <HAL_RTC_SetDate+0x4c>
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	785b      	ldrb	r3, [r3, #1]
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b00      	cmp	r3, #0
 800785c:	d008      	beq.n	8007870 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	785b      	ldrb	r3, [r3, #1]
 8007862:	f023 0310 	bic.w	r3, r3, #16
 8007866:	b2db      	uxtb	r3, r3
 8007868:	330a      	adds	r3, #10
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d11c      	bne.n	80078b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	78db      	ldrb	r3, [r3, #3]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f9e6 	bl	8007c4c <RTC_ByteToBcd2>
 8007880:	4603      	mov	r3, r0
 8007882:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f9df 	bl	8007c4c <RTC_ByteToBcd2>
 800788e:	4603      	mov	r3, r0
 8007890:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007892:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	789b      	ldrb	r3, [r3, #2]
 8007898:	4618      	mov	r0, r3
 800789a:	f000 f9d7 	bl	8007c4c <RTC_ByteToBcd2>
 800789e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80078a0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	e00e      	b.n	80078ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	78db      	ldrb	r3, [r3, #3]
 80078b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80078bc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80078c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	22ca      	movs	r2, #202	; 0xca
 80078d4:	625a      	str	r2, [r3, #36]	; 0x24
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2253      	movs	r2, #83	; 0x53
 80078dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 f988 	bl	8007bf4 <RTC_EnterInitMode>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	22ff      	movs	r2, #255	; 0xff
 80078f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2204      	movs	r2, #4
 80078f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e031      	b.n	8007966 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	6979      	ldr	r1, [r7, #20]
 8007908:	4b19      	ldr	r3, [pc, #100]	; (8007970 <HAL_RTC_SetDate+0x14c>)
 800790a:	400b      	ands	r3, r1
 800790c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800791c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 0320 	and.w	r3, r3, #32
 8007928:	2b00      	cmp	r3, #0
 800792a:	d111      	bne.n	8007950 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f939 	bl	8007ba4 <HAL_RTC_WaitForSynchro>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	22ff      	movs	r2, #255	; 0xff
 800793e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2204      	movs	r2, #4
 8007944:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e00a      	b.n	8007966 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	22ff      	movs	r2, #255	; 0xff
 8007956:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007964:	2300      	movs	r3, #0
  }
}
 8007966:	4618      	mov	r0, r3
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	bd90      	pop	{r4, r7, pc}
 800796e:	bf00      	nop
 8007970:	00ffff3f 	.word	0x00ffff3f

08007974 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007974:	b590      	push	{r4, r7, lr}
 8007976:	b089      	sub	sp, #36	; 0x24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	7f1b      	ldrb	r3, [r3, #28]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_RTC_SetAlarm+0x24>
 8007994:	2302      	movs	r3, #2
 8007996:	e101      	b.n	8007b9c <HAL_RTC_SetAlarm+0x228>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2202      	movs	r2, #2
 80079a2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d137      	bne.n	8007a1a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2200      	movs	r2, #0
 80079bc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f942 	bl	8007c4c <RTC_ByteToBcd2>
 80079c8:	4603      	mov	r3, r0
 80079ca:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f93b 	bl	8007c4c <RTC_ByteToBcd2>
 80079d6:	4603      	mov	r3, r0
 80079d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80079da:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	789b      	ldrb	r3, [r3, #2]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f933 	bl	8007c4c <RTC_ByteToBcd2>
 80079e6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80079e8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	7b1b      	ldrb	r3, [r3, #12]
 80079f0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80079f2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f925 	bl	8007c4c <RTC_ByteToBcd2>
 8007a02:	4603      	mov	r3, r0
 8007a04:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007a06:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007a0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007a14:	4313      	orrs	r3, r2
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	e023      	b.n	8007a62 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007a3a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8007a40:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	7b1b      	ldrb	r3, [r3, #12]
 8007a46:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007a48:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007a52:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8007a58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	22ca      	movs	r2, #202	; 0xca
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2253      	movs	r2, #83	; 0x53
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a86:	d13f      	bne.n	8007b08 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a96:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007aa6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007aa8:	f7fc fa00 	bl	8003eac <HAL_GetTick>
 8007aac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007aae:	e013      	b.n	8007ad8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007ab0:	f7fc f9fc 	bl	8003eac <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007abe:	d90b      	bls.n	8007ad8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2203      	movs	r2, #3
 8007acc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e061      	b.n	8007b9c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0e4      	beq.n	8007ab0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b04:	609a      	str	r2, [r3, #8]
 8007b06:	e03e      	b.n	8007b86 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b16:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b26:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b28:	f7fc f9c0 	bl	8003eac <HAL_GetTick>
 8007b2c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007b2e:	e013      	b.n	8007b58 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007b30:	f7fc f9bc 	bl	8003eac <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b3e:	d90b      	bls.n	8007b58 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	22ff      	movs	r2, #255	; 0xff
 8007b46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e021      	b.n	8007b9c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0e4      	beq.n	8007b30 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b84:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	22ff      	movs	r2, #255	; 0xff
 8007b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3724      	adds	r7, #36	; 0x24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd90      	pop	{r4, r7, pc}

08007ba4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007bbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bc0:	f7fc f974 	bl	8003eac <HAL_GetTick>
 8007bc4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007bc6:	e009      	b.n	8007bdc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007bc8:	f7fc f970 	bl	8003eac <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bd6:	d901      	bls.n	8007bdc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e007      	b.n	8007bec <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0ee      	beq.n	8007bc8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d119      	bne.n	8007c42 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f04f 32ff 	mov.w	r2, #4294967295
 8007c16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c18:	f7fc f948 	bl	8003eac <HAL_GetTick>
 8007c1c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c1e:	e009      	b.n	8007c34 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007c20:	f7fc f944 	bl	8003eac <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c2e:	d901      	bls.n	8007c34 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e007      	b.n	8007c44 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0ee      	beq.n	8007c20 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007c5a:	e005      	b.n	8007c68 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	3b0a      	subs	r3, #10
 8007c66:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	2b09      	cmp	r3, #9
 8007c6c:	d8f6      	bhi.n	8007c5c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	b2db      	uxtb	r3, r3
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	7f1b      	ldrb	r3, [r3, #28]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d101      	bne.n	8007ca4 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e03e      	b.n	8007d22 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2202      	movs	r2, #2
 8007cae:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	22ca      	movs	r2, #202	; 0xca
 8007cca:	625a      	str	r2, [r3, #36]	; 0x24
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2253      	movs	r2, #83	; 0x53
 8007cd2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0206 	bic.w	r2, r2, #6
 8007ce2:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d0a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	22ff      	movs	r2, #255	; 0xff
 8007d12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	fffff7f7 	.word	0xfffff7f7

08007d34 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e022      	b.n	8007d8c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d105      	bne.n	8007d5e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fa fb6f 	bl	800243c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2203      	movs	r2, #3
 8007d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f814 	bl	8007d94 <HAL_SD_InitCard>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e00a      	b.n	8007d8c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d94:	b5b0      	push	{r4, r5, r7, lr}
 8007d96:	b08e      	sub	sp, #56	; 0x38
 8007d98:	af04      	add	r7, sp, #16
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007da0:	2300      	movs	r3, #0
 8007da2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007da4:	2300      	movs	r3, #0
 8007da6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007da8:	2300      	movs	r3, #0
 8007daa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007db0:	2376      	movs	r3, #118	; 0x76
 8007db2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681d      	ldr	r5, [r3, #0]
 8007db8:	466c      	mov	r4, sp
 8007dba:	f107 0314 	add.w	r3, r7, #20
 8007dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007dc6:	f107 0308 	add.w	r3, r7, #8
 8007dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f002 ffc1 	bl	800ad54 <SDMMC_Init>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e056      	b.n	8007e92 <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007df2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f002 fff5 	bl	800ade8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e0c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fff2 	bl	8008df8 <SD_PowerON>
 8007e14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e02e      	b.n	8007e92 <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 ff13 	bl	8008c60 <SD_InitCard>
 8007e3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e01b      	b.n	8007e92 <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e62:	4618      	mov	r0, r3
 8007e64:	f003 f854 	bl	800af10 <SDMMC_CmdBlockLength>
 8007e68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00f      	beq.n	8007e90 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a09      	ldr	r2, [pc, #36]	; (8007e9c <HAL_SD_InitCard+0x108>)
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3728      	adds	r7, #40	; 0x28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bdb0      	pop	{r4, r5, r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	004005ff 	.word	0x004005ff

08007ea0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08c      	sub	sp, #48	; 0x30
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d107      	bne.n	8007ec8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e0c3      	b.n	8008050 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	f040 80bc 	bne.w	800804e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d907      	bls.n	8007efa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e0aa      	b.n	8008050 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2203      	movs	r2, #3
 8007efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	4a4e      	ldr	r2, [pc, #312]	; (8008058 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	4a4d      	ldr	r2, [pc, #308]	; (800805c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007f28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	2200      	movs	r2, #0
 8007f30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	2200      	movs	r2, #0
 8007f38:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3380      	adds	r3, #128	; 0x80
 8007f60:	4619      	mov	r1, r3
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	025b      	lsls	r3, r3, #9
 8007f68:	089b      	lsrs	r3, r3, #2
 8007f6a:	f7fc fd5f 	bl	8004a2c <HAL_DMA_Start_IT>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d017      	beq.n	8007fa4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007f82:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a35      	ldr	r2, [pc, #212]	; (8008060 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e055      	b.n	8008050 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0208 	orr.w	r2, r2, #8
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d002      	beq.n	8007fc2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	025b      	lsls	r3, r3, #9
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	025b      	lsls	r3, r3, #9
 8007fcc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007fce:	2390      	movs	r3, #144	; 0x90
 8007fd0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f107 0210 	add.w	r2, r7, #16
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f002 ff65 	bl	800aeb8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d90a      	bls.n	800800a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2282      	movs	r2, #130	; 0x82
 8007ff8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008000:	4618      	mov	r0, r3
 8008002:	f002 ffc9 	bl	800af98 <SDMMC_CmdReadMultiBlock>
 8008006:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008008:	e009      	b.n	800801e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2281      	movs	r2, #129	; 0x81
 800800e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008016:	4618      	mov	r0, r3
 8008018:	f002 ff9c 	bl	800af54 <SDMMC_CmdReadSingleBlock>
 800801c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d012      	beq.n	800804a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a0d      	ldr	r2, [pc, #52]	; (8008060 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800802a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	431a      	orrs	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e002      	b.n	8008050 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	e000      	b.n	8008050 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800804e:	2302      	movs	r3, #2
  }
}
 8008050:	4618      	mov	r0, r3
 8008052:	3730      	adds	r7, #48	; 0x30
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	08008a6f 	.word	0x08008a6f
 800805c:	08008ae1 	.word	0x08008ae1
 8008060:	004005ff 	.word	0x004005ff

08008064 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08c      	sub	sp, #48	; 0x30
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d107      	bne.n	800808c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e0c6      	b.n	800821a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	f040 80bf 	bne.w	8008218 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80080a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	441a      	add	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d907      	bls.n	80080be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e0ad      	b.n	800821a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2203      	movs	r2, #3
 80080c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2200      	movs	r2, #0
 80080cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f042 021a 	orr.w	r2, r2, #26
 80080dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	4a50      	ldr	r2, [pc, #320]	; (8008224 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80080e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	4a4f      	ldr	r2, [pc, #316]	; (8008228 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80080ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	2200      	movs	r2, #0
 80080f4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d002      	beq.n	8008104 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	025b      	lsls	r3, r3, #9
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d90a      	bls.n	8008120 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	22a0      	movs	r2, #160	; 0xa0
 800810e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008116:	4618      	mov	r0, r3
 8008118:	f002 ff82 	bl	800b020 <SDMMC_CmdWriteMultiBlock>
 800811c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800811e:	e009      	b.n	8008134 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2290      	movs	r2, #144	; 0x90
 8008124:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800812c:	4618      	mov	r0, r3
 800812e:	f002 ff55 	bl	800afdc <SDMMC_CmdWriteSingleBlock>
 8008132:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d012      	beq.n	8008160 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a3b      	ldr	r2, [pc, #236]	; (800822c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008148:	431a      	orrs	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e05c      	b.n	800821a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0208 	orr.w	r2, r2, #8
 800816e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008174:	2240      	movs	r2, #64	; 0x40
 8008176:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3380      	adds	r3, #128	; 0x80
 80081a0:	461a      	mov	r2, r3
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	025b      	lsls	r3, r3, #9
 80081a6:	089b      	lsrs	r3, r3, #2
 80081a8:	f7fc fc40 	bl	8004a2c <HAL_DMA_Start_IT>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01a      	beq.n	80081e8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 021a 	bic.w	r2, r2, #26
 80081c0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a19      	ldr	r2, [pc, #100]	; (800822c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80081c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e018      	b.n	800821a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081e8:	f04f 33ff 	mov.w	r3, #4294967295
 80081ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	025b      	lsls	r3, r3, #9
 80081f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081f4:	2390      	movs	r3, #144	; 0x90
 80081f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008200:	2301      	movs	r3, #1
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f107 0210 	add.w	r2, r7, #16
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f002 fe52 	bl	800aeb8 <SDMMC_ConfigData>

      return HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	e000      	b.n	800821a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008218:	2302      	movs	r3, #2
  }
}
 800821a:	4618      	mov	r0, r3
 800821c:	3730      	adds	r7, #48	; 0x30
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	08008a45 	.word	0x08008a45
 8008228:	08008ae1 	.word	0x08008ae1
 800822c:	004005ff 	.word	0x004005ff

08008230 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d008      	beq.n	800825e <HAL_SD_IRQHandler+0x2e>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 ffed 	bl	8009236 <SD_Read_IT>
 800825c:	e153      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 808d 	beq.w	8008388 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008276:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4ba3      	ldr	r3, [pc, #652]	; (8008510 <HAL_SD_IRQHandler+0x2e0>)
 8008284:	400b      	ands	r3, r1
 8008286:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0201 	bic.w	r2, r2, #1
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d039      	beq.n	8008316 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d104      	bne.n	80082b6 <HAL_SD_IRQHandler+0x86>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d011      	beq.n	80082da <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f002 fed2 	bl	800b064 <SDMMC_CmdStopTransfer>
 80082c0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d008      	beq.n	80082da <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f921 	bl	800851c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f240 523a 	movw	r2, #1338	; 0x53a
 80082e2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d104      	bne.n	8008306 <HAL_SD_IRQHandler+0xd6>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fb fbb6 	bl	8003a78 <HAL_SD_RxCpltCallback>
 800830c:	e0fb      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7fb fba8 	bl	8003a64 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008314:	e0f7      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80f2 	beq.w	8008506 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f003 0320 	and.w	r3, r3, #32
 8008328:	2b00      	cmp	r3, #0
 800832a:	d011      	beq.n	8008350 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4618      	mov	r0, r3
 8008332:	f002 fe97 	bl	800b064 <SDMMC_CmdStopTransfer>
 8008336:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d008      	beq.n	8008350 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8e6 	bl	800851c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 80d5 	bne.w	8008506 <HAL_SD_IRQHandler+0x2d6>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	f040 80cf 	bne.w	8008506 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0208 	bic.w	r2, r2, #8
 8008376:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7fb fb6f 	bl	8003a64 <HAL_SD_TxCpltCallback>
}
 8008386:	e0be      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d008      	beq.n	80083a8 <HAL_SD_IRQHandler+0x178>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 ff99 	bl	80092d8 <SD_Write_IT>
 80083a6:	e0ae      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ae:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80a7 	beq.w	8008506 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	f043 0202 	orr.w	r2, r3, #2
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	f003 0308 	and.w	r3, r3, #8
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	f043 0208 	orr.w	r2, r3, #8
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	f043 0220 	orr.w	r2, r3, #32
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	f043 0210 	orr.w	r2, r3, #16
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f240 523a 	movw	r2, #1338	; 0x53a
 8008428:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008438:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f002 fe10 	bl	800b064 <SDMMC_CmdStopTransfer>
 8008444:	4602      	mov	r2, r0
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f003 0308 	and.w	r3, r3, #8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f857 	bl	800851c <HAL_SD_ErrorCallback>
}
 800846e:	e04a      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008476:	2b00      	cmp	r3, #0
 8008478:	d045      	beq.n	8008506 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0310 	and.w	r3, r3, #16
 8008480:	2b00      	cmp	r3, #0
 8008482:	d104      	bne.n	800848e <HAL_SD_IRQHandler+0x25e>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b00      	cmp	r3, #0
 800848c:	d011      	beq.n	80084b2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008492:	4a20      	ldr	r2, [pc, #128]	; (8008514 <HAL_SD_IRQHandler+0x2e4>)
 8008494:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	4618      	mov	r0, r3
 800849c:	f7fc fb26 	bl	8004aec <HAL_DMA_Abort_IT>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d02f      	beq.n	8008506 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fb6a 	bl	8008b84 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80084b0:	e029      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <HAL_SD_IRQHandler+0x296>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d011      	beq.n	80084ea <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	4a13      	ldr	r2, [pc, #76]	; (8008518 <HAL_SD_IRQHandler+0x2e8>)
 80084cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fc fb0a 	bl	8004aec <HAL_DMA_Abort_IT>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d013      	beq.n	8008506 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fb85 	bl	8008bf2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80084e8:	e00d      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7fb faa6 	bl	8003a50 <HAL_SD_AbortCallback>
}
 8008504:	e7ff      	b.n	8008506 <HAL_SD_IRQHandler+0x2d6>
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	ffff3ec5 	.word	0xffff3ec5
 8008514:	08008b85 	.word	0x08008b85
 8008518:	08008bf3 	.word	0x08008bf3

0800851c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800853e:	0f9b      	lsrs	r3, r3, #30
 8008540:	b2da      	uxtb	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800854a:	0e9b      	lsrs	r3, r3, #26
 800854c:	b2db      	uxtb	r3, r3
 800854e:	f003 030f 	and.w	r3, r3, #15
 8008552:	b2da      	uxtb	r2, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800855c:	0e1b      	lsrs	r3, r3, #24
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800856e:	0c1b      	lsrs	r3, r3, #16
 8008570:	b2da      	uxtb	r2, r3
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	b2da      	uxtb	r2, r3
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008586:	b2da      	uxtb	r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008590:	0d1b      	lsrs	r3, r3, #20
 8008592:	b29a      	uxth	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800859c:	0c1b      	lsrs	r3, r3, #16
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f003 030f 	and.w	r3, r3, #15
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ae:	0bdb      	lsrs	r3, r3, #15
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c0:	0b9b      	lsrs	r3, r3, #14
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d2:	0b5b      	lsrs	r3, r3, #13
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085e4:	0b1b      	lsrs	r3, r3, #12
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2200      	movs	r2, #0
 80085f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d163      	bne.n	80086c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008604:	009a      	lsls	r2, r3, #2
 8008606:	f640 73fc 	movw	r3, #4092	; 0xffc
 800860a:	4013      	ands	r3, r2
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008610:	0f92      	lsrs	r2, r2, #30
 8008612:	431a      	orrs	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800861c:	0edb      	lsrs	r3, r3, #27
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	b2da      	uxtb	r2, r3
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862e:	0e1b      	lsrs	r3, r3, #24
 8008630:	b2db      	uxtb	r3, r3
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	b2da      	uxtb	r2, r3
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008640:	0d5b      	lsrs	r3, r3, #21
 8008642:	b2db      	uxtb	r3, r3
 8008644:	f003 0307 	and.w	r3, r3, #7
 8008648:	b2da      	uxtb	r2, r3
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008652:	0c9b      	lsrs	r3, r3, #18
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	b2da      	uxtb	r2, r3
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008664:	0bdb      	lsrs	r3, r3, #15
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	b2da      	uxtb	r2, r3
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	7e1b      	ldrb	r3, [r3, #24]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	3302      	adds	r3, #2
 8008688:	2201      	movs	r2, #1
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008692:	fb02 f203 	mul.w	r2, r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	7a1b      	ldrb	r3, [r3, #8]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	2201      	movs	r2, #1
 80086a6:	409a      	lsls	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80086b4:	0a52      	lsrs	r2, r2, #9
 80086b6:	fb02 f203 	mul.w	r2, r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086c4:	661a      	str	r2, [r3, #96]	; 0x60
 80086c6:	e031      	b.n	800872c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d11d      	bne.n	800870c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086de:	0c1b      	lsrs	r3, r3, #16
 80086e0:	431a      	orrs	r2, r3
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	3301      	adds	r3, #1
 80086ec:	029a      	lsls	r2, r3, #10
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008700:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	661a      	str	r2, [r3, #96]	; 0x60
 800870a:	e00f      	b.n	800872c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a58      	ldr	r2, [pc, #352]	; (8008874 <HAL_SD_GetCardCSD+0x344>)
 8008712:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e09d      	b.n	8008868 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008730:	0b9b      	lsrs	r3, r3, #14
 8008732:	b2db      	uxtb	r3, r3
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	b2da      	uxtb	r2, r3
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008742:	09db      	lsrs	r3, r3, #7
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800875a:	b2da      	uxtb	r2, r3
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	0fdb      	lsrs	r3, r3, #31
 8008766:	b2da      	uxtb	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008770:	0f5b      	lsrs	r3, r3, #29
 8008772:	b2db      	uxtb	r3, r3
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	b2da      	uxtb	r2, r3
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008782:	0e9b      	lsrs	r3, r3, #26
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	b2da      	uxtb	r2, r3
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008794:	0d9b      	lsrs	r3, r3, #22
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	b2da      	uxtb	r2, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a6:	0d5b      	lsrs	r3, r3, #21
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	0c1b      	lsrs	r3, r3, #16
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d6:	0bdb      	lsrs	r3, r3, #15
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	0b9b      	lsrs	r3, r3, #14
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fe:	0b5b      	lsrs	r3, r3, #13
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	b2da      	uxtb	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008812:	0b1b      	lsrs	r3, r3, #12
 8008814:	b2db      	uxtb	r3, r3
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	b2da      	uxtb	r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	0a9b      	lsrs	r3, r3, #10
 8008828:	b2db      	uxtb	r3, r3
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	b2da      	uxtb	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883a:	0a1b      	lsrs	r3, r3, #8
 800883c:	b2db      	uxtb	r3, r3
 800883e:	f003 0303 	and.w	r3, r3, #3
 8008842:	b2da      	uxtb	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	b2db      	uxtb	r3, r3
 8008852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008856:	b2da      	uxtb	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	004005ff 	.word	0x004005ff

08008878 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80088d0:	b5b0      	push	{r4, r5, r7, lr}
 80088d2:	b08e      	sub	sp, #56	; 0x38
 80088d4:	af04      	add	r7, sp, #16
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2203      	movs	r2, #3
 80088e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d02e      	beq.n	800894e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f6:	d106      	bne.n	8008906 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	639a      	str	r2, [r3, #56]	; 0x38
 8008904:	e029      	b.n	800895a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800890c:	d10a      	bne.n	8008924 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fb28 	bl	8008f64 <SD_WideBus_Enable>
 8008914:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
 8008922:	e01a      	b.n	800895a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10a      	bne.n	8008940 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fb65 	bl	8008ffa <SD_WideBus_Disable>
 8008930:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	639a      	str	r2, [r3, #56]	; 0x38
 800893e:	e00c      	b.n	800895a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
 800894c:	e005      	b.n	800895a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00b      	beq.n	800897a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a26      	ldr	r2, [pc, #152]	; (8008a00 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008968:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008978:	e01f      	b.n	80089ba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681d      	ldr	r5, [r3, #0]
 80089a0:	466c      	mov	r4, sp
 80089a2:	f107 0314 	add.w	r3, r7, #20
 80089a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089ae:	f107 0308 	add.w	r3, r7, #8
 80089b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089b4:	4628      	mov	r0, r5
 80089b6:	f002 f9cd 	bl	800ad54 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 faa4 	bl	800af10 <SDMMC_CmdBlockLength>
 80089c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00c      	beq.n	80089ea <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a0a      	ldr	r2, [pc, #40]	; (8008a00 <HAL_SD_ConfigWideBusOperation+0x130>)
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80089f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3728      	adds	r7, #40	; 0x28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bdb0      	pop	{r4, r5, r7, pc}
 80089fe:	bf00      	nop
 8008a00:	004005ff 	.word	0x004005ff

08008a04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a10:	f107 030c 	add.w	r3, r7, #12
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fa7c 	bl	8008f14 <SD_SendStatus>
 8008a1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	0a5b      	lsrs	r3, r3, #9
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008a3a:	693b      	ldr	r3, [r7, #16]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	2b82      	cmp	r3, #130	; 0x82
 8008a82:	d111      	bne.n	8008aa8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f002 faeb 	bl	800b064 <SDMMC_CmdStopTransfer>
 8008a8e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d008      	beq.n	8008aa8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f7ff fd3a 	bl	800851c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0208 	bic.w	r2, r2, #8
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7fa ffd1 	bl	8003a78 <HAL_SD_RxCpltCallback>
#endif
}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7fc f9a8 	bl	8004e44 <HAL_DMA_GetError>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d03e      	beq.n	8008b78 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b00:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b08:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d002      	beq.n	8008b16 <SD_DMAError+0x36>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d12d      	bne.n	8008b72 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a19      	ldr	r2, [pc, #100]	; (8008b80 <SD_DMAError+0xa0>)
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008b2c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7ff ff62 	bl	8008a04 <HAL_SD_GetCardState>
 8008b40:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2b06      	cmp	r3, #6
 8008b46:	d002      	beq.n	8008b4e <SD_DMAError+0x6e>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d10a      	bne.n	8008b64 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f002 fa86 	bl	800b064 <SDMMC_CmdStopTransfer>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f7ff fcd2 	bl	800851c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008b78:	bf00      	nop
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	004005ff 	.word	0x004005ff

08008b84 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b9a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7ff ff31 	bl	8008a04 <HAL_SD_GetCardState>
 8008ba2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b06      	cmp	r3, #6
 8008bb6:	d002      	beq.n	8008bbe <SD_DMATxAbort+0x3a>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	d10a      	bne.n	8008bd4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f002 fa4e 	bl	800b064 <SDMMC_CmdStopTransfer>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d103      	bne.n	8008be4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7fa ff37 	bl	8003a50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008be2:	e002      	b.n	8008bea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff fc99 	bl	800851c <HAL_SD_ErrorCallback>
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f7ff fefa 	bl	8008a04 <HAL_SD_GetCardState>
 8008c10:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b06      	cmp	r3, #6
 8008c24:	d002      	beq.n	8008c2c <SD_DMARxAbort+0x3a>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b05      	cmp	r3, #5
 8008c2a:	d10a      	bne.n	8008c42 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f002 fa17 	bl	800b064 <SDMMC_CmdStopTransfer>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d103      	bne.n	8008c52 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7fa ff00 	bl	8003a50 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008c50:	e002      	b.n	8008c58 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f7ff fc62 	bl	800851c <HAL_SD_ErrorCallback>
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c60:	b5b0      	push	{r4, r5, r7, lr}
 8008c62:	b094      	sub	sp, #80	; 0x50
 8008c64:	af04      	add	r7, sp, #16
 8008c66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f002 f8c8 	bl	800ae06 <SDMMC_GetPowerState>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c80:	e0b6      	b.n	8008df0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d02f      	beq.n	8008cea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f002 faf3 	bl	800b27a <SDMMC_CmdSendCID>
 8008c94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <SD_InitCard+0x40>
    {
      return errorstate;
 8008c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9e:	e0a7      	b.n	8008df0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f002 f8f3 	bl	800ae92 <SDMMC_GetResponse>
 8008cac:	4602      	mov	r2, r0
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2104      	movs	r1, #4
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f002 f8ea 	bl	800ae92 <SDMMC_GetResponse>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2108      	movs	r1, #8
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 f8e1 	bl	800ae92 <SDMMC_GetResponse>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	210c      	movs	r1, #12
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f002 f8d8 	bl	800ae92 <SDMMC_GetResponse>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d00d      	beq.n	8008d0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f107 020e 	add.w	r2, r7, #14
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f002 faf9 	bl	800b2f4 <SDMMC_CmdSetRelAdd>
 8008d02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <SD_InitCard+0xae>
    {
      return errorstate;
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	e070      	b.n	8008df0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d036      	beq.n	8008d84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d16:	89fb      	ldrh	r3, [r7, #14]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d26:	041b      	lsls	r3, r3, #16
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f002 fac3 	bl	800b2b6 <SDMMC_CmdSendCSD>
 8008d30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	e059      	b.n	8008df0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2100      	movs	r1, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	f002 f8a5 	bl	800ae92 <SDMMC_GetResponse>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2104      	movs	r1, #4
 8008d54:	4618      	mov	r0, r3
 8008d56:	f002 f89c 	bl	800ae92 <SDMMC_GetResponse>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2108      	movs	r1, #8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f002 f893 	bl	800ae92 <SDMMC_GetResponse>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	210c      	movs	r1, #12
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f002 f88a 	bl	800ae92 <SDMMC_GetResponse>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2104      	movs	r1, #4
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 f881 	bl	800ae92 <SDMMC_GetResponse>
 8008d90:	4603      	mov	r3, r0
 8008d92:	0d1a      	lsrs	r2, r3, #20
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d98:	f107 0310 	add.w	r3, r7, #16
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff fbc6 	bl	8008530 <HAL_SD_GetCardCSD>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008daa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dae:	e01f      	b.n	8008df0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db8:	041b      	lsls	r3, r3, #16
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f04f 0300 	mov.w	r3, #0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	f002 f971 	bl	800b0a8 <SDMMC_CmdSelDesel>
 8008dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <SD_InitCard+0x172>
  {
    return errorstate;
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	e00e      	b.n	8008df0 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681d      	ldr	r5, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	466c      	mov	r4, sp
 8008dda:	f103 0210 	add.w	r2, r3, #16
 8008dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8008de0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008de4:	3304      	adds	r3, #4
 8008de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008de8:	4628      	mov	r0, r5
 8008dea:	f001 ffb3 	bl	800ad54 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3740      	adds	r7, #64	; 0x40
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bdb0      	pop	{r4, r5, r7, pc}

08008df8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f002 f96c 	bl	800b0ee <SDMMC_CmdGoIdleState>
 8008e16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	e072      	b.n	8008f08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f002 f97f 	bl	800b12a <SDMMC_CmdOperCond>
 8008e2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00d      	beq.n	8008e50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f002 f955 	bl	800b0ee <SDMMC_CmdGoIdleState>
 8008e44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	e05b      	b.n	8008f08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d137      	bne.n	8008ece <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f002 f97f 	bl	800b168 <SDMMC_CmdAppCommand>
 8008e6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d02d      	beq.n	8008ece <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e76:	e047      	b.n	8008f08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 f972 	bl	800b168 <SDMMC_CmdAppCommand>
 8008e84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <SD_PowerON+0x98>
    {
      return errorstate;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	e03b      	b.n	8008f08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	491e      	ldr	r1, [pc, #120]	; (8008f10 <SD_PowerON+0x118>)
 8008e96:	4618      	mov	r0, r3
 8008e98:	f002 f988 	bl	800b1ac <SDMMC_CmdAppOperCommand>
 8008e9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ea4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ea8:	e02e      	b.n	8008f08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 ffee 	bl	800ae92 <SDMMC_GetResponse>
 8008eb6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	0fdb      	lsrs	r3, r3, #31
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d101      	bne.n	8008ec4 <SD_PowerON+0xcc>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e000      	b.n	8008ec6 <SD_PowerON+0xce>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]

    count++;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d802      	bhi.n	8008ede <SD_PowerON+0xe6>
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0cc      	beq.n	8008e78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d902      	bls.n	8008eee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eec:	e00c      	b.n	8008f08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d003      	beq.n	8008f00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	645a      	str	r2, [r3, #68]	; 0x44
 8008efe:	e002      	b.n	8008f06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	c1100000 	.word	0xc1100000

08008f14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008f24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f28:	e018      	b.n	8008f5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f32:	041b      	lsls	r3, r3, #16
 8008f34:	4619      	mov	r1, r3
 8008f36:	4610      	mov	r0, r2
 8008f38:	f002 f9fd 	bl	800b336 <SDMMC_CmdSendStatus>
 8008f3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	e009      	b.n	8008f5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f001 ff9f 	bl	800ae92 <SDMMC_GetResponse>
 8008f54:	4602      	mov	r2, r0
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	2300      	movs	r3, #0
 8008f72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f001 ff89 	bl	800ae92 <SDMMC_GetResponse>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f8a:	d102      	bne.n	8008f92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f90:	e02f      	b.n	8008ff2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f92:	f107 030c 	add.w	r3, r7, #12
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f879 	bl	8009090 <SD_FindSCR>
 8008f9e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	e023      	b.n	8008ff2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d01c      	beq.n	8008fee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fbc:	041b      	lsls	r3, r3, #16
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	f002 f8d1 	bl	800b168 <SDMMC_CmdAppCommand>
 8008fc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	e00f      	b.n	8008ff2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f002 f90b 	bl	800b1f4 <SDMMC_CmdBusWidth>
 8008fde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	e003      	b.n	8008ff2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e001      	b.n	8008ff2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b086      	sub	sp, #24
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	f001 ff3e 	bl	800ae92 <SDMMC_GetResponse>
 8009016:	4603      	mov	r3, r0
 8009018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009020:	d102      	bne.n	8009028 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009026:	e02f      	b.n	8009088 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009028:	f107 030c 	add.w	r3, r7, #12
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f82e 	bl	8009090 <SD_FindSCR>
 8009034:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	e023      	b.n	8009088 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01c      	beq.n	8009084 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009052:	041b      	lsls	r3, r3, #16
 8009054:	4619      	mov	r1, r3
 8009056:	4610      	mov	r0, r2
 8009058:	f002 f886 	bl	800b168 <SDMMC_CmdAppCommand>
 800905c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	e00f      	b.n	8009088 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2100      	movs	r1, #0
 800906e:	4618      	mov	r0, r3
 8009070:	f002 f8c0 	bl	800b1f4 <SDMMC_CmdBusWidth>
 8009074:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	e003      	b.n	8009088 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009080:	2300      	movs	r3, #0
 8009082:	e001      	b.n	8009088 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009084:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009090:	b590      	push	{r4, r7, lr}
 8009092:	b08f      	sub	sp, #60	; 0x3c
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800909a:	f7fa ff07 	bl	8003eac <HAL_GetTick>
 800909e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80090a4:	2300      	movs	r3, #0
 80090a6:	60bb      	str	r3, [r7, #8]
 80090a8:	2300      	movs	r3, #0
 80090aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2108      	movs	r1, #8
 80090b6:	4618      	mov	r0, r3
 80090b8:	f001 ff2a 	bl	800af10 <SDMMC_CmdBlockLength>
 80090bc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	e0b2      	b.n	800922e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d0:	041b      	lsls	r3, r3, #16
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f002 f847 	bl	800b168 <SDMMC_CmdAppCommand>
 80090da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	e0a3      	b.n	800922e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80090ec:	2308      	movs	r3, #8
 80090ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80090f0:	2330      	movs	r3, #48	; 0x30
 80090f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090f4:	2302      	movs	r3, #2
 80090f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80090fc:	2301      	movs	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f107 0210 	add.w	r2, r7, #16
 8009108:	4611      	mov	r1, r2
 800910a:	4618      	mov	r0, r3
 800910c:	f001 fed4 	bl	800aeb8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f002 f88f 	bl	800b238 <SDMMC_CmdSendSCR>
 800911a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	d02a      	beq.n	8009178 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	e083      	b.n	800922e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00f      	beq.n	8009154 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6819      	ldr	r1, [r3, #0]
 8009138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	f107 0208 	add.w	r2, r7, #8
 8009140:	18d4      	adds	r4, r2, r3
 8009142:	4608      	mov	r0, r1
 8009144:	f001 fe32 	bl	800adac <SDMMC_ReadFIFO>
 8009148:	4603      	mov	r3, r0
 800914a:	6023      	str	r3, [r4, #0]
      index++;
 800914c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914e:	3301      	adds	r3, #1
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
 8009152:	e006      	b.n	8009162 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d012      	beq.n	8009188 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009162:	f7fa fea3 	bl	8003eac <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009170:	d102      	bne.n	8009178 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009172:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009176:	e05a      	b.n	800922e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0cf      	beq.n	8009126 <SD_FindSCR+0x96>
 8009186:	e000      	b.n	800918a <SD_FindSCR+0xfa>
      break;
 8009188:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2208      	movs	r2, #8
 800919e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80091a0:	2308      	movs	r3, #8
 80091a2:	e044      	b.n	800922e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d005      	beq.n	80091be <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2202      	movs	r2, #2
 80091b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80091ba:	2302      	movs	r3, #2
 80091bc:	e037      	b.n	800922e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c4:	f003 0320 	and.w	r3, r3, #32
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2220      	movs	r2, #32
 80091d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80091d4:	2320      	movs	r3, #32
 80091d6:	e02a      	b.n	800922e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80091e0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	061a      	lsls	r2, r3, #24
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	021b      	lsls	r3, r3, #8
 80091ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	0e1b      	lsrs	r3, r3, #24
 80091fe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	601a      	str	r2, [r3, #0]
    scr++;
 8009204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009206:	3304      	adds	r3, #4
 8009208:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	061a      	lsls	r2, r3, #24
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	021b      	lsls	r3, r3, #8
 8009212:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009216:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	0a1b      	lsrs	r3, r3, #8
 800921c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009220:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	0e1b      	lsrs	r3, r3, #24
 8009226:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	373c      	adds	r7, #60	; 0x3c
 8009232:	46bd      	mov	sp, r7
 8009234:	bd90      	pop	{r4, r7, pc}

08009236 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b086      	sub	sp, #24
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d03f      	beq.n	80092d0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	e033      	b.n	80092be <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4618      	mov	r0, r3
 800925c:	f001 fda6 	bl	800adac <SDMMC_ReadFIFO>
 8009260:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	b2da      	uxtb	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	701a      	strb	r2, [r3, #0]
      tmp++;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	3b01      	subs	r3, #1
 8009274:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	0a1b      	lsrs	r3, r3, #8
 800927a:	b2da      	uxtb	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3301      	adds	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3b01      	subs	r3, #1
 800928a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	0c1b      	lsrs	r3, r3, #16
 8009290:	b2da      	uxtb	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	3b01      	subs	r3, #1
 80092a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	0e1b      	lsrs	r3, r3, #24
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	3301      	adds	r3, #1
 80092b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	3301      	adds	r3, #1
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2b07      	cmp	r3, #7
 80092c2:	d9c8      	bls.n	8009256 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80092d0:	bf00      	nop
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d043      	beq.n	800937a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	e037      	b.n	8009368 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	3301      	adds	r3, #1
 8009302:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	3b01      	subs	r3, #1
 8009308:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	021a      	lsls	r2, r3, #8
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4313      	orrs	r3, r2
 8009314:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3301      	adds	r3, #1
 800931a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	3b01      	subs	r3, #1
 8009320:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	041a      	lsls	r2, r3, #16
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4313      	orrs	r3, r2
 800932c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3b01      	subs	r3, #1
 8009338:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	061a      	lsls	r2, r3, #24
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	4313      	orrs	r3, r2
 8009344:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3b01      	subs	r3, #1
 8009350:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f107 0208 	add.w	r2, r7, #8
 800935a:	4611      	mov	r1, r2
 800935c:	4618      	mov	r0, r3
 800935e:	f001 fd32 	bl	800adc6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	3301      	adds	r3, #1
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2b07      	cmp	r3, #7
 800936c:	d9c4      	bls.n	80092f8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800937a:	bf00      	nop
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e025      	b.n	80093e2 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d106      	bne.n	80093b0 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7f9 fb4a 	bl	8002a44 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3304      	adds	r3, #4
 80093c0:	4619      	mov	r1, r3
 80093c2:	4610      	mov	r0, r2
 80093c4:	f001 fb9c 	bl	800ab00 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	461a      	mov	r2, r3
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	f001 fc06 	bl	800abe4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d101      	bne.n	8009406 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009402:	2302      	movs	r3, #2
 8009404:	e018      	b.n	8009438 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2202      	movs	r2, #2
 800940a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	4618      	mov	r0, r3
 8009418:	f001 fc64 	bl	800ace4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b02      	cmp	r3, #2
 8009422:	d104      	bne.n	800942e <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2205      	movs	r2, #5
 8009428:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800942c:	e003      	b.n	8009436 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d101      	bne.n	800945a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009456:	2302      	movs	r3, #2
 8009458:	e00e      	b.n	8009478 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2202      	movs	r2, #2
 800945e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	4618      	mov	r0, r3
 800946a:	f001 fc5f 	bl	800ad2c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e049      	b.n	8009526 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7f9 f8bc 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2202      	movs	r2, #2
 80094b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4619      	mov	r1, r3
 80094be:	4610      	mov	r0, r2
 80094c0:	f000 fa62 	bl	8009988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e049      	b.n	80095d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7f9 f8ad 	bl	80026b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2202      	movs	r2, #2
 800955e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3304      	adds	r3, #4
 800956a:	4619      	mov	r1, r3
 800956c:	4610      	mov	r0, r2
 800956e:	f000 fa0b 	bl	8009988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d101      	bne.n	80095f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80095f2:	2302      	movs	r3, #2
 80095f4:	e0fd      	b.n	80097f2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b14      	cmp	r3, #20
 8009602:	f200 80f0 	bhi.w	80097e6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009606:	a201      	add	r2, pc, #4	; (adr r2, 800960c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960c:	08009661 	.word	0x08009661
 8009610:	080097e7 	.word	0x080097e7
 8009614:	080097e7 	.word	0x080097e7
 8009618:	080097e7 	.word	0x080097e7
 800961c:	080096a1 	.word	0x080096a1
 8009620:	080097e7 	.word	0x080097e7
 8009624:	080097e7 	.word	0x080097e7
 8009628:	080097e7 	.word	0x080097e7
 800962c:	080096e3 	.word	0x080096e3
 8009630:	080097e7 	.word	0x080097e7
 8009634:	080097e7 	.word	0x080097e7
 8009638:	080097e7 	.word	0x080097e7
 800963c:	08009723 	.word	0x08009723
 8009640:	080097e7 	.word	0x080097e7
 8009644:	080097e7 	.word	0x080097e7
 8009648:	080097e7 	.word	0x080097e7
 800964c:	08009765 	.word	0x08009765
 8009650:	080097e7 	.word	0x080097e7
 8009654:	080097e7 	.word	0x080097e7
 8009658:	080097e7 	.word	0x080097e7
 800965c:	080097a5 	.word	0x080097a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fa2e 	bl	8009ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699a      	ldr	r2, [r3, #24]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0208 	orr.w	r2, r2, #8
 800967a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 0204 	bic.w	r2, r2, #4
 800968a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6999      	ldr	r1, [r3, #24]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	619a      	str	r2, [r3, #24]
      break;
 800969e:	e0a3      	b.n	80097e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68b9      	ldr	r1, [r7, #8]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f000 fa80 	bl	8009bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	699a      	ldr	r2, [r3, #24]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	699a      	ldr	r2, [r3, #24]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	6999      	ldr	r1, [r3, #24]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	021a      	lsls	r2, r3, #8
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	430a      	orrs	r2, r1
 80096de:	619a      	str	r2, [r3, #24]
      break;
 80096e0:	e082      	b.n	80097e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fad7 	bl	8009c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69da      	ldr	r2, [r3, #28]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f042 0208 	orr.w	r2, r2, #8
 80096fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69da      	ldr	r2, [r3, #28]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0204 	bic.w	r2, r2, #4
 800970c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69d9      	ldr	r1, [r3, #28]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	430a      	orrs	r2, r1
 800971e:	61da      	str	r2, [r3, #28]
      break;
 8009720:	e062      	b.n	80097e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fb2d 	bl	8009d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69da      	ldr	r2, [r3, #28]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69da      	ldr	r2, [r3, #28]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800974c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69d9      	ldr	r1, [r3, #28]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	021a      	lsls	r2, r3, #8
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	61da      	str	r2, [r3, #28]
      break;
 8009762:	e041      	b.n	80097e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68b9      	ldr	r1, [r7, #8]
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fb64 	bl	8009e38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0208 	orr.w	r2, r2, #8
 800977e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 0204 	bic.w	r2, r2, #4
 800978e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80097a2:	e021      	b.n	80097e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fb96 	bl	8009edc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	021a      	lsls	r2, r3, #8
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80097e4:	e000      	b.n	80097e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80097e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop

080097fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800980c:	2b01      	cmp	r3, #1
 800980e:	d101      	bne.n	8009814 <HAL_TIM_ConfigClockSource+0x18>
 8009810:	2302      	movs	r3, #2
 8009812:	e0b3      	b.n	800997c <HAL_TIM_ConfigClockSource+0x180>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	4b55      	ldr	r3, [pc, #340]	; (8009984 <HAL_TIM_ConfigClockSource+0x188>)
 8009830:	4013      	ands	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800983a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800984c:	d03e      	beq.n	80098cc <HAL_TIM_ConfigClockSource+0xd0>
 800984e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009852:	f200 8087 	bhi.w	8009964 <HAL_TIM_ConfigClockSource+0x168>
 8009856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800985a:	f000 8085 	beq.w	8009968 <HAL_TIM_ConfigClockSource+0x16c>
 800985e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009862:	d87f      	bhi.n	8009964 <HAL_TIM_ConfigClockSource+0x168>
 8009864:	2b70      	cmp	r3, #112	; 0x70
 8009866:	d01a      	beq.n	800989e <HAL_TIM_ConfigClockSource+0xa2>
 8009868:	2b70      	cmp	r3, #112	; 0x70
 800986a:	d87b      	bhi.n	8009964 <HAL_TIM_ConfigClockSource+0x168>
 800986c:	2b60      	cmp	r3, #96	; 0x60
 800986e:	d050      	beq.n	8009912 <HAL_TIM_ConfigClockSource+0x116>
 8009870:	2b60      	cmp	r3, #96	; 0x60
 8009872:	d877      	bhi.n	8009964 <HAL_TIM_ConfigClockSource+0x168>
 8009874:	2b50      	cmp	r3, #80	; 0x50
 8009876:	d03c      	beq.n	80098f2 <HAL_TIM_ConfigClockSource+0xf6>
 8009878:	2b50      	cmp	r3, #80	; 0x50
 800987a:	d873      	bhi.n	8009964 <HAL_TIM_ConfigClockSource+0x168>
 800987c:	2b40      	cmp	r3, #64	; 0x40
 800987e:	d058      	beq.n	8009932 <HAL_TIM_ConfigClockSource+0x136>
 8009880:	2b40      	cmp	r3, #64	; 0x40
 8009882:	d86f      	bhi.n	8009964 <HAL_TIM_ConfigClockSource+0x168>
 8009884:	2b30      	cmp	r3, #48	; 0x30
 8009886:	d064      	beq.n	8009952 <HAL_TIM_ConfigClockSource+0x156>
 8009888:	2b30      	cmp	r3, #48	; 0x30
 800988a:	d86b      	bhi.n	8009964 <HAL_TIM_ConfigClockSource+0x168>
 800988c:	2b20      	cmp	r3, #32
 800988e:	d060      	beq.n	8009952 <HAL_TIM_ConfigClockSource+0x156>
 8009890:	2b20      	cmp	r3, #32
 8009892:	d867      	bhi.n	8009964 <HAL_TIM_ConfigClockSource+0x168>
 8009894:	2b00      	cmp	r3, #0
 8009896:	d05c      	beq.n	8009952 <HAL_TIM_ConfigClockSource+0x156>
 8009898:	2b10      	cmp	r3, #16
 800989a:	d05a      	beq.n	8009952 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800989c:	e062      	b.n	8009964 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	6899      	ldr	r1, [r3, #8]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	f000 fbe3 	bl	800a078 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	609a      	str	r2, [r3, #8]
      break;
 80098ca:	e04e      	b.n	800996a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	6899      	ldr	r1, [r3, #8]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	f000 fbcc 	bl	800a078 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689a      	ldr	r2, [r3, #8]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098ee:	609a      	str	r2, [r3, #8]
      break;
 80098f0:	e03b      	b.n	800996a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	6859      	ldr	r1, [r3, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	461a      	mov	r2, r3
 8009900:	f000 fb40 	bl	8009f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2150      	movs	r1, #80	; 0x50
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fb99 	bl	800a042 <TIM_ITRx_SetConfig>
      break;
 8009910:	e02b      	b.n	800996a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6818      	ldr	r0, [r3, #0]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	6859      	ldr	r1, [r3, #4]
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	461a      	mov	r2, r3
 8009920:	f000 fb5f 	bl	8009fe2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2160      	movs	r1, #96	; 0x60
 800992a:	4618      	mov	r0, r3
 800992c:	f000 fb89 	bl	800a042 <TIM_ITRx_SetConfig>
      break;
 8009930:	e01b      	b.n	800996a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	6859      	ldr	r1, [r3, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	461a      	mov	r2, r3
 8009940:	f000 fb20 	bl	8009f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2140      	movs	r1, #64	; 0x40
 800994a:	4618      	mov	r0, r3
 800994c:	f000 fb79 	bl	800a042 <TIM_ITRx_SetConfig>
      break;
 8009950:	e00b      	b.n	800996a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	4610      	mov	r0, r2
 800995e:	f000 fb70 	bl	800a042 <TIM_ITRx_SetConfig>
        break;
 8009962:	e002      	b.n	800996a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009964:	bf00      	nop
 8009966:	e000      	b.n	800996a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009968:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	fffeff88 	.word	0xfffeff88

08009988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a40      	ldr	r2, [pc, #256]	; (8009a9c <TIM_Base_SetConfig+0x114>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d013      	beq.n	80099c8 <TIM_Base_SetConfig+0x40>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a6:	d00f      	beq.n	80099c8 <TIM_Base_SetConfig+0x40>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a3d      	ldr	r2, [pc, #244]	; (8009aa0 <TIM_Base_SetConfig+0x118>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d00b      	beq.n	80099c8 <TIM_Base_SetConfig+0x40>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a3c      	ldr	r2, [pc, #240]	; (8009aa4 <TIM_Base_SetConfig+0x11c>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d007      	beq.n	80099c8 <TIM_Base_SetConfig+0x40>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a3b      	ldr	r2, [pc, #236]	; (8009aa8 <TIM_Base_SetConfig+0x120>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d003      	beq.n	80099c8 <TIM_Base_SetConfig+0x40>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a3a      	ldr	r2, [pc, #232]	; (8009aac <TIM_Base_SetConfig+0x124>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d108      	bne.n	80099da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a2f      	ldr	r2, [pc, #188]	; (8009a9c <TIM_Base_SetConfig+0x114>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d02b      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e8:	d027      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a2c      	ldr	r2, [pc, #176]	; (8009aa0 <TIM_Base_SetConfig+0x118>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d023      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a2b      	ldr	r2, [pc, #172]	; (8009aa4 <TIM_Base_SetConfig+0x11c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d01f      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a2a      	ldr	r2, [pc, #168]	; (8009aa8 <TIM_Base_SetConfig+0x120>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d01b      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a29      	ldr	r2, [pc, #164]	; (8009aac <TIM_Base_SetConfig+0x124>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d017      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a28      	ldr	r2, [pc, #160]	; (8009ab0 <TIM_Base_SetConfig+0x128>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d013      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a27      	ldr	r2, [pc, #156]	; (8009ab4 <TIM_Base_SetConfig+0x12c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00f      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a26      	ldr	r2, [pc, #152]	; (8009ab8 <TIM_Base_SetConfig+0x130>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d00b      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a25      	ldr	r2, [pc, #148]	; (8009abc <TIM_Base_SetConfig+0x134>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d007      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a24      	ldr	r2, [pc, #144]	; (8009ac0 <TIM_Base_SetConfig+0x138>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d003      	beq.n	8009a3a <TIM_Base_SetConfig+0xb2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a23      	ldr	r2, [pc, #140]	; (8009ac4 <TIM_Base_SetConfig+0x13c>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d108      	bne.n	8009a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a0a      	ldr	r2, [pc, #40]	; (8009a9c <TIM_Base_SetConfig+0x114>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d003      	beq.n	8009a80 <TIM_Base_SetConfig+0xf8>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a0c      	ldr	r2, [pc, #48]	; (8009aac <TIM_Base_SetConfig+0x124>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d103      	bne.n	8009a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	615a      	str	r2, [r3, #20]
}
 8009a8e:	bf00      	nop
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	40010000 	.word	0x40010000
 8009aa0:	40000400 	.word	0x40000400
 8009aa4:	40000800 	.word	0x40000800
 8009aa8:	40000c00 	.word	0x40000c00
 8009aac:	40010400 	.word	0x40010400
 8009ab0:	40014000 	.word	0x40014000
 8009ab4:	40014400 	.word	0x40014400
 8009ab8:	40014800 	.word	0x40014800
 8009abc:	40001800 	.word	0x40001800
 8009ac0:	40001c00 	.word	0x40001c00
 8009ac4:	40002000 	.word	0x40002000

08009ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	f023 0201 	bic.w	r2, r3, #1
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4b2b      	ldr	r3, [pc, #172]	; (8009ba0 <TIM_OC1_SetConfig+0xd8>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0303 	bic.w	r3, r3, #3
 8009afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f023 0302 	bic.w	r3, r3, #2
 8009b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a21      	ldr	r2, [pc, #132]	; (8009ba4 <TIM_OC1_SetConfig+0xdc>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d003      	beq.n	8009b2c <TIM_OC1_SetConfig+0x64>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a20      	ldr	r2, [pc, #128]	; (8009ba8 <TIM_OC1_SetConfig+0xe0>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d10c      	bne.n	8009b46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f023 0308 	bic.w	r3, r3, #8
 8009b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f023 0304 	bic.w	r3, r3, #4
 8009b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a16      	ldr	r2, [pc, #88]	; (8009ba4 <TIM_OC1_SetConfig+0xdc>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d003      	beq.n	8009b56 <TIM_OC1_SetConfig+0x8e>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a15      	ldr	r2, [pc, #84]	; (8009ba8 <TIM_OC1_SetConfig+0xe0>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d111      	bne.n	8009b7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	621a      	str	r2, [r3, #32]
}
 8009b94:	bf00      	nop
 8009b96:	371c      	adds	r7, #28
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	fffeff8f 	.word	0xfffeff8f
 8009ba4:	40010000 	.word	0x40010000
 8009ba8:	40010400 	.word	0x40010400

08009bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
 8009bba:	f023 0210 	bic.w	r2, r3, #16
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	4b2e      	ldr	r3, [pc, #184]	; (8009c90 <TIM_OC2_SetConfig+0xe4>)
 8009bd8:	4013      	ands	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	021b      	lsls	r3, r3, #8
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	f023 0320 	bic.w	r3, r3, #32
 8009bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	011b      	lsls	r3, r3, #4
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a23      	ldr	r2, [pc, #140]	; (8009c94 <TIM_OC2_SetConfig+0xe8>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d003      	beq.n	8009c14 <TIM_OC2_SetConfig+0x68>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a22      	ldr	r2, [pc, #136]	; (8009c98 <TIM_OC2_SetConfig+0xec>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d10d      	bne.n	8009c30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a18      	ldr	r2, [pc, #96]	; (8009c94 <TIM_OC2_SetConfig+0xe8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d003      	beq.n	8009c40 <TIM_OC2_SetConfig+0x94>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a17      	ldr	r2, [pc, #92]	; (8009c98 <TIM_OC2_SetConfig+0xec>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d113      	bne.n	8009c68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	621a      	str	r2, [r3, #32]
}
 8009c82:	bf00      	nop
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	feff8fff 	.word	0xfeff8fff
 8009c94:	40010000 	.word	0x40010000
 8009c98:	40010400 	.word	0x40010400

08009c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4b2d      	ldr	r3, [pc, #180]	; (8009d7c <TIM_OC3_SetConfig+0xe0>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f023 0303 	bic.w	r3, r3, #3
 8009cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	021b      	lsls	r3, r3, #8
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a22      	ldr	r2, [pc, #136]	; (8009d80 <TIM_OC3_SetConfig+0xe4>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d003      	beq.n	8009d02 <TIM_OC3_SetConfig+0x66>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a21      	ldr	r2, [pc, #132]	; (8009d84 <TIM_OC3_SetConfig+0xe8>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d10d      	bne.n	8009d1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	021b      	lsls	r3, r3, #8
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a17      	ldr	r2, [pc, #92]	; (8009d80 <TIM_OC3_SetConfig+0xe4>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d003      	beq.n	8009d2e <TIM_OC3_SetConfig+0x92>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a16      	ldr	r2, [pc, #88]	; (8009d84 <TIM_OC3_SetConfig+0xe8>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d113      	bne.n	8009d56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	011b      	lsls	r3, r3, #4
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	685a      	ldr	r2, [r3, #4]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	621a      	str	r2, [r3, #32]
}
 8009d70:	bf00      	nop
 8009d72:	371c      	adds	r7, #28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	fffeff8f 	.word	0xfffeff8f
 8009d80:	40010000 	.word	0x40010000
 8009d84:	40010400 	.word	0x40010400

08009d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	4b1e      	ldr	r3, [pc, #120]	; (8009e2c <TIM_OC4_SetConfig+0xa4>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	021b      	lsls	r3, r3, #8
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	031b      	lsls	r3, r3, #12
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a13      	ldr	r2, [pc, #76]	; (8009e30 <TIM_OC4_SetConfig+0xa8>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d003      	beq.n	8009df0 <TIM_OC4_SetConfig+0x68>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a12      	ldr	r2, [pc, #72]	; (8009e34 <TIM_OC4_SetConfig+0xac>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d109      	bne.n	8009e04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	019b      	lsls	r3, r3, #6
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	621a      	str	r2, [r3, #32]
}
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	feff8fff 	.word	0xfeff8fff
 8009e30:	40010000 	.word	0x40010000
 8009e34:	40010400 	.word	0x40010400

08009e38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	4b1b      	ldr	r3, [pc, #108]	; (8009ed0 <TIM_OC5_SetConfig+0x98>)
 8009e64:	4013      	ands	r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	041b      	lsls	r3, r3, #16
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a12      	ldr	r2, [pc, #72]	; (8009ed4 <TIM_OC5_SetConfig+0x9c>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d003      	beq.n	8009e96 <TIM_OC5_SetConfig+0x5e>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a11      	ldr	r2, [pc, #68]	; (8009ed8 <TIM_OC5_SetConfig+0xa0>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d109      	bne.n	8009eaa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	021b      	lsls	r3, r3, #8
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	621a      	str	r2, [r3, #32]
}
 8009ec4:	bf00      	nop
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	fffeff8f 	.word	0xfffeff8f
 8009ed4:	40010000 	.word	0x40010000
 8009ed8:	40010400 	.word	0x40010400

08009edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	4b1c      	ldr	r3, [pc, #112]	; (8009f78 <TIM_OC6_SetConfig+0x9c>)
 8009f08:	4013      	ands	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	021b      	lsls	r3, r3, #8
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	051b      	lsls	r3, r3, #20
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a13      	ldr	r2, [pc, #76]	; (8009f7c <TIM_OC6_SetConfig+0xa0>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_OC6_SetConfig+0x60>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a12      	ldr	r2, [pc, #72]	; (8009f80 <TIM_OC6_SetConfig+0xa4>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d109      	bne.n	8009f50 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	029b      	lsls	r3, r3, #10
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	621a      	str	r2, [r3, #32]
}
 8009f6a:	bf00      	nop
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	feff8fff 	.word	0xfeff8fff
 8009f7c:	40010000 	.word	0x40010000
 8009f80:	40010400 	.word	0x40010400

08009f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b087      	sub	sp, #28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	f023 0201 	bic.w	r2, r3, #1
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	011b      	lsls	r3, r3, #4
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f023 030a 	bic.w	r3, r3, #10
 8009fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	621a      	str	r2, [r3, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b087      	sub	sp, #28
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a1b      	ldr	r3, [r3, #32]
 8009ff2:	f023 0210 	bic.w	r2, r3, #16
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a00c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	031b      	lsls	r3, r3, #12
 800a012:	697a      	ldr	r2, [r7, #20]
 800a014:	4313      	orrs	r3, r2
 800a016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a01e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4313      	orrs	r3, r2
 800a028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	621a      	str	r2, [r3, #32]
}
 800a036:	bf00      	nop
 800a038:	371c      	adds	r7, #28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a042:	b480      	push	{r7}
 800a044:	b085      	sub	sp, #20
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4313      	orrs	r3, r2
 800a060:	f043 0307 	orr.w	r3, r3, #7
 800a064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	609a      	str	r2, [r3, #8]
}
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	021a      	lsls	r2, r3, #8
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	431a      	orrs	r2, r3
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	609a      	str	r2, [r3, #8]
}
 800a0ac:	bf00      	nop
 800a0ae:	371c      	adds	r7, #28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e06d      	b.n	800a1ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a30      	ldr	r2, [pc, #192]	; (800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a2f      	ldr	r2, [pc, #188]	; (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d108      	bne.n	800a116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a10a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	4313      	orrs	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a20      	ldr	r2, [pc, #128]	; (800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d022      	beq.n	800a180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a142:	d01d      	beq.n	800a180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a1d      	ldr	r2, [pc, #116]	; (800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d018      	beq.n	800a180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a1c      	ldr	r2, [pc, #112]	; (800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d013      	beq.n	800a180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a1a      	ldr	r2, [pc, #104]	; (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00e      	beq.n	800a180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a15      	ldr	r2, [pc, #84]	; (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d009      	beq.n	800a180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a16      	ldr	r2, [pc, #88]	; (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d004      	beq.n	800a180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d10c      	bne.n	800a19a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	40010000 	.word	0x40010000
 800a1bc:	40010400 	.word	0x40010400
 800a1c0:	40000400 	.word	0x40000400
 800a1c4:	40000800 	.word	0x40000800
 800a1c8:	40000c00 	.word	0x40000c00
 800a1cc:	40014000 	.word	0x40014000
 800a1d0:	40001800 	.word	0x40001800

0800a1d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e040      	b.n	800a268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d106      	bne.n	800a1fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7f8 fb00 	bl	80027fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2224      	movs	r2, #36	; 0x24
 800a200:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f022 0201 	bic.w	r2, r2, #1
 800a210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f8c0 	bl	800a398 <UART_SetConfig>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d101      	bne.n	800a222 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e022      	b.n	800a268 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fb16 	bl	800a85c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a23e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a24e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f042 0201 	orr.w	r2, r2, #1
 800a25e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fb9d 	bl	800a9a0 <UART_CheckIdleState>
 800a266:	4603      	mov	r3, r0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	; 0x28
 800a274:	af02      	add	r7, sp, #8
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	603b      	str	r3, [r7, #0]
 800a27c:	4613      	mov	r3, r2
 800a27e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a284:	2b20      	cmp	r3, #32
 800a286:	f040 8081 	bne.w	800a38c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <HAL_UART_Transmit+0x26>
 800a290:	88fb      	ldrh	r3, [r7, #6]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e079      	b.n	800a38e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_UART_Transmit+0x38>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e072      	b.n	800a38e <HAL_UART_Transmit+0x11e>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2221      	movs	r2, #33	; 0x21
 800a2bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2be:	f7f9 fdf5 	bl	8003eac <HAL_GetTick>
 800a2c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	88fa      	ldrh	r2, [r7, #6]
 800a2d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2dc:	d108      	bne.n	800a2f0 <HAL_UART_Transmit+0x80>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d104      	bne.n	800a2f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	e003      	b.n	800a2f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a300:	e02c      	b.n	800a35c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2200      	movs	r2, #0
 800a30a:	2180      	movs	r1, #128	; 0x80
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 fb7a 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e038      	b.n	800a38e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10b      	bne.n	800a33a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	461a      	mov	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a330:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	3302      	adds	r3, #2
 800a336:	61bb      	str	r3, [r7, #24]
 800a338:	e007      	b.n	800a34a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	781a      	ldrb	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	3301      	adds	r3, #1
 800a348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a350:	b29b      	uxth	r3, r3
 800a352:	3b01      	subs	r3, #1
 800a354:	b29a      	uxth	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a362:	b29b      	uxth	r3, r3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1cc      	bne.n	800a302 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2200      	movs	r2, #0
 800a370:	2140      	movs	r1, #64	; 0x40
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f000 fb47 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e005      	b.n	800a38e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2220      	movs	r2, #32
 800a386:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	e000      	b.n	800a38e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a38c:	2302      	movs	r3, #2
  }
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3720      	adds	r7, #32
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	4ba7      	ldr	r3, [pc, #668]	; (800a660 <UART_SetConfig+0x2c8>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	6979      	ldr	r1, [r7, #20]
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	430a      	orrs	r2, r1
 800a408:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a95      	ldr	r2, [pc, #596]	; (800a664 <UART_SetConfig+0x2cc>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d120      	bne.n	800a456 <UART_SetConfig+0xbe>
 800a414:	4b94      	ldr	r3, [pc, #592]	; (800a668 <UART_SetConfig+0x2d0>)
 800a416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41a:	f003 0303 	and.w	r3, r3, #3
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d816      	bhi.n	800a450 <UART_SetConfig+0xb8>
 800a422:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <UART_SetConfig+0x90>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a439 	.word	0x0800a439
 800a42c:	0800a445 	.word	0x0800a445
 800a430:	0800a43f 	.word	0x0800a43f
 800a434:	0800a44b 	.word	0x0800a44b
 800a438:	2301      	movs	r3, #1
 800a43a:	77fb      	strb	r3, [r7, #31]
 800a43c:	e14f      	b.n	800a6de <UART_SetConfig+0x346>
 800a43e:	2302      	movs	r3, #2
 800a440:	77fb      	strb	r3, [r7, #31]
 800a442:	e14c      	b.n	800a6de <UART_SetConfig+0x346>
 800a444:	2304      	movs	r3, #4
 800a446:	77fb      	strb	r3, [r7, #31]
 800a448:	e149      	b.n	800a6de <UART_SetConfig+0x346>
 800a44a:	2308      	movs	r3, #8
 800a44c:	77fb      	strb	r3, [r7, #31]
 800a44e:	e146      	b.n	800a6de <UART_SetConfig+0x346>
 800a450:	2310      	movs	r3, #16
 800a452:	77fb      	strb	r3, [r7, #31]
 800a454:	e143      	b.n	800a6de <UART_SetConfig+0x346>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a84      	ldr	r2, [pc, #528]	; (800a66c <UART_SetConfig+0x2d4>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d132      	bne.n	800a4c6 <UART_SetConfig+0x12e>
 800a460:	4b81      	ldr	r3, [pc, #516]	; (800a668 <UART_SetConfig+0x2d0>)
 800a462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a466:	f003 030c 	and.w	r3, r3, #12
 800a46a:	2b0c      	cmp	r3, #12
 800a46c:	d828      	bhi.n	800a4c0 <UART_SetConfig+0x128>
 800a46e:	a201      	add	r2, pc, #4	; (adr r2, 800a474 <UART_SetConfig+0xdc>)
 800a470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a474:	0800a4a9 	.word	0x0800a4a9
 800a478:	0800a4c1 	.word	0x0800a4c1
 800a47c:	0800a4c1 	.word	0x0800a4c1
 800a480:	0800a4c1 	.word	0x0800a4c1
 800a484:	0800a4b5 	.word	0x0800a4b5
 800a488:	0800a4c1 	.word	0x0800a4c1
 800a48c:	0800a4c1 	.word	0x0800a4c1
 800a490:	0800a4c1 	.word	0x0800a4c1
 800a494:	0800a4af 	.word	0x0800a4af
 800a498:	0800a4c1 	.word	0x0800a4c1
 800a49c:	0800a4c1 	.word	0x0800a4c1
 800a4a0:	0800a4c1 	.word	0x0800a4c1
 800a4a4:	0800a4bb 	.word	0x0800a4bb
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	77fb      	strb	r3, [r7, #31]
 800a4ac:	e117      	b.n	800a6de <UART_SetConfig+0x346>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	77fb      	strb	r3, [r7, #31]
 800a4b2:	e114      	b.n	800a6de <UART_SetConfig+0x346>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	77fb      	strb	r3, [r7, #31]
 800a4b8:	e111      	b.n	800a6de <UART_SetConfig+0x346>
 800a4ba:	2308      	movs	r3, #8
 800a4bc:	77fb      	strb	r3, [r7, #31]
 800a4be:	e10e      	b.n	800a6de <UART_SetConfig+0x346>
 800a4c0:	2310      	movs	r3, #16
 800a4c2:	77fb      	strb	r3, [r7, #31]
 800a4c4:	e10b      	b.n	800a6de <UART_SetConfig+0x346>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a69      	ldr	r2, [pc, #420]	; (800a670 <UART_SetConfig+0x2d8>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d120      	bne.n	800a512 <UART_SetConfig+0x17a>
 800a4d0:	4b65      	ldr	r3, [pc, #404]	; (800a668 <UART_SetConfig+0x2d0>)
 800a4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4da:	2b30      	cmp	r3, #48	; 0x30
 800a4dc:	d013      	beq.n	800a506 <UART_SetConfig+0x16e>
 800a4de:	2b30      	cmp	r3, #48	; 0x30
 800a4e0:	d814      	bhi.n	800a50c <UART_SetConfig+0x174>
 800a4e2:	2b20      	cmp	r3, #32
 800a4e4:	d009      	beq.n	800a4fa <UART_SetConfig+0x162>
 800a4e6:	2b20      	cmp	r3, #32
 800a4e8:	d810      	bhi.n	800a50c <UART_SetConfig+0x174>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <UART_SetConfig+0x15c>
 800a4ee:	2b10      	cmp	r3, #16
 800a4f0:	d006      	beq.n	800a500 <UART_SetConfig+0x168>
 800a4f2:	e00b      	b.n	800a50c <UART_SetConfig+0x174>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	77fb      	strb	r3, [r7, #31]
 800a4f8:	e0f1      	b.n	800a6de <UART_SetConfig+0x346>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	77fb      	strb	r3, [r7, #31]
 800a4fe:	e0ee      	b.n	800a6de <UART_SetConfig+0x346>
 800a500:	2304      	movs	r3, #4
 800a502:	77fb      	strb	r3, [r7, #31]
 800a504:	e0eb      	b.n	800a6de <UART_SetConfig+0x346>
 800a506:	2308      	movs	r3, #8
 800a508:	77fb      	strb	r3, [r7, #31]
 800a50a:	e0e8      	b.n	800a6de <UART_SetConfig+0x346>
 800a50c:	2310      	movs	r3, #16
 800a50e:	77fb      	strb	r3, [r7, #31]
 800a510:	e0e5      	b.n	800a6de <UART_SetConfig+0x346>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a57      	ldr	r2, [pc, #348]	; (800a674 <UART_SetConfig+0x2dc>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d120      	bne.n	800a55e <UART_SetConfig+0x1c6>
 800a51c:	4b52      	ldr	r3, [pc, #328]	; (800a668 <UART_SetConfig+0x2d0>)
 800a51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a522:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a526:	2bc0      	cmp	r3, #192	; 0xc0
 800a528:	d013      	beq.n	800a552 <UART_SetConfig+0x1ba>
 800a52a:	2bc0      	cmp	r3, #192	; 0xc0
 800a52c:	d814      	bhi.n	800a558 <UART_SetConfig+0x1c0>
 800a52e:	2b80      	cmp	r3, #128	; 0x80
 800a530:	d009      	beq.n	800a546 <UART_SetConfig+0x1ae>
 800a532:	2b80      	cmp	r3, #128	; 0x80
 800a534:	d810      	bhi.n	800a558 <UART_SetConfig+0x1c0>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <UART_SetConfig+0x1a8>
 800a53a:	2b40      	cmp	r3, #64	; 0x40
 800a53c:	d006      	beq.n	800a54c <UART_SetConfig+0x1b4>
 800a53e:	e00b      	b.n	800a558 <UART_SetConfig+0x1c0>
 800a540:	2300      	movs	r3, #0
 800a542:	77fb      	strb	r3, [r7, #31]
 800a544:	e0cb      	b.n	800a6de <UART_SetConfig+0x346>
 800a546:	2302      	movs	r3, #2
 800a548:	77fb      	strb	r3, [r7, #31]
 800a54a:	e0c8      	b.n	800a6de <UART_SetConfig+0x346>
 800a54c:	2304      	movs	r3, #4
 800a54e:	77fb      	strb	r3, [r7, #31]
 800a550:	e0c5      	b.n	800a6de <UART_SetConfig+0x346>
 800a552:	2308      	movs	r3, #8
 800a554:	77fb      	strb	r3, [r7, #31]
 800a556:	e0c2      	b.n	800a6de <UART_SetConfig+0x346>
 800a558:	2310      	movs	r3, #16
 800a55a:	77fb      	strb	r3, [r7, #31]
 800a55c:	e0bf      	b.n	800a6de <UART_SetConfig+0x346>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a45      	ldr	r2, [pc, #276]	; (800a678 <UART_SetConfig+0x2e0>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d125      	bne.n	800a5b4 <UART_SetConfig+0x21c>
 800a568:	4b3f      	ldr	r3, [pc, #252]	; (800a668 <UART_SetConfig+0x2d0>)
 800a56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a56e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a576:	d017      	beq.n	800a5a8 <UART_SetConfig+0x210>
 800a578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a57c:	d817      	bhi.n	800a5ae <UART_SetConfig+0x216>
 800a57e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a582:	d00b      	beq.n	800a59c <UART_SetConfig+0x204>
 800a584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a588:	d811      	bhi.n	800a5ae <UART_SetConfig+0x216>
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <UART_SetConfig+0x1fe>
 800a58e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a592:	d006      	beq.n	800a5a2 <UART_SetConfig+0x20a>
 800a594:	e00b      	b.n	800a5ae <UART_SetConfig+0x216>
 800a596:	2300      	movs	r3, #0
 800a598:	77fb      	strb	r3, [r7, #31]
 800a59a:	e0a0      	b.n	800a6de <UART_SetConfig+0x346>
 800a59c:	2302      	movs	r3, #2
 800a59e:	77fb      	strb	r3, [r7, #31]
 800a5a0:	e09d      	b.n	800a6de <UART_SetConfig+0x346>
 800a5a2:	2304      	movs	r3, #4
 800a5a4:	77fb      	strb	r3, [r7, #31]
 800a5a6:	e09a      	b.n	800a6de <UART_SetConfig+0x346>
 800a5a8:	2308      	movs	r3, #8
 800a5aa:	77fb      	strb	r3, [r7, #31]
 800a5ac:	e097      	b.n	800a6de <UART_SetConfig+0x346>
 800a5ae:	2310      	movs	r3, #16
 800a5b0:	77fb      	strb	r3, [r7, #31]
 800a5b2:	e094      	b.n	800a6de <UART_SetConfig+0x346>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a30      	ldr	r2, [pc, #192]	; (800a67c <UART_SetConfig+0x2e4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d125      	bne.n	800a60a <UART_SetConfig+0x272>
 800a5be:	4b2a      	ldr	r3, [pc, #168]	; (800a668 <UART_SetConfig+0x2d0>)
 800a5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5cc:	d017      	beq.n	800a5fe <UART_SetConfig+0x266>
 800a5ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5d2:	d817      	bhi.n	800a604 <UART_SetConfig+0x26c>
 800a5d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5d8:	d00b      	beq.n	800a5f2 <UART_SetConfig+0x25a>
 800a5da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5de:	d811      	bhi.n	800a604 <UART_SetConfig+0x26c>
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d003      	beq.n	800a5ec <UART_SetConfig+0x254>
 800a5e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5e8:	d006      	beq.n	800a5f8 <UART_SetConfig+0x260>
 800a5ea:	e00b      	b.n	800a604 <UART_SetConfig+0x26c>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	77fb      	strb	r3, [r7, #31]
 800a5f0:	e075      	b.n	800a6de <UART_SetConfig+0x346>
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	77fb      	strb	r3, [r7, #31]
 800a5f6:	e072      	b.n	800a6de <UART_SetConfig+0x346>
 800a5f8:	2304      	movs	r3, #4
 800a5fa:	77fb      	strb	r3, [r7, #31]
 800a5fc:	e06f      	b.n	800a6de <UART_SetConfig+0x346>
 800a5fe:	2308      	movs	r3, #8
 800a600:	77fb      	strb	r3, [r7, #31]
 800a602:	e06c      	b.n	800a6de <UART_SetConfig+0x346>
 800a604:	2310      	movs	r3, #16
 800a606:	77fb      	strb	r3, [r7, #31]
 800a608:	e069      	b.n	800a6de <UART_SetConfig+0x346>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a1c      	ldr	r2, [pc, #112]	; (800a680 <UART_SetConfig+0x2e8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d137      	bne.n	800a684 <UART_SetConfig+0x2ec>
 800a614:	4b14      	ldr	r3, [pc, #80]	; (800a668 <UART_SetConfig+0x2d0>)
 800a616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a61a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a61e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a622:	d017      	beq.n	800a654 <UART_SetConfig+0x2bc>
 800a624:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a628:	d817      	bhi.n	800a65a <UART_SetConfig+0x2c2>
 800a62a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a62e:	d00b      	beq.n	800a648 <UART_SetConfig+0x2b0>
 800a630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a634:	d811      	bhi.n	800a65a <UART_SetConfig+0x2c2>
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <UART_SetConfig+0x2aa>
 800a63a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a63e:	d006      	beq.n	800a64e <UART_SetConfig+0x2b6>
 800a640:	e00b      	b.n	800a65a <UART_SetConfig+0x2c2>
 800a642:	2300      	movs	r3, #0
 800a644:	77fb      	strb	r3, [r7, #31]
 800a646:	e04a      	b.n	800a6de <UART_SetConfig+0x346>
 800a648:	2302      	movs	r3, #2
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	e047      	b.n	800a6de <UART_SetConfig+0x346>
 800a64e:	2304      	movs	r3, #4
 800a650:	77fb      	strb	r3, [r7, #31]
 800a652:	e044      	b.n	800a6de <UART_SetConfig+0x346>
 800a654:	2308      	movs	r3, #8
 800a656:	77fb      	strb	r3, [r7, #31]
 800a658:	e041      	b.n	800a6de <UART_SetConfig+0x346>
 800a65a:	2310      	movs	r3, #16
 800a65c:	77fb      	strb	r3, [r7, #31]
 800a65e:	e03e      	b.n	800a6de <UART_SetConfig+0x346>
 800a660:	efff69f3 	.word	0xefff69f3
 800a664:	40011000 	.word	0x40011000
 800a668:	40023800 	.word	0x40023800
 800a66c:	40004400 	.word	0x40004400
 800a670:	40004800 	.word	0x40004800
 800a674:	40004c00 	.word	0x40004c00
 800a678:	40005000 	.word	0x40005000
 800a67c:	40011400 	.word	0x40011400
 800a680:	40007800 	.word	0x40007800
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a71      	ldr	r2, [pc, #452]	; (800a850 <UART_SetConfig+0x4b8>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d125      	bne.n	800a6da <UART_SetConfig+0x342>
 800a68e:	4b71      	ldr	r3, [pc, #452]	; (800a854 <UART_SetConfig+0x4bc>)
 800a690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a698:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a69c:	d017      	beq.n	800a6ce <UART_SetConfig+0x336>
 800a69e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6a2:	d817      	bhi.n	800a6d4 <UART_SetConfig+0x33c>
 800a6a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6a8:	d00b      	beq.n	800a6c2 <UART_SetConfig+0x32a>
 800a6aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ae:	d811      	bhi.n	800a6d4 <UART_SetConfig+0x33c>
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <UART_SetConfig+0x324>
 800a6b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b8:	d006      	beq.n	800a6c8 <UART_SetConfig+0x330>
 800a6ba:	e00b      	b.n	800a6d4 <UART_SetConfig+0x33c>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	77fb      	strb	r3, [r7, #31]
 800a6c0:	e00d      	b.n	800a6de <UART_SetConfig+0x346>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	77fb      	strb	r3, [r7, #31]
 800a6c6:	e00a      	b.n	800a6de <UART_SetConfig+0x346>
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	77fb      	strb	r3, [r7, #31]
 800a6cc:	e007      	b.n	800a6de <UART_SetConfig+0x346>
 800a6ce:	2308      	movs	r3, #8
 800a6d0:	77fb      	strb	r3, [r7, #31]
 800a6d2:	e004      	b.n	800a6de <UART_SetConfig+0x346>
 800a6d4:	2310      	movs	r3, #16
 800a6d6:	77fb      	strb	r3, [r7, #31]
 800a6d8:	e001      	b.n	800a6de <UART_SetConfig+0x346>
 800a6da:	2310      	movs	r3, #16
 800a6dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6e6:	d15b      	bne.n	800a7a0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a6e8:	7ffb      	ldrb	r3, [r7, #31]
 800a6ea:	2b08      	cmp	r3, #8
 800a6ec:	d827      	bhi.n	800a73e <UART_SetConfig+0x3a6>
 800a6ee:	a201      	add	r2, pc, #4	; (adr r2, 800a6f4 <UART_SetConfig+0x35c>)
 800a6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f4:	0800a719 	.word	0x0800a719
 800a6f8:	0800a721 	.word	0x0800a721
 800a6fc:	0800a729 	.word	0x0800a729
 800a700:	0800a73f 	.word	0x0800a73f
 800a704:	0800a72f 	.word	0x0800a72f
 800a708:	0800a73f 	.word	0x0800a73f
 800a70c:	0800a73f 	.word	0x0800a73f
 800a710:	0800a73f 	.word	0x0800a73f
 800a714:	0800a737 	.word	0x0800a737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a718:	f7fc fb1c 	bl	8006d54 <HAL_RCC_GetPCLK1Freq>
 800a71c:	61b8      	str	r0, [r7, #24]
        break;
 800a71e:	e013      	b.n	800a748 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a720:	f7fc fb2c 	bl	8006d7c <HAL_RCC_GetPCLK2Freq>
 800a724:	61b8      	str	r0, [r7, #24]
        break;
 800a726:	e00f      	b.n	800a748 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a728:	4b4b      	ldr	r3, [pc, #300]	; (800a858 <UART_SetConfig+0x4c0>)
 800a72a:	61bb      	str	r3, [r7, #24]
        break;
 800a72c:	e00c      	b.n	800a748 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a72e:	f7fc fa4f 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 800a732:	61b8      	str	r0, [r7, #24]
        break;
 800a734:	e008      	b.n	800a748 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a73a:	61bb      	str	r3, [r7, #24]
        break;
 800a73c:	e004      	b.n	800a748 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	77bb      	strb	r3, [r7, #30]
        break;
 800a746:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d074      	beq.n	800a838 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	005a      	lsls	r2, r3, #1
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	085b      	lsrs	r3, r3, #1
 800a758:	441a      	add	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a762:	b29b      	uxth	r3, r3
 800a764:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b0f      	cmp	r3, #15
 800a76a:	d916      	bls.n	800a79a <UART_SetConfig+0x402>
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a772:	d212      	bcs.n	800a79a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	b29b      	uxth	r3, r3
 800a778:	f023 030f 	bic.w	r3, r3, #15
 800a77c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	085b      	lsrs	r3, r3, #1
 800a782:	b29b      	uxth	r3, r3
 800a784:	f003 0307 	and.w	r3, r3, #7
 800a788:	b29a      	uxth	r2, r3
 800a78a:	89fb      	ldrh	r3, [r7, #14]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	89fa      	ldrh	r2, [r7, #14]
 800a796:	60da      	str	r2, [r3, #12]
 800a798:	e04e      	b.n	800a838 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	77bb      	strb	r3, [r7, #30]
 800a79e:	e04b      	b.n	800a838 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7a0:	7ffb      	ldrb	r3, [r7, #31]
 800a7a2:	2b08      	cmp	r3, #8
 800a7a4:	d827      	bhi.n	800a7f6 <UART_SetConfig+0x45e>
 800a7a6:	a201      	add	r2, pc, #4	; (adr r2, 800a7ac <UART_SetConfig+0x414>)
 800a7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ac:	0800a7d1 	.word	0x0800a7d1
 800a7b0:	0800a7d9 	.word	0x0800a7d9
 800a7b4:	0800a7e1 	.word	0x0800a7e1
 800a7b8:	0800a7f7 	.word	0x0800a7f7
 800a7bc:	0800a7e7 	.word	0x0800a7e7
 800a7c0:	0800a7f7 	.word	0x0800a7f7
 800a7c4:	0800a7f7 	.word	0x0800a7f7
 800a7c8:	0800a7f7 	.word	0x0800a7f7
 800a7cc:	0800a7ef 	.word	0x0800a7ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7d0:	f7fc fac0 	bl	8006d54 <HAL_RCC_GetPCLK1Freq>
 800a7d4:	61b8      	str	r0, [r7, #24]
        break;
 800a7d6:	e013      	b.n	800a800 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7d8:	f7fc fad0 	bl	8006d7c <HAL_RCC_GetPCLK2Freq>
 800a7dc:	61b8      	str	r0, [r7, #24]
        break;
 800a7de:	e00f      	b.n	800a800 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7e0:	4b1d      	ldr	r3, [pc, #116]	; (800a858 <UART_SetConfig+0x4c0>)
 800a7e2:	61bb      	str	r3, [r7, #24]
        break;
 800a7e4:	e00c      	b.n	800a800 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7e6:	f7fc f9f3 	bl	8006bd0 <HAL_RCC_GetSysClockFreq>
 800a7ea:	61b8      	str	r0, [r7, #24]
        break;
 800a7ec:	e008      	b.n	800a800 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7f2:	61bb      	str	r3, [r7, #24]
        break;
 800a7f4:	e004      	b.n	800a800 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	77bb      	strb	r3, [r7, #30]
        break;
 800a7fe:	bf00      	nop
    }

    if (pclk != 0U)
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d018      	beq.n	800a838 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	085a      	lsrs	r2, r3, #1
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	441a      	add	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	fbb2 f3f3 	udiv	r3, r2, r3
 800a818:	b29b      	uxth	r3, r3
 800a81a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b0f      	cmp	r3, #15
 800a820:	d908      	bls.n	800a834 <UART_SetConfig+0x49c>
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a828:	d204      	bcs.n	800a834 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	60da      	str	r2, [r3, #12]
 800a832:	e001      	b.n	800a838 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a844:	7fbb      	ldrb	r3, [r7, #30]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3720      	adds	r7, #32
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	40007c00 	.word	0x40007c00
 800a854:	40023800 	.word	0x40023800
 800a858:	00f42400 	.word	0x00f42400

0800a85c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00a      	beq.n	800a886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	430a      	orrs	r2, r1
 800a884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88a:	f003 0302 	and.w	r3, r3, #2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00a      	beq.n	800a8a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00a      	beq.n	800a8ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	f003 0308 	and.w	r3, r3, #8
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f0:	f003 0310 	and.w	r3, r3, #16
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00a      	beq.n	800a90e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	430a      	orrs	r2, r1
 800a92e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d01a      	beq.n	800a972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a95a:	d10a      	bne.n	800a972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	430a      	orrs	r2, r1
 800a970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00a      	beq.n	800a994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	430a      	orrs	r2, r1
 800a992:	605a      	str	r2, [r3, #4]
  }
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af02      	add	r7, sp, #8
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9b0:	f7f9 fa7c 	bl	8003eac <HAL_GetTick>
 800a9b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0308 	and.w	r3, r3, #8
 800a9c0:	2b08      	cmp	r3, #8
 800a9c2:	d10e      	bne.n	800a9e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f817 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e00d      	b.n	800a9fe <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2220      	movs	r2, #32
 800a9e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	603b      	str	r3, [r7, #0]
 800aa12:	4613      	mov	r3, r2
 800aa14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa16:	e05e      	b.n	800aad6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	d05a      	beq.n	800aad6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa20:	f7f9 fa44 	bl	8003eac <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d302      	bcc.n	800aa36 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d11b      	bne.n	800aa6e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa44:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f022 0201 	bic.w	r2, r2, #1
 800aa54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2220      	movs	r2, #32
 800aa5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e043      	b.n	800aaf6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d02c      	beq.n	800aad6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa8a:	d124      	bne.n	800aad6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aaa4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	689a      	ldr	r2, [r3, #8]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f022 0201 	bic.w	r2, r2, #1
 800aab4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2220      	movs	r2, #32
 800aaba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2220      	movs	r2, #32
 800aac0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2220      	movs	r2, #32
 800aac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e00f      	b.n	800aaf6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	69da      	ldr	r2, [r3, #28]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	4013      	ands	r3, r2
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	bf0c      	ite	eq
 800aae6:	2301      	moveq	r3, #1
 800aae8:	2300      	movne	r3, #0
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	461a      	mov	r2, r3
 800aaee:	79fb      	ldrb	r3, [r7, #7]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d091      	beq.n	800aa18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
	...

0800ab00 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d027      	beq.n	800ab6a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4b2f      	ldr	r3, [pc, #188]	; (800abe0 <FMC_SDRAM_Init+0xe0>)
 800ab24:	4013      	ands	r3, r2
 800ab26:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab30:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ab36:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ab3c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ab42:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ab48:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ab4e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ab54:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ab5a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e032      	b.n	800abd0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab76:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab80:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ab86:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	4b12      	ldr	r3, [pc, #72]	; (800abe0 <FMC_SDRAM_Init+0xe0>)
 800ab98:	4013      	ands	r3, r2
 800ab9a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aba4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800abaa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800abb0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800abb6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800abbc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	ffff8000 	.word	0xffff8000

0800abe4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d02e      	beq.n	800ac5c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac0a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac1a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ac24:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ac2e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	3b01      	subs	r3, #1
 800ac36:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ac38:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ac42:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	609a      	str	r2, [r3, #8]
 800ac5a:	e039      	b.n	800acd0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	4b1e      	ldr	r3, [pc, #120]	; (800ace0 <FMC_SDRAM_Timing_Init+0xfc>)
 800ac66:	4013      	ands	r3, r2
 800ac68:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ac8e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ac9e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aca8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	3b01      	subs	r3, #1
 800acb0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800acb2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	3b01      	subs	r3, #1
 800acba:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800acbc:	4313      	orrs	r3, r2
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	371c      	adds	r7, #28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	ff0f0fff 	.word	0xff0f0fff

0800ace4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	691a      	ldr	r2, [r3, #16]
 800acf4:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <FMC_SDRAM_SendCommand+0x44>)
 800acf6:	4013      	ands	r3, r2
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	6811      	ldr	r1, [r2, #0]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	6852      	ldr	r2, [r2, #4]
 800ad00:	4311      	orrs	r1, r2
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	6892      	ldr	r2, [r2, #8]
 800ad06:	3a01      	subs	r2, #1
 800ad08:	0152      	lsls	r2, r2, #5
 800ad0a:	4311      	orrs	r1, r2
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	68d2      	ldr	r2, [r2, #12]
 800ad10:	0252      	lsls	r2, r2, #9
 800ad12:	430a      	orrs	r2, r1
 800ad14:	431a      	orrs	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	ffc00000 	.word	0xffc00000

0800ad2c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	695a      	ldr	r2, [r3, #20]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	431a      	orrs	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
	...

0800ad54 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ad54:	b084      	sub	sp, #16
 800ad56:	b480      	push	{r7}
 800ad58:	b085      	sub	sp, #20
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	f107 001c 	add.w	r0, r7, #28
 800ad62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ad6a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ad6e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ad72:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ad76:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ad7a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ad7e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <SDMMC_Init+0x54>)
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	431a      	orrs	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	b004      	add	sp, #16
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	ffff8100 	.word	0xffff8100

0800adac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800adba:	4618      	mov	r0, r3
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800adc6:	b480      	push	{r7}
 800adc8:	b083      	sub	sp, #12
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2203      	movs	r2, #3
 800adf4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800adf6:	2002      	movs	r0, #2
 800adf8:	f7f9 f864 	bl	8003ec4 <HAL_Delay>
  
  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3708      	adds	r7, #8
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 0303 	and.w	r3, r3, #3
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
	...

0800ae24 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae42:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ae48:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ae4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68da      	ldr	r2, [r3, #12]
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <SDMMC_SendCommand+0x50>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	431a      	orrs	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	fffff000 	.word	0xfffff000

0800ae78 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	b2db      	uxtb	r3, r3
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b085      	sub	sp, #20
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3314      	adds	r3, #20
 800aea0:	461a      	mov	r2, r3
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	4413      	add	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
}  
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aede:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aee4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aeea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	431a      	orrs	r2, r3
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800af02:	2300      	movs	r3, #0

}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b088      	sub	sp, #32
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800af1e:	2310      	movs	r3, #16
 800af20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af22:	2340      	movs	r3, #64	; 0x40
 800af24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af26:	2300      	movs	r3, #0
 800af28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af30:	f107 0308 	add.w	r3, r7, #8
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7ff ff74 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800af3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af40:	2110      	movs	r1, #16
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fa46 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800af48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af4a:	69fb      	ldr	r3, [r7, #28]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3720      	adds	r7, #32
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b088      	sub	sp, #32
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800af62:	2311      	movs	r3, #17
 800af64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af66:	2340      	movs	r3, #64	; 0x40
 800af68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af6a:	2300      	movs	r3, #0
 800af6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af74:	f107 0308 	add.w	r3, r7, #8
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7ff ff52 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800af80:	f241 3288 	movw	r2, #5000	; 0x1388
 800af84:	2111      	movs	r1, #17
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fa24 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800af8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af8e:	69fb      	ldr	r3, [r7, #28]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3720      	adds	r7, #32
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800afa6:	2312      	movs	r3, #18
 800afa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afaa:	2340      	movs	r3, #64	; 0x40
 800afac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afae:	2300      	movs	r3, #0
 800afb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afb8:	f107 0308 	add.w	r3, r7, #8
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7ff ff30 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800afc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc8:	2112      	movs	r1, #18
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fa02 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800afd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd2:	69fb      	ldr	r3, [r7, #28]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3720      	adds	r7, #32
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800afea:	2318      	movs	r3, #24
 800afec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afee:	2340      	movs	r3, #64	; 0x40
 800aff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aff2:	2300      	movs	r3, #0
 800aff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800affa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800affc:	f107 0308 	add.w	r3, r7, #8
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff ff0e 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b008:	f241 3288 	movw	r2, #5000	; 0x1388
 800b00c:	2118      	movs	r1, #24
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f9e0 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b016:	69fb      	ldr	r3, [r7, #28]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b02e:	2319      	movs	r3, #25
 800b030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b032:	2340      	movs	r3, #64	; 0x40
 800b034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b036:	2300      	movs	r3, #0
 800b038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b03e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff feec 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b050:	2119      	movs	r1, #25
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f9be 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b05a:	69fb      	ldr	r3, [r7, #28]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3720      	adds	r7, #32
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b088      	sub	sp, #32
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b070:	230c      	movs	r3, #12
 800b072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b074:	2340      	movs	r3, #64	; 0x40
 800b076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b078:	2300      	movs	r3, #0
 800b07a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b07c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b082:	f107 0308 	add.w	r3, r7, #8
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff fecb 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b08e:	4a05      	ldr	r2, [pc, #20]	; (800b0a4 <SDMMC_CmdStopTransfer+0x40>)
 800b090:	210c      	movs	r1, #12
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f99e 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b09a:	69fb      	ldr	r3, [r7, #28]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	05f5e100 	.word	0x05f5e100

0800b0a8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b08a      	sub	sp, #40	; 0x28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b0b8:	2307      	movs	r3, #7
 800b0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0bc:	2340      	movs	r3, #64	; 0x40
 800b0be:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0ca:	f107 0310 	add.w	r3, r7, #16
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	68f8      	ldr	r0, [r7, #12]
 800b0d2:	f7ff fea7 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b0d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0da:	2107      	movs	r1, #7
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 f979 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b0e2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3728      	adds	r7, #40	; 0x28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b088      	sub	sp, #32
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b0fe:	2300      	movs	r3, #0
 800b100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b102:	2300      	movs	r3, #0
 800b104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b10a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b10c:	f107 0308 	add.w	r3, r7, #8
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7ff fe86 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f92f 	bl	800b37c <SDMMC_GetCmdError>
 800b11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b120:	69fb      	ldr	r3, [r7, #28]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3720      	adds	r7, #32
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b088      	sub	sp, #32
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b132:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b138:	2308      	movs	r3, #8
 800b13a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b13c:	2340      	movs	r3, #64	; 0x40
 800b13e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b140:	2300      	movs	r3, #0
 800b142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b148:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b14a:	f107 0308 	add.w	r3, r7, #8
 800b14e:	4619      	mov	r1, r3
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff fe67 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fb26 	bl	800b7a8 <SDMMC_GetCmdResp7>
 800b15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b15e:	69fb      	ldr	r3, [r7, #28]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3720      	adds	r7, #32
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b176:	2337      	movs	r3, #55	; 0x37
 800b178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b17a:	2340      	movs	r3, #64	; 0x40
 800b17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b17e:	2300      	movs	r3, #0
 800b180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b186:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b188:	f107 0308 	add.w	r3, r7, #8
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fe48 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b194:	f241 3288 	movw	r2, #5000	; 0x1388
 800b198:	2137      	movs	r1, #55	; 0x37
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f91a 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b1a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1a2:	69fb      	ldr	r3, [r7, #28]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3720      	adds	r7, #32
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <SDMMC_CmdAppOperCommand+0x44>)
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b1be:	2329      	movs	r3, #41	; 0x29
 800b1c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1c2:	2340      	movs	r3, #64	; 0x40
 800b1c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1d0:	f107 0308 	add.w	r3, r7, #8
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7ff fe24 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa2f 	bl	800b640 <SDMMC_GetCmdResp3>
 800b1e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1e4:	69fb      	ldr	r3, [r7, #28]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3720      	adds	r7, #32
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop
 800b1f0:	80100000 	.word	0x80100000

0800b1f4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b088      	sub	sp, #32
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b202:	2306      	movs	r3, #6
 800b204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b206:	2340      	movs	r3, #64	; 0x40
 800b208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b20a:	2300      	movs	r3, #0
 800b20c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b20e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b212:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b214:	f107 0308 	add.w	r3, r7, #8
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff fe02 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b220:	f241 3288 	movw	r2, #5000	; 0x1388
 800b224:	2106      	movs	r1, #6
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f8d4 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b22c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b22e:	69fb      	ldr	r3, [r7, #28]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3720      	adds	r7, #32
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b088      	sub	sp, #32
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b244:	2333      	movs	r3, #51	; 0x33
 800b246:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b24c:	2300      	movs	r3, #0
 800b24e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b254:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b256:	f107 0308 	add.w	r3, r7, #8
 800b25a:	4619      	mov	r1, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f7ff fde1 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b262:	f241 3288 	movw	r2, #5000	; 0x1388
 800b266:	2133      	movs	r1, #51	; 0x33
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f8b3 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b26e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b270:	69fb      	ldr	r3, [r7, #28]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3720      	adds	r7, #32
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b088      	sub	sp, #32
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b282:	2300      	movs	r3, #0
 800b284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b286:	2302      	movs	r3, #2
 800b288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b28a:	23c0      	movs	r3, #192	; 0xc0
 800b28c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b28e:	2300      	movs	r3, #0
 800b290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b296:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b298:	f107 0308 	add.w	r3, r7, #8
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff fdc0 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f983 	bl	800b5b0 <SDMMC_GetCmdResp2>
 800b2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b088      	sub	sp, #32
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b2c4:	2309      	movs	r3, #9
 800b2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b2c8:	23c0      	movs	r3, #192	; 0xc0
 800b2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2d6:	f107 0308 	add.w	r3, r7, #8
 800b2da:	4619      	mov	r1, r3
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff fda1 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f964 	bl	800b5b0 <SDMMC_GetCmdResp2>
 800b2e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2ea:	69fb      	ldr	r3, [r7, #28]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3720      	adds	r7, #32
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b302:	2303      	movs	r3, #3
 800b304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b306:	2340      	movs	r3, #64	; 0x40
 800b308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b312:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b314:	f107 0308 	add.w	r3, r7, #8
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7ff fd82 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	2103      	movs	r1, #3
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f9c9 	bl	800b6bc <SDMMC_GetCmdResp6>
 800b32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b32c:	69fb      	ldr	r3, [r7, #28]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3720      	adds	r7, #32
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b088      	sub	sp, #32
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b344:	230d      	movs	r3, #13
 800b346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b34c:	2300      	movs	r3, #0
 800b34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b356:	f107 0308 	add.w	r3, r7, #8
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff fd61 	bl	800ae24 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b362:	f241 3288 	movw	r2, #5000	; 0x1388
 800b366:	210d      	movs	r1, #13
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f833 	bl	800b3d4 <SDMMC_GetCmdResp1>
 800b36e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b370:	69fb      	ldr	r3, [r7, #28]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3720      	adds	r7, #32
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b384:	4b11      	ldr	r3, [pc, #68]	; (800b3cc <SDMMC_GetCmdError+0x50>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a11      	ldr	r2, [pc, #68]	; (800b3d0 <SDMMC_GetCmdError+0x54>)
 800b38a:	fba2 2303 	umull	r2, r3, r2, r3
 800b38e:	0a5b      	lsrs	r3, r3, #9
 800b390:	f241 3288 	movw	r2, #5000	; 0x1388
 800b394:	fb02 f303 	mul.w	r3, r2, r3
 800b398:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	1e5a      	subs	r2, r3, #1
 800b39e:	60fa      	str	r2, [r7, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3a8:	e009      	b.n	800b3be <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d0f1      	beq.n	800b39a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	22c5      	movs	r2, #197	; 0xc5
 800b3ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	20000004 	.word	0x20000004
 800b3d0:	10624dd3 	.word	0x10624dd3

0800b3d4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b3e2:	4b70      	ldr	r3, [pc, #448]	; (800b5a4 <SDMMC_GetCmdResp1+0x1d0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a70      	ldr	r2, [pc, #448]	; (800b5a8 <SDMMC_GetCmdResp1+0x1d4>)
 800b3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ec:	0a5a      	lsrs	r2, r3, #9
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	fb02 f303 	mul.w	r3, r2, r3
 800b3f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	1e5a      	subs	r2, r3, #1
 800b3fa:	61fa      	str	r2, [r7, #28]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d102      	bne.n	800b406 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b404:	e0c9      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b412:	2b00      	cmp	r3, #0
 800b414:	d0ef      	beq.n	800b3f6 <SDMMC_GetCmdResp1+0x22>
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1ea      	bne.n	800b3f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2204      	movs	r2, #4
 800b430:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b432:	2304      	movs	r3, #4
 800b434:	e0b1      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d004      	beq.n	800b44c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2201      	movs	r2, #1
 800b446:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b448:	2301      	movs	r3, #1
 800b44a:	e0a6      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	22c5      	movs	r2, #197	; 0xc5
 800b450:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f7ff fd10 	bl	800ae78 <SDMMC_GetCommandResponse>
 800b458:	4603      	mov	r3, r0
 800b45a:	461a      	mov	r2, r3
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	4293      	cmp	r3, r2
 800b460:	d001      	beq.n	800b466 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b462:	2301      	movs	r3, #1
 800b464:	e099      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b466:	2100      	movs	r1, #0
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f7ff fd12 	bl	800ae92 <SDMMC_GetResponse>
 800b46e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	4b4e      	ldr	r3, [pc, #312]	; (800b5ac <SDMMC_GetCmdResp1+0x1d8>)
 800b474:	4013      	ands	r3, r2
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b47a:	2300      	movs	r3, #0
 800b47c:	e08d      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	2b00      	cmp	r3, #0
 800b482:	da02      	bge.n	800b48a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b488:	e087      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b494:	2340      	movs	r3, #64	; 0x40
 800b496:	e080      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b4a2:	2380      	movs	r3, #128	; 0x80
 800b4a4:	e079      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b4b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b4:	e071      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b4c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4c4:	e069      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b4d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4d4:	e061      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b4e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4e4:	e059      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4f4:	e051      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b504:	e049      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b514:	e041      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b524:	e039      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b534:	e031      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b540:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b544:	e029      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b550:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b554:	e021      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d002      	beq.n	800b566 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b564:	e019      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b570:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b574:	e011      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b584:	e009      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	f003 0308 	and.w	r3, r3, #8
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b590:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b594:	e001      	b.n	800b59a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000004 	.word	0x20000004
 800b5a8:	10624dd3 	.word	0x10624dd3
 800b5ac:	fdffe008 	.word	0xfdffe008

0800b5b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5b8:	4b1f      	ldr	r3, [pc, #124]	; (800b638 <SDMMC_GetCmdResp2+0x88>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a1f      	ldr	r2, [pc, #124]	; (800b63c <SDMMC_GetCmdResp2+0x8c>)
 800b5be:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c2:	0a5b      	lsrs	r3, r3, #9
 800b5c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c8:	fb02 f303 	mul.w	r3, r2, r3
 800b5cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	1e5a      	subs	r2, r3, #1
 800b5d2:	60fa      	str	r2, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d102      	bne.n	800b5de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5dc:	e026      	b.n	800b62c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0ef      	beq.n	800b5ce <SDMMC_GetCmdResp2+0x1e>
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1ea      	bne.n	800b5ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2204      	movs	r2, #4
 800b608:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b60a:	2304      	movs	r3, #4
 800b60c:	e00e      	b.n	800b62c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	2b00      	cmp	r3, #0
 800b618:	d004      	beq.n	800b624 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b620:	2301      	movs	r3, #1
 800b622:	e003      	b.n	800b62c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	22c5      	movs	r2, #197	; 0xc5
 800b628:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b62a:	2300      	movs	r3, #0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	20000004 	.word	0x20000004
 800b63c:	10624dd3 	.word	0x10624dd3

0800b640 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b648:	4b1a      	ldr	r3, [pc, #104]	; (800b6b4 <SDMMC_GetCmdResp3+0x74>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a1a      	ldr	r2, [pc, #104]	; (800b6b8 <SDMMC_GetCmdResp3+0x78>)
 800b64e:	fba2 2303 	umull	r2, r3, r2, r3
 800b652:	0a5b      	lsrs	r3, r3, #9
 800b654:	f241 3288 	movw	r2, #5000	; 0x1388
 800b658:	fb02 f303 	mul.w	r3, r2, r3
 800b65c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	60fa      	str	r2, [r7, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b66c:	e01b      	b.n	800b6a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b672:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d0ef      	beq.n	800b65e <SDMMC_GetCmdResp3+0x1e>
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1ea      	bne.n	800b65e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b68c:	f003 0304 	and.w	r3, r3, #4
 800b690:	2b00      	cmp	r3, #0
 800b692:	d004      	beq.n	800b69e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2204      	movs	r2, #4
 800b698:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b69a:	2304      	movs	r3, #4
 800b69c:	e003      	b.n	800b6a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	22c5      	movs	r2, #197	; 0xc5
 800b6a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20000004 	.word	0x20000004
 800b6b8:	10624dd3 	.word	0x10624dd3

0800b6bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6ca:	4b35      	ldr	r3, [pc, #212]	; (800b7a0 <SDMMC_GetCmdResp6+0xe4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a35      	ldr	r2, [pc, #212]	; (800b7a4 <SDMMC_GetCmdResp6+0xe8>)
 800b6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d4:	0a5b      	lsrs	r3, r3, #9
 800b6d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6da:	fb02 f303 	mul.w	r3, r2, r3
 800b6de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	1e5a      	subs	r2, r3, #1
 800b6e4:	61fa      	str	r2, [r7, #28]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d102      	bne.n	800b6f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6ee:	e052      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0ef      	beq.n	800b6e0 <SDMMC_GetCmdResp6+0x24>
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1ea      	bne.n	800b6e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70e:	f003 0304 	and.w	r3, r3, #4
 800b712:	2b00      	cmp	r3, #0
 800b714:	d004      	beq.n	800b720 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2204      	movs	r2, #4
 800b71a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b71c:	2304      	movs	r3, #4
 800b71e:	e03a      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b732:	2301      	movs	r3, #1
 800b734:	e02f      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff fb9e 	bl	800ae78 <SDMMC_GetCommandResponse>
 800b73c:	4603      	mov	r3, r0
 800b73e:	461a      	mov	r2, r3
 800b740:	7afb      	ldrb	r3, [r7, #11]
 800b742:	4293      	cmp	r3, r2
 800b744:	d001      	beq.n	800b74a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b746:	2301      	movs	r3, #1
 800b748:	e025      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	22c5      	movs	r2, #197	; 0xc5
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b750:	2100      	movs	r1, #0
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f7ff fb9d 	bl	800ae92 <SDMMC_GetResponse>
 800b758:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	0c1b      	lsrs	r3, r3, #16
 800b768:	b29a      	uxth	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b76e:	2300      	movs	r3, #0
 800b770:	e011      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b77c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b780:	e009      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b78c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b790:	e001      	b.n	800b796 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b796:	4618      	mov	r0, r3
 800b798:	3720      	adds	r7, #32
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20000004 	.word	0x20000004
 800b7a4:	10624dd3 	.word	0x10624dd3

0800b7a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7b0:	4b22      	ldr	r3, [pc, #136]	; (800b83c <SDMMC_GetCmdResp7+0x94>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a22      	ldr	r2, [pc, #136]	; (800b840 <SDMMC_GetCmdResp7+0x98>)
 800b7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ba:	0a5b      	lsrs	r3, r3, #9
 800b7bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7c0:	fb02 f303 	mul.w	r3, r2, r3
 800b7c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	1e5a      	subs	r2, r3, #1
 800b7ca:	60fa      	str	r2, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d102      	bne.n	800b7d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7d4:	e02c      	b.n	800b830 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0ef      	beq.n	800b7c6 <SDMMC_GetCmdResp7+0x1e>
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1ea      	bne.n	800b7c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2204      	movs	r2, #4
 800b800:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b802:	2304      	movs	r3, #4
 800b804:	e014      	b.n	800b830 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d004      	beq.n	800b81c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b818:	2301      	movs	r3, #1
 800b81a:	e009      	b.n	800b830 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2240      	movs	r2, #64	; 0x40
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b82e:	2300      	movs	r3, #0
  
}
 800b830:	4618      	mov	r0, r3
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20000004 	.word	0x20000004
 800b840:	10624dd3 	.word	0x10624dd3

0800b844 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	4a08      	ldr	r2, [pc, #32]	; (800b874 <disk_status+0x30>)
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	79fa      	ldrb	r2, [r7, #7]
 800b85c:	4905      	ldr	r1, [pc, #20]	; (800b874 <disk_status+0x30>)
 800b85e:	440a      	add	r2, r1
 800b860:	7b12      	ldrb	r2, [r2, #12]
 800b862:	4610      	mov	r0, r2
 800b864:	4798      	blx	r3
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	20000790 	.word	0x20000790

0800b878 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	4603      	mov	r3, r0
 800b880:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <disk_initialize+0x48>)
 800b88a:	5cd3      	ldrb	r3, [r2, r3]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d111      	bne.n	800b8b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b890:	79fb      	ldrb	r3, [r7, #7]
 800b892:	4a0b      	ldr	r2, [pc, #44]	; (800b8c0 <disk_initialize+0x48>)
 800b894:	2101      	movs	r1, #1
 800b896:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	4a09      	ldr	r2, [pc, #36]	; (800b8c0 <disk_initialize+0x48>)
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	79fa      	ldrb	r2, [r7, #7]
 800b8a6:	4906      	ldr	r1, [pc, #24]	; (800b8c0 <disk_initialize+0x48>)
 800b8a8:	440a      	add	r2, r1
 800b8aa:	7b12      	ldrb	r2, [r2, #12]
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	4798      	blx	r3
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000790 	.word	0x20000790

0800b8c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b8c4:	b590      	push	{r4, r7, lr}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	607a      	str	r2, [r7, #4]
 800b8ce:	603b      	str	r3, [r7, #0]
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b8d4:	7bfb      	ldrb	r3, [r7, #15]
 800b8d6:	4a0a      	ldr	r2, [pc, #40]	; (800b900 <disk_read+0x3c>)
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	689c      	ldr	r4, [r3, #8]
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	4a07      	ldr	r2, [pc, #28]	; (800b900 <disk_read+0x3c>)
 800b8e4:	4413      	add	r3, r2
 800b8e6:	7b18      	ldrb	r0, [r3, #12]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	68b9      	ldr	r1, [r7, #8]
 800b8ee:	47a0      	blx	r4
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	371c      	adds	r7, #28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd90      	pop	{r4, r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20000790 	.word	0x20000790

0800b904 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b904:	b590      	push	{r4, r7, lr}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60b9      	str	r1, [r7, #8]
 800b90c:	607a      	str	r2, [r7, #4]
 800b90e:	603b      	str	r3, [r7, #0]
 800b910:	4603      	mov	r3, r0
 800b912:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	4a0a      	ldr	r2, [pc, #40]	; (800b940 <disk_write+0x3c>)
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	68dc      	ldr	r4, [r3, #12]
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	4a07      	ldr	r2, [pc, #28]	; (800b940 <disk_write+0x3c>)
 800b924:	4413      	add	r3, r2
 800b926:	7b18      	ldrb	r0, [r3, #12]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	68b9      	ldr	r1, [r7, #8]
 800b92e:	47a0      	blx	r4
 800b930:	4603      	mov	r3, r0
 800b932:	75fb      	strb	r3, [r7, #23]
  return res;
 800b934:	7dfb      	ldrb	r3, [r7, #23]
}
 800b936:	4618      	mov	r0, r3
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd90      	pop	{r4, r7, pc}
 800b93e:	bf00      	nop
 800b940:	20000790 	.word	0x20000790

0800b944 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	3301      	adds	r3, #1
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b954:	89fb      	ldrh	r3, [r7, #14]
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	b21a      	sxth	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	b21b      	sxth	r3, r3
 800b960:	4313      	orrs	r3, r2
 800b962:	b21b      	sxth	r3, r3
 800b964:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b966:	89fb      	ldrh	r3, [r7, #14]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3303      	adds	r3, #3
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	021b      	lsls	r3, r3, #8
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	3202      	adds	r2, #2
 800b98c:	7812      	ldrb	r2, [r2, #0]
 800b98e:	4313      	orrs	r3, r2
 800b990:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	021b      	lsls	r3, r3, #8
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	3201      	adds	r2, #1
 800b99a:	7812      	ldrb	r2, [r2, #0]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	021b      	lsls	r3, r3, #8
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	7812      	ldrb	r2, [r2, #0]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
	return rv;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b9ba:	b480      	push	{r7}
 800b9bc:	b083      	sub	sp, #12
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	887a      	ldrh	r2, [r7, #2]
 800b9ce:	b2d2      	uxtb	r2, r2
 800b9d0:	701a      	strb	r2, [r3, #0]
 800b9d2:	887b      	ldrh	r3, [r7, #2]
 800b9d4:	0a1b      	lsrs	r3, r3, #8
 800b9d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	607a      	str	r2, [r7, #4]
 800b9de:	887a      	ldrh	r2, [r7, #2]
 800b9e0:	b2d2      	uxtb	r2, r2
 800b9e2:	701a      	strb	r2, [r3, #0]
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	1c5a      	adds	r2, r3, #1
 800b9fe:	607a      	str	r2, [r7, #4]
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	b2d2      	uxtb	r2, r2
 800ba04:	701a      	strb	r2, [r3, #0]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	0a1b      	lsrs	r3, r3, #8
 800ba0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	1c5a      	adds	r2, r3, #1
 800ba10:	607a      	str	r2, [r7, #4]
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	b2d2      	uxtb	r2, r2
 800ba16:	701a      	strb	r2, [r3, #0]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	0a1b      	lsrs	r3, r3, #8
 800ba1c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	607a      	str	r2, [r7, #4]
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	b2d2      	uxtb	r2, r2
 800ba28:	701a      	strb	r2, [r3, #0]
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	0a1b      	lsrs	r3, r3, #8
 800ba2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	1c5a      	adds	r2, r3, #1
 800ba34:	607a      	str	r2, [r7, #4]
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	b2d2      	uxtb	r2, r2
 800ba3a:	701a      	strb	r2, [r3, #0]
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	617a      	str	r2, [r7, #20]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	b2d2      	uxtb	r2, r2
 800ba62:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	607b      	str	r3, [r7, #4]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1f3      	bne.n	800ba58 <mem_set+0x10>
}
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	371c      	adds	r7, #28
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba7e:	b480      	push	{r7}
 800ba80:	b089      	sub	sp, #36	; 0x24
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	61fa      	str	r2, [r7, #28]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	61ba      	str	r2, [r7, #24]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	1acb      	subs	r3, r1, r3
 800baaa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3b01      	subs	r3, #1
 800bab0:	607b      	str	r3, [r7, #4]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <mem_cmp+0x40>
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0eb      	beq.n	800ba96 <mem_cmp+0x18>

	return r;
 800babe:	697b      	ldr	r3, [r7, #20]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3724      	adds	r7, #36	; 0x24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bad6:	e002      	b.n	800bade <chk_chr+0x12>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3301      	adds	r3, #1
 800badc:	607b      	str	r3, [r7, #4]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d005      	beq.n	800baf2 <chk_chr+0x26>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	4293      	cmp	r3, r2
 800baf0:	d1f2      	bne.n	800bad8 <chk_chr+0xc>
	return *str;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	781b      	ldrb	r3, [r3, #0]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d009      	beq.n	800bb24 <lock_fs+0x22>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 ffc6 	bl	800daa6 <ff_req_grant>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <lock_fs+0x22>
 800bb20:	2301      	movs	r3, #1
 800bb22:	e000      	b.n	800bb26 <lock_fs+0x24>
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	460b      	mov	r3, r1
 800bb38:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00d      	beq.n	800bb5c <unlock_fs+0x2e>
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	2b0c      	cmp	r3, #12
 800bb44:	d00a      	beq.n	800bb5c <unlock_fs+0x2e>
 800bb46:	78fb      	ldrb	r3, [r7, #3]
 800bb48:	2b0b      	cmp	r3, #11
 800bb4a:	d007      	beq.n	800bb5c <unlock_fs+0x2e>
 800bb4c:	78fb      	ldrb	r3, [r7, #3]
 800bb4e:	2b0f      	cmp	r3, #15
 800bb50:	d004      	beq.n	800bb5c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f001 ffba 	bl	800dad0 <ff_rel_grant>
	}
}
 800bb5c:	bf00      	nop
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60fb      	str	r3, [r7, #12]
 800bb72:	e01f      	b.n	800bbb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bb74:	4a41      	ldr	r2, [pc, #260]	; (800bc7c <inc_lock+0x118>)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	011b      	lsls	r3, r3, #4
 800bb7a:	4413      	add	r3, r2
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d113      	bne.n	800bbae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bb86:	4a3d      	ldr	r2, [pc, #244]	; (800bc7c <inc_lock+0x118>)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	011b      	lsls	r3, r3, #4
 800bb8c:	4413      	add	r3, r2
 800bb8e:	3304      	adds	r3, #4
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d109      	bne.n	800bbae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bb9a:	4a38      	ldr	r2, [pc, #224]	; (800bc7c <inc_lock+0x118>)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	4413      	add	r3, r2
 800bba2:	3308      	adds	r3, #8
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d006      	beq.n	800bbbc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d9dc      	bls.n	800bb74 <inc_lock+0x10>
 800bbba:	e000      	b.n	800bbbe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bbbc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d132      	bne.n	800bc2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	60fb      	str	r3, [r7, #12]
 800bbc8:	e002      	b.n	800bbd0 <inc_lock+0x6c>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	60fb      	str	r3, [r7, #12]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d806      	bhi.n	800bbe4 <inc_lock+0x80>
 800bbd6:	4a29      	ldr	r2, [pc, #164]	; (800bc7c <inc_lock+0x118>)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	011b      	lsls	r3, r3, #4
 800bbdc:	4413      	add	r3, r2
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1f2      	bne.n	800bbca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d101      	bne.n	800bbee <inc_lock+0x8a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	e040      	b.n	800bc70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4922      	ldr	r1, [pc, #136]	; (800bc7c <inc_lock+0x118>)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	011b      	lsls	r3, r3, #4
 800bbf8:	440b      	add	r3, r1
 800bbfa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	689a      	ldr	r2, [r3, #8]
 800bc00:	491e      	ldr	r1, [pc, #120]	; (800bc7c <inc_lock+0x118>)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	011b      	lsls	r3, r3, #4
 800bc06:	440b      	add	r3, r1
 800bc08:	3304      	adds	r3, #4
 800bc0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	695a      	ldr	r2, [r3, #20]
 800bc10:	491a      	ldr	r1, [pc, #104]	; (800bc7c <inc_lock+0x118>)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	011b      	lsls	r3, r3, #4
 800bc16:	440b      	add	r3, r1
 800bc18:	3308      	adds	r3, #8
 800bc1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bc1c:	4a17      	ldr	r2, [pc, #92]	; (800bc7c <inc_lock+0x118>)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	011b      	lsls	r3, r3, #4
 800bc22:	4413      	add	r3, r2
 800bc24:	330c      	adds	r3, #12
 800bc26:	2200      	movs	r2, #0
 800bc28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d009      	beq.n	800bc44 <inc_lock+0xe0>
 800bc30:	4a12      	ldr	r2, [pc, #72]	; (800bc7c <inc_lock+0x118>)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	011b      	lsls	r3, r3, #4
 800bc36:	4413      	add	r3, r2
 800bc38:	330c      	adds	r3, #12
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d001      	beq.n	800bc44 <inc_lock+0xe0>
 800bc40:	2300      	movs	r3, #0
 800bc42:	e015      	b.n	800bc70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d108      	bne.n	800bc5c <inc_lock+0xf8>
 800bc4a:	4a0c      	ldr	r2, [pc, #48]	; (800bc7c <inc_lock+0x118>)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	011b      	lsls	r3, r3, #4
 800bc50:	4413      	add	r3, r2
 800bc52:	330c      	adds	r3, #12
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	3301      	adds	r3, #1
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	e001      	b.n	800bc60 <inc_lock+0xfc>
 800bc5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc60:	4906      	ldr	r1, [pc, #24]	; (800bc7c <inc_lock+0x118>)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	011b      	lsls	r3, r3, #4
 800bc66:	440b      	add	r3, r1
 800bc68:	330c      	adds	r3, #12
 800bc6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3301      	adds	r3, #1
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	20000770 	.word	0x20000770

0800bc80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	607b      	str	r3, [r7, #4]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d825      	bhi.n	800bce0 <dec_lock+0x60>
		n = Files[i].ctr;
 800bc94:	4a17      	ldr	r2, [pc, #92]	; (800bcf4 <dec_lock+0x74>)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	4413      	add	r3, r2
 800bc9c:	330c      	adds	r3, #12
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bca2:	89fb      	ldrh	r3, [r7, #14]
 800bca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bca8:	d101      	bne.n	800bcae <dec_lock+0x2e>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bcae:	89fb      	ldrh	r3, [r7, #14]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <dec_lock+0x3a>
 800bcb4:	89fb      	ldrh	r3, [r7, #14]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bcba:	4a0e      	ldr	r2, [pc, #56]	; (800bcf4 <dec_lock+0x74>)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	011b      	lsls	r3, r3, #4
 800bcc0:	4413      	add	r3, r2
 800bcc2:	330c      	adds	r3, #12
 800bcc4:	89fa      	ldrh	r2, [r7, #14]
 800bcc6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bcc8:	89fb      	ldrh	r3, [r7, #14]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d105      	bne.n	800bcda <dec_lock+0x5a>
 800bcce:	4a09      	ldr	r2, [pc, #36]	; (800bcf4 <dec_lock+0x74>)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	011b      	lsls	r3, r3, #4
 800bcd4:	4413      	add	r3, r2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	737b      	strb	r3, [r7, #13]
 800bcde:	e001      	b.n	800bce4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bce0:	2302      	movs	r3, #2
 800bce2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bce4:	7b7b      	ldrb	r3, [r7, #13]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	20000770 	.word	0x20000770

0800bcf8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	e010      	b.n	800bd28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bd06:	4a0d      	ldr	r2, [pc, #52]	; (800bd3c <clear_lock+0x44>)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	4413      	add	r3, r2
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d105      	bne.n	800bd22 <clear_lock+0x2a>
 800bd16:	4a09      	ldr	r2, [pc, #36]	; (800bd3c <clear_lock+0x44>)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	011b      	lsls	r3, r3, #4
 800bd1c:	4413      	add	r3, r2
 800bd1e:	2200      	movs	r2, #0
 800bd20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	3301      	adds	r3, #1
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d9eb      	bls.n	800bd06 <clear_lock+0xe>
	}
}
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	20000770 	.word	0x20000770

0800bd40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	78db      	ldrb	r3, [r3, #3]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d034      	beq.n	800bdbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	7858      	ldrb	r0, [r3, #1]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd64:	2301      	movs	r3, #1
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	f7ff fdcc 	bl	800b904 <disk_write>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d002      	beq.n	800bd78 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	73fb      	strb	r3, [r7, #15]
 800bd76:	e022      	b.n	800bdbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	1ad2      	subs	r2, r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d217      	bcs.n	800bdbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	789b      	ldrb	r3, [r3, #2]
 800bd92:	613b      	str	r3, [r7, #16]
 800bd94:	e010      	b.n	800bdb8 <sync_window+0x78>
					wsect += fs->fsize;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	7858      	ldrb	r0, [r3, #1]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bdaa:	2301      	movs	r3, #1
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	f7ff fda9 	bl	800b904 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	613b      	str	r3, [r7, #16]
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d8eb      	bhi.n	800bd96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3718      	adds	r7, #24
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d01b      	beq.n	800be18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff ffad 	bl	800bd40 <sync_window>
 800bde6:	4603      	mov	r3, r0
 800bde8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d113      	bne.n	800be18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	7858      	ldrb	r0, [r3, #1]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	f7ff fd61 	bl	800b8c4 <disk_read>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d004      	beq.n	800be12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800be08:	f04f 33ff 	mov.w	r3, #4294967295
 800be0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800be0e:	2301      	movs	r3, #1
 800be10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800be18:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	3b02      	subs	r3, #2
 800be30:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	69db      	ldr	r3, [r3, #28]
 800be36:	3b02      	subs	r3, #2
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d301      	bcc.n	800be42 <clust2sect+0x20>
 800be3e:	2300      	movs	r3, #0
 800be40:	e008      	b.n	800be54 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	895b      	ldrh	r3, [r3, #10]
 800be46:	461a      	mov	r2, r3
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	fb03 f202 	mul.w	r2, r3, r2
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be52:	4413      	add	r3, r2
}
 800be54:	4618      	mov	r0, r3
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	2b01      	cmp	r3, #1
 800be74:	d904      	bls.n	800be80 <get_fat+0x20>
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d302      	bcc.n	800be86 <get_fat+0x26>
		val = 1;	/* Internal error */
 800be80:	2301      	movs	r3, #1
 800be82:	617b      	str	r3, [r7, #20]
 800be84:	e08f      	b.n	800bfa6 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be86:	f04f 33ff 	mov.w	r3, #4294967295
 800be8a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b03      	cmp	r3, #3
 800be92:	d062      	beq.n	800bf5a <get_fat+0xfa>
 800be94:	2b03      	cmp	r3, #3
 800be96:	dc7c      	bgt.n	800bf92 <get_fat+0x132>
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d002      	beq.n	800bea2 <get_fat+0x42>
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d042      	beq.n	800bf26 <get_fat+0xc6>
 800bea0:	e077      	b.n	800bf92 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	60fb      	str	r3, [r7, #12]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	085b      	lsrs	r3, r3, #1
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	4413      	add	r3, r2
 800beae:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	0a5b      	lsrs	r3, r3, #9
 800beb8:	4413      	add	r3, r2
 800beba:	4619      	mov	r1, r3
 800bebc:	6938      	ldr	r0, [r7, #16]
 800bebe:	f7ff ff83 	bl	800bdc8 <move_window>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d167      	bne.n	800bf98 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	1c5a      	adds	r2, r3, #1
 800becc:	60fa      	str	r2, [r7, #12]
 800bece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed2:	693a      	ldr	r2, [r7, #16]
 800bed4:	4413      	add	r3, r2
 800bed6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800beda:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	0a5b      	lsrs	r3, r3, #9
 800bee4:	4413      	add	r3, r2
 800bee6:	4619      	mov	r1, r3
 800bee8:	6938      	ldr	r0, [r7, #16]
 800beea:	f7ff ff6d 	bl	800bdc8 <move_window>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d153      	bne.n	800bf9c <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	4413      	add	r3, r2
 800befe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bf02:	021b      	lsls	r3, r3, #8
 800bf04:	461a      	mov	r2, r3
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d002      	beq.n	800bf1c <get_fat+0xbc>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	091b      	lsrs	r3, r3, #4
 800bf1a:	e002      	b.n	800bf22 <get_fat+0xc2>
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf22:	617b      	str	r3, [r7, #20]
			break;
 800bf24:	e03f      	b.n	800bfa6 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	0a1b      	lsrs	r3, r3, #8
 800bf2e:	4413      	add	r3, r2
 800bf30:	4619      	mov	r1, r3
 800bf32:	6938      	ldr	r0, [r7, #16]
 800bf34:	f7ff ff48 	bl	800bdc8 <move_window>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d130      	bne.n	800bfa0 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bf4c:	4413      	add	r3, r2
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7ff fcf8 	bl	800b944 <ld_word>
 800bf54:	4603      	mov	r3, r0
 800bf56:	617b      	str	r3, [r7, #20]
			break;
 800bf58:	e025      	b.n	800bfa6 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	09db      	lsrs	r3, r3, #7
 800bf62:	4413      	add	r3, r2
 800bf64:	4619      	mov	r1, r3
 800bf66:	6938      	ldr	r0, [r7, #16]
 800bf68:	f7ff ff2e 	bl	800bdc8 <move_window>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d118      	bne.n	800bfa4 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bf80:	4413      	add	r3, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff fcf6 	bl	800b974 <ld_dword>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bf8e:	617b      	str	r3, [r7, #20]
			break;
 800bf90:	e009      	b.n	800bfa6 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bf92:	2301      	movs	r3, #1
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e006      	b.n	800bfa6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf98:	bf00      	nop
 800bf9a:	e004      	b.n	800bfa6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf9c:	bf00      	nop
 800bf9e:	e002      	b.n	800bfa6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bfa0:	bf00      	nop
 800bfa2:	e000      	b.n	800bfa6 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bfa4:	bf00      	nop
		}
	}

	return val;
 800bfa6:	697b      	ldr	r3, [r7, #20]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bfb0:	b590      	push	{r4, r7, lr}
 800bfb2:	b089      	sub	sp, #36	; 0x24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	f240 80d2 	bls.w	800c16c <put_fat+0x1bc>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	f080 80cc 	bcs.w	800c16c <put_fat+0x1bc>
		switch (fs->fs_type) {
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	f000 8096 	beq.w	800c10a <put_fat+0x15a>
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	f300 80cd 	bgt.w	800c17e <put_fat+0x1ce>
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d002      	beq.n	800bfee <put_fat+0x3e>
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d06e      	beq.n	800c0ca <put_fat+0x11a>
 800bfec:	e0c7      	b.n	800c17e <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	61bb      	str	r3, [r7, #24]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	085b      	lsrs	r3, r3, #1
 800bff6:	69ba      	ldr	r2, [r7, #24]
 800bff8:	4413      	add	r3, r2
 800bffa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	0a5b      	lsrs	r3, r3, #9
 800c004:	4413      	add	r3, r2
 800c006:	4619      	mov	r1, r3
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f7ff fedd 	bl	800bdc8 <move_window>
 800c00e:	4603      	mov	r3, r0
 800c010:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c012:	7ffb      	ldrb	r3, [r7, #31]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f040 80ab 	bne.w	800c170 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	1c59      	adds	r1, r3, #1
 800c024:	61b9      	str	r1, [r7, #24]
 800c026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02a:	4413      	add	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00d      	beq.n	800c054 <put_fat+0xa4>
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	b25b      	sxtb	r3, r3
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	b25a      	sxtb	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	011b      	lsls	r3, r3, #4
 800c04a:	b25b      	sxtb	r3, r3
 800c04c:	4313      	orrs	r3, r2
 800c04e:	b25b      	sxtb	r3, r3
 800c050:	b2db      	uxtb	r3, r3
 800c052:	e001      	b.n	800c058 <put_fat+0xa8>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	b2db      	uxtb	r3, r3
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2201      	movs	r2, #1
 800c060:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	0a5b      	lsrs	r3, r3, #9
 800c06a:	4413      	add	r3, r2
 800c06c:	4619      	mov	r1, r3
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff feaa 	bl	800bdc8 <move_window>
 800c074:	4603      	mov	r3, r0
 800c076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c078:	7ffb      	ldrb	r3, [r7, #31]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d17a      	bne.n	800c174 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08a:	4413      	add	r3, r2
 800c08c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d003      	beq.n	800c0a0 <put_fat+0xf0>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	091b      	lsrs	r3, r3, #4
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	e00e      	b.n	800c0be <put_fat+0x10e>
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	b25b      	sxtb	r3, r3
 800c0a6:	f023 030f 	bic.w	r3, r3, #15
 800c0aa:	b25a      	sxtb	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	0a1b      	lsrs	r3, r3, #8
 800c0b0:	b25b      	sxtb	r3, r3
 800c0b2:	f003 030f 	and.w	r3, r3, #15
 800c0b6:	b25b      	sxtb	r3, r3
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	b25b      	sxtb	r3, r3
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	70da      	strb	r2, [r3, #3]
			break;
 800c0c8:	e059      	b.n	800c17e <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	0a1b      	lsrs	r3, r3, #8
 800c0d2:	4413      	add	r3, r2
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f7ff fe76 	bl	800bdc8 <move_window>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0e0:	7ffb      	ldrb	r3, [r7, #31]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d148      	bne.n	800c178 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c0f4:	4413      	add	r3, r2
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	b292      	uxth	r2, r2
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fc5c 	bl	800b9ba <st_word>
			fs->wflag = 1;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2201      	movs	r2, #1
 800c106:	70da      	strb	r2, [r3, #3]
			break;
 800c108:	e039      	b.n	800c17e <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	09db      	lsrs	r3, r3, #7
 800c112:	4413      	add	r3, r2
 800c114:	4619      	mov	r1, r3
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff fe56 	bl	800bdc8 <move_window>
 800c11c:	4603      	mov	r3, r0
 800c11e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c120:	7ffb      	ldrb	r3, [r7, #31]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d12a      	bne.n	800c17c <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c13a:	4413      	add	r3, r2
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fc19 	bl	800b974 <ld_dword>
 800c142:	4603      	mov	r3, r0
 800c144:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c148:	4323      	orrs	r3, r4
 800c14a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c15a:	4413      	add	r3, r2
 800c15c:	6879      	ldr	r1, [r7, #4]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff fc46 	bl	800b9f0 <st_dword>
			fs->wflag = 1;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2201      	movs	r2, #1
 800c168:	70da      	strb	r2, [r3, #3]
			break;
 800c16a:	e008      	b.n	800c17e <put_fat+0x1ce>
		}
	}
 800c16c:	bf00      	nop
 800c16e:	e006      	b.n	800c17e <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c170:	bf00      	nop
 800c172:	e004      	b.n	800c17e <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c174:	bf00      	nop
 800c176:	e002      	b.n	800c17e <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c178:	bf00      	nop
 800c17a:	e000      	b.n	800c17e <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c17c:	bf00      	nop
	return res;
 800c17e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3724      	adds	r7, #36	; 0x24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd90      	pop	{r4, r7, pc}

0800c188 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b088      	sub	sp, #32
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10d      	bne.n	800c1ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d004      	beq.n	800c1b4 <create_chain+0x2c>
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	69db      	ldr	r3, [r3, #28]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d31b      	bcc.n	800c1ec <create_chain+0x64>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	61bb      	str	r3, [r7, #24]
 800c1b8:	e018      	b.n	800c1ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff fe4f 	bl	800be60 <get_fat>
 800c1c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d801      	bhi.n	800c1ce <create_chain+0x46>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e070      	b.n	800c2b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d4:	d101      	bne.n	800c1da <create_chain+0x52>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	e06a      	b.n	800c2b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	69db      	ldr	r3, [r3, #28]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d201      	bcs.n	800c1e8 <create_chain+0x60>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	e063      	b.n	800c2b0 <create_chain+0x128>
		scl = clst;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	69db      	ldr	r3, [r3, #28]
 800c1fa:	69fa      	ldr	r2, [r7, #28]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d307      	bcc.n	800c210 <create_chain+0x88>
				ncl = 2;
 800c200:	2302      	movs	r3, #2
 800c202:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c204:	69fa      	ldr	r2, [r7, #28]
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d901      	bls.n	800c210 <create_chain+0x88>
 800c20c:	2300      	movs	r3, #0
 800c20e:	e04f      	b.n	800c2b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff fe24 	bl	800be60 <get_fat>
 800c218:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00e      	beq.n	800c23e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d003      	beq.n	800c22e <create_chain+0xa6>
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22c:	d101      	bne.n	800c232 <create_chain+0xaa>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	e03e      	b.n	800c2b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	429a      	cmp	r2, r3
 800c238:	d1da      	bne.n	800c1f0 <create_chain+0x68>
 800c23a:	2300      	movs	r3, #0
 800c23c:	e038      	b.n	800c2b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c23e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c240:	f04f 32ff 	mov.w	r2, #4294967295
 800c244:	69f9      	ldr	r1, [r7, #28]
 800c246:	6938      	ldr	r0, [r7, #16]
 800c248:	f7ff feb2 	bl	800bfb0 <put_fat>
 800c24c:	4603      	mov	r3, r0
 800c24e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c250:	7dfb      	ldrb	r3, [r7, #23]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d109      	bne.n	800c26a <create_chain+0xe2>
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d006      	beq.n	800c26a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c25c:	69fa      	ldr	r2, [r7, #28]
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	6938      	ldr	r0, [r7, #16]
 800c262:	f7ff fea5 	bl	800bfb0 <put_fat>
 800c266:	4603      	mov	r3, r0
 800c268:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c26a:	7dfb      	ldrb	r3, [r7, #23]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d116      	bne.n	800c29e <create_chain+0x116>
		fs->last_clst = ncl;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	69fa      	ldr	r2, [r7, #28]
 800c274:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	699a      	ldr	r2, [r3, #24]
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	3b02      	subs	r3, #2
 800c280:	429a      	cmp	r2, r3
 800c282:	d804      	bhi.n	800c28e <create_chain+0x106>
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	699b      	ldr	r3, [r3, #24]
 800c288:	1e5a      	subs	r2, r3, #1
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	791b      	ldrb	r3, [r3, #4]
 800c292:	f043 0301 	orr.w	r3, r3, #1
 800c296:	b2da      	uxtb	r2, r3
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	711a      	strb	r2, [r3, #4]
 800c29c:	e007      	b.n	800c2ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c29e:	7dfb      	ldrb	r3, [r7, #23]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d102      	bne.n	800c2aa <create_chain+0x122>
 800c2a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a8:	e000      	b.n	800c2ac <create_chain+0x124>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c2ae:	69fb      	ldr	r3, [r7, #28]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3720      	adds	r7, #32
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2ce:	d204      	bcs.n	800c2da <dir_sdi+0x22>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	f003 031f 	and.w	r3, r3, #31
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <dir_sdi+0x26>
		return FR_INT_ERR;
 800c2da:	2302      	movs	r3, #2
 800c2dc:	e063      	b.n	800c3a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d106      	bne.n	800c2fe <dir_sdi+0x46>
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d902      	bls.n	800c2fe <dir_sdi+0x46>
		clst = fs->dirbase;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10c      	bne.n	800c31e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	095b      	lsrs	r3, r3, #5
 800c308:	693a      	ldr	r2, [r7, #16]
 800c30a:	8912      	ldrh	r2, [r2, #8]
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d301      	bcc.n	800c314 <dir_sdi+0x5c>
 800c310:	2302      	movs	r3, #2
 800c312:	e048      	b.n	800c3a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	61da      	str	r2, [r3, #28]
 800c31c:	e029      	b.n	800c372 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	895b      	ldrh	r3, [r3, #10]
 800c322:	025b      	lsls	r3, r3, #9
 800c324:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c326:	e019      	b.n	800c35c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6979      	ldr	r1, [r7, #20]
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7ff fd97 	bl	800be60 <get_fat>
 800c332:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33a:	d101      	bne.n	800c340 <dir_sdi+0x88>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e032      	b.n	800c3a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d904      	bls.n	800c350 <dir_sdi+0x98>
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	69db      	ldr	r3, [r3, #28]
 800c34a:	697a      	ldr	r2, [r7, #20]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d301      	bcc.n	800c354 <dir_sdi+0x9c>
 800c350:	2302      	movs	r3, #2
 800c352:	e028      	b.n	800c3a6 <dir_sdi+0xee>
			ofs -= csz;
 800c354:	683a      	ldr	r2, [r7, #0]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	429a      	cmp	r2, r3
 800c362:	d2e1      	bcs.n	800c328 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c364:	6979      	ldr	r1, [r7, #20]
 800c366:	6938      	ldr	r0, [r7, #16]
 800c368:	f7ff fd5b 	bl	800be22 <clust2sect>
 800c36c:	4602      	mov	r2, r0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	69db      	ldr	r3, [r3, #28]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <dir_sdi+0xcc>
 800c380:	2302      	movs	r3, #2
 800c382:	e010      	b.n	800c3a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	69da      	ldr	r2, [r3, #28]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	0a5b      	lsrs	r3, r3, #9
 800c38c:	441a      	add	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39e:	441a      	add	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b086      	sub	sp, #24
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
 800c3b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	3320      	adds	r3, #32
 800c3c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	69db      	ldr	r3, [r3, #28]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d003      	beq.n	800c3d6 <dir_next+0x28>
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3d4:	d301      	bcc.n	800c3da <dir_next+0x2c>
 800c3d6:	2304      	movs	r3, #4
 800c3d8:	e0aa      	b.n	800c530 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f040 8098 	bne.w	800c516 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	69db      	ldr	r3, [r3, #28]
 800c3ea:	1c5a      	adds	r2, r3, #1
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	699b      	ldr	r3, [r3, #24]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10b      	bne.n	800c410 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	095b      	lsrs	r3, r3, #5
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	8912      	ldrh	r2, [r2, #8]
 800c400:	4293      	cmp	r3, r2
 800c402:	f0c0 8088 	bcc.w	800c516 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	61da      	str	r2, [r3, #28]
 800c40c:	2304      	movs	r3, #4
 800c40e:	e08f      	b.n	800c530 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	0a5b      	lsrs	r3, r3, #9
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	8952      	ldrh	r2, [r2, #10]
 800c418:	3a01      	subs	r2, #1
 800c41a:	4013      	ands	r3, r2
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d17a      	bne.n	800c516 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f7ff fd19 	bl	800be60 <get_fat>
 800c42e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d801      	bhi.n	800c43a <dir_next+0x8c>
 800c436:	2302      	movs	r3, #2
 800c438:	e07a      	b.n	800c530 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c440:	d101      	bne.n	800c446 <dir_next+0x98>
 800c442:	2301      	movs	r3, #1
 800c444:	e074      	b.n	800c530 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d358      	bcc.n	800c502 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d104      	bne.n	800c460 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	61da      	str	r2, [r3, #28]
 800c45c:	2304      	movs	r3, #4
 800c45e:	e067      	b.n	800c530 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	699b      	ldr	r3, [r3, #24]
 800c466:	4619      	mov	r1, r3
 800c468:	4610      	mov	r0, r2
 800c46a:	f7ff fe8d 	bl	800c188 <create_chain>
 800c46e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d101      	bne.n	800c47a <dir_next+0xcc>
 800c476:	2307      	movs	r3, #7
 800c478:	e05a      	b.n	800c530 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d101      	bne.n	800c484 <dir_next+0xd6>
 800c480:	2302      	movs	r3, #2
 800c482:	e055      	b.n	800c530 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48a:	d101      	bne.n	800c490 <dir_next+0xe2>
 800c48c:	2301      	movs	r3, #1
 800c48e:	e04f      	b.n	800c530 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	f7ff fc55 	bl	800bd40 <sync_window>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <dir_next+0xf2>
 800c49c:	2301      	movs	r3, #1
 800c49e:	e047      	b.n	800c530 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3338      	adds	r3, #56	; 0x38
 800c4a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff facc 	bl	800ba48 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	613b      	str	r3, [r7, #16]
 800c4b4:	6979      	ldr	r1, [r7, #20]
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f7ff fcb3 	bl	800be22 <clust2sect>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	635a      	str	r2, [r3, #52]	; 0x34
 800c4c2:	e012      	b.n	800c4ea <dir_next+0x13c>
						fs->wflag = 1;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f7ff fc38 	bl	800bd40 <sync_window>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <dir_next+0x12c>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e02a      	b.n	800c530 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	613b      	str	r3, [r7, #16]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	635a      	str	r2, [r3, #52]	; 0x34
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	895b      	ldrh	r3, [r3, #10]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d3e6      	bcc.n	800c4c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	1ad2      	subs	r2, r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c508:	6979      	ldr	r1, [r7, #20]
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f7ff fc89 	bl	800be22 <clust2sect>
 800c510:	4602      	mov	r2, r0
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c528:	441a      	add	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	331a      	adds	r3, #26
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff f9fc 	bl	800b944 <ld_word>
 800c54c:	4603      	mov	r3, r0
 800c54e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	2b03      	cmp	r3, #3
 800c556:	d109      	bne.n	800c56c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	3314      	adds	r3, #20
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7ff f9f1 	bl	800b944 <ld_word>
 800c562:	4603      	mov	r3, r0
 800c564:	041b      	lsls	r3, r3, #16
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c56c:	68fb      	ldr	r3, [r7, #12]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c578:	b590      	push	{r4, r7, lr}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	331a      	adds	r3, #26
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff f9dc 	bl	800b944 <ld_word>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d001      	beq.n	800c596 <cmp_lfn+0x1e>
 800c592:	2300      	movs	r3, #0
 800c594:	e059      	b.n	800c64a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c59e:	1e5a      	subs	r2, r3, #1
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	4413      	add	r3, r2
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	81fb      	strh	r3, [r7, #14]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	613b      	str	r3, [r7, #16]
 800c5b4:	e033      	b.n	800c61e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c5b6:	4a27      	ldr	r2, [pc, #156]	; (800c654 <cmp_lfn+0xdc>)
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff f9bd 	bl	800b944 <ld_word>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c5ce:	89fb      	ldrh	r3, [r7, #14]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d01a      	beq.n	800c60a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2bfe      	cmp	r3, #254	; 0xfe
 800c5d8:	d812      	bhi.n	800c600 <cmp_lfn+0x88>
 800c5da:	89bb      	ldrh	r3, [r7, #12]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f001 fad5 	bl	800db8c <ff_wtoupper>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	461c      	mov	r4, r3
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	1c5a      	adds	r2, r3, #1
 800c5ea:	617a      	str	r2, [r7, #20]
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f001 fac9 	bl	800db8c <ff_wtoupper>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	429c      	cmp	r4, r3
 800c5fe:	d001      	beq.n	800c604 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c600:	2300      	movs	r3, #0
 800c602:	e022      	b.n	800c64a <cmp_lfn+0xd2>
			}
			wc = uc;
 800c604:	89bb      	ldrh	r3, [r7, #12]
 800c606:	81fb      	strh	r3, [r7, #14]
 800c608:	e006      	b.n	800c618 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c60a:	89bb      	ldrh	r3, [r7, #12]
 800c60c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c610:	4293      	cmp	r3, r2
 800c612:	d001      	beq.n	800c618 <cmp_lfn+0xa0>
 800c614:	2300      	movs	r3, #0
 800c616:	e018      	b.n	800c64a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	3301      	adds	r3, #1
 800c61c:	613b      	str	r3, [r7, #16]
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b0c      	cmp	r3, #12
 800c622:	d9c8      	bls.n	800c5b6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <cmp_lfn+0xd0>
 800c630:	89fb      	ldrh	r3, [r7, #14]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d008      	beq.n	800c648 <cmp_lfn+0xd0>
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	881b      	ldrh	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d001      	beq.n	800c648 <cmp_lfn+0xd0>
 800c644:	2300      	movs	r3, #0
 800c646:	e000      	b.n	800c64a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c648:	2301      	movs	r3, #1
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	371c      	adds	r7, #28
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd90      	pop	{r4, r7, pc}
 800c652:	bf00      	nop
 800c654:	080136b4 	.word	0x080136b4

0800c658 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	331a      	adds	r3, #26
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff f96c 	bl	800b944 <ld_word>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <pick_lfn+0x1e>
 800c672:	2300      	movs	r3, #0
 800c674:	e04d      	b.n	800c712 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c67e:	1e5a      	subs	r2, r3, #1
 800c680:	4613      	mov	r3, r2
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	4413      	add	r3, r2
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	4413      	add	r3, r2
 800c68a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c68c:	2301      	movs	r3, #1
 800c68e:	81fb      	strh	r3, [r7, #14]
 800c690:	2300      	movs	r3, #0
 800c692:	613b      	str	r3, [r7, #16]
 800c694:	e028      	b.n	800c6e8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c696:	4a21      	ldr	r2, [pc, #132]	; (800c71c <pick_lfn+0xc4>)
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	4413      	add	r3, r2
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff f94d 	bl	800b944 <ld_word>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c6ae:	89fb      	ldrh	r3, [r7, #14]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00f      	beq.n	800c6d4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2bfe      	cmp	r3, #254	; 0xfe
 800c6b8:	d901      	bls.n	800c6be <pick_lfn+0x66>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e029      	b.n	800c712 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c6be:	89bb      	ldrh	r3, [r7, #12]
 800c6c0:	81fb      	strh	r3, [r7, #14]
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	617a      	str	r2, [r7, #20]
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	89fa      	ldrh	r2, [r7, #14]
 800c6d0:	801a      	strh	r2, [r3, #0]
 800c6d2:	e006      	b.n	800c6e2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c6d4:	89bb      	ldrh	r3, [r7, #12]
 800c6d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d001      	beq.n	800c6e2 <pick_lfn+0x8a>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e017      	b.n	800c712 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	613b      	str	r3, [r7, #16]
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	2b0c      	cmp	r3, #12
 800c6ec:	d9d3      	bls.n	800c696 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00a      	beq.n	800c710 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2bfe      	cmp	r3, #254	; 0xfe
 800c6fe:	d901      	bls.n	800c704 <pick_lfn+0xac>
 800c700:	2300      	movs	r3, #0
 800c702:	e006      	b.n	800c712 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	4413      	add	r3, r2
 800c70c:	2200      	movs	r2, #0
 800c70e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c710:	2301      	movs	r3, #1
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	080136b4 	.word	0x080136b4

0800c720 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c72c:	230b      	movs	r3, #11
 800c72e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c730:	7bfb      	ldrb	r3, [r7, #15]
 800c732:	b2da      	uxtb	r2, r3
 800c734:	0852      	lsrs	r2, r2, #1
 800c736:	01db      	lsls	r3, r3, #7
 800c738:	4313      	orrs	r3, r2
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	1c59      	adds	r1, r3, #1
 800c740:	6079      	str	r1, [r7, #4]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	4413      	add	r3, r2
 800c746:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	60bb      	str	r3, [r7, #8]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1ed      	bne.n	800c730 <sum_sfn+0x10>
	return sum;
 800c754:	7bfb      	ldrb	r3, [r7, #15]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b086      	sub	sp, #24
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c76c:	2304      	movs	r3, #4
 800c76e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c776:	23ff      	movs	r3, #255	; 0xff
 800c778:	757b      	strb	r3, [r7, #21]
 800c77a:	23ff      	movs	r3, #255	; 0xff
 800c77c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c77e:	e081      	b.n	800c884 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	69db      	ldr	r3, [r3, #28]
 800c784:	4619      	mov	r1, r3
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f7ff fb1e 	bl	800bdc8 <move_window>
 800c78c:	4603      	mov	r3, r0
 800c78e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d17c      	bne.n	800c890 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a1b      	ldr	r3, [r3, #32]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c79e:	7dbb      	ldrb	r3, [r7, #22]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d102      	bne.n	800c7aa <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c7a4:	2304      	movs	r3, #4
 800c7a6:	75fb      	strb	r3, [r7, #23]
 800c7a8:	e077      	b.n	800c89a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	330b      	adds	r3, #11
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7b6:	73fb      	strb	r3, [r7, #15]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	7bfa      	ldrb	r2, [r7, #15]
 800c7bc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c7be:	7dbb      	ldrb	r3, [r7, #22]
 800c7c0:	2be5      	cmp	r3, #229	; 0xe5
 800c7c2:	d00e      	beq.n	800c7e2 <dir_read+0x80>
 800c7c4:	7dbb      	ldrb	r3, [r7, #22]
 800c7c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c7c8:	d00b      	beq.n	800c7e2 <dir_read+0x80>
 800c7ca:	7bfb      	ldrb	r3, [r7, #15]
 800c7cc:	f023 0320 	bic.w	r3, r3, #32
 800c7d0:	2b08      	cmp	r3, #8
 800c7d2:	bf0c      	ite	eq
 800c7d4:	2301      	moveq	r3, #1
 800c7d6:	2300      	movne	r3, #0
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	461a      	mov	r2, r3
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d002      	beq.n	800c7e8 <dir_read+0x86>
				ord = 0xFF;
 800c7e2:	23ff      	movs	r3, #255	; 0xff
 800c7e4:	757b      	strb	r3, [r7, #21]
 800c7e6:	e044      	b.n	800c872 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	2b0f      	cmp	r3, #15
 800c7ec:	d12f      	bne.n	800c84e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c7ee:	7dbb      	ldrb	r3, [r7, #22]
 800c7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00d      	beq.n	800c814 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a1b      	ldr	r3, [r3, #32]
 800c7fc:	7b5b      	ldrb	r3, [r3, #13]
 800c7fe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c800:	7dbb      	ldrb	r3, [r7, #22]
 800c802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c806:	75bb      	strb	r3, [r7, #22]
 800c808:	7dbb      	ldrb	r3, [r7, #22]
 800c80a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	695a      	ldr	r2, [r3, #20]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c814:	7dba      	ldrb	r2, [r7, #22]
 800c816:	7d7b      	ldrb	r3, [r7, #21]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d115      	bne.n	800c848 <dir_read+0xe6>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a1b      	ldr	r3, [r3, #32]
 800c820:	330d      	adds	r3, #13
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	7d3a      	ldrb	r2, [r7, #20]
 800c826:	429a      	cmp	r2, r3
 800c828:	d10e      	bne.n	800c848 <dir_read+0xe6>
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	68da      	ldr	r2, [r3, #12]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	4619      	mov	r1, r3
 800c834:	4610      	mov	r0, r2
 800c836:	f7ff ff0f 	bl	800c658 <pick_lfn>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d003      	beq.n	800c848 <dir_read+0xe6>
 800c840:	7d7b      	ldrb	r3, [r7, #21]
 800c842:	3b01      	subs	r3, #1
 800c844:	b2db      	uxtb	r3, r3
 800c846:	e000      	b.n	800c84a <dir_read+0xe8>
 800c848:	23ff      	movs	r3, #255	; 0xff
 800c84a:	757b      	strb	r3, [r7, #21]
 800c84c:	e011      	b.n	800c872 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c84e:	7d7b      	ldrb	r3, [r7, #21]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d109      	bne.n	800c868 <dir_read+0x106>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a1b      	ldr	r3, [r3, #32]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7ff ff61 	bl	800c720 <sum_sfn>
 800c85e:	4603      	mov	r3, r0
 800c860:	461a      	mov	r2, r3
 800c862:	7d3b      	ldrb	r3, [r7, #20]
 800c864:	4293      	cmp	r3, r2
 800c866:	d015      	beq.n	800c894 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f04f 32ff 	mov.w	r2, #4294967295
 800c86e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800c870:	e010      	b.n	800c894 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c872:	2100      	movs	r1, #0
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff fd9a 	bl	800c3ae <dir_next>
 800c87a:	4603      	mov	r3, r0
 800c87c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c87e:	7dfb      	ldrb	r3, [r7, #23]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d109      	bne.n	800c898 <dir_read+0x136>
	while (dp->sect) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	69db      	ldr	r3, [r3, #28]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f47f af79 	bne.w	800c780 <dir_read+0x1e>
 800c88e:	e004      	b.n	800c89a <dir_read+0x138>
		if (res != FR_OK) break;
 800c890:	bf00      	nop
 800c892:	e002      	b.n	800c89a <dir_read+0x138>
					break;
 800c894:	bf00      	nop
 800c896:	e000      	b.n	800c89a <dir_read+0x138>
		if (res != FR_OK) break;
 800c898:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <dir_read+0x144>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	61da      	str	r2, [r3, #28]
	return res;
 800c8a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c8be:	2100      	movs	r1, #0
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7ff fcf9 	bl	800c2b8 <dir_sdi>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <dir_find+0x24>
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	e0a9      	b.n	800ca28 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c8d4:	23ff      	movs	r3, #255	; 0xff
 800c8d6:	753b      	strb	r3, [r7, #20]
 800c8d8:	7d3b      	ldrb	r3, [r7, #20]
 800c8da:	757b      	strb	r3, [r7, #21]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6938      	ldr	r0, [r7, #16]
 800c8ec:	f7ff fa6c 	bl	800bdc8 <move_window>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f040 8090 	bne.w	800ca1c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c904:	7dbb      	ldrb	r3, [r7, #22]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d102      	bne.n	800c910 <dir_find+0x60>
 800c90a:	2304      	movs	r3, #4
 800c90c:	75fb      	strb	r3, [r7, #23]
 800c90e:	e08a      	b.n	800ca26 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6a1b      	ldr	r3, [r3, #32]
 800c914:	330b      	adds	r3, #11
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c91c:	73fb      	strb	r3, [r7, #15]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	7bfa      	ldrb	r2, [r7, #15]
 800c922:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c924:	7dbb      	ldrb	r3, [r7, #22]
 800c926:	2be5      	cmp	r3, #229	; 0xe5
 800c928:	d007      	beq.n	800c93a <dir_find+0x8a>
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
 800c92c:	f003 0308 	and.w	r3, r3, #8
 800c930:	2b00      	cmp	r3, #0
 800c932:	d009      	beq.n	800c948 <dir_find+0x98>
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	2b0f      	cmp	r3, #15
 800c938:	d006      	beq.n	800c948 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c93a:	23ff      	movs	r3, #255	; 0xff
 800c93c:	757b      	strb	r3, [r7, #21]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f04f 32ff 	mov.w	r2, #4294967295
 800c944:	631a      	str	r2, [r3, #48]	; 0x30
 800c946:	e05e      	b.n	800ca06 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	2b0f      	cmp	r3, #15
 800c94c:	d136      	bne.n	800c9bc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d154      	bne.n	800ca06 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c95c:	7dbb      	ldrb	r3, [r7, #22]
 800c95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00d      	beq.n	800c982 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	7b5b      	ldrb	r3, [r3, #13]
 800c96c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c96e:	7dbb      	ldrb	r3, [r7, #22]
 800c970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c974:	75bb      	strb	r3, [r7, #22]
 800c976:	7dbb      	ldrb	r3, [r7, #22]
 800c978:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	695a      	ldr	r2, [r3, #20]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c982:	7dba      	ldrb	r2, [r7, #22]
 800c984:	7d7b      	ldrb	r3, [r7, #21]
 800c986:	429a      	cmp	r2, r3
 800c988:	d115      	bne.n	800c9b6 <dir_find+0x106>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	330d      	adds	r3, #13
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	7d3a      	ldrb	r2, [r7, #20]
 800c994:	429a      	cmp	r2, r3
 800c996:	d10e      	bne.n	800c9b6 <dir_find+0x106>
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	68da      	ldr	r2, [r3, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a1b      	ldr	r3, [r3, #32]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	f7ff fde8 	bl	800c578 <cmp_lfn>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d003      	beq.n	800c9b6 <dir_find+0x106>
 800c9ae:	7d7b      	ldrb	r3, [r7, #21]
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	e000      	b.n	800c9b8 <dir_find+0x108>
 800c9b6:	23ff      	movs	r3, #255	; 0xff
 800c9b8:	757b      	strb	r3, [r7, #21]
 800c9ba:	e024      	b.n	800ca06 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c9bc:	7d7b      	ldrb	r3, [r7, #21]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d109      	bne.n	800c9d6 <dir_find+0x126>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff feaa 	bl	800c720 <sum_sfn>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	7d3b      	ldrb	r3, [r7, #20]
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d024      	beq.n	800ca20 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c9dc:	f003 0301 	and.w	r3, r3, #1
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d10a      	bne.n	800c9fa <dir_find+0x14a>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a18      	ldr	r0, [r3, #32]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3324      	adds	r3, #36	; 0x24
 800c9ec:	220b      	movs	r2, #11
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	f7ff f845 	bl	800ba7e <mem_cmp>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d014      	beq.n	800ca24 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c9fa:	23ff      	movs	r3, #255	; 0xff
 800c9fc:	757b      	strb	r3, [r7, #21]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f04f 32ff 	mov.w	r2, #4294967295
 800ca04:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ca06:	2100      	movs	r1, #0
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7ff fcd0 	bl	800c3ae <dir_next>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f43f af65 	beq.w	800c8e4 <dir_find+0x34>
 800ca1a:	e004      	b.n	800ca26 <dir_find+0x176>
		if (res != FR_OK) break;
 800ca1c:	bf00      	nop
 800ca1e:	e002      	b.n	800ca26 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ca20:	bf00      	nop
 800ca22:	e000      	b.n	800ca26 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ca24:	bf00      	nop

	return res;
 800ca26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	2200      	movs	r2, #0
 800ca44:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 80c9 	beq.w	800cbe2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca58:	d032      	beq.n	800cac0 <get_fileinfo+0x90>
			i = j = 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	61bb      	str	r3, [r7, #24]
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ca62:	e01b      	b.n	800ca9c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ca64:	89fb      	ldrh	r3, [r7, #14]
 800ca66:	2100      	movs	r1, #0
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f001 f853 	bl	800db14 <ff_convert>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ca72:	89fb      	ldrh	r3, [r7, #14]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d102      	bne.n	800ca7e <get_fileinfo+0x4e>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	61fb      	str	r3, [r7, #28]
 800ca7c:	e01a      	b.n	800cab4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	2bfe      	cmp	r3, #254	; 0xfe
 800ca82:	d902      	bls.n	800ca8a <get_fileinfo+0x5a>
 800ca84:	2300      	movs	r3, #0
 800ca86:	61fb      	str	r3, [r7, #28]
 800ca88:	e014      	b.n	800cab4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	1c5a      	adds	r2, r3, #1
 800ca8e:	61fa      	str	r2, [r7, #28]
 800ca90:	89fa      	ldrh	r2, [r7, #14]
 800ca92:	b2d1      	uxtb	r1, r2
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	4413      	add	r3, r2
 800ca98:	460a      	mov	r2, r1
 800ca9a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	68da      	ldr	r2, [r3, #12]
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	1c59      	adds	r1, r3, #1
 800caa4:	61b9      	str	r1, [r7, #24]
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	4413      	add	r3, r2
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	81fb      	strh	r3, [r7, #14]
 800caae:	89fb      	ldrh	r3, [r7, #14]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1d7      	bne.n	800ca64 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	4413      	add	r3, r2
 800caba:	3316      	adds	r3, #22
 800cabc:	2200      	movs	r2, #0
 800cabe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61bb      	str	r3, [r7, #24]
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	4413      	add	r3, r2
 800cace:	3316      	adds	r3, #22
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cad4:	e04c      	b.n	800cb70 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a1a      	ldr	r2, [r3, #32]
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	1c59      	adds	r1, r3, #1
 800cade:	61f9      	str	r1, [r7, #28]
 800cae0:	4413      	add	r3, r2
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
 800cae8:	2b20      	cmp	r3, #32
 800caea:	d100      	bne.n	800caee <get_fileinfo+0xbe>
 800caec:	e040      	b.n	800cb70 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	2b05      	cmp	r3, #5
 800caf2:	d101      	bne.n	800caf8 <get_fileinfo+0xc8>
 800caf4:	23e5      	movs	r3, #229	; 0xe5
 800caf6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	2b09      	cmp	r3, #9
 800cafc:	d10f      	bne.n	800cb1e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800cafe:	89bb      	ldrh	r3, [r7, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d105      	bne.n	800cb10 <get_fileinfo+0xe0>
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	4413      	add	r3, r2
 800cb0a:	3316      	adds	r3, #22
 800cb0c:	222e      	movs	r2, #46	; 0x2e
 800cb0e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	1c5a      	adds	r2, r3, #1
 800cb14:	61ba      	str	r2, [r7, #24]
 800cb16:	683a      	ldr	r2, [r7, #0]
 800cb18:	4413      	add	r3, r2
 800cb1a:	222e      	movs	r2, #46	; 0x2e
 800cb1c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	4413      	add	r3, r2
 800cb24:	3309      	adds	r3, #9
 800cb26:	7dfa      	ldrb	r2, [r7, #23]
 800cb28:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cb2a:	89bb      	ldrh	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d11c      	bne.n	800cb6a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	2b40      	cmp	r3, #64	; 0x40
 800cb34:	d913      	bls.n	800cb5e <get_fileinfo+0x12e>
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
 800cb38:	2b5a      	cmp	r3, #90	; 0x5a
 800cb3a:	d810      	bhi.n	800cb5e <get_fileinfo+0x12e>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a1b      	ldr	r3, [r3, #32]
 800cb40:	330c      	adds	r3, #12
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	461a      	mov	r2, r3
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	2b08      	cmp	r3, #8
 800cb4a:	d901      	bls.n	800cb50 <get_fileinfo+0x120>
 800cb4c:	2310      	movs	r3, #16
 800cb4e:	e000      	b.n	800cb52 <get_fileinfo+0x122>
 800cb50:	2308      	movs	r3, #8
 800cb52:	4013      	ands	r3, r2
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	3320      	adds	r3, #32
 800cb5c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	4413      	add	r3, r2
 800cb64:	3316      	adds	r3, #22
 800cb66:	7dfa      	ldrb	r2, [r7, #23]
 800cb68:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	2b0a      	cmp	r3, #10
 800cb74:	d9af      	bls.n	800cad6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800cb76:	89bb      	ldrh	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10d      	bne.n	800cb98 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	4413      	add	r3, r2
 800cb82:	3316      	adds	r3, #22
 800cb84:	2200      	movs	r2, #0
 800cb86:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	330c      	adds	r3, #12
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <get_fileinfo+0x168>
 800cb94:	2300      	movs	r3, #0
 800cb96:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	69bb      	ldr	r3, [r7, #24]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	3309      	adds	r3, #9
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	7ada      	ldrb	r2, [r3, #11]
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a1b      	ldr	r3, [r3, #32]
 800cbb2:	331c      	adds	r3, #28
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe fedd 	bl	800b974 <ld_dword>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	3316      	adds	r3, #22
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe fed4 	bl	800b974 <ld_dword>
 800cbcc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	80da      	strh	r2, [r3, #6]
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	0c1b      	lsrs	r3, r3, #16
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	809a      	strh	r2, [r3, #4]
 800cbe0:	e000      	b.n	800cbe4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cbe2:	bf00      	nop
}
 800cbe4:	3720      	adds	r7, #32
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08a      	sub	sp, #40	; 0x28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	613b      	str	r3, [r7, #16]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	2300      	movs	r3, #0
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	61ba      	str	r2, [r7, #24]
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	4413      	add	r3, r2
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cc1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc1c:	2b1f      	cmp	r3, #31
 800cc1e:	d940      	bls.n	800cca2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cc20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc22:	2b2f      	cmp	r3, #47	; 0x2f
 800cc24:	d006      	beq.n	800cc34 <create_name+0x48>
 800cc26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc28:	2b5c      	cmp	r3, #92	; 0x5c
 800cc2a:	d110      	bne.n	800cc4e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cc2c:	e002      	b.n	800cc34 <create_name+0x48>
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	3301      	adds	r3, #1
 800cc32:	61bb      	str	r3, [r7, #24]
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	4413      	add	r3, r2
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b2f      	cmp	r3, #47	; 0x2f
 800cc3e:	d0f6      	beq.n	800cc2e <create_name+0x42>
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	4413      	add	r3, r2
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b5c      	cmp	r3, #92	; 0x5c
 800cc4a:	d0f0      	beq.n	800cc2e <create_name+0x42>
			break;
 800cc4c:	e02a      	b.n	800cca4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2bfe      	cmp	r3, #254	; 0xfe
 800cc52:	d901      	bls.n	800cc58 <create_name+0x6c>
 800cc54:	2306      	movs	r3, #6
 800cc56:	e177      	b.n	800cf48 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cc58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cc5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc60:	2101      	movs	r1, #1
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 ff56 	bl	800db14 <ff_convert>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cc6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <create_name+0x8a>
 800cc72:	2306      	movs	r3, #6
 800cc74:	e168      	b.n	800cf48 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cc76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc78:	2b7f      	cmp	r3, #127	; 0x7f
 800cc7a:	d809      	bhi.n	800cc90 <create_name+0xa4>
 800cc7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc7e:	4619      	mov	r1, r3
 800cc80:	48b3      	ldr	r0, [pc, #716]	; (800cf50 <create_name+0x364>)
 800cc82:	f7fe ff23 	bl	800bacc <chk_chr>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d001      	beq.n	800cc90 <create_name+0xa4>
 800cc8c:	2306      	movs	r3, #6
 800cc8e:	e15b      	b.n	800cf48 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	617a      	str	r2, [r7, #20]
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc9e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cca0:	e7b4      	b.n	800cc0c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cca2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cca4:	693a      	ldr	r2, [r7, #16]
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	441a      	add	r2, r3
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ccae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccb0:	2b1f      	cmp	r3, #31
 800ccb2:	d801      	bhi.n	800ccb8 <create_name+0xcc>
 800ccb4:	2304      	movs	r3, #4
 800ccb6:	e000      	b.n	800ccba <create_name+0xce>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ccbe:	e011      	b.n	800cce4 <create_name+0xf8>
		w = lfn[di - 1];
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ccc6:	4413      	add	r3, r2
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	4413      	add	r3, r2
 800ccce:	881b      	ldrh	r3, [r3, #0]
 800ccd0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ccd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccd4:	2b20      	cmp	r3, #32
 800ccd6:	d002      	beq.n	800ccde <create_name+0xf2>
 800ccd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccda:	2b2e      	cmp	r3, #46	; 0x2e
 800ccdc:	d106      	bne.n	800ccec <create_name+0x100>
		di--;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1ea      	bne.n	800ccc0 <create_name+0xd4>
 800ccea:	e000      	b.n	800ccee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ccec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d101      	bne.n	800cd04 <create_name+0x118>
 800cd00:	2306      	movs	r3, #6
 800cd02:	e121      	b.n	800cf48 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	3324      	adds	r3, #36	; 0x24
 800cd08:	220b      	movs	r2, #11
 800cd0a:	2120      	movs	r1, #32
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe fe9b 	bl	800ba48 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cd12:	2300      	movs	r3, #0
 800cd14:	61bb      	str	r3, [r7, #24]
 800cd16:	e002      	b.n	800cd1e <create_name+0x132>
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	61bb      	str	r3, [r7, #24]
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	005b      	lsls	r3, r3, #1
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	4413      	add	r3, r2
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	2b20      	cmp	r3, #32
 800cd2a:	d0f5      	beq.n	800cd18 <create_name+0x12c>
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	4413      	add	r3, r2
 800cd34:	881b      	ldrh	r3, [r3, #0]
 800cd36:	2b2e      	cmp	r3, #46	; 0x2e
 800cd38:	d0ee      	beq.n	800cd18 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d009      	beq.n	800cd54 <create_name+0x168>
 800cd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd44:	f043 0303 	orr.w	r3, r3, #3
 800cd48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cd4c:	e002      	b.n	800cd54 <create_name+0x168>
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	617b      	str	r3, [r7, #20]
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d009      	beq.n	800cd6e <create_name+0x182>
 800cd5a:	697a      	ldr	r2, [r7, #20]
 800cd5c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd60:	4413      	add	r3, r2
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	4413      	add	r3, r2
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd6c:	d1ef      	bne.n	800cd4e <create_name+0x162>

	i = b = 0; ni = 8;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd74:	2300      	movs	r3, #0
 800cd76:	623b      	str	r3, [r7, #32]
 800cd78:	2308      	movs	r3, #8
 800cd7a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	61ba      	str	r2, [r7, #24]
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	4413      	add	r3, r2
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cd8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f000 8090 	beq.w	800ceb4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cd94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd96:	2b20      	cmp	r3, #32
 800cd98:	d006      	beq.n	800cda8 <create_name+0x1bc>
 800cd9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd9c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd9e:	d10a      	bne.n	800cdb6 <create_name+0x1ca>
 800cda0:	69ba      	ldr	r2, [r7, #24]
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d006      	beq.n	800cdb6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdac:	f043 0303 	orr.w	r3, r3, #3
 800cdb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdb4:	e07d      	b.n	800ceb2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cdb6:	6a3a      	ldr	r2, [r7, #32]
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d203      	bcs.n	800cdc6 <create_name+0x1da>
 800cdbe:	69ba      	ldr	r2, [r7, #24]
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d123      	bne.n	800ce0e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	2b0b      	cmp	r3, #11
 800cdca:	d106      	bne.n	800cdda <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cdcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdd0:	f043 0303 	orr.w	r3, r3, #3
 800cdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdd8:	e06f      	b.n	800ceba <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cdda:	69ba      	ldr	r2, [r7, #24]
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d005      	beq.n	800cdee <create_name+0x202>
 800cde2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cde6:	f043 0303 	orr.w	r3, r3, #3
 800cdea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cdee:	69ba      	ldr	r2, [r7, #24]
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d860      	bhi.n	800ceb8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	61bb      	str	r3, [r7, #24]
 800cdfa:	2308      	movs	r3, #8
 800cdfc:	623b      	str	r3, [r7, #32]
 800cdfe:	230b      	movs	r3, #11
 800ce00:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ce02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce0c:	e051      	b.n	800ceb2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ce0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce10:	2b7f      	cmp	r3, #127	; 0x7f
 800ce12:	d914      	bls.n	800ce3e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ce14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce16:	2100      	movs	r1, #0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f000 fe7b 	bl	800db14 <ff_convert>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ce22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d004      	beq.n	800ce32 <create_name+0x246>
 800ce28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce2a:	3b80      	subs	r3, #128	; 0x80
 800ce2c:	4a49      	ldr	r2, [pc, #292]	; (800cf54 <create_name+0x368>)
 800ce2e:	5cd3      	ldrb	r3, [r2, r3]
 800ce30:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ce32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce36:	f043 0302 	orr.w	r3, r3, #2
 800ce3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ce3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d007      	beq.n	800ce54 <create_name+0x268>
 800ce44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce46:	4619      	mov	r1, r3
 800ce48:	4843      	ldr	r0, [pc, #268]	; (800cf58 <create_name+0x36c>)
 800ce4a:	f7fe fe3f 	bl	800bacc <chk_chr>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d008      	beq.n	800ce66 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ce54:	235f      	movs	r3, #95	; 0x5f
 800ce56:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ce58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce5c:	f043 0303 	orr.w	r3, r3, #3
 800ce60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce64:	e01b      	b.n	800ce9e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ce66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce68:	2b40      	cmp	r3, #64	; 0x40
 800ce6a:	d909      	bls.n	800ce80 <create_name+0x294>
 800ce6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce6e:	2b5a      	cmp	r3, #90	; 0x5a
 800ce70:	d806      	bhi.n	800ce80 <create_name+0x294>
					b |= 2;
 800ce72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce76:	f043 0302 	orr.w	r3, r3, #2
 800ce7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce7e:	e00e      	b.n	800ce9e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ce80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce82:	2b60      	cmp	r3, #96	; 0x60
 800ce84:	d90b      	bls.n	800ce9e <create_name+0x2b2>
 800ce86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce88:	2b7a      	cmp	r3, #122	; 0x7a
 800ce8a:	d808      	bhi.n	800ce9e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ce8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce90:	f043 0301 	orr.w	r3, r3, #1
 800ce94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce9a:	3b20      	subs	r3, #32
 800ce9c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ce9e:	6a3b      	ldr	r3, [r7, #32]
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	623a      	str	r2, [r7, #32]
 800cea4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cea6:	b2d1      	uxtb	r1, r2
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	4413      	add	r3, r2
 800ceac:	460a      	mov	r2, r1
 800ceae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ceb2:	e763      	b.n	800cd7c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ceb4:	bf00      	nop
 800ceb6:	e000      	b.n	800ceba <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800ceb8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cec0:	2be5      	cmp	r3, #229	; 0xe5
 800cec2:	d103      	bne.n	800cecc <create_name+0x2e0>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2205      	movs	r2, #5
 800cec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b08      	cmp	r3, #8
 800ced0:	d104      	bne.n	800cedc <create_name+0x2f0>
 800ced2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cedc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cee0:	f003 030c 	and.w	r3, r3, #12
 800cee4:	2b0c      	cmp	r3, #12
 800cee6:	d005      	beq.n	800cef4 <create_name+0x308>
 800cee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ceec:	f003 0303 	and.w	r3, r3, #3
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d105      	bne.n	800cf00 <create_name+0x314>
 800cef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cef8:	f043 0302 	orr.w	r3, r3, #2
 800cefc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cf00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf04:	f003 0302 	and.w	r3, r3, #2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d117      	bne.n	800cf3c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cf0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf10:	f003 0303 	and.w	r3, r3, #3
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d105      	bne.n	800cf24 <create_name+0x338>
 800cf18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf1c:	f043 0310 	orr.w	r3, r3, #16
 800cf20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cf24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf28:	f003 030c 	and.w	r3, r3, #12
 800cf2c:	2b04      	cmp	r3, #4
 800cf2e:	d105      	bne.n	800cf3c <create_name+0x350>
 800cf30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf34:	f043 0308 	orr.w	r3, r3, #8
 800cf38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cf42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800cf46:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3728      	adds	r7, #40	; 0x28
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	08011af8 	.word	0x08011af8
 800cf54:	08013634 	.word	0x08013634
 800cf58:	08011b04 	.word	0x08011b04

0800cf5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cf70:	e002      	b.n	800cf78 <follow_path+0x1c>
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	3301      	adds	r3, #1
 800cf76:	603b      	str	r3, [r7, #0]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b2f      	cmp	r3, #47	; 0x2f
 800cf7e:	d0f8      	beq.n	800cf72 <follow_path+0x16>
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b5c      	cmp	r3, #92	; 0x5c
 800cf86:	d0f4      	beq.n	800cf72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b1f      	cmp	r3, #31
 800cf94:	d80a      	bhi.n	800cfac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2280      	movs	r2, #128	; 0x80
 800cf9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7ff f989 	bl	800c2b8 <dir_sdi>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	75fb      	strb	r3, [r7, #23]
 800cfaa:	e043      	b.n	800d034 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cfac:	463b      	mov	r3, r7
 800cfae:	4619      	mov	r1, r3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7ff fe1b 	bl	800cbec <create_name>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d134      	bne.n	800d02a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f7ff fc75 	bl	800c8b0 <dir_find>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cfd0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cfd2:	7dfb      	ldrb	r3, [r7, #23]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00a      	beq.n	800cfee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	2b04      	cmp	r3, #4
 800cfdc:	d127      	bne.n	800d02e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	f003 0304 	and.w	r3, r3, #4
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d122      	bne.n	800d02e <follow_path+0xd2>
 800cfe8:	2305      	movs	r3, #5
 800cfea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cfec:	e01f      	b.n	800d02e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cfee:	7afb      	ldrb	r3, [r7, #11]
 800cff0:	f003 0304 	and.w	r3, r3, #4
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d11c      	bne.n	800d032 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	799b      	ldrb	r3, [r3, #6]
 800cffc:	f003 0310 	and.w	r3, r3, #16
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d004:	2305      	movs	r3, #5
 800d006:	75fb      	strb	r3, [r7, #23]
 800d008:	e014      	b.n	800d034 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	695b      	ldr	r3, [r3, #20]
 800d014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d018:	4413      	add	r3, r2
 800d01a:	4619      	mov	r1, r3
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f7ff fa8b 	bl	800c538 <ld_clust>
 800d022:	4602      	mov	r2, r0
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d028:	e7c0      	b.n	800cfac <follow_path+0x50>
			if (res != FR_OK) break;
 800d02a:	bf00      	nop
 800d02c:	e002      	b.n	800d034 <follow_path+0xd8>
				break;
 800d02e:	bf00      	nop
 800d030:	e000      	b.n	800d034 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d032:	bf00      	nop
			}
		}
	}

	return res;
 800d034:	7dfb      	ldrb	r3, [r7, #23]
}
 800d036:	4618      	mov	r0, r3
 800d038:	3718      	adds	r7, #24
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d03e:	b480      	push	{r7}
 800d040:	b087      	sub	sp, #28
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d046:	f04f 33ff 	mov.w	r3, #4294967295
 800d04a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d031      	beq.n	800d0b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	617b      	str	r3, [r7, #20]
 800d05a:	e002      	b.n	800d062 <get_ldnumber+0x24>
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	3301      	adds	r3, #1
 800d060:	617b      	str	r3, [r7, #20]
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b1f      	cmp	r3, #31
 800d068:	d903      	bls.n	800d072 <get_ldnumber+0x34>
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b3a      	cmp	r3, #58	; 0x3a
 800d070:	d1f4      	bne.n	800d05c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	2b3a      	cmp	r3, #58	; 0x3a
 800d078:	d11c      	bne.n	800d0b4 <get_ldnumber+0x76>
			tp = *path;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	1c5a      	adds	r2, r3, #1
 800d084:	60fa      	str	r2, [r7, #12]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	3b30      	subs	r3, #48	; 0x30
 800d08a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	2b09      	cmp	r3, #9
 800d090:	d80e      	bhi.n	800d0b0 <get_ldnumber+0x72>
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	429a      	cmp	r2, r3
 800d098:	d10a      	bne.n	800d0b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d807      	bhi.n	800d0b0 <get_ldnumber+0x72>
					vol = (int)i;
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	617b      	str	r3, [r7, #20]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	697a      	ldr	r2, [r7, #20]
 800d0ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	e002      	b.n	800d0ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d0b8:	693b      	ldr	r3, [r7, #16]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	371c      	adds	r7, #28
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
	...

0800d0c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	70da      	strb	r2, [r3, #3]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f04f 32ff 	mov.w	r2, #4294967295
 800d0de:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7fe fe70 	bl	800bdc8 <move_window>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <check_fs+0x2a>
 800d0ee:	2304      	movs	r3, #4
 800d0f0:	e038      	b.n	800d164 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	3338      	adds	r3, #56	; 0x38
 800d0f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe fc22 	bl	800b944 <ld_word>
 800d100:	4603      	mov	r3, r0
 800d102:	461a      	mov	r2, r3
 800d104:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d108:	429a      	cmp	r2, r3
 800d10a:	d001      	beq.n	800d110 <check_fs+0x48>
 800d10c:	2303      	movs	r3, #3
 800d10e:	e029      	b.n	800d164 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d116:	2be9      	cmp	r3, #233	; 0xe9
 800d118:	d009      	beq.n	800d12e <check_fs+0x66>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d120:	2beb      	cmp	r3, #235	; 0xeb
 800d122:	d11e      	bne.n	800d162 <check_fs+0x9a>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d12a:	2b90      	cmp	r3, #144	; 0x90
 800d12c:	d119      	bne.n	800d162 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	3338      	adds	r3, #56	; 0x38
 800d132:	3336      	adds	r3, #54	; 0x36
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe fc1d 	bl	800b974 <ld_dword>
 800d13a:	4603      	mov	r3, r0
 800d13c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d140:	4a0a      	ldr	r2, [pc, #40]	; (800d16c <check_fs+0xa4>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d101      	bne.n	800d14a <check_fs+0x82>
 800d146:	2300      	movs	r3, #0
 800d148:	e00c      	b.n	800d164 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3338      	adds	r3, #56	; 0x38
 800d14e:	3352      	adds	r3, #82	; 0x52
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe fc0f 	bl	800b974 <ld_dword>
 800d156:	4603      	mov	r3, r0
 800d158:	4a05      	ldr	r2, [pc, #20]	; (800d170 <check_fs+0xa8>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d101      	bne.n	800d162 <check_fs+0x9a>
 800d15e:	2300      	movs	r3, #0
 800d160:	e000      	b.n	800d164 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d162:	2302      	movs	r3, #2
}
 800d164:	4618      	mov	r0, r3
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	00544146 	.word	0x00544146
 800d170:	33544146 	.word	0x33544146

0800d174 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b096      	sub	sp, #88	; 0x58
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2200      	movs	r2, #0
 800d186:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7ff ff58 	bl	800d03e <get_ldnumber>
 800d18e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d192:	2b00      	cmp	r3, #0
 800d194:	da01      	bge.n	800d19a <find_volume+0x26>
 800d196:	230b      	movs	r3, #11
 800d198:	e236      	b.n	800d608 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d19a:	4aac      	ldr	r2, [pc, #688]	; (800d44c <find_volume+0x2d8>)
 800d19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <find_volume+0x3a>
 800d1aa:	230c      	movs	r3, #12
 800d1ac:	e22c      	b.n	800d608 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800d1ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1b0:	f7fe fca7 	bl	800bb02 <lock_fs>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <find_volume+0x4a>
 800d1ba:	230f      	movs	r3, #15
 800d1bc:	e224      	b.n	800d608 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d1c4:	79fb      	ldrb	r3, [r7, #7]
 800d1c6:	f023 0301 	bic.w	r3, r3, #1
 800d1ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01a      	beq.n	800d20a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	785b      	ldrb	r3, [r3, #1]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fe fb33 	bl	800b844 <disk_status>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d1e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1e8:	f003 0301 	and.w	r3, r3, #1
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10c      	bne.n	800d20a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d1f0:	79fb      	ldrb	r3, [r7, #7]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d007      	beq.n	800d206 <find_volume+0x92>
 800d1f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1fa:	f003 0304 	and.w	r3, r3, #4
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d001      	beq.n	800d206 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d202:	230a      	movs	r3, #10
 800d204:	e200      	b.n	800d608 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800d206:	2300      	movs	r3, #0
 800d208:	e1fe      	b.n	800d608 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20c:	2200      	movs	r2, #0
 800d20e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d212:	b2da      	uxtb	r2, r3
 800d214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d216:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21a:	785b      	ldrb	r3, [r3, #1]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fb2b 	bl	800b878 <disk_initialize>
 800d222:	4603      	mov	r3, r0
 800d224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d22c:	f003 0301 	and.w	r3, r3, #1
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d234:	2303      	movs	r3, #3
 800d236:	e1e7      	b.n	800d608 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d238:	79fb      	ldrb	r3, [r7, #7]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d007      	beq.n	800d24e <find_volume+0xda>
 800d23e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d242:	f003 0304 	and.w	r3, r3, #4
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d24a:	230a      	movs	r3, #10
 800d24c:	e1dc      	b.n	800d608 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d24e:	2300      	movs	r3, #0
 800d250:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d252:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d256:	f7ff ff37 	bl	800d0c8 <check_fs>
 800d25a:	4603      	mov	r3, r0
 800d25c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d260:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d264:	2b02      	cmp	r3, #2
 800d266:	d14b      	bne.n	800d300 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d268:	2300      	movs	r3, #0
 800d26a:	643b      	str	r3, [r7, #64]	; 0x40
 800d26c:	e01f      	b.n	800d2ae <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d276:	011b      	lsls	r3, r3, #4
 800d278:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d27c:	4413      	add	r3, r2
 800d27e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	3304      	adds	r3, #4
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d006      	beq.n	800d298 <find_volume+0x124>
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	3308      	adds	r3, #8
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe fb70 	bl	800b974 <ld_dword>
 800d294:	4602      	mov	r2, r0
 800d296:	e000      	b.n	800d29a <find_volume+0x126>
 800d298:	2200      	movs	r2, #0
 800d29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d2a2:	440b      	add	r3, r1
 800d2a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d2ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d9dc      	bls.n	800d26e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d002      	beq.n	800d2c4 <find_volume+0x150>
 800d2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d2d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d2d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d005      	beq.n	800d2e6 <find_volume+0x172>
 800d2da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d2dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2de:	f7ff fef3 	bl	800d0c8 <check_fs>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	e000      	b.n	800d2e8 <find_volume+0x174>
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d2ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d905      	bls.n	800d300 <find_volume+0x18c>
 800d2f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	643b      	str	r3, [r7, #64]	; 0x40
 800d2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d9e1      	bls.n	800d2c4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d304:	2b04      	cmp	r3, #4
 800d306:	d101      	bne.n	800d30c <find_volume+0x198>
 800d308:	2301      	movs	r3, #1
 800d30a:	e17d      	b.n	800d608 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d30c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d310:	2b01      	cmp	r3, #1
 800d312:	d901      	bls.n	800d318 <find_volume+0x1a4>
 800d314:	230d      	movs	r3, #13
 800d316:	e177      	b.n	800d608 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	3338      	adds	r3, #56	; 0x38
 800d31c:	330b      	adds	r3, #11
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fe fb10 	bl	800b944 <ld_word>
 800d324:	4603      	mov	r3, r0
 800d326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d32a:	d001      	beq.n	800d330 <find_volume+0x1bc>
 800d32c:	230d      	movs	r3, #13
 800d32e:	e16b      	b.n	800d608 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d332:	3338      	adds	r3, #56	; 0x38
 800d334:	3316      	adds	r3, #22
 800d336:	4618      	mov	r0, r3
 800d338:	f7fe fb04 	bl	800b944 <ld_word>
 800d33c:	4603      	mov	r3, r0
 800d33e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <find_volume+0x1e0>
 800d346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d348:	3338      	adds	r3, #56	; 0x38
 800d34a:	3324      	adds	r3, #36	; 0x24
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fe fb11 	bl	800b974 <ld_dword>
 800d352:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d356:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d358:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	789b      	ldrb	r3, [r3, #2]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d005      	beq.n	800d378 <find_volume+0x204>
 800d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36e:	789b      	ldrb	r3, [r3, #2]
 800d370:	2b02      	cmp	r3, #2
 800d372:	d001      	beq.n	800d378 <find_volume+0x204>
 800d374:	230d      	movs	r3, #13
 800d376:	e147      	b.n	800d608 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	789b      	ldrb	r3, [r3, #2]
 800d37c:	461a      	mov	r2, r3
 800d37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d380:	fb02 f303 	mul.w	r3, r2, r3
 800d384:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d390:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d394:	895b      	ldrh	r3, [r3, #10]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d008      	beq.n	800d3ac <find_volume+0x238>
 800d39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39c:	895b      	ldrh	r3, [r3, #10]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	895b      	ldrh	r3, [r3, #10]
 800d3a4:	3b01      	subs	r3, #1
 800d3a6:	4013      	ands	r3, r2
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d001      	beq.n	800d3b0 <find_volume+0x23c>
 800d3ac:	230d      	movs	r3, #13
 800d3ae:	e12b      	b.n	800d608 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b2:	3338      	adds	r3, #56	; 0x38
 800d3b4:	3311      	adds	r3, #17
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7fe fac4 	bl	800b944 <ld_word>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	461a      	mov	r2, r3
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c6:	891b      	ldrh	r3, [r3, #8]
 800d3c8:	f003 030f 	and.w	r3, r3, #15
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <find_volume+0x262>
 800d3d2:	230d      	movs	r3, #13
 800d3d4:	e118      	b.n	800d608 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	3338      	adds	r3, #56	; 0x38
 800d3da:	3313      	adds	r3, #19
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fe fab1 	bl	800b944 <ld_word>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d106      	bne.n	800d3fa <find_volume+0x286>
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ee:	3338      	adds	r3, #56	; 0x38
 800d3f0:	3320      	adds	r3, #32
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fe fabe 	bl	800b974 <ld_dword>
 800d3f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fc:	3338      	adds	r3, #56	; 0x38
 800d3fe:	330e      	adds	r3, #14
 800d400:	4618      	mov	r0, r3
 800d402:	f7fe fa9f 	bl	800b944 <ld_word>
 800d406:	4603      	mov	r3, r0
 800d408:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d40a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d101      	bne.n	800d414 <find_volume+0x2a0>
 800d410:	230d      	movs	r3, #13
 800d412:	e0f9      	b.n	800d608 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d414:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d418:	4413      	add	r3, r2
 800d41a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d41c:	8912      	ldrh	r2, [r2, #8]
 800d41e:	0912      	lsrs	r2, r2, #4
 800d420:	b292      	uxth	r2, r2
 800d422:	4413      	add	r3, r2
 800d424:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d201      	bcs.n	800d432 <find_volume+0x2be>
 800d42e:	230d      	movs	r3, #13
 800d430:	e0ea      	b.n	800d608 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d43a:	8952      	ldrh	r2, [r2, #10]
 800d43c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d440:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	2b00      	cmp	r3, #0
 800d446:	d103      	bne.n	800d450 <find_volume+0x2dc>
 800d448:	230d      	movs	r3, #13
 800d44a:	e0dd      	b.n	800d608 <find_volume+0x494>
 800d44c:	20000764 	.word	0x20000764
		fmt = FS_FAT32;
 800d450:	2303      	movs	r3, #3
 800d452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d802      	bhi.n	800d466 <find_volume+0x2f2>
 800d460:	2302      	movs	r3, #2
 800d462:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d468:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d802      	bhi.n	800d476 <find_volume+0x302>
 800d470:	2301      	movs	r3, #1
 800d472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	1c9a      	adds	r2, r3, #2
 800d47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d482:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d484:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d488:	441a      	add	r2, r3
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d48e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d492:	441a      	add	r2, r3
 800d494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d496:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d49c:	2b03      	cmp	r3, #3
 800d49e:	d11e      	bne.n	800d4de <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a2:	3338      	adds	r3, #56	; 0x38
 800d4a4:	332a      	adds	r3, #42	; 0x2a
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe fa4c 	bl	800b944 <ld_word>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <find_volume+0x342>
 800d4b2:	230d      	movs	r3, #13
 800d4b4:	e0a8      	b.n	800d608 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b8:	891b      	ldrh	r3, [r3, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <find_volume+0x34e>
 800d4be:	230d      	movs	r3, #13
 800d4c0:	e0a2      	b.n	800d608 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c4:	3338      	adds	r3, #56	; 0x38
 800d4c6:	332c      	adds	r3, #44	; 0x2c
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fe fa53 	bl	800b974 <ld_dword>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	647b      	str	r3, [r7, #68]	; 0x44
 800d4dc:	e01f      	b.n	800d51e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e0:	891b      	ldrh	r3, [r3, #8]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <find_volume+0x376>
 800d4e6:	230d      	movs	r3, #13
 800d4e8:	e08e      	b.n	800d608 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4f0:	441a      	add	r2, r3
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d4f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d103      	bne.n	800d506 <find_volume+0x392>
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d500:	69db      	ldr	r3, [r3, #28]
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	e00a      	b.n	800d51c <find_volume+0x3a8>
 800d506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d508:	69da      	ldr	r2, [r3, #28]
 800d50a:	4613      	mov	r3, r2
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	4413      	add	r3, r2
 800d510:	085a      	lsrs	r2, r3, #1
 800d512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d514:	69db      	ldr	r3, [r3, #28]
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d51c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d520:	6a1a      	ldr	r2, [r3, #32]
 800d522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d524:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d528:	0a5b      	lsrs	r3, r3, #9
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d201      	bcs.n	800d532 <find_volume+0x3be>
 800d52e:	230d      	movs	r3, #13
 800d530:	e06a      	b.n	800d608 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d534:	f04f 32ff 	mov.w	r2, #4294967295
 800d538:	619a      	str	r2, [r3, #24]
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	699a      	ldr	r2, [r3, #24]
 800d53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d540:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	2280      	movs	r2, #128	; 0x80
 800d546:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d548:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d54c:	2b03      	cmp	r3, #3
 800d54e:	d149      	bne.n	800d5e4 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	3338      	adds	r3, #56	; 0x38
 800d554:	3330      	adds	r3, #48	; 0x30
 800d556:	4618      	mov	r0, r3
 800d558:	f7fe f9f4 	bl	800b944 <ld_word>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d140      	bne.n	800d5e4 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d564:	3301      	adds	r3, #1
 800d566:	4619      	mov	r1, r3
 800d568:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d56a:	f7fe fc2d 	bl	800bdc8 <move_window>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d137      	bne.n	800d5e4 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800d574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d576:	2200      	movs	r2, #0
 800d578:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d57c:	3338      	adds	r3, #56	; 0x38
 800d57e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe f9de 	bl	800b944 <ld_word>
 800d588:	4603      	mov	r3, r0
 800d58a:	461a      	mov	r2, r3
 800d58c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d590:	429a      	cmp	r2, r3
 800d592:	d127      	bne.n	800d5e4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	3338      	adds	r3, #56	; 0x38
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fe f9eb 	bl	800b974 <ld_dword>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	4a1b      	ldr	r2, [pc, #108]	; (800d610 <find_volume+0x49c>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d11e      	bne.n	800d5e4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a8:	3338      	adds	r3, #56	; 0x38
 800d5aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe f9e0 	bl	800b974 <ld_dword>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	4a17      	ldr	r2, [pc, #92]	; (800d614 <find_volume+0x4a0>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d113      	bne.n	800d5e4 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	3338      	adds	r3, #56	; 0x38
 800d5c0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fe f9d5 	bl	800b974 <ld_dword>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	3338      	adds	r3, #56	; 0x38
 800d5d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fe f9cb 	bl	800b974 <ld_dword>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d5ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <find_volume+0x4a4>)
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	4b08      	ldr	r3, [pc, #32]	; (800d618 <find_volume+0x4a4>)
 800d5f6:	801a      	strh	r2, [r3, #0]
 800d5f8:	4b07      	ldr	r3, [pc, #28]	; (800d618 <find_volume+0x4a4>)
 800d5fa:	881a      	ldrh	r2, [r3, #0]
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d600:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d602:	f7fe fb79 	bl	800bcf8 <clear_lock>
#endif
	return FR_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3758      	adds	r7, #88	; 0x58
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	41615252 	.word	0x41615252
 800d614:	61417272 	.word	0x61417272
 800d618:	2000076c 	.word	0x2000076c

0800d61c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d626:	2309      	movs	r3, #9
 800d628:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d02e      	beq.n	800d68e <validate+0x72>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d02a      	beq.n	800d68e <validate+0x72>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d025      	beq.n	800d68e <validate+0x72>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	889a      	ldrh	r2, [r3, #4]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	88db      	ldrh	r3, [r3, #6]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d11e      	bne.n	800d68e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4618      	mov	r0, r3
 800d656:	f7fe fa54 	bl	800bb02 <lock_fs>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d014      	beq.n	800d68a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	785b      	ldrb	r3, [r3, #1]
 800d666:	4618      	mov	r0, r3
 800d668:	f7fe f8ec 	bl	800b844 <disk_status>
 800d66c:	4603      	mov	r3, r0
 800d66e:	f003 0301 	and.w	r3, r3, #1
 800d672:	2b00      	cmp	r3, #0
 800d674:	d102      	bne.n	800d67c <validate+0x60>
				res = FR_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	73fb      	strb	r3, [r7, #15]
 800d67a:	e008      	b.n	800d68e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2100      	movs	r1, #0
 800d682:	4618      	mov	r0, r3
 800d684:	f7fe fa53 	bl	800bb2e <unlock_fs>
 800d688:	e001      	b.n	800d68e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d68a:	230f      	movs	r3, #15
 800d68c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d68e:	7bfb      	ldrb	r3, [r7, #15]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d102      	bne.n	800d69a <validate+0x7e>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	e000      	b.n	800d69c <validate+0x80>
 800d69a:	2300      	movs	r3, #0
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	6013      	str	r3, [r2, #0]
	return res;
 800d6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d6be:	f107 0310 	add.w	r3, r7, #16
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7ff fcbb 	bl	800d03e <get_ldnumber>
 800d6c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	da01      	bge.n	800d6d4 <f_mount+0x28>
 800d6d0:	230b      	movs	r3, #11
 800d6d2:	e048      	b.n	800d766 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d6d4:	4a26      	ldr	r2, [pc, #152]	; (800d770 <f_mount+0xc4>)
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00f      	beq.n	800d704 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d6e4:	69b8      	ldr	r0, [r7, #24]
 800d6e6:	f7fe fb07 	bl	800bcf8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 f9cd 	bl	800da8e <ff_del_syncobj>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <f_mount+0x52>
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	e033      	b.n	800d766 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	2200      	movs	r2, #0
 800d702:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00f      	beq.n	800d72a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2200      	movs	r2, #0
 800d70e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	b2da      	uxtb	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	3310      	adds	r3, #16
 800d718:	4619      	mov	r1, r3
 800d71a:	4610      	mov	r0, r2
 800d71c:	f000 f997 	bl	800da4e <ff_cre_syncobj>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <f_mount+0x7e>
 800d726:	2302      	movs	r3, #2
 800d728:	e01d      	b.n	800d766 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	4910      	ldr	r1, [pc, #64]	; (800d770 <f_mount+0xc4>)
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <f_mount+0x94>
 800d73a:	79fb      	ldrb	r3, [r7, #7]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d001      	beq.n	800d744 <f_mount+0x98>
 800d740:	2300      	movs	r3, #0
 800d742:	e010      	b.n	800d766 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d744:	f107 010c 	add.w	r1, r7, #12
 800d748:	f107 0308 	add.w	r3, r7, #8
 800d74c:	2200      	movs	r2, #0
 800d74e:	4618      	mov	r0, r3
 800d750:	f7ff fd10 	bl	800d174 <find_volume>
 800d754:	4603      	mov	r3, r0
 800d756:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	7dfa      	ldrb	r2, [r7, #23]
 800d75c:	4611      	mov	r1, r2
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fe f9e5 	bl	800bb2e <unlock_fs>
 800d764:	7dfb      	ldrb	r3, [r7, #23]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3720      	adds	r7, #32
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	20000764 	.word	0x20000764

0800d774 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b086      	sub	sp, #24
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <f_opendir+0x14>
 800d784:	2309      	movs	r3, #9
 800d786:	e07f      	b.n	800d888 <f_opendir+0x114>

	/* Get logical drive */
	obj = &dp->obj;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d78c:	f107 0108 	add.w	r1, r7, #8
 800d790:	463b      	mov	r3, r7
 800d792:	2200      	movs	r2, #0
 800d794:	4618      	mov	r0, r3
 800d796:	f7ff fced 	bl	800d174 <find_volume>
 800d79a:	4603      	mov	r3, r0
 800d79c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d164      	bne.n	800d86e <f_opendir+0xfa>
		obj->fs = fs;
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d7aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d7ae:	f000 f99a 	bl	800dae6 <ff_memalloc>
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d106      	bne.n	800d7c8 <f_opendir+0x54>
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2111      	movs	r1, #17
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fe f9b5 	bl	800bb2e <unlock_fs>
 800d7c4:	2311      	movs	r3, #17
 800d7c6:	e05f      	b.n	800d888 <f_opendir+0x114>
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fbc2 	bl	800cf5c <follow_path>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d7dc:	7dfb      	ldrb	r3, [r7, #23]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d13d      	bne.n	800d85e <f_opendir+0xea>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d7e8:	b25b      	sxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	db12      	blt.n	800d814 <f_opendir+0xa0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	799b      	ldrb	r3, [r3, #6]
 800d7f2:	f003 0310 	and.w	r3, r3, #16
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <f_opendir+0x9c>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a1b      	ldr	r3, [r3, #32]
 800d800:	4619      	mov	r1, r3
 800d802:	4610      	mov	r0, r2
 800d804:	f7fe fe98 	bl	800c538 <ld_clust>
 800d808:	4602      	mov	r2, r0
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	609a      	str	r2, [r3, #8]
 800d80e:	e001      	b.n	800d814 <f_opendir+0xa0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d810:	2305      	movs	r3, #5
 800d812:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d814:	7dfb      	ldrb	r3, [r7, #23]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d121      	bne.n	800d85e <f_opendir+0xea>
				obj->id = fs->id;
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	88da      	ldrh	r2, [r3, #6]
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d822:	2100      	movs	r1, #0
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7fe fd47 	bl	800c2b8 <dir_sdi>
 800d82a:	4603      	mov	r3, r0
 800d82c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d82e:	7dfb      	ldrb	r3, [r7, #23]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d114      	bne.n	800d85e <f_opendir+0xea>
					if (obj->sclust) {
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00d      	beq.n	800d858 <f_opendir+0xe4>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d83c:	2100      	movs	r1, #0
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7fe f990 	bl	800bb64 <inc_lock>
 800d844:	4602      	mov	r2, r0
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d105      	bne.n	800d85e <f_opendir+0xea>
 800d852:	2312      	movs	r3, #18
 800d854:	75fb      	strb	r3, [r7, #23]
 800d856:	e002      	b.n	800d85e <f_opendir+0xea>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	2200      	movs	r2, #0
 800d85c:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f000 f94d 	bl	800dafe <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d864:	7dfb      	ldrb	r3, [r7, #23]
 800d866:	2b04      	cmp	r3, #4
 800d868:	d101      	bne.n	800d86e <f_opendir+0xfa>
 800d86a:	2305      	movs	r3, #5
 800d86c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d86e:	7dfb      	ldrb	r3, [r7, #23]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d002      	beq.n	800d87a <f_opendir+0x106>
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	2200      	movs	r2, #0
 800d878:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	7dfa      	ldrb	r2, [r7, #23]
 800d87e:	4611      	mov	r1, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe f954 	bl	800bb2e <unlock_fs>
 800d886:	7dfb      	ldrb	r3, [r7, #23]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3718      	adds	r7, #24
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f107 0208 	add.w	r2, r7, #8
 800d89e:	4611      	mov	r1, r2
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7ff febb 	bl	800d61c <validate>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d115      	bne.n	800d8dc <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d006      	beq.n	800d8c6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fe f9df 	bl	800bc80 <dec_lock>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d102      	bne.n	800d8d2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fe f929 	bl	800bb2e <unlock_fs>
#endif
	}
	return res;
 800d8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b086      	sub	sp, #24
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f107 020c 	add.w	r2, r7, #12
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7ff fe8f 	bl	800d61c <validate>
 800d8fe:	4603      	mov	r3, r0
 800d900:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d902:	7dfb      	ldrb	r3, [r7, #23]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d13b      	bne.n	800d980 <f_readdir+0x9a>
		if (!fno) {
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d106      	bne.n	800d91c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d90e:	2100      	movs	r1, #0
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7fe fcd1 	bl	800c2b8 <dir_sdi>
 800d916:	4603      	mov	r3, r0
 800d918:	75fb      	strb	r3, [r7, #23]
 800d91a:	e031      	b.n	800d980 <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 800d91c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d920:	f000 f8e1 	bl	800dae6 <ff_memalloc>
 800d924:	6138      	str	r0, [r7, #16]
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d106      	bne.n	800d93a <f_readdir+0x54>
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2111      	movs	r1, #17
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe f8fc 	bl	800bb2e <unlock_fs>
 800d936:	2311      	movs	r3, #17
 800d938:	e029      	b.n	800d98e <f_readdir+0xa8>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	693a      	ldr	r2, [r7, #16]
 800d93e:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800d940:	2100      	movs	r1, #0
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7fe ff0d 	bl	800c762 <dir_read>
 800d948:	4603      	mov	r3, r0
 800d94a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d94c:	7dfb      	ldrb	r3, [r7, #23]
 800d94e:	2b04      	cmp	r3, #4
 800d950:	d101      	bne.n	800d956 <f_readdir+0x70>
 800d952:	2300      	movs	r3, #0
 800d954:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 800d956:	7dfb      	ldrb	r3, [r7, #23]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d10e      	bne.n	800d97a <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7ff f866 	bl	800ca30 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d964:	2100      	movs	r1, #0
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7fe fd21 	bl	800c3ae <dir_next>
 800d96c:	4603      	mov	r3, r0
 800d96e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d970:	7dfb      	ldrb	r3, [r7, #23]
 800d972:	2b04      	cmp	r3, #4
 800d974:	d101      	bne.n	800d97a <f_readdir+0x94>
 800d976:	2300      	movs	r3, #0
 800d978:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 800d97a:	6938      	ldr	r0, [r7, #16]
 800d97c:	f000 f8bf 	bl	800dafe <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	7dfa      	ldrb	r2, [r7, #23]
 800d984:	4611      	mov	r1, r2
 800d986:	4618      	mov	r0, r3
 800d988:	f7fe f8d1 	bl	800bb2e <unlock_fs>
 800d98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
	...

0800d998 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d998:	b480      	push	{r7}
 800d99a:	b087      	sub	sp, #28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d9ae:	4b1f      	ldr	r3, [pc, #124]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9b0:	7b9b      	ldrb	r3, [r3, #14]
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d831      	bhi.n	800da1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d9b8:	4b1c      	ldr	r3, [pc, #112]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9ba:	7b9b      	ldrb	r3, [r3, #14]
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	461a      	mov	r2, r3
 800d9c0:	4b1a      	ldr	r3, [pc, #104]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9c2:	2100      	movs	r1, #0
 800d9c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d9c6:	4b19      	ldr	r3, [pc, #100]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9c8:	7b9b      	ldrb	r3, [r3, #14]
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	4a17      	ldr	r2, [pc, #92]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	4413      	add	r3, r2
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d9d6:	4b15      	ldr	r3, [pc, #84]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9d8:	7b9b      	ldrb	r3, [r3, #14]
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	461a      	mov	r2, r3
 800d9de:	4b13      	ldr	r3, [pc, #76]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9e0:	4413      	add	r3, r2
 800d9e2:	79fa      	ldrb	r2, [r7, #7]
 800d9e4:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800d9e6:	4b11      	ldr	r3, [pc, #68]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9e8:	7b9b      	ldrb	r3, [r3, #14]
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	1c5a      	adds	r2, r3, #1
 800d9ee:	b2d1      	uxtb	r1, r2
 800d9f0:	4a0e      	ldr	r2, [pc, #56]	; (800da2c <FATFS_LinkDriverEx+0x94>)
 800d9f2:	7391      	strb	r1, [r2, #14]
 800d9f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d9f6:	7dbb      	ldrb	r3, [r7, #22]
 800d9f8:	3330      	adds	r3, #48	; 0x30
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	3301      	adds	r3, #1
 800da04:	223a      	movs	r2, #58	; 0x3a
 800da06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	3302      	adds	r3, #2
 800da0c:	222f      	movs	r2, #47	; 0x2f
 800da0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	3303      	adds	r3, #3
 800da14:	2200      	movs	r2, #0
 800da16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	371c      	adds	r7, #28
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	20000790 	.word	0x20000790

0800da30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800da3a:	2200      	movs	r2, #0
 800da3c:	6839      	ldr	r1, [r7, #0]
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7ff ffaa 	bl	800d998 <FATFS_LinkDriverEx>
 800da44:	4603      	mov	r3, r0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b086      	sub	sp, #24
 800da52:	af00      	add	r7, sp, #0
 800da54:	4603      	mov	r3, r0
 800da56:	6039      	str	r1, [r7, #0]
 800da58:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800da5a:	2300      	movs	r3, #0
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	2300      	movs	r3, #0
 800da60:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800da62:	f107 030c 	add.w	r3, r7, #12
 800da66:	2101      	movs	r1, #1
 800da68:	4618      	mov	r0, r3
 800da6a:	f000 f9c6 	bl	800ddfa <osSemaphoreCreate>
 800da6e:	4602      	mov	r2, r0
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	bf14      	ite	ne
 800da7c:	2301      	movne	r3, #1
 800da7e:	2300      	moveq	r3, #0
 800da80:	b2db      	uxtb	r3, r3
 800da82:	617b      	str	r3, [r7, #20]

    return ret;
 800da84:	697b      	ldr	r3, [r7, #20]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b082      	sub	sp, #8
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fa72 	bl	800df80 <osSemaphoreDelete>
#endif
    return 1;
 800da9c:	2301      	movs	r3, #1
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800daae:	2300      	movs	r3, #0
 800dab0:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800dab2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f9de 	bl	800de78 <osSemaphoreWait>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800dac2:	2301      	movs	r3, #1
 800dac4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800dac6:	68fb      	ldr	r3, [r7, #12]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3710      	adds	r7, #16
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 fa1b 	bl	800df14 <osSemaphoreRelease>
#endif
}
 800dade:	bf00      	nop
 800dae0:	3708      	adds	r7, #8
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b082      	sub	sp, #8
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f002 ff21 	bl	8010936 <pvPortMalloc>
 800daf4:	4603      	mov	r3, r0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b082      	sub	sp, #8
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f002 ff23 	bl	8010952 <vPortFree>
}
 800db0c:	bf00      	nop
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	4603      	mov	r3, r0
 800db1c:	6039      	str	r1, [r7, #0]
 800db1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800db20:	88fb      	ldrh	r3, [r7, #6]
 800db22:	2b7f      	cmp	r3, #127	; 0x7f
 800db24:	d802      	bhi.n	800db2c <ff_convert+0x18>
		c = chr;
 800db26:	88fb      	ldrh	r3, [r7, #6]
 800db28:	81fb      	strh	r3, [r7, #14]
 800db2a:	e025      	b.n	800db78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d00b      	beq.n	800db4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800db32:	88fb      	ldrh	r3, [r7, #6]
 800db34:	2bff      	cmp	r3, #255	; 0xff
 800db36:	d805      	bhi.n	800db44 <ff_convert+0x30>
 800db38:	88fb      	ldrh	r3, [r7, #6]
 800db3a:	3b80      	subs	r3, #128	; 0x80
 800db3c:	4a12      	ldr	r2, [pc, #72]	; (800db88 <ff_convert+0x74>)
 800db3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db42:	e000      	b.n	800db46 <ff_convert+0x32>
 800db44:	2300      	movs	r3, #0
 800db46:	81fb      	strh	r3, [r7, #14]
 800db48:	e016      	b.n	800db78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800db4a:	2300      	movs	r3, #0
 800db4c:	81fb      	strh	r3, [r7, #14]
 800db4e:	e009      	b.n	800db64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800db50:	89fb      	ldrh	r3, [r7, #14]
 800db52:	4a0d      	ldr	r2, [pc, #52]	; (800db88 <ff_convert+0x74>)
 800db54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db58:	88fa      	ldrh	r2, [r7, #6]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d006      	beq.n	800db6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800db5e:	89fb      	ldrh	r3, [r7, #14]
 800db60:	3301      	adds	r3, #1
 800db62:	81fb      	strh	r3, [r7, #14]
 800db64:	89fb      	ldrh	r3, [r7, #14]
 800db66:	2b7f      	cmp	r3, #127	; 0x7f
 800db68:	d9f2      	bls.n	800db50 <ff_convert+0x3c>
 800db6a:	e000      	b.n	800db6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800db6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800db6e:	89fb      	ldrh	r3, [r7, #14]
 800db70:	3380      	adds	r3, #128	; 0x80
 800db72:	b29b      	uxth	r3, r3
 800db74:	b2db      	uxtb	r3, r3
 800db76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800db78:	89fb      	ldrh	r3, [r7, #14]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3714      	adds	r7, #20
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr
 800db86:	bf00      	nop
 800db88:	080136c4 	.word	0x080136c4

0800db8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
 800db92:	4603      	mov	r3, r0
 800db94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800db96:	88fb      	ldrh	r3, [r7, #6]
 800db98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db9c:	d201      	bcs.n	800dba2 <ff_wtoupper+0x16>
 800db9e:	4b3e      	ldr	r3, [pc, #248]	; (800dc98 <ff_wtoupper+0x10c>)
 800dba0:	e000      	b.n	800dba4 <ff_wtoupper+0x18>
 800dba2:	4b3e      	ldr	r3, [pc, #248]	; (800dc9c <ff_wtoupper+0x110>)
 800dba4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	1c9a      	adds	r2, r3, #2
 800dbaa:	617a      	str	r2, [r7, #20]
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800dbb0:	8a7b      	ldrh	r3, [r7, #18]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d068      	beq.n	800dc88 <ff_wtoupper+0xfc>
 800dbb6:	88fa      	ldrh	r2, [r7, #6]
 800dbb8:	8a7b      	ldrh	r3, [r7, #18]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d364      	bcc.n	800dc88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	1c9a      	adds	r2, r3, #2
 800dbc2:	617a      	str	r2, [r7, #20]
 800dbc4:	881b      	ldrh	r3, [r3, #0]
 800dbc6:	823b      	strh	r3, [r7, #16]
 800dbc8:	8a3b      	ldrh	r3, [r7, #16]
 800dbca:	0a1b      	lsrs	r3, r3, #8
 800dbcc:	81fb      	strh	r3, [r7, #14]
 800dbce:	8a3b      	ldrh	r3, [r7, #16]
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dbd4:	88fa      	ldrh	r2, [r7, #6]
 800dbd6:	8a79      	ldrh	r1, [r7, #18]
 800dbd8:	8a3b      	ldrh	r3, [r7, #16]
 800dbda:	440b      	add	r3, r1
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	da49      	bge.n	800dc74 <ff_wtoupper+0xe8>
			switch (cmd) {
 800dbe0:	89fb      	ldrh	r3, [r7, #14]
 800dbe2:	2b08      	cmp	r3, #8
 800dbe4:	d84f      	bhi.n	800dc86 <ff_wtoupper+0xfa>
 800dbe6:	a201      	add	r2, pc, #4	; (adr r2, 800dbec <ff_wtoupper+0x60>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dc11 	.word	0x0800dc11
 800dbf0:	0800dc23 	.word	0x0800dc23
 800dbf4:	0800dc39 	.word	0x0800dc39
 800dbf8:	0800dc41 	.word	0x0800dc41
 800dbfc:	0800dc49 	.word	0x0800dc49
 800dc00:	0800dc51 	.word	0x0800dc51
 800dc04:	0800dc59 	.word	0x0800dc59
 800dc08:	0800dc61 	.word	0x0800dc61
 800dc0c:	0800dc69 	.word	0x0800dc69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dc10:	88fa      	ldrh	r2, [r7, #6]
 800dc12:	8a7b      	ldrh	r3, [r7, #18]
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	005b      	lsls	r3, r3, #1
 800dc18:	697a      	ldr	r2, [r7, #20]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	80fb      	strh	r3, [r7, #6]
 800dc20:	e027      	b.n	800dc72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dc22:	88fa      	ldrh	r2, [r7, #6]
 800dc24:	8a7b      	ldrh	r3, [r7, #18]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	f003 0301 	and.w	r3, r3, #1
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	88fa      	ldrh	r2, [r7, #6]
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	80fb      	strh	r3, [r7, #6]
 800dc36:	e01c      	b.n	800dc72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dc38:	88fb      	ldrh	r3, [r7, #6]
 800dc3a:	3b10      	subs	r3, #16
 800dc3c:	80fb      	strh	r3, [r7, #6]
 800dc3e:	e018      	b.n	800dc72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dc40:	88fb      	ldrh	r3, [r7, #6]
 800dc42:	3b20      	subs	r3, #32
 800dc44:	80fb      	strh	r3, [r7, #6]
 800dc46:	e014      	b.n	800dc72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dc48:	88fb      	ldrh	r3, [r7, #6]
 800dc4a:	3b30      	subs	r3, #48	; 0x30
 800dc4c:	80fb      	strh	r3, [r7, #6]
 800dc4e:	e010      	b.n	800dc72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dc50:	88fb      	ldrh	r3, [r7, #6]
 800dc52:	3b1a      	subs	r3, #26
 800dc54:	80fb      	strh	r3, [r7, #6]
 800dc56:	e00c      	b.n	800dc72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dc58:	88fb      	ldrh	r3, [r7, #6]
 800dc5a:	3308      	adds	r3, #8
 800dc5c:	80fb      	strh	r3, [r7, #6]
 800dc5e:	e008      	b.n	800dc72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dc60:	88fb      	ldrh	r3, [r7, #6]
 800dc62:	3b50      	subs	r3, #80	; 0x50
 800dc64:	80fb      	strh	r3, [r7, #6]
 800dc66:	e004      	b.n	800dc72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dc68:	88fb      	ldrh	r3, [r7, #6]
 800dc6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dc6e:	80fb      	strh	r3, [r7, #6]
 800dc70:	bf00      	nop
			}
			break;
 800dc72:	e008      	b.n	800dc86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dc74:	89fb      	ldrh	r3, [r7, #14]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d195      	bne.n	800dba6 <ff_wtoupper+0x1a>
 800dc7a:	8a3b      	ldrh	r3, [r7, #16]
 800dc7c:	005b      	lsls	r3, r3, #1
 800dc7e:	697a      	ldr	r2, [r7, #20]
 800dc80:	4413      	add	r3, r2
 800dc82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dc84:	e78f      	b.n	800dba6 <ff_wtoupper+0x1a>
			break;
 800dc86:	bf00      	nop
	}

	return chr;
 800dc88:	88fb      	ldrh	r3, [r7, #6]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	371c      	adds	r7, #28
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	080137c4 	.word	0x080137c4
 800dc9c:	080139b8 	.word	0x080139b8

0800dca0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	4603      	mov	r3, r0
 800dca8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dcae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dcb2:	2b84      	cmp	r3, #132	; 0x84
 800dcb4:	d005      	beq.n	800dcc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dcb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	3303      	adds	r3, #3
 800dcc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3714      	adds	r7, #20
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcd6:	f3ef 8305 	mrs	r3, IPSR
 800dcda:	607b      	str	r3, [r7, #4]
  return(result);
 800dcdc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	bf14      	ite	ne
 800dce2:	2301      	movne	r3, #1
 800dce4:	2300      	moveq	r3, #0
 800dce6:	b2db      	uxtb	r3, r3
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dcf8:	f001 fcb6 	bl	800f668 <vTaskStartScheduler>
  
  return osOK;
 800dcfc:	2300      	movs	r3, #0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800dd06:	f002 f909 	bl	800ff1c <xTaskGetSchedulerState>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d101      	bne.n	800dd14 <osKernelRunning+0x12>
    return 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	e000      	b.n	800dd16 <osKernelRunning+0x14>
  else
    return 1;
 800dd14:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800dd1a:	b580      	push	{r7, lr}
 800dd1c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800dd1e:	f7ff ffd7 	bl	800dcd0 <inHandlerMode>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d003      	beq.n	800dd30 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800dd28:	f001 fdbe 	bl	800f8a8 <xTaskGetTickCountFromISR>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	e002      	b.n	800dd36 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800dd30:	f001 fdaa 	bl	800f888 <xTaskGetTickCount>
 800dd34:	4603      	mov	r3, r0
  }
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dd3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd3c:	b089      	sub	sp, #36	; 0x24
 800dd3e:	af04      	add	r7, sp, #16
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d020      	beq.n	800dd8e <osThreadCreate+0x54>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d01c      	beq.n	800dd8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685c      	ldr	r4, [r3, #4]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681d      	ldr	r5, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	691e      	ldr	r6, [r3, #16]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7ff ff9a 	bl	800dca0 <makeFreeRtosPriority>
 800dd6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	695b      	ldr	r3, [r3, #20]
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd76:	9202      	str	r2, [sp, #8]
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	9100      	str	r1, [sp, #0]
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	4632      	mov	r2, r6
 800dd80:	4629      	mov	r1, r5
 800dd82:	4620      	mov	r0, r4
 800dd84:	f001 fa94 	bl	800f2b0 <xTaskCreateStatic>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	e01c      	b.n	800ddc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	685c      	ldr	r4, [r3, #4]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd9a:	b29e      	uxth	r6, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7ff ff7c 	bl	800dca0 <makeFreeRtosPriority>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	f107 030c 	add.w	r3, r7, #12
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	9200      	str	r2, [sp, #0]
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	4632      	mov	r2, r6
 800ddb6:	4629      	mov	r1, r5
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f001 fadc 	bl	800f376 <xTaskCreate>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d001      	beq.n	800ddc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	e000      	b.n	800ddca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3714      	adds	r7, #20
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b084      	sub	sp, #16
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <osDelay+0x16>
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	e000      	b.n	800ddea <osDelay+0x18>
 800dde8:	2301      	movs	r3, #1
 800ddea:	4618      	mov	r0, r3
 800ddec:	f001 fc06 	bl	800f5fc <vTaskDelay>
  
  return osOK;
 800ddf0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b086      	sub	sp, #24
 800ddfe:	af02      	add	r7, sp, #8
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	685b      	ldr	r3, [r3, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d016      	beq.n	800de3a <osSemaphoreCreate+0x40>
    if (count == 1) {
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d10a      	bne.n	800de28 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	2203      	movs	r2, #3
 800de18:	9200      	str	r2, [sp, #0]
 800de1a:	2200      	movs	r2, #0
 800de1c:	2100      	movs	r1, #0
 800de1e:	2001      	movs	r0, #1
 800de20:	f000 fabc 	bl	800e39c <xQueueGenericCreateStatic>
 800de24:	4603      	mov	r3, r0
 800de26:	e023      	b.n	800de70 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800de28:	6838      	ldr	r0, [r7, #0]
 800de2a:	6839      	ldr	r1, [r7, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	461a      	mov	r2, r3
 800de32:	f000 fb96 	bl	800e562 <xQueueCreateCountingSemaphoreStatic>
 800de36:	4603      	mov	r3, r0
 800de38:	e01a      	b.n	800de70 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d110      	bne.n	800de62 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800de40:	2203      	movs	r2, #3
 800de42:	2100      	movs	r1, #0
 800de44:	2001      	movs	r0, #1
 800de46:	f000 fb2b 	bl	800e4a0 <xQueueGenericCreate>
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d005      	beq.n	800de5e <osSemaphoreCreate+0x64>
 800de52:	2300      	movs	r3, #0
 800de54:	2200      	movs	r2, #0
 800de56:	2100      	movs	r1, #0
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	f000 fbf5 	bl	800e648 <xQueueGenericSend>
      return sema;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	e006      	b.n	800de70 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	4611      	mov	r1, r2
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 fbb5 	bl	800e5d8 <xQueueCreateCountingSemaphore>
 800de6e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800de70:	4618      	mov	r0, r3
 800de72:	3710      	adds	r7, #16
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800de82:	2300      	movs	r3, #0
 800de84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d101      	bne.n	800de90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800de8c:	2380      	movs	r3, #128	; 0x80
 800de8e:	e03a      	b.n	800df06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800de90:	2300      	movs	r3, #0
 800de92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9a:	d103      	bne.n	800dea4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800de9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dea0:	60fb      	str	r3, [r7, #12]
 800dea2:	e009      	b.n	800deb8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d006      	beq.n	800deb8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d101      	bne.n	800deb8 <osSemaphoreWait+0x40>
      ticks = 1;
 800deb4:	2301      	movs	r3, #1
 800deb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800deb8:	f7ff ff0a 	bl	800dcd0 <inHandlerMode>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d017      	beq.n	800def2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dec2:	f107 0308 	add.w	r3, r7, #8
 800dec6:	461a      	mov	r2, r3
 800dec8:	2100      	movs	r1, #0
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fff2 	bl	800eeb4 <xQueueReceiveFromISR>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d001      	beq.n	800deda <osSemaphoreWait+0x62>
      return osErrorOS;
 800ded6:	23ff      	movs	r3, #255	; 0xff
 800ded8:	e015      	b.n	800df06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d011      	beq.n	800df04 <osSemaphoreWait+0x8c>
 800dee0:	4b0b      	ldr	r3, [pc, #44]	; (800df10 <osSemaphoreWait+0x98>)
 800dee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dee6:	601a      	str	r2, [r3, #0]
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	e008      	b.n	800df04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800def2:	68f9      	ldr	r1, [r7, #12]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fec9 	bl	800ec8c <xQueueSemaphoreTake>
 800defa:	4603      	mov	r3, r0
 800defc:	2b01      	cmp	r3, #1
 800defe:	d001      	beq.n	800df04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800df00:	23ff      	movs	r3, #255	; 0xff
 800df02:	e000      	b.n	800df06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	e000ed04 	.word	0xe000ed04

0800df14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800df20:	2300      	movs	r3, #0
 800df22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800df24:	f7ff fed4 	bl	800dcd0 <inHandlerMode>
 800df28:	4603      	mov	r3, r0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d016      	beq.n	800df5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800df2e:	f107 0308 	add.w	r3, r7, #8
 800df32:	4619      	mov	r1, r3
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 fd2d 	bl	800e994 <xQueueGiveFromISR>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d001      	beq.n	800df44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800df40:	23ff      	movs	r3, #255	; 0xff
 800df42:	e017      	b.n	800df74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d013      	beq.n	800df72 <osSemaphoreRelease+0x5e>
 800df4a:	4b0c      	ldr	r3, [pc, #48]	; (800df7c <osSemaphoreRelease+0x68>)
 800df4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df50:	601a      	str	r2, [r3, #0]
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	f3bf 8f6f 	isb	sy
 800df5a:	e00a      	b.n	800df72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800df5c:	2300      	movs	r3, #0
 800df5e:	2200      	movs	r2, #0
 800df60:	2100      	movs	r1, #0
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 fb70 	bl	800e648 <xQueueGenericSend>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d001      	beq.n	800df72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800df6e:	23ff      	movs	r3, #255	; 0xff
 800df70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800df72:	68fb      	ldr	r3, [r7, #12]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	e000ed04 	.word	0xe000ed04

0800df80 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800df88:	f7ff fea2 	bl	800dcd0 <inHandlerMode>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d001      	beq.n	800df96 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800df92:	2382      	movs	r3, #130	; 0x82
 800df94:	e003      	b.n	800df9e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f001 f812 	bl	800efc0 <vQueueDelete>

  return osOK; 
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3708      	adds	r7, #8
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800dfa6:	b590      	push	{r4, r7, lr}
 800dfa8:	b085      	sub	sp, #20
 800dfaa:	af02      	add	r7, sp, #8
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d011      	beq.n	800dfdc <osMessageCreate+0x36>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00d      	beq.n	800dfdc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6818      	ldr	r0, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6859      	ldr	r1, [r3, #4]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	689a      	ldr	r2, [r3, #8]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	2400      	movs	r4, #0
 800dfd2:	9400      	str	r4, [sp, #0]
 800dfd4:	f000 f9e2 	bl	800e39c <xQueueGenericCreateStatic>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	e008      	b.n	800dfee <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6818      	ldr	r0, [r3, #0]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	f000 fa5a 	bl	800e4a0 <xQueueGenericCreate>
 800dfec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	370c      	adds	r7, #12
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd90      	pop	{r4, r7, pc}
	...

0800dff8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e004:	2300      	movs	r3, #0
 800e006:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d101      	bne.n	800e016 <osMessagePut+0x1e>
    ticks = 1;
 800e012:	2301      	movs	r3, #1
 800e014:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e016:	f7ff fe5b 	bl	800dcd0 <inHandlerMode>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d018      	beq.n	800e052 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e020:	f107 0210 	add.w	r2, r7, #16
 800e024:	f107 0108 	add.w	r1, r7, #8
 800e028:	2300      	movs	r3, #0
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 fc12 	bl	800e854 <xQueueGenericSendFromISR>
 800e030:	4603      	mov	r3, r0
 800e032:	2b01      	cmp	r3, #1
 800e034:	d001      	beq.n	800e03a <osMessagePut+0x42>
      return osErrorOS;
 800e036:	23ff      	movs	r3, #255	; 0xff
 800e038:	e018      	b.n	800e06c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d014      	beq.n	800e06a <osMessagePut+0x72>
 800e040:	4b0c      	ldr	r3, [pc, #48]	; (800e074 <osMessagePut+0x7c>)
 800e042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e046:	601a      	str	r2, [r3, #0]
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	e00b      	b.n	800e06a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e052:	f107 0108 	add.w	r1, r7, #8
 800e056:	2300      	movs	r3, #0
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f000 faf4 	bl	800e648 <xQueueGenericSend>
 800e060:	4603      	mov	r3, r0
 800e062:	2b01      	cmp	r3, #1
 800e064:	d001      	beq.n	800e06a <osMessagePut+0x72>
      return osErrorOS;
 800e066:	23ff      	movs	r3, #255	; 0xff
 800e068:	e000      	b.n	800e06c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3718      	adds	r7, #24
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	e000ed04 	.word	0xe000ed04

0800e078 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e078:	b590      	push	{r4, r7, lr}
 800e07a:	b08b      	sub	sp, #44	; 0x2c
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d10a      	bne.n	800e0a8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e092:	2380      	movs	r3, #128	; 0x80
 800e094:	617b      	str	r3, [r7, #20]
    return event;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	461c      	mov	r4, r3
 800e09a:	f107 0314 	add.w	r3, r7, #20
 800e09e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e0a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e0a6:	e054      	b.n	800e152 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0b6:	d103      	bne.n	800e0c0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0bc:	627b      	str	r3, [r7, #36]	; 0x24
 800e0be:	e009      	b.n	800e0d4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d006      	beq.n	800e0d4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d101      	bne.n	800e0d4 <osMessageGet+0x5c>
      ticks = 1;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e0d4:	f7ff fdfc 	bl	800dcd0 <inHandlerMode>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d01c      	beq.n	800e118 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e0de:	f107 0220 	add.w	r2, r7, #32
 800e0e2:	f107 0314 	add.w	r3, r7, #20
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	68b8      	ldr	r0, [r7, #8]
 800e0ec:	f000 fee2 	bl	800eeb4 <xQueueReceiveFromISR>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d102      	bne.n	800e0fc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e0f6:	2310      	movs	r3, #16
 800e0f8:	617b      	str	r3, [r7, #20]
 800e0fa:	e001      	b.n	800e100 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e100:	6a3b      	ldr	r3, [r7, #32]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d01d      	beq.n	800e142 <osMessageGet+0xca>
 800e106:	4b15      	ldr	r3, [pc, #84]	; (800e15c <osMessageGet+0xe4>)
 800e108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	e014      	b.n	800e142 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e118:	f107 0314 	add.w	r3, r7, #20
 800e11c:	3304      	adds	r3, #4
 800e11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e120:	4619      	mov	r1, r3
 800e122:	68b8      	ldr	r0, [r7, #8]
 800e124:	f000 fccc 	bl	800eac0 <xQueueReceive>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d102      	bne.n	800e134 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e12e:	2310      	movs	r3, #16
 800e130:	617b      	str	r3, [r7, #20]
 800e132:	e006      	b.n	800e142 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	2b00      	cmp	r3, #0
 800e138:	d101      	bne.n	800e13e <osMessageGet+0xc6>
 800e13a:	2300      	movs	r3, #0
 800e13c:	e000      	b.n	800e140 <osMessageGet+0xc8>
 800e13e:	2340      	movs	r3, #64	; 0x40
 800e140:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	461c      	mov	r4, r3
 800e146:	f107 0314 	add.w	r3, r7, #20
 800e14a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e14e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	372c      	adds	r7, #44	; 0x2c
 800e156:	46bd      	mov	sp, r7
 800e158:	bd90      	pop	{r4, r7, pc}
 800e15a:	bf00      	nop
 800e15c:	e000ed04 	.word	0xe000ed04

0800e160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f103 0208 	add.w	r2, r3, #8
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f04f 32ff 	mov.w	r2, #4294967295
 800e178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f103 0208 	add.w	r2, r3, #8
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f103 0208 	add.w	r2, r3, #8
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e194:	bf00      	nop
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e1ae:	bf00      	nop
 800e1b0:	370c      	adds	r7, #12
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	b085      	sub	sp, #20
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
 800e1c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	689a      	ldr	r2, [r3, #8]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	683a      	ldr	r2, [r7, #0]
 800e1de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	683a      	ldr	r2, [r7, #0]
 800e1e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	1c5a      	adds	r2, r3, #1
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	601a      	str	r2, [r3, #0]
}
 800e1f6:	bf00      	nop
 800e1f8:	3714      	adds	r7, #20
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr

0800e202 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e202:	b480      	push	{r7}
 800e204:	b085      	sub	sp, #20
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e218:	d103      	bne.n	800e222 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	60fb      	str	r3, [r7, #12]
 800e220:	e00c      	b.n	800e23c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	3308      	adds	r3, #8
 800e226:	60fb      	str	r3, [r7, #12]
 800e228:	e002      	b.n	800e230 <vListInsert+0x2e>
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	68ba      	ldr	r2, [r7, #8]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d2f6      	bcs.n	800e22a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	685a      	ldr	r2, [r3, #4]
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	1c5a      	adds	r2, r3, #1
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	601a      	str	r2, [r3, #0]
}
 800e268:	bf00      	nop
 800e26a:	3714      	adds	r7, #20
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	691b      	ldr	r3, [r3, #16]
 800e280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	6892      	ldr	r2, [r2, #8]
 800e28a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	689b      	ldr	r3, [r3, #8]
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	6852      	ldr	r2, [r2, #4]
 800e294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d103      	bne.n	800e2a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	689a      	ldr	r2, [r3, #8]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	1e5a      	subs	r2, r3, #1
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d10c      	bne.n	800e2f6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e0:	b672      	cpsid	i
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	b662      	cpsie	i
 800e2f0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e2f2:	bf00      	nop
 800e2f4:	e7fe      	b.n	800e2f4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e2f6:	f002 f961 	bl	80105bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e302:	68f9      	ldr	r1, [r7, #12]
 800e304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e306:	fb01 f303 	mul.w	r3, r1, r3
 800e30a:	441a      	add	r2, r3
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2200      	movs	r2, #0
 800e314:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e326:	3b01      	subs	r3, #1
 800e328:	68f9      	ldr	r1, [r7, #12]
 800e32a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e32c:	fb01 f303 	mul.w	r3, r1, r3
 800e330:	441a      	add	r2, r3
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	22ff      	movs	r2, #255	; 0xff
 800e33a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	22ff      	movs	r2, #255	; 0xff
 800e342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d114      	bne.n	800e376 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	691b      	ldr	r3, [r3, #16]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d01a      	beq.n	800e38a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	3310      	adds	r3, #16
 800e358:	4618      	mov	r0, r3
 800e35a:	f001 fc19 	bl	800fb90 <xTaskRemoveFromEventList>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d012      	beq.n	800e38a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e364:	4b0c      	ldr	r3, [pc, #48]	; (800e398 <xQueueGenericReset+0xd0>)
 800e366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	e009      	b.n	800e38a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	3310      	adds	r3, #16
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff fef0 	bl	800e160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3324      	adds	r3, #36	; 0x24
 800e384:	4618      	mov	r0, r3
 800e386:	f7ff feeb 	bl	800e160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e38a:	f002 f94b 	bl	8010624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e38e:	2301      	movs	r3, #1
}
 800e390:	4618      	mov	r0, r3
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	e000ed04 	.word	0xe000ed04

0800e39c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08e      	sub	sp, #56	; 0x38
 800e3a0:	af02      	add	r7, sp, #8
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
 800e3a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d10c      	bne.n	800e3ca <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	b672      	cpsid	i
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	b662      	cpsie	i
 800e3c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3c6:	bf00      	nop
 800e3c8:	e7fe      	b.n	800e3c8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10c      	bne.n	800e3ea <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	b672      	cpsid	i
 800e3d6:	f383 8811 	msr	BASEPRI, r3
 800e3da:	f3bf 8f6f 	isb	sy
 800e3de:	f3bf 8f4f 	dsb	sy
 800e3e2:	b662      	cpsie	i
 800e3e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <xQueueGenericCreateStatic+0x5a>
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <xQueueGenericCreateStatic+0x5e>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e000      	b.n	800e3fc <xQueueGenericCreateStatic+0x60>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10c      	bne.n	800e41a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e404:	b672      	cpsid	i
 800e406:	f383 8811 	msr	BASEPRI, r3
 800e40a:	f3bf 8f6f 	isb	sy
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	b662      	cpsie	i
 800e414:	623b      	str	r3, [r7, #32]
}
 800e416:	bf00      	nop
 800e418:	e7fe      	b.n	800e418 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d102      	bne.n	800e426 <xQueueGenericCreateStatic+0x8a>
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d101      	bne.n	800e42a <xQueueGenericCreateStatic+0x8e>
 800e426:	2301      	movs	r3, #1
 800e428:	e000      	b.n	800e42c <xQueueGenericCreateStatic+0x90>
 800e42a:	2300      	movs	r3, #0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10c      	bne.n	800e44a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	b672      	cpsid	i
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	b662      	cpsie	i
 800e444:	61fb      	str	r3, [r7, #28]
}
 800e446:	bf00      	nop
 800e448:	e7fe      	b.n	800e448 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e44a:	2348      	movs	r3, #72	; 0x48
 800e44c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	2b48      	cmp	r3, #72	; 0x48
 800e452:	d00c      	beq.n	800e46e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e458:	b672      	cpsid	i
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	b662      	cpsie	i
 800e468:	61bb      	str	r3, [r7, #24]
}
 800e46a:	bf00      	nop
 800e46c:	e7fe      	b.n	800e46c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e46e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00d      	beq.n	800e496 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	2201      	movs	r2, #1
 800e47e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e482:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	4613      	mov	r3, r2
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	68b9      	ldr	r1, [r7, #8]
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	f000 f847 	bl	800e524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e498:	4618      	mov	r0, r3
 800e49a:	3730      	adds	r7, #48	; 0x30
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08a      	sub	sp, #40	; 0x28
 800e4a4:	af02      	add	r7, sp, #8
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10c      	bne.n	800e4ce <xQueueGenericCreate+0x2e>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	b672      	cpsid	i
 800e4ba:	f383 8811 	msr	BASEPRI, r3
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	b662      	cpsie	i
 800e4c8:	613b      	str	r3, [r7, #16]
}
 800e4ca:	bf00      	nop
 800e4cc:	e7fe      	b.n	800e4cc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d102      	bne.n	800e4da <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	61fb      	str	r3, [r7, #28]
 800e4d8:	e004      	b.n	800e4e4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	fb02 f303 	mul.w	r3, r2, r3
 800e4e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	3348      	adds	r3, #72	; 0x48
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f002 fa24 	bl	8010936 <pvPortMalloc>
 800e4ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d011      	beq.n	800e51a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	3348      	adds	r3, #72	; 0x48
 800e4fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	2200      	movs	r2, #0
 800e504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e508:	79fa      	ldrb	r2, [r7, #7]
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	4613      	mov	r3, r2
 800e510:	697a      	ldr	r2, [r7, #20]
 800e512:	68b9      	ldr	r1, [r7, #8]
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f000 f805 	bl	800e524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e51a:	69bb      	ldr	r3, [r7, #24]
	}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3720      	adds	r7, #32
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
 800e530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d103      	bne.n	800e540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	69ba      	ldr	r2, [r7, #24]
 800e53c:	601a      	str	r2, [r3, #0]
 800e53e:	e002      	b.n	800e546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	68ba      	ldr	r2, [r7, #8]
 800e550:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e552:	2101      	movs	r1, #1
 800e554:	69b8      	ldr	r0, [r7, #24]
 800e556:	f7ff feb7 	bl	800e2c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e55a:	bf00      	nop
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}

0800e562 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e562:	b580      	push	{r7, lr}
 800e564:	b08a      	sub	sp, #40	; 0x28
 800e566:	af02      	add	r7, sp, #8
 800e568:	60f8      	str	r0, [r7, #12]
 800e56a:	60b9      	str	r1, [r7, #8]
 800e56c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10c      	bne.n	800e58e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e578:	b672      	cpsid	i
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	b662      	cpsie	i
 800e588:	61bb      	str	r3, [r7, #24]
}
 800e58a:	bf00      	nop
 800e58c:	e7fe      	b.n	800e58c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	429a      	cmp	r2, r3
 800e594:	d90c      	bls.n	800e5b0 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800e596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59a:	b672      	cpsid	i
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	b662      	cpsie	i
 800e5aa:	617b      	str	r3, [r7, #20]
}
 800e5ac:	bf00      	nop
 800e5ae:	e7fe      	b.n	800e5ae <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	2100      	movs	r1, #0
 800e5ba:	68f8      	ldr	r0, [r7, #12]
 800e5bc:	f7ff feee 	bl	800e39c <xQueueGenericCreateStatic>
 800e5c0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d002      	beq.n	800e5ce <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	68ba      	ldr	r2, [r7, #8]
 800e5cc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e5ce:	69fb      	ldr	r3, [r7, #28]
	}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3720      	adds	r7, #32
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10c      	bne.n	800e602 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800e5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ec:	b672      	cpsid	i
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	b662      	cpsie	i
 800e5fc:	613b      	str	r3, [r7, #16]
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e602:	683a      	ldr	r2, [r7, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	429a      	cmp	r2, r3
 800e608:	d90c      	bls.n	800e624 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60e:	b672      	cpsid	i
 800e610:	f383 8811 	msr	BASEPRI, r3
 800e614:	f3bf 8f6f 	isb	sy
 800e618:	f3bf 8f4f 	dsb	sy
 800e61c:	b662      	cpsie	i
 800e61e:	60fb      	str	r3, [r7, #12]
}
 800e620:	bf00      	nop
 800e622:	e7fe      	b.n	800e622 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e624:	2202      	movs	r2, #2
 800e626:	2100      	movs	r1, #0
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7ff ff39 	bl	800e4a0 <xQueueGenericCreate>
 800e62e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	683a      	ldr	r2, [r7, #0]
 800e63a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e63c:	697b      	ldr	r3, [r7, #20]
	}
 800e63e:	4618      	mov	r0, r3
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
	...

0800e648 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b08e      	sub	sp, #56	; 0x38
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e656:	2300      	movs	r3, #0
 800e658:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e660:	2b00      	cmp	r3, #0
 800e662:	d10c      	bne.n	800e67e <xQueueGenericSend+0x36>
	__asm volatile
 800e664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e668:	b672      	cpsid	i
 800e66a:	f383 8811 	msr	BASEPRI, r3
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f3bf 8f4f 	dsb	sy
 800e676:	b662      	cpsie	i
 800e678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e67a:	bf00      	nop
 800e67c:	e7fe      	b.n	800e67c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d103      	bne.n	800e68c <xQueueGenericSend+0x44>
 800e684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <xQueueGenericSend+0x48>
 800e68c:	2301      	movs	r3, #1
 800e68e:	e000      	b.n	800e692 <xQueueGenericSend+0x4a>
 800e690:	2300      	movs	r3, #0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10c      	bne.n	800e6b0 <xQueueGenericSend+0x68>
	__asm volatile
 800e696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69a:	b672      	cpsid	i
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	b662      	cpsie	i
 800e6aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e6ac:	bf00      	nop
 800e6ae:	e7fe      	b.n	800e6ae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d103      	bne.n	800e6be <xQueueGenericSend+0x76>
 800e6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d101      	bne.n	800e6c2 <xQueueGenericSend+0x7a>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e000      	b.n	800e6c4 <xQueueGenericSend+0x7c>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d10c      	bne.n	800e6e2 <xQueueGenericSend+0x9a>
	__asm volatile
 800e6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6cc:	b672      	cpsid	i
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	b662      	cpsie	i
 800e6dc:	623b      	str	r3, [r7, #32]
}
 800e6de:	bf00      	nop
 800e6e0:	e7fe      	b.n	800e6e0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6e2:	f001 fc1b 	bl	800ff1c <xTaskGetSchedulerState>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d102      	bne.n	800e6f2 <xQueueGenericSend+0xaa>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d101      	bne.n	800e6f6 <xQueueGenericSend+0xae>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e000      	b.n	800e6f8 <xQueueGenericSend+0xb0>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10c      	bne.n	800e716 <xQueueGenericSend+0xce>
	__asm volatile
 800e6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e700:	b672      	cpsid	i
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	b662      	cpsie	i
 800e710:	61fb      	str	r3, [r7, #28]
}
 800e712:	bf00      	nop
 800e714:	e7fe      	b.n	800e714 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e716:	f001 ff51 	bl	80105bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e722:	429a      	cmp	r2, r3
 800e724:	d302      	bcc.n	800e72c <xQueueGenericSend+0xe4>
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2b02      	cmp	r3, #2
 800e72a:	d129      	bne.n	800e780 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e72c:	683a      	ldr	r2, [r7, #0]
 800e72e:	68b9      	ldr	r1, [r7, #8]
 800e730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e732:	f000 fc82 	bl	800f03a <prvCopyDataToQueue>
 800e736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d010      	beq.n	800e762 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e742:	3324      	adds	r3, #36	; 0x24
 800e744:	4618      	mov	r0, r3
 800e746:	f001 fa23 	bl	800fb90 <xTaskRemoveFromEventList>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d013      	beq.n	800e778 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e750:	4b3f      	ldr	r3, [pc, #252]	; (800e850 <xQueueGenericSend+0x208>)
 800e752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e756:	601a      	str	r2, [r3, #0]
 800e758:	f3bf 8f4f 	dsb	sy
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	e00a      	b.n	800e778 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	2b00      	cmp	r3, #0
 800e766:	d007      	beq.n	800e778 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e768:	4b39      	ldr	r3, [pc, #228]	; (800e850 <xQueueGenericSend+0x208>)
 800e76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e778:	f001 ff54 	bl	8010624 <vPortExitCritical>
				return pdPASS;
 800e77c:	2301      	movs	r3, #1
 800e77e:	e063      	b.n	800e848 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d103      	bne.n	800e78e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e786:	f001 ff4d 	bl	8010624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e78a:	2300      	movs	r3, #0
 800e78c:	e05c      	b.n	800e848 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e790:	2b00      	cmp	r3, #0
 800e792:	d106      	bne.n	800e7a2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e794:	f107 0314 	add.w	r3, r7, #20
 800e798:	4618      	mov	r0, r3
 800e79a:	f001 fa5d 	bl	800fc58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7a2:	f001 ff3f 	bl	8010624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7a6:	f000 ffc3 	bl	800f730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7aa:	f001 ff07 	bl	80105bc <vPortEnterCritical>
 800e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7b4:	b25b      	sxtb	r3, r3
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ba:	d103      	bne.n	800e7c4 <xQueueGenericSend+0x17c>
 800e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7ca:	b25b      	sxtb	r3, r3
 800e7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d0:	d103      	bne.n	800e7da <xQueueGenericSend+0x192>
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7da:	f001 ff23 	bl	8010624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7de:	1d3a      	adds	r2, r7, #4
 800e7e0:	f107 0314 	add.w	r3, r7, #20
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f001 fa4c 	bl	800fc84 <xTaskCheckForTimeOut>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d124      	bne.n	800e83c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7f4:	f000 fd19 	bl	800f22a <prvIsQueueFull>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d018      	beq.n	800e830 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	3310      	adds	r3, #16
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	4611      	mov	r1, r2
 800e806:	4618      	mov	r0, r3
 800e808:	f001 f99c 	bl	800fb44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e80e:	f000 fca4 	bl	800f15a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e812:	f000 ff9b 	bl	800f74c <xTaskResumeAll>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f47f af7c 	bne.w	800e716 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e81e:	4b0c      	ldr	r3, [pc, #48]	; (800e850 <xQueueGenericSend+0x208>)
 800e820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	f3bf 8f4f 	dsb	sy
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	e772      	b.n	800e716 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e832:	f000 fc92 	bl	800f15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e836:	f000 ff89 	bl	800f74c <xTaskResumeAll>
 800e83a:	e76c      	b.n	800e716 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e83e:	f000 fc8c 	bl	800f15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e842:	f000 ff83 	bl	800f74c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3738      	adds	r7, #56	; 0x38
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	e000ed04 	.word	0xe000ed04

0800e854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b08e      	sub	sp, #56	; 0x38
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
 800e860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10c      	bne.n	800e886 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	b672      	cpsid	i
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	b662      	cpsie	i
 800e880:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e882:	bf00      	nop
 800e884:	e7fe      	b.n	800e884 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d103      	bne.n	800e894 <xQueueGenericSendFromISR+0x40>
 800e88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <xQueueGenericSendFromISR+0x44>
 800e894:	2301      	movs	r3, #1
 800e896:	e000      	b.n	800e89a <xQueueGenericSendFromISR+0x46>
 800e898:	2300      	movs	r3, #0
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10c      	bne.n	800e8b8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a2:	b672      	cpsid	i
 800e8a4:	f383 8811 	msr	BASEPRI, r3
 800e8a8:	f3bf 8f6f 	isb	sy
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	b662      	cpsie	i
 800e8b2:	623b      	str	r3, [r7, #32]
}
 800e8b4:	bf00      	nop
 800e8b6:	e7fe      	b.n	800e8b6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	d103      	bne.n	800e8c6 <xQueueGenericSendFromISR+0x72>
 800e8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d101      	bne.n	800e8ca <xQueueGenericSendFromISR+0x76>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	e000      	b.n	800e8cc <xQueueGenericSendFromISR+0x78>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d10c      	bne.n	800e8ea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d4:	b672      	cpsid	i
 800e8d6:	f383 8811 	msr	BASEPRI, r3
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	b662      	cpsie	i
 800e8e4:	61fb      	str	r3, [r7, #28]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8ea:	f001 ff4f 	bl	801078c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e8ee:	f3ef 8211 	mrs	r2, BASEPRI
 800e8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f6:	b672      	cpsid	i
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	b662      	cpsie	i
 800e906:	61ba      	str	r2, [r7, #24]
 800e908:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e90a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e90c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e916:	429a      	cmp	r2, r3
 800e918:	d302      	bcc.n	800e920 <xQueueGenericSendFromISR+0xcc>
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	d12c      	bne.n	800e97a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	68b9      	ldr	r1, [r7, #8]
 800e92e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e930:	f000 fb83 	bl	800f03a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e934:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e93c:	d112      	bne.n	800e964 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e942:	2b00      	cmp	r3, #0
 800e944:	d016      	beq.n	800e974 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	3324      	adds	r3, #36	; 0x24
 800e94a:	4618      	mov	r0, r3
 800e94c:	f001 f920 	bl	800fb90 <xTaskRemoveFromEventList>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00e      	beq.n	800e974 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d00b      	beq.n	800e974 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2201      	movs	r2, #1
 800e960:	601a      	str	r2, [r3, #0]
 800e962:	e007      	b.n	800e974 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e964:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e968:	3301      	adds	r3, #1
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	b25a      	sxtb	r2, r3
 800e96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e974:	2301      	movs	r3, #1
 800e976:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e978:	e001      	b.n	800e97e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e97a:	2300      	movs	r3, #0
 800e97c:	637b      	str	r3, [r7, #52]	; 0x34
 800e97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e980:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e988:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3738      	adds	r7, #56	; 0x38
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b08e      	sub	sp, #56	; 0x38
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d10c      	bne.n	800e9c2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800e9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ac:	b672      	cpsid	i
 800e9ae:	f383 8811 	msr	BASEPRI, r3
 800e9b2:	f3bf 8f6f 	isb	sy
 800e9b6:	f3bf 8f4f 	dsb	sy
 800e9ba:	b662      	cpsie	i
 800e9bc:	623b      	str	r3, [r7, #32]
}
 800e9be:	bf00      	nop
 800e9c0:	e7fe      	b.n	800e9c0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00c      	beq.n	800e9e4 <xQueueGiveFromISR+0x50>
	__asm volatile
 800e9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ce:	b672      	cpsid	i
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	b662      	cpsie	i
 800e9de:	61fb      	str	r3, [r7, #28]
}
 800e9e0:	bf00      	nop
 800e9e2:	e7fe      	b.n	800e9e2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d103      	bne.n	800e9f4 <xQueueGiveFromISR+0x60>
 800e9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d101      	bne.n	800e9f8 <xQueueGiveFromISR+0x64>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e000      	b.n	800e9fa <xQueueGiveFromISR+0x66>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d10c      	bne.n	800ea18 <xQueueGiveFromISR+0x84>
	__asm volatile
 800e9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea02:	b672      	cpsid	i
 800ea04:	f383 8811 	msr	BASEPRI, r3
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	b662      	cpsie	i
 800ea12:	61bb      	str	r3, [r7, #24]
}
 800ea14:	bf00      	nop
 800ea16:	e7fe      	b.n	800ea16 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea18:	f001 feb8 	bl	801078c <vPortValidateInterruptPriority>
	__asm volatile
 800ea1c:	f3ef 8211 	mrs	r2, BASEPRI
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	b672      	cpsid	i
 800ea26:	f383 8811 	msr	BASEPRI, r3
 800ea2a:	f3bf 8f6f 	isb	sy
 800ea2e:	f3bf 8f4f 	dsb	sy
 800ea32:	b662      	cpsie	i
 800ea34:	617a      	str	r2, [r7, #20]
 800ea36:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ea38:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea40:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d22b      	bcs.n	800eaa4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea58:	1c5a      	adds	r2, r3, #1
 800ea5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea66:	d112      	bne.n	800ea8e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d016      	beq.n	800ea9e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	3324      	adds	r3, #36	; 0x24
 800ea74:	4618      	mov	r0, r3
 800ea76:	f001 f88b 	bl	800fb90 <xTaskRemoveFromEventList>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00e      	beq.n	800ea9e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d00b      	beq.n	800ea9e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	2201      	movs	r2, #1
 800ea8a:	601a      	str	r2, [r3, #0]
 800ea8c:	e007      	b.n	800ea9e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea92:	3301      	adds	r3, #1
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	b25a      	sxtb	r2, r3
 800ea98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	637b      	str	r3, [r7, #52]	; 0x34
 800eaa2:	e001      	b.n	800eaa8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	637b      	str	r3, [r7, #52]	; 0x34
 800eaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaaa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f383 8811 	msr	BASEPRI, r3
}
 800eab2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3738      	adds	r7, #56	; 0x38
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
	...

0800eac0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08c      	sub	sp, #48	; 0x30
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eacc:	2300      	movs	r3, #0
 800eace:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ead4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d10c      	bne.n	800eaf4 <xQueueReceive+0x34>
	__asm volatile
 800eada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eade:	b672      	cpsid	i
 800eae0:	f383 8811 	msr	BASEPRI, r3
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	b662      	cpsie	i
 800eaee:	623b      	str	r3, [r7, #32]
}
 800eaf0:	bf00      	nop
 800eaf2:	e7fe      	b.n	800eaf2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d103      	bne.n	800eb02 <xQueueReceive+0x42>
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <xQueueReceive+0x46>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e000      	b.n	800eb08 <xQueueReceive+0x48>
 800eb06:	2300      	movs	r3, #0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10c      	bne.n	800eb26 <xQueueReceive+0x66>
	__asm volatile
 800eb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb10:	b672      	cpsid	i
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	b662      	cpsie	i
 800eb20:	61fb      	str	r3, [r7, #28]
}
 800eb22:	bf00      	nop
 800eb24:	e7fe      	b.n	800eb24 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb26:	f001 f9f9 	bl	800ff1c <xTaskGetSchedulerState>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <xQueueReceive+0x76>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <xQueueReceive+0x7a>
 800eb36:	2301      	movs	r3, #1
 800eb38:	e000      	b.n	800eb3c <xQueueReceive+0x7c>
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10c      	bne.n	800eb5a <xQueueReceive+0x9a>
	__asm volatile
 800eb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb44:	b672      	cpsid	i
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	b662      	cpsie	i
 800eb54:	61bb      	str	r3, [r7, #24]
}
 800eb56:	bf00      	nop
 800eb58:	e7fe      	b.n	800eb58 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb5a:	f001 fd2f 	bl	80105bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d01f      	beq.n	800ebaa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb6a:	68b9      	ldr	r1, [r7, #8]
 800eb6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb6e:	f000 face 	bl	800f10e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb74:	1e5a      	subs	r2, r3, #1
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7c:	691b      	ldr	r3, [r3, #16]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00f      	beq.n	800eba2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb84:	3310      	adds	r3, #16
 800eb86:	4618      	mov	r0, r3
 800eb88:	f001 f802 	bl	800fb90 <xTaskRemoveFromEventList>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d007      	beq.n	800eba2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb92:	4b3d      	ldr	r3, [pc, #244]	; (800ec88 <xQueueReceive+0x1c8>)
 800eb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eba2:	f001 fd3f 	bl	8010624 <vPortExitCritical>
				return pdPASS;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e069      	b.n	800ec7e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d103      	bne.n	800ebb8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ebb0:	f001 fd38 	bl	8010624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	e062      	b.n	800ec7e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d106      	bne.n	800ebcc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebbe:	f107 0310 	add.w	r3, r7, #16
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f001 f848 	bl	800fc58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebcc:	f001 fd2a 	bl	8010624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebd0:	f000 fdae 	bl	800f730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebd4:	f001 fcf2 	bl	80105bc <vPortEnterCritical>
 800ebd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebde:	b25b      	sxtb	r3, r3
 800ebe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe4:	d103      	bne.n	800ebee <xQueueReceive+0x12e>
 800ebe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebf4:	b25b      	sxtb	r3, r3
 800ebf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfa:	d103      	bne.n	800ec04 <xQueueReceive+0x144>
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec04:	f001 fd0e 	bl	8010624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec08:	1d3a      	adds	r2, r7, #4
 800ec0a:	f107 0310 	add.w	r3, r7, #16
 800ec0e:	4611      	mov	r1, r2
 800ec10:	4618      	mov	r0, r3
 800ec12:	f001 f837 	bl	800fc84 <xTaskCheckForTimeOut>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d123      	bne.n	800ec64 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec1e:	f000 faee 	bl	800f1fe <prvIsQueueEmpty>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d017      	beq.n	800ec58 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	3324      	adds	r3, #36	; 0x24
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	4611      	mov	r1, r2
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 ff87 	bl	800fb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec38:	f000 fa8f 	bl	800f15a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec3c:	f000 fd86 	bl	800f74c <xTaskResumeAll>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d189      	bne.n	800eb5a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ec46:	4b10      	ldr	r3, [pc, #64]	; (800ec88 <xQueueReceive+0x1c8>)
 800ec48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	f3bf 8f6f 	isb	sy
 800ec56:	e780      	b.n	800eb5a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ec58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec5a:	f000 fa7e 	bl	800f15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec5e:	f000 fd75 	bl	800f74c <xTaskResumeAll>
 800ec62:	e77a      	b.n	800eb5a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ec64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec66:	f000 fa78 	bl	800f15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec6a:	f000 fd6f 	bl	800f74c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec70:	f000 fac5 	bl	800f1fe <prvIsQueueEmpty>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f43f af6f 	beq.w	800eb5a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3730      	adds	r7, #48	; 0x30
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	e000ed04 	.word	0xe000ed04

0800ec8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b08e      	sub	sp, #56	; 0x38
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec96:	2300      	movs	r3, #0
 800ec98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d10c      	bne.n	800ecc2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800eca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecac:	b672      	cpsid	i
 800ecae:	f383 8811 	msr	BASEPRI, r3
 800ecb2:	f3bf 8f6f 	isb	sy
 800ecb6:	f3bf 8f4f 	dsb	sy
 800ecba:	b662      	cpsie	i
 800ecbc:	623b      	str	r3, [r7, #32]
}
 800ecbe:	bf00      	nop
 800ecc0:	e7fe      	b.n	800ecc0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ecc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00c      	beq.n	800ece4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ecca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecce:	b672      	cpsid	i
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	b662      	cpsie	i
 800ecde:	61fb      	str	r3, [r7, #28]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ece4:	f001 f91a 	bl	800ff1c <xTaskGetSchedulerState>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d102      	bne.n	800ecf4 <xQueueSemaphoreTake+0x68>
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <xQueueSemaphoreTake+0x6c>
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e000      	b.n	800ecfa <xQueueSemaphoreTake+0x6e>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d10c      	bne.n	800ed18 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ecfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed02:	b672      	cpsid	i
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	b662      	cpsie	i
 800ed12:	61bb      	str	r3, [r7, #24]
}
 800ed14:	bf00      	nop
 800ed16:	e7fe      	b.n	800ed16 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ed18:	f001 fc50 	bl	80105bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ed1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed20:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ed22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d024      	beq.n	800ed72 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2a:	1e5a      	subs	r2, r3, #1
 800ed2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d104      	bne.n	800ed42 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ed38:	f001 fab6 	bl	80102a8 <pvTaskIncrementMutexHeldCount>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed40:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00f      	beq.n	800ed6a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4c:	3310      	adds	r3, #16
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f000 ff1e 	bl	800fb90 <xTaskRemoveFromEventList>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d007      	beq.n	800ed6a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ed5a:	4b55      	ldr	r3, [pc, #340]	; (800eeb0 <xQueueSemaphoreTake+0x224>)
 800ed5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed60:	601a      	str	r2, [r3, #0]
 800ed62:	f3bf 8f4f 	dsb	sy
 800ed66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ed6a:	f001 fc5b 	bl	8010624 <vPortExitCritical>
				return pdPASS;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e099      	b.n	800eea6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d113      	bne.n	800eda0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ed78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ed7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed82:	b672      	cpsid	i
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	b662      	cpsie	i
 800ed92:	617b      	str	r3, [r7, #20]
}
 800ed94:	bf00      	nop
 800ed96:	e7fe      	b.n	800ed96 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ed98:	f001 fc44 	bl	8010624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	e082      	b.n	800eea6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d106      	bne.n	800edb4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eda6:	f107 030c 	add.w	r3, r7, #12
 800edaa:	4618      	mov	r0, r3
 800edac:	f000 ff54 	bl	800fc58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800edb0:	2301      	movs	r3, #1
 800edb2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800edb4:	f001 fc36 	bl	8010624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800edb8:	f000 fcba 	bl	800f730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800edbc:	f001 fbfe 	bl	80105bc <vPortEnterCritical>
 800edc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edc6:	b25b      	sxtb	r3, r3
 800edc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edcc:	d103      	bne.n	800edd6 <xQueueSemaphoreTake+0x14a>
 800edce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eddc:	b25b      	sxtb	r3, r3
 800edde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede2:	d103      	bne.n	800edec <xQueueSemaphoreTake+0x160>
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edec:	f001 fc1a 	bl	8010624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800edf0:	463a      	mov	r2, r7
 800edf2:	f107 030c 	add.w	r3, r7, #12
 800edf6:	4611      	mov	r1, r2
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 ff43 	bl	800fc84 <xTaskCheckForTimeOut>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d132      	bne.n	800ee6a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee06:	f000 f9fa 	bl	800f1fe <prvIsQueueEmpty>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d026      	beq.n	800ee5e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d109      	bne.n	800ee2c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ee18:	f001 fbd0 	bl	80105bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	4618      	mov	r0, r3
 800ee22:	f001 f899 	bl	800ff58 <xTaskPriorityInherit>
 800ee26:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ee28:	f001 fbfc 	bl	8010624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ee2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2e:	3324      	adds	r3, #36	; 0x24
 800ee30:	683a      	ldr	r2, [r7, #0]
 800ee32:	4611      	mov	r1, r2
 800ee34:	4618      	mov	r0, r3
 800ee36:	f000 fe85 	bl	800fb44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee3c:	f000 f98d 	bl	800f15a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee40:	f000 fc84 	bl	800f74c <xTaskResumeAll>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f47f af66 	bne.w	800ed18 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ee4c:	4b18      	ldr	r3, [pc, #96]	; (800eeb0 <xQueueSemaphoreTake+0x224>)
 800ee4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee52:	601a      	str	r2, [r3, #0]
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	f3bf 8f6f 	isb	sy
 800ee5c:	e75c      	b.n	800ed18 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ee5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee60:	f000 f97b 	bl	800f15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee64:	f000 fc72 	bl	800f74c <xTaskResumeAll>
 800ee68:	e756      	b.n	800ed18 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ee6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee6c:	f000 f975 	bl	800f15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee70:	f000 fc6c 	bl	800f74c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee76:	f000 f9c2 	bl	800f1fe <prvIsQueueEmpty>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f43f af4b 	beq.w	800ed18 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ee82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d00d      	beq.n	800eea4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ee88:	f001 fb98 	bl	80105bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ee8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee8e:	f000 f8bc 	bl	800f00a <prvGetDisinheritPriorityAfterTimeout>
 800ee92:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ee94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee96:	689b      	ldr	r3, [r3, #8]
 800ee98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f001 f966 	bl	801016c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eea0:	f001 fbc0 	bl	8010624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3738      	adds	r7, #56	; 0x38
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	e000ed04 	.word	0xe000ed04

0800eeb4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b08e      	sub	sp, #56	; 0x38
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10c      	bne.n	800eee4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800eeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eece:	b672      	cpsid	i
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	b662      	cpsie	i
 800eede:	623b      	str	r3, [r7, #32]
}
 800eee0:	bf00      	nop
 800eee2:	e7fe      	b.n	800eee2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d103      	bne.n	800eef2 <xQueueReceiveFromISR+0x3e>
 800eeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d101      	bne.n	800eef6 <xQueueReceiveFromISR+0x42>
 800eef2:	2301      	movs	r3, #1
 800eef4:	e000      	b.n	800eef8 <xQueueReceiveFromISR+0x44>
 800eef6:	2300      	movs	r3, #0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10c      	bne.n	800ef16 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800eefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef00:	b672      	cpsid	i
 800ef02:	f383 8811 	msr	BASEPRI, r3
 800ef06:	f3bf 8f6f 	isb	sy
 800ef0a:	f3bf 8f4f 	dsb	sy
 800ef0e:	b662      	cpsie	i
 800ef10:	61fb      	str	r3, [r7, #28]
}
 800ef12:	bf00      	nop
 800ef14:	e7fe      	b.n	800ef14 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef16:	f001 fc39 	bl	801078c <vPortValidateInterruptPriority>
	__asm volatile
 800ef1a:	f3ef 8211 	mrs	r2, BASEPRI
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	b672      	cpsid	i
 800ef24:	f383 8811 	msr	BASEPRI, r3
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	f3bf 8f4f 	dsb	sy
 800ef30:	b662      	cpsie	i
 800ef32:	61ba      	str	r2, [r7, #24]
 800ef34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ef36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d02f      	beq.n	800efa6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef50:	68b9      	ldr	r1, [r7, #8]
 800ef52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef54:	f000 f8db 	bl	800f10e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5a:	1e5a      	subs	r2, r3, #1
 800ef5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ef60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef68:	d112      	bne.n	800ef90 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6c:	691b      	ldr	r3, [r3, #16]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d016      	beq.n	800efa0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	3310      	adds	r3, #16
 800ef76:	4618      	mov	r0, r3
 800ef78:	f000 fe0a 	bl	800fb90 <xTaskRemoveFromEventList>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00e      	beq.n	800efa0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d00b      	beq.n	800efa0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	e007      	b.n	800efa0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ef90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef94:	3301      	adds	r3, #1
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	b25a      	sxtb	r2, r3
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800efa0:	2301      	movs	r3, #1
 800efa2:	637b      	str	r3, [r7, #52]	; 0x34
 800efa4:	e001      	b.n	800efaa <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800efa6:	2300      	movs	r3, #0
 800efa8:	637b      	str	r3, [r7, #52]	; 0x34
 800efaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	f383 8811 	msr	BASEPRI, r3
}
 800efb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800efb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3738      	adds	r7, #56	; 0x38
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10c      	bne.n	800efec <vQueueDelete+0x2c>
	__asm volatile
 800efd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd6:	b672      	cpsid	i
 800efd8:	f383 8811 	msr	BASEPRI, r3
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	b662      	cpsie	i
 800efe6:	60bb      	str	r3, [r7, #8]
}
 800efe8:	bf00      	nop
 800efea:	e7fe      	b.n	800efea <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f000 f935 	bl	800f25c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d102      	bne.n	800f002 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f001 fca8 	bl	8010952 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f002:	bf00      	nop
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f00a:	b480      	push	{r7}
 800f00c:	b085      	sub	sp, #20
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f016:	2b00      	cmp	r3, #0
 800f018:	d006      	beq.n	800f028 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f1c3 0307 	rsb	r3, r3, #7
 800f024:	60fb      	str	r3, [r7, #12]
 800f026:	e001      	b.n	800f02c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f028:	2300      	movs	r3, #0
 800f02a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f02c:	68fb      	ldr	r3, [r7, #12]
	}
 800f02e:	4618      	mov	r0, r3
 800f030:	3714      	adds	r7, #20
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr

0800f03a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b086      	sub	sp, #24
 800f03e:	af00      	add	r7, sp, #0
 800f040:	60f8      	str	r0, [r7, #12]
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f046:	2300      	movs	r3, #0
 800f048:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f04e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10d      	bne.n	800f074 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d14d      	bne.n	800f0fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	4618      	mov	r0, r3
 800f066:	f000 fff7 	bl	8010058 <xTaskPriorityDisinherit>
 800f06a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	609a      	str	r2, [r3, #8]
 800f072:	e043      	b.n	800f0fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d119      	bne.n	800f0ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	6858      	ldr	r0, [r3, #4]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f082:	461a      	mov	r2, r3
 800f084:	68b9      	ldr	r1, [r7, #8]
 800f086:	f001 fca3 	bl	80109d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	685a      	ldr	r2, [r3, #4]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f092:	441a      	add	r2, r3
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	685a      	ldr	r2, [r3, #4]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d32b      	bcc.n	800f0fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	605a      	str	r2, [r3, #4]
 800f0ac:	e026      	b.n	800f0fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	68d8      	ldr	r0, [r3, #12]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	68b9      	ldr	r1, [r7, #8]
 800f0ba:	f001 fc89 	bl	80109d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	68da      	ldr	r2, [r3, #12]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0c6:	425b      	negs	r3, r3
 800f0c8:	441a      	add	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	68da      	ldr	r2, [r3, #12]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d207      	bcs.n	800f0ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	689a      	ldr	r2, [r3, #8]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0e2:	425b      	negs	r3, r3
 800f0e4:	441a      	add	r2, r3
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b02      	cmp	r3, #2
 800f0ee:	d105      	bne.n	800f0fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d002      	beq.n	800f0fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	1c5a      	adds	r2, r3, #1
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f104:	697b      	ldr	r3, [r7, #20]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3718      	adds	r7, #24
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b082      	sub	sp, #8
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d018      	beq.n	800f152 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	68da      	ldr	r2, [r3, #12]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f128:	441a      	add	r2, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	68da      	ldr	r2, [r3, #12]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	429a      	cmp	r2, r3
 800f138:	d303      	bcc.n	800f142 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68d9      	ldr	r1, [r3, #12]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f14a:	461a      	mov	r2, r3
 800f14c:	6838      	ldr	r0, [r7, #0]
 800f14e:	f001 fc3f 	bl	80109d0 <memcpy>
	}
}
 800f152:	bf00      	nop
 800f154:	3708      	adds	r7, #8
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}

0800f15a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f15a:	b580      	push	{r7, lr}
 800f15c:	b084      	sub	sp, #16
 800f15e:	af00      	add	r7, sp, #0
 800f160:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f162:	f001 fa2b 	bl	80105bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f16c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f16e:	e011      	b.n	800f194 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f174:	2b00      	cmp	r3, #0
 800f176:	d012      	beq.n	800f19e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	3324      	adds	r3, #36	; 0x24
 800f17c:	4618      	mov	r0, r3
 800f17e:	f000 fd07 	bl	800fb90 <xTaskRemoveFromEventList>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d001      	beq.n	800f18c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f188:	f000 fde2 	bl	800fd50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
 800f18e:	3b01      	subs	r3, #1
 800f190:	b2db      	uxtb	r3, r3
 800f192:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	dce9      	bgt.n	800f170 <prvUnlockQueue+0x16>
 800f19c:	e000      	b.n	800f1a0 <prvUnlockQueue+0x46>
					break;
 800f19e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	22ff      	movs	r2, #255	; 0xff
 800f1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f1a8:	f001 fa3c 	bl	8010624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f1ac:	f001 fa06 	bl	80105bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1b8:	e011      	b.n	800f1de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	691b      	ldr	r3, [r3, #16]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d012      	beq.n	800f1e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3310      	adds	r3, #16
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f000 fce2 	bl	800fb90 <xTaskRemoveFromEventList>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f1d2:	f000 fdbd 	bl	800fd50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f1d6:	7bbb      	ldrb	r3, [r7, #14]
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	dce9      	bgt.n	800f1ba <prvUnlockQueue+0x60>
 800f1e6:	e000      	b.n	800f1ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f1e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	22ff      	movs	r2, #255	; 0xff
 800f1ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f1f2:	f001 fa17 	bl	8010624 <vPortExitCritical>
}
 800f1f6:	bf00      	nop
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b084      	sub	sp, #16
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f206:	f001 f9d9 	bl	80105bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d102      	bne.n	800f218 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f212:	2301      	movs	r3, #1
 800f214:	60fb      	str	r3, [r7, #12]
 800f216:	e001      	b.n	800f21c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f218:	2300      	movs	r3, #0
 800f21a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f21c:	f001 fa02 	bl	8010624 <vPortExitCritical>

	return xReturn;
 800f220:	68fb      	ldr	r3, [r7, #12]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b084      	sub	sp, #16
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f232:	f001 f9c3 	bl	80105bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f23e:	429a      	cmp	r2, r3
 800f240:	d102      	bne.n	800f248 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f242:	2301      	movs	r3, #1
 800f244:	60fb      	str	r3, [r7, #12]
 800f246:	e001      	b.n	800f24c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f248:	2300      	movs	r3, #0
 800f24a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f24c:	f001 f9ea 	bl	8010624 <vPortExitCritical>

	return xReturn;
 800f250:	68fb      	ldr	r3, [r7, #12]
}
 800f252:	4618      	mov	r0, r3
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
	...

0800f25c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f25c:	b480      	push	{r7}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f264:	2300      	movs	r3, #0
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	e016      	b.n	800f298 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f26a:	4a10      	ldr	r2, [pc, #64]	; (800f2ac <vQueueUnregisterQueue+0x50>)
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	00db      	lsls	r3, r3, #3
 800f270:	4413      	add	r3, r2
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	429a      	cmp	r2, r3
 800f278:	d10b      	bne.n	800f292 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f27a:	4a0c      	ldr	r2, [pc, #48]	; (800f2ac <vQueueUnregisterQueue+0x50>)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2100      	movs	r1, #0
 800f280:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f284:	4a09      	ldr	r2, [pc, #36]	; (800f2ac <vQueueUnregisterQueue+0x50>)
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	00db      	lsls	r3, r3, #3
 800f28a:	4413      	add	r3, r2
 800f28c:	2200      	movs	r2, #0
 800f28e:	605a      	str	r2, [r3, #4]
				break;
 800f290:	e006      	b.n	800f2a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	3301      	adds	r3, #1
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2b07      	cmp	r3, #7
 800f29c:	d9e5      	bls.n	800f26a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f29e:	bf00      	nop
 800f2a0:	bf00      	nop
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	20004cd0 	.word	0x20004cd0

0800f2b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b08e      	sub	sp, #56	; 0x38
 800f2b4:	af04      	add	r7, sp, #16
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	60b9      	str	r1, [r7, #8]
 800f2ba:	607a      	str	r2, [r7, #4]
 800f2bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d10c      	bne.n	800f2de <xTaskCreateStatic+0x2e>
	__asm volatile
 800f2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c8:	b672      	cpsid	i
 800f2ca:	f383 8811 	msr	BASEPRI, r3
 800f2ce:	f3bf 8f6f 	isb	sy
 800f2d2:	f3bf 8f4f 	dsb	sy
 800f2d6:	b662      	cpsie	i
 800f2d8:	623b      	str	r3, [r7, #32]
}
 800f2da:	bf00      	nop
 800f2dc:	e7fe      	b.n	800f2dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10c      	bne.n	800f2fe <xTaskCreateStatic+0x4e>
	__asm volatile
 800f2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e8:	b672      	cpsid	i
 800f2ea:	f383 8811 	msr	BASEPRI, r3
 800f2ee:	f3bf 8f6f 	isb	sy
 800f2f2:	f3bf 8f4f 	dsb	sy
 800f2f6:	b662      	cpsie	i
 800f2f8:	61fb      	str	r3, [r7, #28]
}
 800f2fa:	bf00      	nop
 800f2fc:	e7fe      	b.n	800f2fc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f2fe:	2358      	movs	r3, #88	; 0x58
 800f300:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	2b58      	cmp	r3, #88	; 0x58
 800f306:	d00c      	beq.n	800f322 <xTaskCreateStatic+0x72>
	__asm volatile
 800f308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30c:	b672      	cpsid	i
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	b662      	cpsie	i
 800f31c:	61bb      	str	r3, [r7, #24]
}
 800f31e:	bf00      	nop
 800f320:	e7fe      	b.n	800f320 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f322:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f326:	2b00      	cmp	r3, #0
 800f328:	d01e      	beq.n	800f368 <xTaskCreateStatic+0xb8>
 800f32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d01b      	beq.n	800f368 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f338:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	2202      	movs	r2, #2
 800f33e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f342:	2300      	movs	r3, #0
 800f344:	9303      	str	r3, [sp, #12]
 800f346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f348:	9302      	str	r3, [sp, #8]
 800f34a:	f107 0314 	add.w	r3, r7, #20
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	68b9      	ldr	r1, [r7, #8]
 800f35a:	68f8      	ldr	r0, [r7, #12]
 800f35c:	f000 f850 	bl	800f400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f362:	f000 f8e1 	bl	800f528 <prvAddNewTaskToReadyList>
 800f366:	e001      	b.n	800f36c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f368:	2300      	movs	r3, #0
 800f36a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f36c:	697b      	ldr	r3, [r7, #20]
	}
 800f36e:	4618      	mov	r0, r3
 800f370:	3728      	adds	r7, #40	; 0x28
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f376:	b580      	push	{r7, lr}
 800f378:	b08c      	sub	sp, #48	; 0x30
 800f37a:	af04      	add	r7, sp, #16
 800f37c:	60f8      	str	r0, [r7, #12]
 800f37e:	60b9      	str	r1, [r7, #8]
 800f380:	603b      	str	r3, [r7, #0]
 800f382:	4613      	mov	r3, r2
 800f384:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f386:	88fb      	ldrh	r3, [r7, #6]
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	4618      	mov	r0, r3
 800f38c:	f001 fad3 	bl	8010936 <pvPortMalloc>
 800f390:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00e      	beq.n	800f3b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f398:	2058      	movs	r0, #88	; 0x58
 800f39a:	f001 facc 	bl	8010936 <pvPortMalloc>
 800f39e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d003      	beq.n	800f3ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	697a      	ldr	r2, [r7, #20]
 800f3aa:	631a      	str	r2, [r3, #48]	; 0x30
 800f3ac:	e005      	b.n	800f3ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f3ae:	6978      	ldr	r0, [r7, #20]
 800f3b0:	f001 facf 	bl	8010952 <vPortFree>
 800f3b4:	e001      	b.n	800f3ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d017      	beq.n	800f3f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f3c8:	88fa      	ldrh	r2, [r7, #6]
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	9303      	str	r3, [sp, #12]
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	9302      	str	r3, [sp, #8]
 800f3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d4:	9301      	str	r3, [sp, #4]
 800f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	68b9      	ldr	r1, [r7, #8]
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f000 f80e 	bl	800f400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3e4:	69f8      	ldr	r0, [r7, #28]
 800f3e6:	f000 f89f 	bl	800f528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	61bb      	str	r3, [r7, #24]
 800f3ee:	e002      	b.n	800f3f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f3f6:	69bb      	ldr	r3, [r7, #24]
	}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3720      	adds	r7, #32
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b088      	sub	sp, #32
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
 800f40c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f410:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	461a      	mov	r2, r3
 800f418:	21a5      	movs	r1, #165	; 0xa5
 800f41a:	f001 fae7 	bl	80109ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f422:	6879      	ldr	r1, [r7, #4]
 800f424:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f428:	440b      	add	r3, r1
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	4413      	add	r3, r2
 800f42e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	f023 0307 	bic.w	r3, r3, #7
 800f436:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	f003 0307 	and.w	r3, r3, #7
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d00c      	beq.n	800f45c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f446:	b672      	cpsid	i
 800f448:	f383 8811 	msr	BASEPRI, r3
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f3bf 8f4f 	dsb	sy
 800f454:	b662      	cpsie	i
 800f456:	617b      	str	r3, [r7, #20]
}
 800f458:	bf00      	nop
 800f45a:	e7fe      	b.n	800f45a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d01f      	beq.n	800f4a2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f462:	2300      	movs	r3, #0
 800f464:	61fb      	str	r3, [r7, #28]
 800f466:	e012      	b.n	800f48e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	69fb      	ldr	r3, [r7, #28]
 800f46c:	4413      	add	r3, r2
 800f46e:	7819      	ldrb	r1, [r3, #0]
 800f470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	4413      	add	r3, r2
 800f476:	3334      	adds	r3, #52	; 0x34
 800f478:	460a      	mov	r2, r1
 800f47a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	4413      	add	r3, r2
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d006      	beq.n	800f496 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	3301      	adds	r3, #1
 800f48c:	61fb      	str	r3, [r7, #28]
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	2b0f      	cmp	r3, #15
 800f492:	d9e9      	bls.n	800f468 <prvInitialiseNewTask+0x68>
 800f494:	e000      	b.n	800f498 <prvInitialiseNewTask+0x98>
			{
				break;
 800f496:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f4a0:	e003      	b.n	800f4aa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ac:	2b06      	cmp	r3, #6
 800f4ae:	d901      	bls.n	800f4b4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f4b0:	2306      	movs	r3, #6
 800f4b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fe fe68 	bl	800e1a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d2:	3318      	adds	r3, #24
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fe fe63 	bl	800e1a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e2:	f1c3 0207 	rsb	r2, r3, #7
 800f4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fe:	2200      	movs	r2, #0
 800f500:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f504:	683a      	ldr	r2, [r7, #0]
 800f506:	68f9      	ldr	r1, [r7, #12]
 800f508:	69b8      	ldr	r0, [r7, #24]
 800f50a:	f000 ff47 	bl	801039c <pxPortInitialiseStack>
 800f50e:	4602      	mov	r2, r0
 800f510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f512:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f516:	2b00      	cmp	r3, #0
 800f518:	d002      	beq.n	800f520 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f51c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f51e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f520:	bf00      	nop
 800f522:	3720      	adds	r7, #32
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f530:	f001 f844 	bl	80105bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f534:	4b2a      	ldr	r3, [pc, #168]	; (800f5e0 <prvAddNewTaskToReadyList+0xb8>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	3301      	adds	r3, #1
 800f53a:	4a29      	ldr	r2, [pc, #164]	; (800f5e0 <prvAddNewTaskToReadyList+0xb8>)
 800f53c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f53e:	4b29      	ldr	r3, [pc, #164]	; (800f5e4 <prvAddNewTaskToReadyList+0xbc>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d109      	bne.n	800f55a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f546:	4a27      	ldr	r2, [pc, #156]	; (800f5e4 <prvAddNewTaskToReadyList+0xbc>)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f54c:	4b24      	ldr	r3, [pc, #144]	; (800f5e0 <prvAddNewTaskToReadyList+0xb8>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	2b01      	cmp	r3, #1
 800f552:	d110      	bne.n	800f576 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f554:	f000 fc22 	bl	800fd9c <prvInitialiseTaskLists>
 800f558:	e00d      	b.n	800f576 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f55a:	4b23      	ldr	r3, [pc, #140]	; (800f5e8 <prvAddNewTaskToReadyList+0xc0>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f562:	4b20      	ldr	r3, [pc, #128]	; (800f5e4 <prvAddNewTaskToReadyList+0xbc>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d802      	bhi.n	800f576 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f570:	4a1c      	ldr	r2, [pc, #112]	; (800f5e4 <prvAddNewTaskToReadyList+0xbc>)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f576:	4b1d      	ldr	r3, [pc, #116]	; (800f5ec <prvAddNewTaskToReadyList+0xc4>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3301      	adds	r3, #1
 800f57c:	4a1b      	ldr	r2, [pc, #108]	; (800f5ec <prvAddNewTaskToReadyList+0xc4>)
 800f57e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f584:	2201      	movs	r2, #1
 800f586:	409a      	lsls	r2, r3
 800f588:	4b19      	ldr	r3, [pc, #100]	; (800f5f0 <prvAddNewTaskToReadyList+0xc8>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4313      	orrs	r3, r2
 800f58e:	4a18      	ldr	r2, [pc, #96]	; (800f5f0 <prvAddNewTaskToReadyList+0xc8>)
 800f590:	6013      	str	r3, [r2, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f596:	4613      	mov	r3, r2
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	4413      	add	r3, r2
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	4a15      	ldr	r2, [pc, #84]	; (800f5f4 <prvAddNewTaskToReadyList+0xcc>)
 800f5a0:	441a      	add	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	f7fe fe06 	bl	800e1ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f5ae:	f001 f839 	bl	8010624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f5b2:	4b0d      	ldr	r3, [pc, #52]	; (800f5e8 <prvAddNewTaskToReadyList+0xc0>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d00e      	beq.n	800f5d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f5ba:	4b0a      	ldr	r3, [pc, #40]	; (800f5e4 <prvAddNewTaskToReadyList+0xbc>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d207      	bcs.n	800f5d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f5c8:	4b0b      	ldr	r3, [pc, #44]	; (800f5f8 <prvAddNewTaskToReadyList+0xd0>)
 800f5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	f3bf 8f4f 	dsb	sy
 800f5d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5d8:	bf00      	nop
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}
 800f5e0:	200008a0 	.word	0x200008a0
 800f5e4:	200007a0 	.word	0x200007a0
 800f5e8:	200008ac 	.word	0x200008ac
 800f5ec:	200008bc 	.word	0x200008bc
 800f5f0:	200008a8 	.word	0x200008a8
 800f5f4:	200007a4 	.word	0x200007a4
 800f5f8:	e000ed04 	.word	0xe000ed04

0800f5fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f604:	2300      	movs	r3, #0
 800f606:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d019      	beq.n	800f642 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f60e:	4b14      	ldr	r3, [pc, #80]	; (800f660 <vTaskDelay+0x64>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d00c      	beq.n	800f630 <vTaskDelay+0x34>
	__asm volatile
 800f616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61a:	b672      	cpsid	i
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	b662      	cpsie	i
 800f62a:	60bb      	str	r3, [r7, #8]
}
 800f62c:	bf00      	nop
 800f62e:	e7fe      	b.n	800f62e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f630:	f000 f87e 	bl	800f730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f634:	2100      	movs	r1, #0
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 fe4a 	bl	80102d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f63c:	f000 f886 	bl	800f74c <xTaskResumeAll>
 800f640:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d107      	bne.n	800f658 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f648:	4b06      	ldr	r3, [pc, #24]	; (800f664 <vTaskDelay+0x68>)
 800f64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f658:	bf00      	nop
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	200008c8 	.word	0x200008c8
 800f664:	e000ed04 	.word	0xe000ed04

0800f668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b08a      	sub	sp, #40	; 0x28
 800f66c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f66e:	2300      	movs	r3, #0
 800f670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f672:	2300      	movs	r3, #0
 800f674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f676:	463a      	mov	r2, r7
 800f678:	1d39      	adds	r1, r7, #4
 800f67a:	f107 0308 	add.w	r3, r7, #8
 800f67e:	4618      	mov	r0, r3
 800f680:	f7f0 ffac 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f684:	6839      	ldr	r1, [r7, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68ba      	ldr	r2, [r7, #8]
 800f68a:	9202      	str	r2, [sp, #8]
 800f68c:	9301      	str	r3, [sp, #4]
 800f68e:	2300      	movs	r3, #0
 800f690:	9300      	str	r3, [sp, #0]
 800f692:	2300      	movs	r3, #0
 800f694:	460a      	mov	r2, r1
 800f696:	4920      	ldr	r1, [pc, #128]	; (800f718 <vTaskStartScheduler+0xb0>)
 800f698:	4820      	ldr	r0, [pc, #128]	; (800f71c <vTaskStartScheduler+0xb4>)
 800f69a:	f7ff fe09 	bl	800f2b0 <xTaskCreateStatic>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	4a1f      	ldr	r2, [pc, #124]	; (800f720 <vTaskStartScheduler+0xb8>)
 800f6a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f6a4:	4b1e      	ldr	r3, [pc, #120]	; (800f720 <vTaskStartScheduler+0xb8>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d002      	beq.n	800f6b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	617b      	str	r3, [r7, #20]
 800f6b0:	e001      	b.n	800f6b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d118      	bne.n	800f6ee <vTaskStartScheduler+0x86>
	__asm volatile
 800f6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c0:	b672      	cpsid	i
 800f6c2:	f383 8811 	msr	BASEPRI, r3
 800f6c6:	f3bf 8f6f 	isb	sy
 800f6ca:	f3bf 8f4f 	dsb	sy
 800f6ce:	b662      	cpsie	i
 800f6d0:	613b      	str	r3, [r7, #16]
}
 800f6d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f6d4:	4b13      	ldr	r3, [pc, #76]	; (800f724 <vTaskStartScheduler+0xbc>)
 800f6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f6dc:	4b12      	ldr	r3, [pc, #72]	; (800f728 <vTaskStartScheduler+0xc0>)
 800f6de:	2201      	movs	r2, #1
 800f6e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f6e2:	4b12      	ldr	r3, [pc, #72]	; (800f72c <vTaskStartScheduler+0xc4>)
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f6e8:	f000 feea 	bl	80104c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f6ec:	e010      	b.n	800f710 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6f4:	d10c      	bne.n	800f710 <vTaskStartScheduler+0xa8>
	__asm volatile
 800f6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fa:	b672      	cpsid	i
 800f6fc:	f383 8811 	msr	BASEPRI, r3
 800f700:	f3bf 8f6f 	isb	sy
 800f704:	f3bf 8f4f 	dsb	sy
 800f708:	b662      	cpsie	i
 800f70a:	60fb      	str	r3, [r7, #12]
}
 800f70c:	bf00      	nop
 800f70e:	e7fe      	b.n	800f70e <vTaskStartScheduler+0xa6>
}
 800f710:	bf00      	nop
 800f712:	3718      	adds	r7, #24
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	08011b40 	.word	0x08011b40
 800f71c:	0800fd69 	.word	0x0800fd69
 800f720:	200008c4 	.word	0x200008c4
 800f724:	200008c0 	.word	0x200008c0
 800f728:	200008ac 	.word	0x200008ac
 800f72c:	200008a4 	.word	0x200008a4

0800f730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f730:	b480      	push	{r7}
 800f732:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f734:	4b04      	ldr	r3, [pc, #16]	; (800f748 <vTaskSuspendAll+0x18>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	3301      	adds	r3, #1
 800f73a:	4a03      	ldr	r2, [pc, #12]	; (800f748 <vTaskSuspendAll+0x18>)
 800f73c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f73e:	bf00      	nop
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	200008c8 	.word	0x200008c8

0800f74c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b084      	sub	sp, #16
 800f750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f756:	2300      	movs	r3, #0
 800f758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f75a:	4b42      	ldr	r3, [pc, #264]	; (800f864 <xTaskResumeAll+0x118>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d10c      	bne.n	800f77c <xTaskResumeAll+0x30>
	__asm volatile
 800f762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f766:	b672      	cpsid	i
 800f768:	f383 8811 	msr	BASEPRI, r3
 800f76c:	f3bf 8f6f 	isb	sy
 800f770:	f3bf 8f4f 	dsb	sy
 800f774:	b662      	cpsie	i
 800f776:	603b      	str	r3, [r7, #0]
}
 800f778:	bf00      	nop
 800f77a:	e7fe      	b.n	800f77a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f77c:	f000 ff1e 	bl	80105bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f780:	4b38      	ldr	r3, [pc, #224]	; (800f864 <xTaskResumeAll+0x118>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	3b01      	subs	r3, #1
 800f786:	4a37      	ldr	r2, [pc, #220]	; (800f864 <xTaskResumeAll+0x118>)
 800f788:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f78a:	4b36      	ldr	r3, [pc, #216]	; (800f864 <xTaskResumeAll+0x118>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d161      	bne.n	800f856 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f792:	4b35      	ldr	r3, [pc, #212]	; (800f868 <xTaskResumeAll+0x11c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d05d      	beq.n	800f856 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f79a:	e02e      	b.n	800f7fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f79c:	4b33      	ldr	r3, [pc, #204]	; (800f86c <xTaskResumeAll+0x120>)
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	3318      	adds	r3, #24
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fe fd63 	bl	800e274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	3304      	adds	r3, #4
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fe fd5e 	bl	800e274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7bc:	2201      	movs	r2, #1
 800f7be:	409a      	lsls	r2, r3
 800f7c0:	4b2b      	ldr	r3, [pc, #172]	; (800f870 <xTaskResumeAll+0x124>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	4a2a      	ldr	r2, [pc, #168]	; (800f870 <xTaskResumeAll+0x124>)
 800f7c8:	6013      	str	r3, [r2, #0]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ce:	4613      	mov	r3, r2
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	4413      	add	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	4a27      	ldr	r2, [pc, #156]	; (800f874 <xTaskResumeAll+0x128>)
 800f7d8:	441a      	add	r2, r3
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	3304      	adds	r3, #4
 800f7de:	4619      	mov	r1, r3
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	f7fe fcea 	bl	800e1ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7ea:	4b23      	ldr	r3, [pc, #140]	; (800f878 <xTaskResumeAll+0x12c>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d302      	bcc.n	800f7fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f7f4:	4b21      	ldr	r3, [pc, #132]	; (800f87c <xTaskResumeAll+0x130>)
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7fa:	4b1c      	ldr	r3, [pc, #112]	; (800f86c <xTaskResumeAll+0x120>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1cc      	bne.n	800f79c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d001      	beq.n	800f80c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f808:	f000 fb68 	bl	800fedc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f80c:	4b1c      	ldr	r3, [pc, #112]	; (800f880 <xTaskResumeAll+0x134>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d010      	beq.n	800f83a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f818:	f000 f858 	bl	800f8cc <xTaskIncrementTick>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d002      	beq.n	800f828 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f822:	4b16      	ldr	r3, [pc, #88]	; (800f87c <xTaskResumeAll+0x130>)
 800f824:	2201      	movs	r2, #1
 800f826:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	3b01      	subs	r3, #1
 800f82c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1f1      	bne.n	800f818 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800f834:	4b12      	ldr	r3, [pc, #72]	; (800f880 <xTaskResumeAll+0x134>)
 800f836:	2200      	movs	r2, #0
 800f838:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f83a:	4b10      	ldr	r3, [pc, #64]	; (800f87c <xTaskResumeAll+0x130>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d009      	beq.n	800f856 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f842:	2301      	movs	r3, #1
 800f844:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f846:	4b0f      	ldr	r3, [pc, #60]	; (800f884 <xTaskResumeAll+0x138>)
 800f848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f84c:	601a      	str	r2, [r3, #0]
 800f84e:	f3bf 8f4f 	dsb	sy
 800f852:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f856:	f000 fee5 	bl	8010624 <vPortExitCritical>

	return xAlreadyYielded;
 800f85a:	68bb      	ldr	r3, [r7, #8]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3710      	adds	r7, #16
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	200008c8 	.word	0x200008c8
 800f868:	200008a0 	.word	0x200008a0
 800f86c:	20000860 	.word	0x20000860
 800f870:	200008a8 	.word	0x200008a8
 800f874:	200007a4 	.word	0x200007a4
 800f878:	200007a0 	.word	0x200007a0
 800f87c:	200008b4 	.word	0x200008b4
 800f880:	200008b0 	.word	0x200008b0
 800f884:	e000ed04 	.word	0xe000ed04

0800f888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f88e:	4b05      	ldr	r3, [pc, #20]	; (800f8a4 <xTaskGetTickCount+0x1c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f894:	687b      	ldr	r3, [r7, #4]
}
 800f896:	4618      	mov	r0, r3
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	200008a4 	.word	0x200008a4

0800f8a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8ae:	f000 ff6d 	bl	801078c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f8b6:	4b04      	ldr	r3, [pc, #16]	; (800f8c8 <xTaskGetTickCountFromISR+0x20>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f8bc:	683b      	ldr	r3, [r7, #0]
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3708      	adds	r7, #8
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	200008a4 	.word	0x200008a4

0800f8cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b086      	sub	sp, #24
 800f8d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8d6:	4b4f      	ldr	r3, [pc, #316]	; (800fa14 <xTaskIncrementTick+0x148>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f040 808a 	bne.w	800f9f4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f8e0:	4b4d      	ldr	r3, [pc, #308]	; (800fa18 <xTaskIncrementTick+0x14c>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f8e8:	4a4b      	ldr	r2, [pc, #300]	; (800fa18 <xTaskIncrementTick+0x14c>)
 800f8ea:	693b      	ldr	r3, [r7, #16]
 800f8ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d122      	bne.n	800f93a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f8f4:	4b49      	ldr	r3, [pc, #292]	; (800fa1c <xTaskIncrementTick+0x150>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d00c      	beq.n	800f918 <xTaskIncrementTick+0x4c>
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f902:	b672      	cpsid	i
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	b662      	cpsie	i
 800f912:	603b      	str	r3, [r7, #0]
}
 800f914:	bf00      	nop
 800f916:	e7fe      	b.n	800f916 <xTaskIncrementTick+0x4a>
 800f918:	4b40      	ldr	r3, [pc, #256]	; (800fa1c <xTaskIncrementTick+0x150>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	60fb      	str	r3, [r7, #12]
 800f91e:	4b40      	ldr	r3, [pc, #256]	; (800fa20 <xTaskIncrementTick+0x154>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	4a3e      	ldr	r2, [pc, #248]	; (800fa1c <xTaskIncrementTick+0x150>)
 800f924:	6013      	str	r3, [r2, #0]
 800f926:	4a3e      	ldr	r2, [pc, #248]	; (800fa20 <xTaskIncrementTick+0x154>)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6013      	str	r3, [r2, #0]
 800f92c:	4b3d      	ldr	r3, [pc, #244]	; (800fa24 <xTaskIncrementTick+0x158>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	3301      	adds	r3, #1
 800f932:	4a3c      	ldr	r2, [pc, #240]	; (800fa24 <xTaskIncrementTick+0x158>)
 800f934:	6013      	str	r3, [r2, #0]
 800f936:	f000 fad1 	bl	800fedc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f93a:	4b3b      	ldr	r3, [pc, #236]	; (800fa28 <xTaskIncrementTick+0x15c>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	429a      	cmp	r2, r3
 800f942:	d348      	bcc.n	800f9d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f944:	4b35      	ldr	r3, [pc, #212]	; (800fa1c <xTaskIncrementTick+0x150>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d104      	bne.n	800f958 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f94e:	4b36      	ldr	r3, [pc, #216]	; (800fa28 <xTaskIncrementTick+0x15c>)
 800f950:	f04f 32ff 	mov.w	r2, #4294967295
 800f954:	601a      	str	r2, [r3, #0]
					break;
 800f956:	e03e      	b.n	800f9d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f958:	4b30      	ldr	r3, [pc, #192]	; (800fa1c <xTaskIncrementTick+0x150>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f968:	693a      	ldr	r2, [r7, #16]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d203      	bcs.n	800f978 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f970:	4a2d      	ldr	r2, [pc, #180]	; (800fa28 <xTaskIncrementTick+0x15c>)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f976:	e02e      	b.n	800f9d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	3304      	adds	r3, #4
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fe fc79 	bl	800e274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f986:	2b00      	cmp	r3, #0
 800f988:	d004      	beq.n	800f994 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	3318      	adds	r3, #24
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fe fc70 	bl	800e274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f998:	2201      	movs	r2, #1
 800f99a:	409a      	lsls	r2, r3
 800f99c:	4b23      	ldr	r3, [pc, #140]	; (800fa2c <xTaskIncrementTick+0x160>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	4a22      	ldr	r2, [pc, #136]	; (800fa2c <xTaskIncrementTick+0x160>)
 800f9a4:	6013      	str	r3, [r2, #0]
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9aa:	4613      	mov	r3, r2
 800f9ac:	009b      	lsls	r3, r3, #2
 800f9ae:	4413      	add	r3, r2
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4a1f      	ldr	r2, [pc, #124]	; (800fa30 <xTaskIncrementTick+0x164>)
 800f9b4:	441a      	add	r2, r3
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	3304      	adds	r3, #4
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	4610      	mov	r0, r2
 800f9be:	f7fe fbfc 	bl	800e1ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9c6:	4b1b      	ldr	r3, [pc, #108]	; (800fa34 <xTaskIncrementTick+0x168>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d3b9      	bcc.n	800f944 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9d4:	e7b6      	b.n	800f944 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f9d6:	4b17      	ldr	r3, [pc, #92]	; (800fa34 <xTaskIncrementTick+0x168>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9dc:	4914      	ldr	r1, [pc, #80]	; (800fa30 <xTaskIncrementTick+0x164>)
 800f9de:	4613      	mov	r3, r2
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	4413      	add	r3, r2
 800f9e4:	009b      	lsls	r3, r3, #2
 800f9e6:	440b      	add	r3, r1
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d907      	bls.n	800f9fe <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	617b      	str	r3, [r7, #20]
 800f9f2:	e004      	b.n	800f9fe <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f9f4:	4b10      	ldr	r3, [pc, #64]	; (800fa38 <xTaskIncrementTick+0x16c>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	4a0f      	ldr	r2, [pc, #60]	; (800fa38 <xTaskIncrementTick+0x16c>)
 800f9fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f9fe:	4b0f      	ldr	r3, [pc, #60]	; (800fa3c <xTaskIncrementTick+0x170>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800fa06:	2301      	movs	r3, #1
 800fa08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fa0a:	697b      	ldr	r3, [r7, #20]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3718      	adds	r7, #24
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	200008c8 	.word	0x200008c8
 800fa18:	200008a4 	.word	0x200008a4
 800fa1c:	20000858 	.word	0x20000858
 800fa20:	2000085c 	.word	0x2000085c
 800fa24:	200008b8 	.word	0x200008b8
 800fa28:	200008c0 	.word	0x200008c0
 800fa2c:	200008a8 	.word	0x200008a8
 800fa30:	200007a4 	.word	0x200007a4
 800fa34:	200007a0 	.word	0x200007a0
 800fa38:	200008b0 	.word	0x200008b0
 800fa3c:	200008b4 	.word	0x200008b4

0800fa40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b088      	sub	sp, #32
 800fa44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa46:	4b3a      	ldr	r3, [pc, #232]	; (800fb30 <vTaskSwitchContext+0xf0>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d003      	beq.n	800fa56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa4e:	4b39      	ldr	r3, [pc, #228]	; (800fb34 <vTaskSwitchContext+0xf4>)
 800fa50:	2201      	movs	r2, #1
 800fa52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa54:	e068      	b.n	800fb28 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800fa56:	4b37      	ldr	r3, [pc, #220]	; (800fb34 <vTaskSwitchContext+0xf4>)
 800fa58:	2200      	movs	r2, #0
 800fa5a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fa5c:	4b36      	ldr	r3, [pc, #216]	; (800fb38 <vTaskSwitchContext+0xf8>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa62:	61fb      	str	r3, [r7, #28]
 800fa64:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800fa68:	61bb      	str	r3, [r7, #24]
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	69ba      	ldr	r2, [r7, #24]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d111      	bne.n	800fa98 <vTaskSwitchContext+0x58>
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	3304      	adds	r3, #4
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	69ba      	ldr	r2, [r7, #24]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d10b      	bne.n	800fa98 <vTaskSwitchContext+0x58>
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	3308      	adds	r3, #8
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	69ba      	ldr	r2, [r7, #24]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d105      	bne.n	800fa98 <vTaskSwitchContext+0x58>
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	330c      	adds	r3, #12
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	69ba      	ldr	r2, [r7, #24]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d008      	beq.n	800faaa <vTaskSwitchContext+0x6a>
 800fa98:	4b27      	ldr	r3, [pc, #156]	; (800fb38 <vTaskSwitchContext+0xf8>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	4b26      	ldr	r3, [pc, #152]	; (800fb38 <vTaskSwitchContext+0xf8>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	3334      	adds	r3, #52	; 0x34
 800faa2:	4619      	mov	r1, r3
 800faa4:	4610      	mov	r0, r2
 800faa6:	f7f0 fd86 	bl	80005b6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faaa:	4b24      	ldr	r3, [pc, #144]	; (800fb3c <vTaskSwitchContext+0xfc>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	fab3 f383 	clz	r3, r3
 800fab6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fab8:	7afb      	ldrb	r3, [r7, #11]
 800faba:	f1c3 031f 	rsb	r3, r3, #31
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	491f      	ldr	r1, [pc, #124]	; (800fb40 <vTaskSwitchContext+0x100>)
 800fac2:	697a      	ldr	r2, [r7, #20]
 800fac4:	4613      	mov	r3, r2
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	4413      	add	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	440b      	add	r3, r1
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d10c      	bne.n	800faee <vTaskSwitchContext+0xae>
	__asm volatile
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	b672      	cpsid	i
 800fada:	f383 8811 	msr	BASEPRI, r3
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	f3bf 8f4f 	dsb	sy
 800fae6:	b662      	cpsie	i
 800fae8:	607b      	str	r3, [r7, #4]
}
 800faea:	bf00      	nop
 800faec:	e7fe      	b.n	800faec <vTaskSwitchContext+0xac>
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	4613      	mov	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	4a11      	ldr	r2, [pc, #68]	; (800fb40 <vTaskSwitchContext+0x100>)
 800fafa:	4413      	add	r3, r2
 800fafc:	613b      	str	r3, [r7, #16]
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	685a      	ldr	r2, [r3, #4]
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	605a      	str	r2, [r3, #4]
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	685a      	ldr	r2, [r3, #4]
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	3308      	adds	r3, #8
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d104      	bne.n	800fb1e <vTaskSwitchContext+0xde>
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	685a      	ldr	r2, [r3, #4]
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	605a      	str	r2, [r3, #4]
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	4a04      	ldr	r2, [pc, #16]	; (800fb38 <vTaskSwitchContext+0xf8>)
 800fb26:	6013      	str	r3, [r2, #0]
}
 800fb28:	bf00      	nop
 800fb2a:	3720      	adds	r7, #32
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	200008c8 	.word	0x200008c8
 800fb34:	200008b4 	.word	0x200008b4
 800fb38:	200007a0 	.word	0x200007a0
 800fb3c:	200008a8 	.word	0x200008a8
 800fb40:	200007a4 	.word	0x200007a4

0800fb44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10c      	bne.n	800fb6e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb58:	b672      	cpsid	i
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	b662      	cpsie	i
 800fb68:	60fb      	str	r3, [r7, #12]
}
 800fb6a:	bf00      	nop
 800fb6c:	e7fe      	b.n	800fb6c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb6e:	4b07      	ldr	r3, [pc, #28]	; (800fb8c <vTaskPlaceOnEventList+0x48>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	3318      	adds	r3, #24
 800fb74:	4619      	mov	r1, r3
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f7fe fb43 	bl	800e202 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb7c:	2101      	movs	r1, #1
 800fb7e:	6838      	ldr	r0, [r7, #0]
 800fb80:	f000 fba6 	bl	80102d0 <prvAddCurrentTaskToDelayedList>
}
 800fb84:	bf00      	nop
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	200007a0 	.word	0x200007a0

0800fb90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	68db      	ldr	r3, [r3, #12]
 800fb9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d10c      	bne.n	800fbc0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbaa:	b672      	cpsid	i
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	b662      	cpsie	i
 800fbba:	60fb      	str	r3, [r7, #12]
}
 800fbbc:	bf00      	nop
 800fbbe:	e7fe      	b.n	800fbbe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	3318      	adds	r3, #24
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fe fb55 	bl	800e274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbca:	4b1d      	ldr	r3, [pc, #116]	; (800fc40 <xTaskRemoveFromEventList+0xb0>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d11c      	bne.n	800fc0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	3304      	adds	r3, #4
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe fb4c 	bl	800e274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	409a      	lsls	r2, r3
 800fbe4:	4b17      	ldr	r3, [pc, #92]	; (800fc44 <xTaskRemoveFromEventList+0xb4>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4313      	orrs	r3, r2
 800fbea:	4a16      	ldr	r2, [pc, #88]	; (800fc44 <xTaskRemoveFromEventList+0xb4>)
 800fbec:	6013      	str	r3, [r2, #0]
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf2:	4613      	mov	r3, r2
 800fbf4:	009b      	lsls	r3, r3, #2
 800fbf6:	4413      	add	r3, r2
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	4a13      	ldr	r2, [pc, #76]	; (800fc48 <xTaskRemoveFromEventList+0xb8>)
 800fbfc:	441a      	add	r2, r3
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	3304      	adds	r3, #4
 800fc02:	4619      	mov	r1, r3
 800fc04:	4610      	mov	r0, r2
 800fc06:	f7fe fad8 	bl	800e1ba <vListInsertEnd>
 800fc0a:	e005      	b.n	800fc18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	3318      	adds	r3, #24
 800fc10:	4619      	mov	r1, r3
 800fc12:	480e      	ldr	r0, [pc, #56]	; (800fc4c <xTaskRemoveFromEventList+0xbc>)
 800fc14:	f7fe fad1 	bl	800e1ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc1c:	4b0c      	ldr	r3, [pc, #48]	; (800fc50 <xTaskRemoveFromEventList+0xc0>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d905      	bls.n	800fc32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc26:	2301      	movs	r3, #1
 800fc28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc2a:	4b0a      	ldr	r3, [pc, #40]	; (800fc54 <xTaskRemoveFromEventList+0xc4>)
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	601a      	str	r2, [r3, #0]
 800fc30:	e001      	b.n	800fc36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fc32:	2300      	movs	r3, #0
 800fc34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc36:	697b      	ldr	r3, [r7, #20]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3718      	adds	r7, #24
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	200008c8 	.word	0x200008c8
 800fc44:	200008a8 	.word	0x200008a8
 800fc48:	200007a4 	.word	0x200007a4
 800fc4c:	20000860 	.word	0x20000860
 800fc50:	200007a0 	.word	0x200007a0
 800fc54:	200008b4 	.word	0x200008b4

0800fc58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc60:	4b06      	ldr	r3, [pc, #24]	; (800fc7c <vTaskInternalSetTimeOutState+0x24>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc68:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <vTaskInternalSetTimeOutState+0x28>)
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	605a      	str	r2, [r3, #4]
}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr
 800fc7c:	200008b8 	.word	0x200008b8
 800fc80:	200008a4 	.word	0x200008a4

0800fc84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b088      	sub	sp, #32
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d10c      	bne.n	800fcae <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc98:	b672      	cpsid	i
 800fc9a:	f383 8811 	msr	BASEPRI, r3
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	f3bf 8f4f 	dsb	sy
 800fca6:	b662      	cpsie	i
 800fca8:	613b      	str	r3, [r7, #16]
}
 800fcaa:	bf00      	nop
 800fcac:	e7fe      	b.n	800fcac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10c      	bne.n	800fcce <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb8:	b672      	cpsid	i
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	b662      	cpsie	i
 800fcc8:	60fb      	str	r3, [r7, #12]
}
 800fcca:	bf00      	nop
 800fccc:	e7fe      	b.n	800fccc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800fcce:	f000 fc75 	bl	80105bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fcd2:	4b1d      	ldr	r3, [pc, #116]	; (800fd48 <xTaskCheckForTimeOut+0xc4>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	69ba      	ldr	r2, [r7, #24]
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcea:	d102      	bne.n	800fcf2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fcec:	2300      	movs	r3, #0
 800fcee:	61fb      	str	r3, [r7, #28]
 800fcf0:	e023      	b.n	800fd3a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	4b15      	ldr	r3, [pc, #84]	; (800fd4c <xTaskCheckForTimeOut+0xc8>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d007      	beq.n	800fd0e <xTaskCheckForTimeOut+0x8a>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	69ba      	ldr	r2, [r7, #24]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d302      	bcc.n	800fd0e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	61fb      	str	r3, [r7, #28]
 800fd0c:	e015      	b.n	800fd3a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	697a      	ldr	r2, [r7, #20]
 800fd14:	429a      	cmp	r2, r3
 800fd16:	d20b      	bcs.n	800fd30 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	1ad2      	subs	r2, r2, r3
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7ff ff97 	bl	800fc58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	61fb      	str	r3, [r7, #28]
 800fd2e:	e004      	b.n	800fd3a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	2200      	movs	r2, #0
 800fd34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd36:	2301      	movs	r3, #1
 800fd38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd3a:	f000 fc73 	bl	8010624 <vPortExitCritical>

	return xReturn;
 800fd3e:	69fb      	ldr	r3, [r7, #28]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3720      	adds	r7, #32
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	200008a4 	.word	0x200008a4
 800fd4c:	200008b8 	.word	0x200008b8

0800fd50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd50:	b480      	push	{r7}
 800fd52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd54:	4b03      	ldr	r3, [pc, #12]	; (800fd64 <vTaskMissedYield+0x14>)
 800fd56:	2201      	movs	r2, #1
 800fd58:	601a      	str	r2, [r3, #0]
}
 800fd5a:	bf00      	nop
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr
 800fd64:	200008b4 	.word	0x200008b4

0800fd68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd70:	f000 f854 	bl	800fe1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd74:	4b07      	ldr	r3, [pc, #28]	; (800fd94 <prvIdleTask+0x2c>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d907      	bls.n	800fd8c <prvIdleTask+0x24>
			{
				taskYIELD();
 800fd7c:	4b06      	ldr	r3, [pc, #24]	; (800fd98 <prvIdleTask+0x30>)
 800fd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd82:	601a      	str	r2, [r3, #0]
 800fd84:	f3bf 8f4f 	dsb	sy
 800fd88:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fd8c:	f7f0 fc0c 	bl	80005a8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fd90:	e7ee      	b.n	800fd70 <prvIdleTask+0x8>
 800fd92:	bf00      	nop
 800fd94:	200007a4 	.word	0x200007a4
 800fd98:	e000ed04 	.word	0xe000ed04

0800fd9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fda2:	2300      	movs	r3, #0
 800fda4:	607b      	str	r3, [r7, #4]
 800fda6:	e00c      	b.n	800fdc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	4413      	add	r3, r2
 800fdb0:	009b      	lsls	r3, r3, #2
 800fdb2:	4a12      	ldr	r2, [pc, #72]	; (800fdfc <prvInitialiseTaskLists+0x60>)
 800fdb4:	4413      	add	r3, r2
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fe f9d2 	bl	800e160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	607b      	str	r3, [r7, #4]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2b06      	cmp	r3, #6
 800fdc6:	d9ef      	bls.n	800fda8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fdc8:	480d      	ldr	r0, [pc, #52]	; (800fe00 <prvInitialiseTaskLists+0x64>)
 800fdca:	f7fe f9c9 	bl	800e160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fdce:	480d      	ldr	r0, [pc, #52]	; (800fe04 <prvInitialiseTaskLists+0x68>)
 800fdd0:	f7fe f9c6 	bl	800e160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fdd4:	480c      	ldr	r0, [pc, #48]	; (800fe08 <prvInitialiseTaskLists+0x6c>)
 800fdd6:	f7fe f9c3 	bl	800e160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fdda:	480c      	ldr	r0, [pc, #48]	; (800fe0c <prvInitialiseTaskLists+0x70>)
 800fddc:	f7fe f9c0 	bl	800e160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fde0:	480b      	ldr	r0, [pc, #44]	; (800fe10 <prvInitialiseTaskLists+0x74>)
 800fde2:	f7fe f9bd 	bl	800e160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fde6:	4b0b      	ldr	r3, [pc, #44]	; (800fe14 <prvInitialiseTaskLists+0x78>)
 800fde8:	4a05      	ldr	r2, [pc, #20]	; (800fe00 <prvInitialiseTaskLists+0x64>)
 800fdea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fdec:	4b0a      	ldr	r3, [pc, #40]	; (800fe18 <prvInitialiseTaskLists+0x7c>)
 800fdee:	4a05      	ldr	r2, [pc, #20]	; (800fe04 <prvInitialiseTaskLists+0x68>)
 800fdf0:	601a      	str	r2, [r3, #0]
}
 800fdf2:	bf00      	nop
 800fdf4:	3708      	adds	r7, #8
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	200007a4 	.word	0x200007a4
 800fe00:	20000830 	.word	0x20000830
 800fe04:	20000844 	.word	0x20000844
 800fe08:	20000860 	.word	0x20000860
 800fe0c:	20000874 	.word	0x20000874
 800fe10:	2000088c 	.word	0x2000088c
 800fe14:	20000858 	.word	0x20000858
 800fe18:	2000085c 	.word	0x2000085c

0800fe1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe22:	e019      	b.n	800fe58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe24:	f000 fbca 	bl	80105bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe28:	4b10      	ldr	r3, [pc, #64]	; (800fe6c <prvCheckTasksWaitingTermination+0x50>)
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	3304      	adds	r3, #4
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7fe fa1d 	bl	800e274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe3a:	4b0d      	ldr	r3, [pc, #52]	; (800fe70 <prvCheckTasksWaitingTermination+0x54>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	3b01      	subs	r3, #1
 800fe40:	4a0b      	ldr	r2, [pc, #44]	; (800fe70 <prvCheckTasksWaitingTermination+0x54>)
 800fe42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe44:	4b0b      	ldr	r3, [pc, #44]	; (800fe74 <prvCheckTasksWaitingTermination+0x58>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	3b01      	subs	r3, #1
 800fe4a:	4a0a      	ldr	r2, [pc, #40]	; (800fe74 <prvCheckTasksWaitingTermination+0x58>)
 800fe4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe4e:	f000 fbe9 	bl	8010624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 f810 	bl	800fe78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe58:	4b06      	ldr	r3, [pc, #24]	; (800fe74 <prvCheckTasksWaitingTermination+0x58>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1e1      	bne.n	800fe24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe60:	bf00      	nop
 800fe62:	bf00      	nop
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	20000874 	.word	0x20000874
 800fe70:	200008a0 	.word	0x200008a0
 800fe74:	20000888 	.word	0x20000888

0800fe78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d108      	bne.n	800fe9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f000 fd5f 	bl	8010952 <vPortFree>
				vPortFree( pxTCB );
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 fd5c 	bl	8010952 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe9a:	e01a      	b.n	800fed2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d103      	bne.n	800feae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 fd53 	bl	8010952 <vPortFree>
	}
 800feac:	e011      	b.n	800fed2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800feb4:	2b02      	cmp	r3, #2
 800feb6:	d00c      	beq.n	800fed2 <prvDeleteTCB+0x5a>
	__asm volatile
 800feb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febc:	b672      	cpsid	i
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	b662      	cpsie	i
 800fecc:	60fb      	str	r3, [r7, #12]
}
 800fece:	bf00      	nop
 800fed0:	e7fe      	b.n	800fed0 <prvDeleteTCB+0x58>
	}
 800fed2:	bf00      	nop
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fee2:	4b0c      	ldr	r3, [pc, #48]	; (800ff14 <prvResetNextTaskUnblockTime+0x38>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d104      	bne.n	800fef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800feec:	4b0a      	ldr	r3, [pc, #40]	; (800ff18 <prvResetNextTaskUnblockTime+0x3c>)
 800feee:	f04f 32ff 	mov.w	r2, #4294967295
 800fef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fef4:	e008      	b.n	800ff08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fef6:	4b07      	ldr	r3, [pc, #28]	; (800ff14 <prvResetNextTaskUnblockTime+0x38>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	68db      	ldr	r3, [r3, #12]
 800fefe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	4a04      	ldr	r2, [pc, #16]	; (800ff18 <prvResetNextTaskUnblockTime+0x3c>)
 800ff06:	6013      	str	r3, [r2, #0]
}
 800ff08:	bf00      	nop
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr
 800ff14:	20000858 	.word	0x20000858
 800ff18:	200008c0 	.word	0x200008c0

0800ff1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff22:	4b0b      	ldr	r3, [pc, #44]	; (800ff50 <xTaskGetSchedulerState+0x34>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d102      	bne.n	800ff30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	607b      	str	r3, [r7, #4]
 800ff2e:	e008      	b.n	800ff42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff30:	4b08      	ldr	r3, [pc, #32]	; (800ff54 <xTaskGetSchedulerState+0x38>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d102      	bne.n	800ff3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff38:	2302      	movs	r3, #2
 800ff3a:	607b      	str	r3, [r7, #4]
 800ff3c:	e001      	b.n	800ff42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff42:	687b      	ldr	r3, [r7, #4]
	}
 800ff44:	4618      	mov	r0, r3
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr
 800ff50:	200008ac 	.word	0x200008ac
 800ff54:	200008c8 	.word	0x200008c8

0800ff58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff64:	2300      	movs	r3, #0
 800ff66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d069      	beq.n	8010042 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff72:	4b36      	ldr	r3, [pc, #216]	; (801004c <xTaskPriorityInherit+0xf4>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d259      	bcs.n	8010030 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	699b      	ldr	r3, [r3, #24]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	db06      	blt.n	800ff92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff84:	4b31      	ldr	r3, [pc, #196]	; (801004c <xTaskPriorityInherit+0xf4>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff8a:	f1c3 0207 	rsb	r2, r3, #7
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	6959      	ldr	r1, [r3, #20]
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4413      	add	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	4a2b      	ldr	r2, [pc, #172]	; (8010050 <xTaskPriorityInherit+0xf8>)
 800ffa4:	4413      	add	r3, r2
 800ffa6:	4299      	cmp	r1, r3
 800ffa8:	d13a      	bne.n	8010020 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	3304      	adds	r3, #4
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe f960 	bl	800e274 <uxListRemove>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d115      	bne.n	800ffe6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffbe:	4924      	ldr	r1, [pc, #144]	; (8010050 <xTaskPriorityInherit+0xf8>)
 800ffc0:	4613      	mov	r3, r2
 800ffc2:	009b      	lsls	r3, r3, #2
 800ffc4:	4413      	add	r3, r2
 800ffc6:	009b      	lsls	r3, r3, #2
 800ffc8:	440b      	add	r3, r1
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d10a      	bne.n	800ffe6 <xTaskPriorityInherit+0x8e>
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	fa02 f303 	lsl.w	r3, r2, r3
 800ffda:	43da      	mvns	r2, r3
 800ffdc:	4b1d      	ldr	r3, [pc, #116]	; (8010054 <xTaskPriorityInherit+0xfc>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	4a1c      	ldr	r2, [pc, #112]	; (8010054 <xTaskPriorityInherit+0xfc>)
 800ffe4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffe6:	4b19      	ldr	r3, [pc, #100]	; (801004c <xTaskPriorityInherit+0xf4>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff4:	2201      	movs	r2, #1
 800fff6:	409a      	lsls	r2, r3
 800fff8:	4b16      	ldr	r3, [pc, #88]	; (8010054 <xTaskPriorityInherit+0xfc>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4313      	orrs	r3, r2
 800fffe:	4a15      	ldr	r2, [pc, #84]	; (8010054 <xTaskPriorityInherit+0xfc>)
 8010000:	6013      	str	r3, [r2, #0]
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010006:	4613      	mov	r3, r2
 8010008:	009b      	lsls	r3, r3, #2
 801000a:	4413      	add	r3, r2
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	4a10      	ldr	r2, [pc, #64]	; (8010050 <xTaskPriorityInherit+0xf8>)
 8010010:	441a      	add	r2, r3
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	3304      	adds	r3, #4
 8010016:	4619      	mov	r1, r3
 8010018:	4610      	mov	r0, r2
 801001a:	f7fe f8ce 	bl	800e1ba <vListInsertEnd>
 801001e:	e004      	b.n	801002a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010020:	4b0a      	ldr	r3, [pc, #40]	; (801004c <xTaskPriorityInherit+0xf4>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801002a:	2301      	movs	r3, #1
 801002c:	60fb      	str	r3, [r7, #12]
 801002e:	e008      	b.n	8010042 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010034:	4b05      	ldr	r3, [pc, #20]	; (801004c <xTaskPriorityInherit+0xf4>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003a:	429a      	cmp	r2, r3
 801003c:	d201      	bcs.n	8010042 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801003e:	2301      	movs	r3, #1
 8010040:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010042:	68fb      	ldr	r3, [r7, #12]
	}
 8010044:	4618      	mov	r0, r3
 8010046:	3710      	adds	r7, #16
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	200007a0 	.word	0x200007a0
 8010050:	200007a4 	.word	0x200007a4
 8010054:	200008a8 	.word	0x200008a8

08010058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010064:	2300      	movs	r3, #0
 8010066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d072      	beq.n	8010154 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801006e:	4b3c      	ldr	r3, [pc, #240]	; (8010160 <xTaskPriorityDisinherit+0x108>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	693a      	ldr	r2, [r7, #16]
 8010074:	429a      	cmp	r2, r3
 8010076:	d00c      	beq.n	8010092 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801007c:	b672      	cpsid	i
 801007e:	f383 8811 	msr	BASEPRI, r3
 8010082:	f3bf 8f6f 	isb	sy
 8010086:	f3bf 8f4f 	dsb	sy
 801008a:	b662      	cpsie	i
 801008c:	60fb      	str	r3, [r7, #12]
}
 801008e:	bf00      	nop
 8010090:	e7fe      	b.n	8010090 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010096:	2b00      	cmp	r3, #0
 8010098:	d10c      	bne.n	80100b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801009a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009e:	b672      	cpsid	i
 80100a0:	f383 8811 	msr	BASEPRI, r3
 80100a4:	f3bf 8f6f 	isb	sy
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	b662      	cpsie	i
 80100ae:	60bb      	str	r3, [r7, #8]
}
 80100b0:	bf00      	nop
 80100b2:	e7fe      	b.n	80100b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100b8:	1e5a      	subs	r2, r3, #1
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d044      	beq.n	8010154 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d140      	bne.n	8010154 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	3304      	adds	r3, #4
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fe f8cc 	bl	800e274 <uxListRemove>
 80100dc:	4603      	mov	r3, r0
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d115      	bne.n	801010e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100e6:	491f      	ldr	r1, [pc, #124]	; (8010164 <xTaskPriorityDisinherit+0x10c>)
 80100e8:	4613      	mov	r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	4413      	add	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	440b      	add	r3, r1
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d10a      	bne.n	801010e <xTaskPriorityDisinherit+0xb6>
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100fc:	2201      	movs	r2, #1
 80100fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010102:	43da      	mvns	r2, r3
 8010104:	4b18      	ldr	r3, [pc, #96]	; (8010168 <xTaskPriorityDisinherit+0x110>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4013      	ands	r3, r2
 801010a:	4a17      	ldr	r2, [pc, #92]	; (8010168 <xTaskPriorityDisinherit+0x110>)
 801010c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011a:	f1c3 0207 	rsb	r2, r3, #7
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010126:	2201      	movs	r2, #1
 8010128:	409a      	lsls	r2, r3
 801012a:	4b0f      	ldr	r3, [pc, #60]	; (8010168 <xTaskPriorityDisinherit+0x110>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4313      	orrs	r3, r2
 8010130:	4a0d      	ldr	r2, [pc, #52]	; (8010168 <xTaskPriorityDisinherit+0x110>)
 8010132:	6013      	str	r3, [r2, #0]
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010138:	4613      	mov	r3, r2
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	4413      	add	r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	4a08      	ldr	r2, [pc, #32]	; (8010164 <xTaskPriorityDisinherit+0x10c>)
 8010142:	441a      	add	r2, r3
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	3304      	adds	r3, #4
 8010148:	4619      	mov	r1, r3
 801014a:	4610      	mov	r0, r2
 801014c:	f7fe f835 	bl	800e1ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010150:	2301      	movs	r3, #1
 8010152:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010154:	697b      	ldr	r3, [r7, #20]
	}
 8010156:	4618      	mov	r0, r3
 8010158:	3718      	adds	r7, #24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	200007a0 	.word	0x200007a0
 8010164:	200007a4 	.word	0x200007a4
 8010168:	200008a8 	.word	0x200008a8

0801016c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801016c:	b580      	push	{r7, lr}
 801016e:	b088      	sub	sp, #32
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801017a:	2301      	movs	r3, #1
 801017c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2b00      	cmp	r3, #0
 8010182:	f000 8087 	beq.w	8010294 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801018a:	2b00      	cmp	r3, #0
 801018c:	d10c      	bne.n	80101a8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801018e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010192:	b672      	cpsid	i
 8010194:	f383 8811 	msr	BASEPRI, r3
 8010198:	f3bf 8f6f 	isb	sy
 801019c:	f3bf 8f4f 	dsb	sy
 80101a0:	b662      	cpsie	i
 80101a2:	60fb      	str	r3, [r7, #12]
}
 80101a4:	bf00      	nop
 80101a6:	e7fe      	b.n	80101a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ac:	683a      	ldr	r2, [r7, #0]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d902      	bls.n	80101b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	61fb      	str	r3, [r7, #28]
 80101b6:	e002      	b.n	80101be <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80101b8:	69bb      	ldr	r3, [r7, #24]
 80101ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c2:	69fa      	ldr	r2, [r7, #28]
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d065      	beq.n	8010294 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101cc:	697a      	ldr	r2, [r7, #20]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d160      	bne.n	8010294 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80101d2:	4b32      	ldr	r3, [pc, #200]	; (801029c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	69ba      	ldr	r2, [r7, #24]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d10c      	bne.n	80101f6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80101dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e0:	b672      	cpsid	i
 80101e2:	f383 8811 	msr	BASEPRI, r3
 80101e6:	f3bf 8f6f 	isb	sy
 80101ea:	f3bf 8f4f 	dsb	sy
 80101ee:	b662      	cpsie	i
 80101f0:	60bb      	str	r3, [r7, #8]
}
 80101f2:	bf00      	nop
 80101f4:	e7fe      	b.n	80101f4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101fa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	69fa      	ldr	r2, [r7, #28]
 8010200:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	699b      	ldr	r3, [r3, #24]
 8010206:	2b00      	cmp	r3, #0
 8010208:	db04      	blt.n	8010214 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	f1c3 0207 	rsb	r2, r3, #7
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	6959      	ldr	r1, [r3, #20]
 8010218:	693a      	ldr	r2, [r7, #16]
 801021a:	4613      	mov	r3, r2
 801021c:	009b      	lsls	r3, r3, #2
 801021e:	4413      	add	r3, r2
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	4a1f      	ldr	r2, [pc, #124]	; (80102a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010224:	4413      	add	r3, r2
 8010226:	4299      	cmp	r1, r3
 8010228:	d134      	bne.n	8010294 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	3304      	adds	r3, #4
 801022e:	4618      	mov	r0, r3
 8010230:	f7fe f820 	bl	800e274 <uxListRemove>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d115      	bne.n	8010266 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801023e:	4918      	ldr	r1, [pc, #96]	; (80102a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010240:	4613      	mov	r3, r2
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	4413      	add	r3, r2
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	440b      	add	r3, r1
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d10a      	bne.n	8010266 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010254:	2201      	movs	r2, #1
 8010256:	fa02 f303 	lsl.w	r3, r2, r3
 801025a:	43da      	mvns	r2, r3
 801025c:	4b11      	ldr	r3, [pc, #68]	; (80102a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	4013      	ands	r3, r2
 8010262:	4a10      	ldr	r2, [pc, #64]	; (80102a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010264:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026a:	2201      	movs	r2, #1
 801026c:	409a      	lsls	r2, r3
 801026e:	4b0d      	ldr	r3, [pc, #52]	; (80102a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	4313      	orrs	r3, r2
 8010274:	4a0b      	ldr	r2, [pc, #44]	; (80102a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010276:	6013      	str	r3, [r2, #0]
 8010278:	69bb      	ldr	r3, [r7, #24]
 801027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801027c:	4613      	mov	r3, r2
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	4413      	add	r3, r2
 8010282:	009b      	lsls	r3, r3, #2
 8010284:	4a06      	ldr	r2, [pc, #24]	; (80102a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010286:	441a      	add	r2, r3
 8010288:	69bb      	ldr	r3, [r7, #24]
 801028a:	3304      	adds	r3, #4
 801028c:	4619      	mov	r1, r3
 801028e:	4610      	mov	r0, r2
 8010290:	f7fd ff93 	bl	800e1ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010294:	bf00      	nop
 8010296:	3720      	adds	r7, #32
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	200007a0 	.word	0x200007a0
 80102a0:	200007a4 	.word	0x200007a4
 80102a4:	200008a8 	.word	0x200008a8

080102a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80102a8:	b480      	push	{r7}
 80102aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80102ac:	4b07      	ldr	r3, [pc, #28]	; (80102cc <pvTaskIncrementMutexHeldCount+0x24>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d004      	beq.n	80102be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80102b4:	4b05      	ldr	r3, [pc, #20]	; (80102cc <pvTaskIncrementMutexHeldCount+0x24>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80102ba:	3201      	adds	r2, #1
 80102bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80102be:	4b03      	ldr	r3, [pc, #12]	; (80102cc <pvTaskIncrementMutexHeldCount+0x24>)
 80102c0:	681b      	ldr	r3, [r3, #0]
	}
 80102c2:	4618      	mov	r0, r3
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr
 80102cc:	200007a0 	.word	0x200007a0

080102d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80102da:	4b29      	ldr	r3, [pc, #164]	; (8010380 <prvAddCurrentTaskToDelayedList+0xb0>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102e0:	4b28      	ldr	r3, [pc, #160]	; (8010384 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	3304      	adds	r3, #4
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fd ffc4 	bl	800e274 <uxListRemove>
 80102ec:	4603      	mov	r3, r0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10b      	bne.n	801030a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80102f2:	4b24      	ldr	r3, [pc, #144]	; (8010384 <prvAddCurrentTaskToDelayedList+0xb4>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f8:	2201      	movs	r2, #1
 80102fa:	fa02 f303 	lsl.w	r3, r2, r3
 80102fe:	43da      	mvns	r2, r3
 8010300:	4b21      	ldr	r3, [pc, #132]	; (8010388 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4013      	ands	r3, r2
 8010306:	4a20      	ldr	r2, [pc, #128]	; (8010388 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010308:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010310:	d10a      	bne.n	8010328 <prvAddCurrentTaskToDelayedList+0x58>
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d007      	beq.n	8010328 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010318:	4b1a      	ldr	r3, [pc, #104]	; (8010384 <prvAddCurrentTaskToDelayedList+0xb4>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	3304      	adds	r3, #4
 801031e:	4619      	mov	r1, r3
 8010320:	481a      	ldr	r0, [pc, #104]	; (801038c <prvAddCurrentTaskToDelayedList+0xbc>)
 8010322:	f7fd ff4a 	bl	800e1ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010326:	e026      	b.n	8010376 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4413      	add	r3, r2
 801032e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010330:	4b14      	ldr	r3, [pc, #80]	; (8010384 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	68ba      	ldr	r2, [r7, #8]
 8010336:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	429a      	cmp	r2, r3
 801033e:	d209      	bcs.n	8010354 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010340:	4b13      	ldr	r3, [pc, #76]	; (8010390 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	4b0f      	ldr	r3, [pc, #60]	; (8010384 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	3304      	adds	r3, #4
 801034a:	4619      	mov	r1, r3
 801034c:	4610      	mov	r0, r2
 801034e:	f7fd ff58 	bl	800e202 <vListInsert>
}
 8010352:	e010      	b.n	8010376 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010354:	4b0f      	ldr	r3, [pc, #60]	; (8010394 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010356:	681a      	ldr	r2, [r3, #0]
 8010358:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <prvAddCurrentTaskToDelayedList+0xb4>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	3304      	adds	r3, #4
 801035e:	4619      	mov	r1, r3
 8010360:	4610      	mov	r0, r2
 8010362:	f7fd ff4e 	bl	800e202 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010366:	4b0c      	ldr	r3, [pc, #48]	; (8010398 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	429a      	cmp	r2, r3
 801036e:	d202      	bcs.n	8010376 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010370:	4a09      	ldr	r2, [pc, #36]	; (8010398 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	6013      	str	r3, [r2, #0]
}
 8010376:	bf00      	nop
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	200008a4 	.word	0x200008a4
 8010384:	200007a0 	.word	0x200007a0
 8010388:	200008a8 	.word	0x200008a8
 801038c:	2000088c 	.word	0x2000088c
 8010390:	2000085c 	.word	0x2000085c
 8010394:	20000858 	.word	0x20000858
 8010398:	200008c0 	.word	0x200008c0

0801039c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801039c:	b480      	push	{r7}
 801039e:	b085      	sub	sp, #20
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	60f8      	str	r0, [r7, #12]
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	3b04      	subs	r3, #4
 80103ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80103b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	3b04      	subs	r3, #4
 80103ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	f023 0201 	bic.w	r2, r3, #1
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	3b04      	subs	r3, #4
 80103ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80103cc:	4a0c      	ldr	r2, [pc, #48]	; (8010400 <pxPortInitialiseStack+0x64>)
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	3b14      	subs	r3, #20
 80103d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	3b04      	subs	r3, #4
 80103e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f06f 0202 	mvn.w	r2, #2
 80103ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	3b20      	subs	r3, #32
 80103f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80103f2:	68fb      	ldr	r3, [r7, #12]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3714      	adds	r7, #20
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr
 8010400:	08010405 	.word	0x08010405

08010404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010404:	b480      	push	{r7}
 8010406:	b085      	sub	sp, #20
 8010408:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801040a:	2300      	movs	r3, #0
 801040c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801040e:	4b14      	ldr	r3, [pc, #80]	; (8010460 <prvTaskExitError+0x5c>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010416:	d00c      	beq.n	8010432 <prvTaskExitError+0x2e>
	__asm volatile
 8010418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801041c:	b672      	cpsid	i
 801041e:	f383 8811 	msr	BASEPRI, r3
 8010422:	f3bf 8f6f 	isb	sy
 8010426:	f3bf 8f4f 	dsb	sy
 801042a:	b662      	cpsie	i
 801042c:	60fb      	str	r3, [r7, #12]
}
 801042e:	bf00      	nop
 8010430:	e7fe      	b.n	8010430 <prvTaskExitError+0x2c>
	__asm volatile
 8010432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010436:	b672      	cpsid	i
 8010438:	f383 8811 	msr	BASEPRI, r3
 801043c:	f3bf 8f6f 	isb	sy
 8010440:	f3bf 8f4f 	dsb	sy
 8010444:	b662      	cpsie	i
 8010446:	60bb      	str	r3, [r7, #8]
}
 8010448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801044a:	bf00      	nop
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d0fc      	beq.n	801044c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010452:	bf00      	nop
 8010454:	bf00      	nop
 8010456:	3714      	adds	r7, #20
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr
 8010460:	2000001c 	.word	0x2000001c
	...

08010470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010470:	4b07      	ldr	r3, [pc, #28]	; (8010490 <pxCurrentTCBConst2>)
 8010472:	6819      	ldr	r1, [r3, #0]
 8010474:	6808      	ldr	r0, [r1, #0]
 8010476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047a:	f380 8809 	msr	PSP, r0
 801047e:	f3bf 8f6f 	isb	sy
 8010482:	f04f 0000 	mov.w	r0, #0
 8010486:	f380 8811 	msr	BASEPRI, r0
 801048a:	4770      	bx	lr
 801048c:	f3af 8000 	nop.w

08010490 <pxCurrentTCBConst2>:
 8010490:	200007a0 	.word	0x200007a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010494:	bf00      	nop
 8010496:	bf00      	nop

08010498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010498:	4808      	ldr	r0, [pc, #32]	; (80104bc <prvPortStartFirstTask+0x24>)
 801049a:	6800      	ldr	r0, [r0, #0]
 801049c:	6800      	ldr	r0, [r0, #0]
 801049e:	f380 8808 	msr	MSP, r0
 80104a2:	f04f 0000 	mov.w	r0, #0
 80104a6:	f380 8814 	msr	CONTROL, r0
 80104aa:	b662      	cpsie	i
 80104ac:	b661      	cpsie	f
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	f3bf 8f6f 	isb	sy
 80104b6:	df00      	svc	0
 80104b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80104ba:	bf00      	nop
 80104bc:	e000ed08 	.word	0xe000ed08

080104c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80104c6:	4b37      	ldr	r3, [pc, #220]	; (80105a4 <xPortStartScheduler+0xe4>)
 80104c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	22ff      	movs	r2, #255	; 0xff
 80104d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80104e0:	78fb      	ldrb	r3, [r7, #3]
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	4b2f      	ldr	r3, [pc, #188]	; (80105a8 <xPortStartScheduler+0xe8>)
 80104ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80104ee:	4b2f      	ldr	r3, [pc, #188]	; (80105ac <xPortStartScheduler+0xec>)
 80104f0:	2207      	movs	r2, #7
 80104f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104f4:	e009      	b.n	801050a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80104f6:	4b2d      	ldr	r3, [pc, #180]	; (80105ac <xPortStartScheduler+0xec>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	3b01      	subs	r3, #1
 80104fc:	4a2b      	ldr	r2, [pc, #172]	; (80105ac <xPortStartScheduler+0xec>)
 80104fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010500:	78fb      	ldrb	r3, [r7, #3]
 8010502:	b2db      	uxtb	r3, r3
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	b2db      	uxtb	r3, r3
 8010508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801050a:	78fb      	ldrb	r3, [r7, #3]
 801050c:	b2db      	uxtb	r3, r3
 801050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010512:	2b80      	cmp	r3, #128	; 0x80
 8010514:	d0ef      	beq.n	80104f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010516:	4b25      	ldr	r3, [pc, #148]	; (80105ac <xPortStartScheduler+0xec>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f1c3 0307 	rsb	r3, r3, #7
 801051e:	2b04      	cmp	r3, #4
 8010520:	d00c      	beq.n	801053c <xPortStartScheduler+0x7c>
	__asm volatile
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	b672      	cpsid	i
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	b662      	cpsie	i
 8010536:	60bb      	str	r3, [r7, #8]
}
 8010538:	bf00      	nop
 801053a:	e7fe      	b.n	801053a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801053c:	4b1b      	ldr	r3, [pc, #108]	; (80105ac <xPortStartScheduler+0xec>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	021b      	lsls	r3, r3, #8
 8010542:	4a1a      	ldr	r2, [pc, #104]	; (80105ac <xPortStartScheduler+0xec>)
 8010544:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010546:	4b19      	ldr	r3, [pc, #100]	; (80105ac <xPortStartScheduler+0xec>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801054e:	4a17      	ldr	r2, [pc, #92]	; (80105ac <xPortStartScheduler+0xec>)
 8010550:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	b2da      	uxtb	r2, r3
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801055a:	4b15      	ldr	r3, [pc, #84]	; (80105b0 <xPortStartScheduler+0xf0>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a14      	ldr	r2, [pc, #80]	; (80105b0 <xPortStartScheduler+0xf0>)
 8010560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010564:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010566:	4b12      	ldr	r3, [pc, #72]	; (80105b0 <xPortStartScheduler+0xf0>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	4a11      	ldr	r2, [pc, #68]	; (80105b0 <xPortStartScheduler+0xf0>)
 801056c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010570:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010572:	f000 f8dd 	bl	8010730 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010576:	4b0f      	ldr	r3, [pc, #60]	; (80105b4 <xPortStartScheduler+0xf4>)
 8010578:	2200      	movs	r2, #0
 801057a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801057c:	f000 f8fc 	bl	8010778 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010580:	4b0d      	ldr	r3, [pc, #52]	; (80105b8 <xPortStartScheduler+0xf8>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	4a0c      	ldr	r2, [pc, #48]	; (80105b8 <xPortStartScheduler+0xf8>)
 8010586:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801058a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801058c:	f7ff ff84 	bl	8010498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010590:	f7ff fa56 	bl	800fa40 <vTaskSwitchContext>
	prvTaskExitError();
 8010594:	f7ff ff36 	bl	8010404 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	e000e400 	.word	0xe000e400
 80105a8:	200008cc 	.word	0x200008cc
 80105ac:	200008d0 	.word	0x200008d0
 80105b0:	e000ed20 	.word	0xe000ed20
 80105b4:	2000001c 	.word	0x2000001c
 80105b8:	e000ef34 	.word	0xe000ef34

080105bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
	__asm volatile
 80105c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c6:	b672      	cpsid	i
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	b662      	cpsie	i
 80105d6:	607b      	str	r3, [r7, #4]
}
 80105d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80105da:	4b10      	ldr	r3, [pc, #64]	; (801061c <vPortEnterCritical+0x60>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	3301      	adds	r3, #1
 80105e0:	4a0e      	ldr	r2, [pc, #56]	; (801061c <vPortEnterCritical+0x60>)
 80105e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80105e4:	4b0d      	ldr	r3, [pc, #52]	; (801061c <vPortEnterCritical+0x60>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d111      	bne.n	8010610 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80105ec:	4b0c      	ldr	r3, [pc, #48]	; (8010620 <vPortEnterCritical+0x64>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d00c      	beq.n	8010610 <vPortEnterCritical+0x54>
	__asm volatile
 80105f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fa:	b672      	cpsid	i
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	b662      	cpsie	i
 801060a:	603b      	str	r3, [r7, #0]
}
 801060c:	bf00      	nop
 801060e:	e7fe      	b.n	801060e <vPortEnterCritical+0x52>
	}
}
 8010610:	bf00      	nop
 8010612:	370c      	adds	r7, #12
 8010614:	46bd      	mov	sp, r7
 8010616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061a:	4770      	bx	lr
 801061c:	2000001c 	.word	0x2000001c
 8010620:	e000ed04 	.word	0xe000ed04

08010624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010624:	b480      	push	{r7}
 8010626:	b083      	sub	sp, #12
 8010628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801062a:	4b13      	ldr	r3, [pc, #76]	; (8010678 <vPortExitCritical+0x54>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d10c      	bne.n	801064c <vPortExitCritical+0x28>
	__asm volatile
 8010632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010636:	b672      	cpsid	i
 8010638:	f383 8811 	msr	BASEPRI, r3
 801063c:	f3bf 8f6f 	isb	sy
 8010640:	f3bf 8f4f 	dsb	sy
 8010644:	b662      	cpsie	i
 8010646:	607b      	str	r3, [r7, #4]
}
 8010648:	bf00      	nop
 801064a:	e7fe      	b.n	801064a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801064c:	4b0a      	ldr	r3, [pc, #40]	; (8010678 <vPortExitCritical+0x54>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	3b01      	subs	r3, #1
 8010652:	4a09      	ldr	r2, [pc, #36]	; (8010678 <vPortExitCritical+0x54>)
 8010654:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010656:	4b08      	ldr	r3, [pc, #32]	; (8010678 <vPortExitCritical+0x54>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d105      	bne.n	801066a <vPortExitCritical+0x46>
 801065e:	2300      	movs	r3, #0
 8010660:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	f383 8811 	msr	BASEPRI, r3
}
 8010668:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801066a:	bf00      	nop
 801066c:	370c      	adds	r7, #12
 801066e:	46bd      	mov	sp, r7
 8010670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010674:	4770      	bx	lr
 8010676:	bf00      	nop
 8010678:	2000001c 	.word	0x2000001c
 801067c:	00000000 	.word	0x00000000

08010680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010680:	f3ef 8009 	mrs	r0, PSP
 8010684:	f3bf 8f6f 	isb	sy
 8010688:	4b15      	ldr	r3, [pc, #84]	; (80106e0 <pxCurrentTCBConst>)
 801068a:	681a      	ldr	r2, [r3, #0]
 801068c:	f01e 0f10 	tst.w	lr, #16
 8010690:	bf08      	it	eq
 8010692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801069a:	6010      	str	r0, [r2, #0]
 801069c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80106a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80106a4:	b672      	cpsid	i
 80106a6:	f380 8811 	msr	BASEPRI, r0
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	b662      	cpsie	i
 80106b4:	f7ff f9c4 	bl	800fa40 <vTaskSwitchContext>
 80106b8:	f04f 0000 	mov.w	r0, #0
 80106bc:	f380 8811 	msr	BASEPRI, r0
 80106c0:	bc09      	pop	{r0, r3}
 80106c2:	6819      	ldr	r1, [r3, #0]
 80106c4:	6808      	ldr	r0, [r1, #0]
 80106c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ca:	f01e 0f10 	tst.w	lr, #16
 80106ce:	bf08      	it	eq
 80106d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80106d4:	f380 8809 	msr	PSP, r0
 80106d8:	f3bf 8f6f 	isb	sy
 80106dc:	4770      	bx	lr
 80106de:	bf00      	nop

080106e0 <pxCurrentTCBConst>:
 80106e0:	200007a0 	.word	0x200007a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80106e4:	bf00      	nop
 80106e6:	bf00      	nop

080106e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
	__asm volatile
 80106ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f2:	b672      	cpsid	i
 80106f4:	f383 8811 	msr	BASEPRI, r3
 80106f8:	f3bf 8f6f 	isb	sy
 80106fc:	f3bf 8f4f 	dsb	sy
 8010700:	b662      	cpsie	i
 8010702:	607b      	str	r3, [r7, #4]
}
 8010704:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010706:	f7ff f8e1 	bl	800f8cc <xTaskIncrementTick>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d003      	beq.n	8010718 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010710:	4b06      	ldr	r3, [pc, #24]	; (801072c <xPortSysTickHandler+0x44>)
 8010712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010716:	601a      	str	r2, [r3, #0]
 8010718:	2300      	movs	r3, #0
 801071a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	f383 8811 	msr	BASEPRI, r3
}
 8010722:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010724:	bf00      	nop
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	e000ed04 	.word	0xe000ed04

08010730 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010730:	b480      	push	{r7}
 8010732:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010734:	4b0b      	ldr	r3, [pc, #44]	; (8010764 <vPortSetupTimerInterrupt+0x34>)
 8010736:	2200      	movs	r2, #0
 8010738:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801073a:	4b0b      	ldr	r3, [pc, #44]	; (8010768 <vPortSetupTimerInterrupt+0x38>)
 801073c:	2200      	movs	r2, #0
 801073e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <vPortSetupTimerInterrupt+0x3c>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4a0a      	ldr	r2, [pc, #40]	; (8010770 <vPortSetupTimerInterrupt+0x40>)
 8010746:	fba2 2303 	umull	r2, r3, r2, r3
 801074a:	099b      	lsrs	r3, r3, #6
 801074c:	4a09      	ldr	r2, [pc, #36]	; (8010774 <vPortSetupTimerInterrupt+0x44>)
 801074e:	3b01      	subs	r3, #1
 8010750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010752:	4b04      	ldr	r3, [pc, #16]	; (8010764 <vPortSetupTimerInterrupt+0x34>)
 8010754:	2207      	movs	r2, #7
 8010756:	601a      	str	r2, [r3, #0]
}
 8010758:	bf00      	nop
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	e000e010 	.word	0xe000e010
 8010768:	e000e018 	.word	0xe000e018
 801076c:	20000004 	.word	0x20000004
 8010770:	10624dd3 	.word	0x10624dd3
 8010774:	e000e014 	.word	0xe000e014

08010778 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010778:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010788 <vPortEnableVFP+0x10>
 801077c:	6801      	ldr	r1, [r0, #0]
 801077e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010782:	6001      	str	r1, [r0, #0]
 8010784:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010786:	bf00      	nop
 8010788:	e000ed88 	.word	0xe000ed88

0801078c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801078c:	b480      	push	{r7}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010792:	f3ef 8305 	mrs	r3, IPSR
 8010796:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2b0f      	cmp	r3, #15
 801079c:	d916      	bls.n	80107cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801079e:	4a19      	ldr	r2, [pc, #100]	; (8010804 <vPortValidateInterruptPriority+0x78>)
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	4413      	add	r3, r2
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80107a8:	4b17      	ldr	r3, [pc, #92]	; (8010808 <vPortValidateInterruptPriority+0x7c>)
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	7afa      	ldrb	r2, [r7, #11]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d20c      	bcs.n	80107cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80107b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b6:	b672      	cpsid	i
 80107b8:	f383 8811 	msr	BASEPRI, r3
 80107bc:	f3bf 8f6f 	isb	sy
 80107c0:	f3bf 8f4f 	dsb	sy
 80107c4:	b662      	cpsie	i
 80107c6:	607b      	str	r3, [r7, #4]
}
 80107c8:	bf00      	nop
 80107ca:	e7fe      	b.n	80107ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80107cc:	4b0f      	ldr	r3, [pc, #60]	; (801080c <vPortValidateInterruptPriority+0x80>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80107d4:	4b0e      	ldr	r3, [pc, #56]	; (8010810 <vPortValidateInterruptPriority+0x84>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d90c      	bls.n	80107f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80107dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e0:	b672      	cpsid	i
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	b662      	cpsie	i
 80107f0:	603b      	str	r3, [r7, #0]
}
 80107f2:	bf00      	nop
 80107f4:	e7fe      	b.n	80107f4 <vPortValidateInterruptPriority+0x68>
	}
 80107f6:	bf00      	nop
 80107f8:	3714      	adds	r7, #20
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	e000e3f0 	.word	0xe000e3f0
 8010808:	200008cc 	.word	0x200008cc
 801080c:	e000ed0c 	.word	0xe000ed0c
 8010810:	200008d0 	.word	0x200008d0

08010814 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 8010814:	b580      	push	{r7, lr}
 8010816:	b084      	sub	sp, #16
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 801081e:	4b24      	ldr	r3, [pc, #144]	; (80108b0 <_sbrk_r+0x9c>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d10e      	bne.n	8010844 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 8010826:	4a23      	ldr	r2, [pc, #140]	; (80108b4 <_sbrk_r+0xa0>)
 8010828:	4b23      	ldr	r3, [pc, #140]	; (80108b8 <_sbrk_r+0xa4>)
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8010830:	4a22      	ldr	r2, [pc, #136]	; (80108bc <_sbrk_r+0xa8>)
 8010832:	6013      	str	r3, [r2, #0]
 8010834:	4a1f      	ldr	r2, [pc, #124]	; (80108b4 <_sbrk_r+0xa0>)
 8010836:	4b20      	ldr	r3, [pc, #128]	; (80108b8 <_sbrk_r+0xa4>)
 8010838:	1ad3      	subs	r3, r2, r3
 801083a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801083e:	461a      	mov	r2, r3
 8010840:	4b1b      	ldr	r3, [pc, #108]	; (80108b0 <_sbrk_r+0x9c>)
 8010842:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8010844:	f7ff fb6a 	bl	800ff1c <xTaskGetSchedulerState>
 8010848:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 801084a:	2b01      	cmp	r3, #1
 801084c:	d101      	bne.n	8010852 <_sbrk_r+0x3e>
 801084e:	466b      	mov	r3, sp
 8010850:	e000      	b.n	8010854 <_sbrk_r+0x40>
 8010852:	4b1b      	ldr	r3, [pc, #108]	; (80108c0 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 8010854:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 8010856:	f7fe ff6b 	bl	800f730 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 801085a:	4b1a      	ldr	r3, [pc, #104]	; (80108c4 <_sbrk_r+0xb0>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 8010860:	4b18      	ldr	r3, [pc, #96]	; (80108c4 <_sbrk_r+0xb0>)
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	4413      	add	r3, r2
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	429a      	cmp	r2, r3
 801086c:	d206      	bcs.n	801087c <_sbrk_r+0x68>
        // Ooops, no more memory available...
        #if( configUSE_MALLOC_FAILED_HOOK == 1 )
          {
            extern void vApplicationMallocFailedHook( void );
            DRN_EXIT_CRITICAL_SECTION(usis);
 801086e:	f7fe ff6d 	bl	800f74c <xTaskResumeAll>
            vApplicationMallocFailedHook();
 8010872:	f7ef feab 	bl	80005cc <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 8010876:	f04f 33ff 	mov.w	r3, #4294967295
 801087a:	e014      	b.n	80108a6 <_sbrk_r+0x92>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 801087c:	4b11      	ldr	r3, [pc, #68]	; (80108c4 <_sbrk_r+0xb0>)
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	4413      	add	r3, r2
 8010884:	4a0f      	ldr	r2, [pc, #60]	; (80108c4 <_sbrk_r+0xb0>)
 8010886:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8010888:	4b0c      	ldr	r3, [pc, #48]	; (80108bc <_sbrk_r+0xa8>)
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	4a0a      	ldr	r2, [pc, #40]	; (80108bc <_sbrk_r+0xa8>)
 8010892:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 8010894:	4b0c      	ldr	r3, [pc, #48]	; (80108c8 <_sbrk_r+0xb4>)
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	4413      	add	r3, r2
 801089c:	4a0a      	ldr	r2, [pc, #40]	; (80108c8 <_sbrk_r+0xb4>)
 801089e:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 80108a0:	f7fe ff54 	bl	800f74c <xTaskResumeAll>
    return (char *) previousHeapEnd;
 80108a4:	68bb      	ldr	r3, [r7, #8]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	20004d14 	.word	0x20004d14
 80108b4:	20050000 	.word	0x20050000
 80108b8:	20004d30 	.word	0x20004d30
 80108bc:	200008d4 	.word	0x200008d4
 80108c0:	2004fe00 	.word	0x2004fe00
 80108c4:	20000020 	.word	0x20000020
 80108c8:	200008d8 	.word	0x200008d8

080108cc <__malloc_lock>:
//char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b086      	sub	sp, #24
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80108d4:	f3ef 8305 	mrs	r3, IPSR
 80108d8:	613b      	str	r3, [r7, #16]
	if( ulCurrentInterrupt == 0 )
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d102      	bne.n	80108e6 <__malloc_lock+0x1a>
		xReturn = pdFALSE;
 80108e0:	2300      	movs	r3, #0
 80108e2:	60fb      	str	r3, [r7, #12]
 80108e4:	e001      	b.n	80108ea <__malloc_lock+0x1e>
		xReturn = pdTRUE;
 80108e6:	2301      	movs	r3, #1
 80108e8:	60fb      	str	r3, [r7, #12]
	return xReturn;
 80108ea:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	bf14      	ite	ne
 80108f0:	2301      	movne	r3, #1
 80108f2:	2300      	moveq	r3, #0
 80108f4:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 80108f6:	7dfb      	ldrb	r3, [r7, #23]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d00c      	beq.n	8010916 <__malloc_lock+0x4a>
	__asm volatile
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	b672      	cpsid	i
 8010902:	f383 8811 	msr	BASEPRI, r3
 8010906:	f3bf 8f6f 	isb	sy
 801090a:	f3bf 8f4f 	dsb	sy
 801090e:	b662      	cpsie	i
 8010910:	60bb      	str	r3, [r7, #8]
}
 8010912:	bf00      	nop
 8010914:	e7fe      	b.n	8010914 <__malloc_lock+0x48>
    vTaskSuspendAll();
 8010916:	f7fe ff0b 	bl	800f730 <vTaskSuspendAll>
  #endif
};
 801091a:	bf00      	nop
 801091c:	3718      	adds	r7, #24
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 8010922:	b580      	push	{r7, lr}
 8010924:	b082      	sub	sp, #8
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 801092a:	f7fe ff0f 	bl	800f74c <xTaskResumeAll>
  #endif
};
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 8010936:	b580      	push	{r7, lr}
 8010938:	b084      	sub	sp, #16
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f000 f836 	bl	80109b0 <malloc>
 8010944:	4603      	mov	r3, r0
 8010946:	60fb      	str	r3, [r7, #12]
    return p;
 8010948:	68fb      	ldr	r3, [r7, #12]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3710      	adds	r7, #16
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 8010952:	b580      	push	{r7, lr}
 8010954:	b082      	sub	sp, #8
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
    free(pv);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 f830 	bl	80109c0 <free>
};
 8010960:	bf00      	nop
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <__libc_init_array>:
 8010968:	b570      	push	{r4, r5, r6, lr}
 801096a:	4d0d      	ldr	r5, [pc, #52]	; (80109a0 <__libc_init_array+0x38>)
 801096c:	4c0d      	ldr	r4, [pc, #52]	; (80109a4 <__libc_init_array+0x3c>)
 801096e:	1b64      	subs	r4, r4, r5
 8010970:	10a4      	asrs	r4, r4, #2
 8010972:	2600      	movs	r6, #0
 8010974:	42a6      	cmp	r6, r4
 8010976:	d109      	bne.n	801098c <__libc_init_array+0x24>
 8010978:	4d0b      	ldr	r5, [pc, #44]	; (80109a8 <__libc_init_array+0x40>)
 801097a:	4c0c      	ldr	r4, [pc, #48]	; (80109ac <__libc_init_array+0x44>)
 801097c:	f001 f854 	bl	8011a28 <_init>
 8010980:	1b64      	subs	r4, r4, r5
 8010982:	10a4      	asrs	r4, r4, #2
 8010984:	2600      	movs	r6, #0
 8010986:	42a6      	cmp	r6, r4
 8010988:	d105      	bne.n	8010996 <__libc_init_array+0x2e>
 801098a:	bd70      	pop	{r4, r5, r6, pc}
 801098c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010990:	4798      	blx	r3
 8010992:	3601      	adds	r6, #1
 8010994:	e7ee      	b.n	8010974 <__libc_init_array+0xc>
 8010996:	f855 3b04 	ldr.w	r3, [r5], #4
 801099a:	4798      	blx	r3
 801099c:	3601      	adds	r6, #1
 801099e:	e7f2      	b.n	8010986 <__libc_init_array+0x1e>
 80109a0:	08013b14 	.word	0x08013b14
 80109a4:	08013b14 	.word	0x08013b14
 80109a8:	08013b14 	.word	0x08013b14
 80109ac:	08013b18 	.word	0x08013b18

080109b0 <malloc>:
 80109b0:	4b02      	ldr	r3, [pc, #8]	; (80109bc <malloc+0xc>)
 80109b2:	4601      	mov	r1, r0
 80109b4:	6818      	ldr	r0, [r3, #0]
 80109b6:	f000 b871 	b.w	8010a9c <_malloc_r>
 80109ba:	bf00      	nop
 80109bc:	20000024 	.word	0x20000024

080109c0 <free>:
 80109c0:	4b02      	ldr	r3, [pc, #8]	; (80109cc <free+0xc>)
 80109c2:	4601      	mov	r1, r0
 80109c4:	6818      	ldr	r0, [r3, #0]
 80109c6:	f000 b819 	b.w	80109fc <_free_r>
 80109ca:	bf00      	nop
 80109cc:	20000024 	.word	0x20000024

080109d0 <memcpy>:
 80109d0:	440a      	add	r2, r1
 80109d2:	4291      	cmp	r1, r2
 80109d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80109d8:	d100      	bne.n	80109dc <memcpy+0xc>
 80109da:	4770      	bx	lr
 80109dc:	b510      	push	{r4, lr}
 80109de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109e6:	4291      	cmp	r1, r2
 80109e8:	d1f9      	bne.n	80109de <memcpy+0xe>
 80109ea:	bd10      	pop	{r4, pc}

080109ec <memset>:
 80109ec:	4402      	add	r2, r0
 80109ee:	4603      	mov	r3, r0
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d100      	bne.n	80109f6 <memset+0xa>
 80109f4:	4770      	bx	lr
 80109f6:	f803 1b01 	strb.w	r1, [r3], #1
 80109fa:	e7f9      	b.n	80109f0 <memset+0x4>

080109fc <_free_r>:
 80109fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80109fe:	2900      	cmp	r1, #0
 8010a00:	d048      	beq.n	8010a94 <_free_r+0x98>
 8010a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a06:	9001      	str	r0, [sp, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8010a0e:	bfb8      	it	lt
 8010a10:	18e4      	addlt	r4, r4, r3
 8010a12:	f7ff ff5b 	bl	80108cc <__malloc_lock>
 8010a16:	4a20      	ldr	r2, [pc, #128]	; (8010a98 <_free_r+0x9c>)
 8010a18:	9801      	ldr	r0, [sp, #4]
 8010a1a:	6813      	ldr	r3, [r2, #0]
 8010a1c:	4615      	mov	r5, r2
 8010a1e:	b933      	cbnz	r3, 8010a2e <_free_r+0x32>
 8010a20:	6063      	str	r3, [r4, #4]
 8010a22:	6014      	str	r4, [r2, #0]
 8010a24:	b003      	add	sp, #12
 8010a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a2a:	f7ff bf7a 	b.w	8010922 <__malloc_unlock>
 8010a2e:	42a3      	cmp	r3, r4
 8010a30:	d90b      	bls.n	8010a4a <_free_r+0x4e>
 8010a32:	6821      	ldr	r1, [r4, #0]
 8010a34:	1862      	adds	r2, r4, r1
 8010a36:	4293      	cmp	r3, r2
 8010a38:	bf04      	itt	eq
 8010a3a:	681a      	ldreq	r2, [r3, #0]
 8010a3c:	685b      	ldreq	r3, [r3, #4]
 8010a3e:	6063      	str	r3, [r4, #4]
 8010a40:	bf04      	itt	eq
 8010a42:	1852      	addeq	r2, r2, r1
 8010a44:	6022      	streq	r2, [r4, #0]
 8010a46:	602c      	str	r4, [r5, #0]
 8010a48:	e7ec      	b.n	8010a24 <_free_r+0x28>
 8010a4a:	461a      	mov	r2, r3
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	b10b      	cbz	r3, 8010a54 <_free_r+0x58>
 8010a50:	42a3      	cmp	r3, r4
 8010a52:	d9fa      	bls.n	8010a4a <_free_r+0x4e>
 8010a54:	6811      	ldr	r1, [r2, #0]
 8010a56:	1855      	adds	r5, r2, r1
 8010a58:	42a5      	cmp	r5, r4
 8010a5a:	d10b      	bne.n	8010a74 <_free_r+0x78>
 8010a5c:	6824      	ldr	r4, [r4, #0]
 8010a5e:	4421      	add	r1, r4
 8010a60:	1854      	adds	r4, r2, r1
 8010a62:	42a3      	cmp	r3, r4
 8010a64:	6011      	str	r1, [r2, #0]
 8010a66:	d1dd      	bne.n	8010a24 <_free_r+0x28>
 8010a68:	681c      	ldr	r4, [r3, #0]
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	6053      	str	r3, [r2, #4]
 8010a6e:	4421      	add	r1, r4
 8010a70:	6011      	str	r1, [r2, #0]
 8010a72:	e7d7      	b.n	8010a24 <_free_r+0x28>
 8010a74:	d902      	bls.n	8010a7c <_free_r+0x80>
 8010a76:	230c      	movs	r3, #12
 8010a78:	6003      	str	r3, [r0, #0]
 8010a7a:	e7d3      	b.n	8010a24 <_free_r+0x28>
 8010a7c:	6825      	ldr	r5, [r4, #0]
 8010a7e:	1961      	adds	r1, r4, r5
 8010a80:	428b      	cmp	r3, r1
 8010a82:	bf04      	itt	eq
 8010a84:	6819      	ldreq	r1, [r3, #0]
 8010a86:	685b      	ldreq	r3, [r3, #4]
 8010a88:	6063      	str	r3, [r4, #4]
 8010a8a:	bf04      	itt	eq
 8010a8c:	1949      	addeq	r1, r1, r5
 8010a8e:	6021      	streq	r1, [r4, #0]
 8010a90:	6054      	str	r4, [r2, #4]
 8010a92:	e7c7      	b.n	8010a24 <_free_r+0x28>
 8010a94:	b003      	add	sp, #12
 8010a96:	bd30      	pop	{r4, r5, pc}
 8010a98:	200008dc 	.word	0x200008dc

08010a9c <_malloc_r>:
 8010a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a9e:	1ccd      	adds	r5, r1, #3
 8010aa0:	f025 0503 	bic.w	r5, r5, #3
 8010aa4:	3508      	adds	r5, #8
 8010aa6:	2d0c      	cmp	r5, #12
 8010aa8:	bf38      	it	cc
 8010aaa:	250c      	movcc	r5, #12
 8010aac:	2d00      	cmp	r5, #0
 8010aae:	4606      	mov	r6, r0
 8010ab0:	db01      	blt.n	8010ab6 <_malloc_r+0x1a>
 8010ab2:	42a9      	cmp	r1, r5
 8010ab4:	d903      	bls.n	8010abe <_malloc_r+0x22>
 8010ab6:	230c      	movs	r3, #12
 8010ab8:	6033      	str	r3, [r6, #0]
 8010aba:	2000      	movs	r0, #0
 8010abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010abe:	f7ff ff05 	bl	80108cc <__malloc_lock>
 8010ac2:	4921      	ldr	r1, [pc, #132]	; (8010b48 <_malloc_r+0xac>)
 8010ac4:	680a      	ldr	r2, [r1, #0]
 8010ac6:	4614      	mov	r4, r2
 8010ac8:	b99c      	cbnz	r4, 8010af2 <_malloc_r+0x56>
 8010aca:	4f20      	ldr	r7, [pc, #128]	; (8010b4c <_malloc_r+0xb0>)
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	b923      	cbnz	r3, 8010ada <_malloc_r+0x3e>
 8010ad0:	4621      	mov	r1, r4
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f7ff fe9e 	bl	8010814 <_sbrk_r>
 8010ad8:	6038      	str	r0, [r7, #0]
 8010ada:	4629      	mov	r1, r5
 8010adc:	4630      	mov	r0, r6
 8010ade:	f7ff fe99 	bl	8010814 <_sbrk_r>
 8010ae2:	1c43      	adds	r3, r0, #1
 8010ae4:	d123      	bne.n	8010b2e <_malloc_r+0x92>
 8010ae6:	230c      	movs	r3, #12
 8010ae8:	6033      	str	r3, [r6, #0]
 8010aea:	4630      	mov	r0, r6
 8010aec:	f7ff ff19 	bl	8010922 <__malloc_unlock>
 8010af0:	e7e3      	b.n	8010aba <_malloc_r+0x1e>
 8010af2:	6823      	ldr	r3, [r4, #0]
 8010af4:	1b5b      	subs	r3, r3, r5
 8010af6:	d417      	bmi.n	8010b28 <_malloc_r+0x8c>
 8010af8:	2b0b      	cmp	r3, #11
 8010afa:	d903      	bls.n	8010b04 <_malloc_r+0x68>
 8010afc:	6023      	str	r3, [r4, #0]
 8010afe:	441c      	add	r4, r3
 8010b00:	6025      	str	r5, [r4, #0]
 8010b02:	e004      	b.n	8010b0e <_malloc_r+0x72>
 8010b04:	6863      	ldr	r3, [r4, #4]
 8010b06:	42a2      	cmp	r2, r4
 8010b08:	bf0c      	ite	eq
 8010b0a:	600b      	streq	r3, [r1, #0]
 8010b0c:	6053      	strne	r3, [r2, #4]
 8010b0e:	4630      	mov	r0, r6
 8010b10:	f7ff ff07 	bl	8010922 <__malloc_unlock>
 8010b14:	f104 000b 	add.w	r0, r4, #11
 8010b18:	1d23      	adds	r3, r4, #4
 8010b1a:	f020 0007 	bic.w	r0, r0, #7
 8010b1e:	1ac2      	subs	r2, r0, r3
 8010b20:	d0cc      	beq.n	8010abc <_malloc_r+0x20>
 8010b22:	1a1b      	subs	r3, r3, r0
 8010b24:	50a3      	str	r3, [r4, r2]
 8010b26:	e7c9      	b.n	8010abc <_malloc_r+0x20>
 8010b28:	4622      	mov	r2, r4
 8010b2a:	6864      	ldr	r4, [r4, #4]
 8010b2c:	e7cc      	b.n	8010ac8 <_malloc_r+0x2c>
 8010b2e:	1cc4      	adds	r4, r0, #3
 8010b30:	f024 0403 	bic.w	r4, r4, #3
 8010b34:	42a0      	cmp	r0, r4
 8010b36:	d0e3      	beq.n	8010b00 <_malloc_r+0x64>
 8010b38:	1a21      	subs	r1, r4, r0
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	f7ff fe6a 	bl	8010814 <_sbrk_r>
 8010b40:	3001      	adds	r0, #1
 8010b42:	d1dd      	bne.n	8010b00 <_malloc_r+0x64>
 8010b44:	e7cf      	b.n	8010ae6 <_malloc_r+0x4a>
 8010b46:	bf00      	nop
 8010b48:	200008dc 	.word	0x200008dc
 8010b4c:	200008e0 	.word	0x200008e0

08010b50 <_puts_r>:
 8010b50:	b570      	push	{r4, r5, r6, lr}
 8010b52:	460e      	mov	r6, r1
 8010b54:	4605      	mov	r5, r0
 8010b56:	b118      	cbz	r0, 8010b60 <_puts_r+0x10>
 8010b58:	6983      	ldr	r3, [r0, #24]
 8010b5a:	b90b      	cbnz	r3, 8010b60 <_puts_r+0x10>
 8010b5c:	f000 fa7c 	bl	8011058 <__sinit>
 8010b60:	69ab      	ldr	r3, [r5, #24]
 8010b62:	68ac      	ldr	r4, [r5, #8]
 8010b64:	b913      	cbnz	r3, 8010b6c <_puts_r+0x1c>
 8010b66:	4628      	mov	r0, r5
 8010b68:	f000 fa76 	bl	8011058 <__sinit>
 8010b6c:	4b2c      	ldr	r3, [pc, #176]	; (8010c20 <_puts_r+0xd0>)
 8010b6e:	429c      	cmp	r4, r3
 8010b70:	d120      	bne.n	8010bb4 <_puts_r+0x64>
 8010b72:	686c      	ldr	r4, [r5, #4]
 8010b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b76:	07db      	lsls	r3, r3, #31
 8010b78:	d405      	bmi.n	8010b86 <_puts_r+0x36>
 8010b7a:	89a3      	ldrh	r3, [r4, #12]
 8010b7c:	0598      	lsls	r0, r3, #22
 8010b7e:	d402      	bmi.n	8010b86 <_puts_r+0x36>
 8010b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b82:	f000 fb07 	bl	8011194 <__retarget_lock_acquire_recursive>
 8010b86:	89a3      	ldrh	r3, [r4, #12]
 8010b88:	0719      	lsls	r1, r3, #28
 8010b8a:	d51d      	bpl.n	8010bc8 <_puts_r+0x78>
 8010b8c:	6923      	ldr	r3, [r4, #16]
 8010b8e:	b1db      	cbz	r3, 8010bc8 <_puts_r+0x78>
 8010b90:	3e01      	subs	r6, #1
 8010b92:	68a3      	ldr	r3, [r4, #8]
 8010b94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010b98:	3b01      	subs	r3, #1
 8010b9a:	60a3      	str	r3, [r4, #8]
 8010b9c:	bb39      	cbnz	r1, 8010bee <_puts_r+0x9e>
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	da38      	bge.n	8010c14 <_puts_r+0xc4>
 8010ba2:	4622      	mov	r2, r4
 8010ba4:	210a      	movs	r1, #10
 8010ba6:	4628      	mov	r0, r5
 8010ba8:	f000 f87c 	bl	8010ca4 <__swbuf_r>
 8010bac:	3001      	adds	r0, #1
 8010bae:	d011      	beq.n	8010bd4 <_puts_r+0x84>
 8010bb0:	250a      	movs	r5, #10
 8010bb2:	e011      	b.n	8010bd8 <_puts_r+0x88>
 8010bb4:	4b1b      	ldr	r3, [pc, #108]	; (8010c24 <_puts_r+0xd4>)
 8010bb6:	429c      	cmp	r4, r3
 8010bb8:	d101      	bne.n	8010bbe <_puts_r+0x6e>
 8010bba:	68ac      	ldr	r4, [r5, #8]
 8010bbc:	e7da      	b.n	8010b74 <_puts_r+0x24>
 8010bbe:	4b1a      	ldr	r3, [pc, #104]	; (8010c28 <_puts_r+0xd8>)
 8010bc0:	429c      	cmp	r4, r3
 8010bc2:	bf08      	it	eq
 8010bc4:	68ec      	ldreq	r4, [r5, #12]
 8010bc6:	e7d5      	b.n	8010b74 <_puts_r+0x24>
 8010bc8:	4621      	mov	r1, r4
 8010bca:	4628      	mov	r0, r5
 8010bcc:	f000 f8bc 	bl	8010d48 <__swsetup_r>
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d0dd      	beq.n	8010b90 <_puts_r+0x40>
 8010bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8010bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bda:	07da      	lsls	r2, r3, #31
 8010bdc:	d405      	bmi.n	8010bea <_puts_r+0x9a>
 8010bde:	89a3      	ldrh	r3, [r4, #12]
 8010be0:	059b      	lsls	r3, r3, #22
 8010be2:	d402      	bmi.n	8010bea <_puts_r+0x9a>
 8010be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010be6:	f000 fad6 	bl	8011196 <__retarget_lock_release_recursive>
 8010bea:	4628      	mov	r0, r5
 8010bec:	bd70      	pop	{r4, r5, r6, pc}
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	da04      	bge.n	8010bfc <_puts_r+0xac>
 8010bf2:	69a2      	ldr	r2, [r4, #24]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	dc06      	bgt.n	8010c06 <_puts_r+0xb6>
 8010bf8:	290a      	cmp	r1, #10
 8010bfa:	d004      	beq.n	8010c06 <_puts_r+0xb6>
 8010bfc:	6823      	ldr	r3, [r4, #0]
 8010bfe:	1c5a      	adds	r2, r3, #1
 8010c00:	6022      	str	r2, [r4, #0]
 8010c02:	7019      	strb	r1, [r3, #0]
 8010c04:	e7c5      	b.n	8010b92 <_puts_r+0x42>
 8010c06:	4622      	mov	r2, r4
 8010c08:	4628      	mov	r0, r5
 8010c0a:	f000 f84b 	bl	8010ca4 <__swbuf_r>
 8010c0e:	3001      	adds	r0, #1
 8010c10:	d1bf      	bne.n	8010b92 <_puts_r+0x42>
 8010c12:	e7df      	b.n	8010bd4 <_puts_r+0x84>
 8010c14:	6823      	ldr	r3, [r4, #0]
 8010c16:	250a      	movs	r5, #10
 8010c18:	1c5a      	adds	r2, r3, #1
 8010c1a:	6022      	str	r2, [r4, #0]
 8010c1c:	701d      	strb	r5, [r3, #0]
 8010c1e:	e7db      	b.n	8010bd8 <_puts_r+0x88>
 8010c20:	08013a98 	.word	0x08013a98
 8010c24:	08013ab8 	.word	0x08013ab8
 8010c28:	08013a78 	.word	0x08013a78

08010c2c <puts>:
 8010c2c:	4b02      	ldr	r3, [pc, #8]	; (8010c38 <puts+0xc>)
 8010c2e:	4601      	mov	r1, r0
 8010c30:	6818      	ldr	r0, [r3, #0]
 8010c32:	f7ff bf8d 	b.w	8010b50 <_puts_r>
 8010c36:	bf00      	nop
 8010c38:	20000024 	.word	0x20000024

08010c3c <sniprintf>:
 8010c3c:	b40c      	push	{r2, r3}
 8010c3e:	b530      	push	{r4, r5, lr}
 8010c40:	4b17      	ldr	r3, [pc, #92]	; (8010ca0 <sniprintf+0x64>)
 8010c42:	1e0c      	subs	r4, r1, #0
 8010c44:	681d      	ldr	r5, [r3, #0]
 8010c46:	b09d      	sub	sp, #116	; 0x74
 8010c48:	da08      	bge.n	8010c5c <sniprintf+0x20>
 8010c4a:	238b      	movs	r3, #139	; 0x8b
 8010c4c:	602b      	str	r3, [r5, #0]
 8010c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c52:	b01d      	add	sp, #116	; 0x74
 8010c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c58:	b002      	add	sp, #8
 8010c5a:	4770      	bx	lr
 8010c5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010c60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010c64:	bf14      	ite	ne
 8010c66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010c6a:	4623      	moveq	r3, r4
 8010c6c:	9304      	str	r3, [sp, #16]
 8010c6e:	9307      	str	r3, [sp, #28]
 8010c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010c74:	9002      	str	r0, [sp, #8]
 8010c76:	9006      	str	r0, [sp, #24]
 8010c78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010c7e:	ab21      	add	r3, sp, #132	; 0x84
 8010c80:	a902      	add	r1, sp, #8
 8010c82:	4628      	mov	r0, r5
 8010c84:	9301      	str	r3, [sp, #4]
 8010c86:	f000 fb47 	bl	8011318 <_svfiprintf_r>
 8010c8a:	1c43      	adds	r3, r0, #1
 8010c8c:	bfbc      	itt	lt
 8010c8e:	238b      	movlt	r3, #139	; 0x8b
 8010c90:	602b      	strlt	r3, [r5, #0]
 8010c92:	2c00      	cmp	r4, #0
 8010c94:	d0dd      	beq.n	8010c52 <sniprintf+0x16>
 8010c96:	9b02      	ldr	r3, [sp, #8]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	701a      	strb	r2, [r3, #0]
 8010c9c:	e7d9      	b.n	8010c52 <sniprintf+0x16>
 8010c9e:	bf00      	nop
 8010ca0:	20000024 	.word	0x20000024

08010ca4 <__swbuf_r>:
 8010ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca6:	460e      	mov	r6, r1
 8010ca8:	4614      	mov	r4, r2
 8010caa:	4605      	mov	r5, r0
 8010cac:	b118      	cbz	r0, 8010cb6 <__swbuf_r+0x12>
 8010cae:	6983      	ldr	r3, [r0, #24]
 8010cb0:	b90b      	cbnz	r3, 8010cb6 <__swbuf_r+0x12>
 8010cb2:	f000 f9d1 	bl	8011058 <__sinit>
 8010cb6:	4b21      	ldr	r3, [pc, #132]	; (8010d3c <__swbuf_r+0x98>)
 8010cb8:	429c      	cmp	r4, r3
 8010cba:	d12b      	bne.n	8010d14 <__swbuf_r+0x70>
 8010cbc:	686c      	ldr	r4, [r5, #4]
 8010cbe:	69a3      	ldr	r3, [r4, #24]
 8010cc0:	60a3      	str	r3, [r4, #8]
 8010cc2:	89a3      	ldrh	r3, [r4, #12]
 8010cc4:	071a      	lsls	r2, r3, #28
 8010cc6:	d52f      	bpl.n	8010d28 <__swbuf_r+0x84>
 8010cc8:	6923      	ldr	r3, [r4, #16]
 8010cca:	b36b      	cbz	r3, 8010d28 <__swbuf_r+0x84>
 8010ccc:	6923      	ldr	r3, [r4, #16]
 8010cce:	6820      	ldr	r0, [r4, #0]
 8010cd0:	1ac0      	subs	r0, r0, r3
 8010cd2:	6963      	ldr	r3, [r4, #20]
 8010cd4:	b2f6      	uxtb	r6, r6
 8010cd6:	4283      	cmp	r3, r0
 8010cd8:	4637      	mov	r7, r6
 8010cda:	dc04      	bgt.n	8010ce6 <__swbuf_r+0x42>
 8010cdc:	4621      	mov	r1, r4
 8010cde:	4628      	mov	r0, r5
 8010ce0:	f000 f926 	bl	8010f30 <_fflush_r>
 8010ce4:	bb30      	cbnz	r0, 8010d34 <__swbuf_r+0x90>
 8010ce6:	68a3      	ldr	r3, [r4, #8]
 8010ce8:	3b01      	subs	r3, #1
 8010cea:	60a3      	str	r3, [r4, #8]
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	1c5a      	adds	r2, r3, #1
 8010cf0:	6022      	str	r2, [r4, #0]
 8010cf2:	701e      	strb	r6, [r3, #0]
 8010cf4:	6963      	ldr	r3, [r4, #20]
 8010cf6:	3001      	adds	r0, #1
 8010cf8:	4283      	cmp	r3, r0
 8010cfa:	d004      	beq.n	8010d06 <__swbuf_r+0x62>
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	07db      	lsls	r3, r3, #31
 8010d00:	d506      	bpl.n	8010d10 <__swbuf_r+0x6c>
 8010d02:	2e0a      	cmp	r6, #10
 8010d04:	d104      	bne.n	8010d10 <__swbuf_r+0x6c>
 8010d06:	4621      	mov	r1, r4
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f000 f911 	bl	8010f30 <_fflush_r>
 8010d0e:	b988      	cbnz	r0, 8010d34 <__swbuf_r+0x90>
 8010d10:	4638      	mov	r0, r7
 8010d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d14:	4b0a      	ldr	r3, [pc, #40]	; (8010d40 <__swbuf_r+0x9c>)
 8010d16:	429c      	cmp	r4, r3
 8010d18:	d101      	bne.n	8010d1e <__swbuf_r+0x7a>
 8010d1a:	68ac      	ldr	r4, [r5, #8]
 8010d1c:	e7cf      	b.n	8010cbe <__swbuf_r+0x1a>
 8010d1e:	4b09      	ldr	r3, [pc, #36]	; (8010d44 <__swbuf_r+0xa0>)
 8010d20:	429c      	cmp	r4, r3
 8010d22:	bf08      	it	eq
 8010d24:	68ec      	ldreq	r4, [r5, #12]
 8010d26:	e7ca      	b.n	8010cbe <__swbuf_r+0x1a>
 8010d28:	4621      	mov	r1, r4
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f000 f80c 	bl	8010d48 <__swsetup_r>
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d0cb      	beq.n	8010ccc <__swbuf_r+0x28>
 8010d34:	f04f 37ff 	mov.w	r7, #4294967295
 8010d38:	e7ea      	b.n	8010d10 <__swbuf_r+0x6c>
 8010d3a:	bf00      	nop
 8010d3c:	08013a98 	.word	0x08013a98
 8010d40:	08013ab8 	.word	0x08013ab8
 8010d44:	08013a78 	.word	0x08013a78

08010d48 <__swsetup_r>:
 8010d48:	4b32      	ldr	r3, [pc, #200]	; (8010e14 <__swsetup_r+0xcc>)
 8010d4a:	b570      	push	{r4, r5, r6, lr}
 8010d4c:	681d      	ldr	r5, [r3, #0]
 8010d4e:	4606      	mov	r6, r0
 8010d50:	460c      	mov	r4, r1
 8010d52:	b125      	cbz	r5, 8010d5e <__swsetup_r+0x16>
 8010d54:	69ab      	ldr	r3, [r5, #24]
 8010d56:	b913      	cbnz	r3, 8010d5e <__swsetup_r+0x16>
 8010d58:	4628      	mov	r0, r5
 8010d5a:	f000 f97d 	bl	8011058 <__sinit>
 8010d5e:	4b2e      	ldr	r3, [pc, #184]	; (8010e18 <__swsetup_r+0xd0>)
 8010d60:	429c      	cmp	r4, r3
 8010d62:	d10f      	bne.n	8010d84 <__swsetup_r+0x3c>
 8010d64:	686c      	ldr	r4, [r5, #4]
 8010d66:	89a3      	ldrh	r3, [r4, #12]
 8010d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d6c:	0719      	lsls	r1, r3, #28
 8010d6e:	d42c      	bmi.n	8010dca <__swsetup_r+0x82>
 8010d70:	06dd      	lsls	r5, r3, #27
 8010d72:	d411      	bmi.n	8010d98 <__swsetup_r+0x50>
 8010d74:	2309      	movs	r3, #9
 8010d76:	6033      	str	r3, [r6, #0]
 8010d78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010d7c:	81a3      	strh	r3, [r4, #12]
 8010d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d82:	e03e      	b.n	8010e02 <__swsetup_r+0xba>
 8010d84:	4b25      	ldr	r3, [pc, #148]	; (8010e1c <__swsetup_r+0xd4>)
 8010d86:	429c      	cmp	r4, r3
 8010d88:	d101      	bne.n	8010d8e <__swsetup_r+0x46>
 8010d8a:	68ac      	ldr	r4, [r5, #8]
 8010d8c:	e7eb      	b.n	8010d66 <__swsetup_r+0x1e>
 8010d8e:	4b24      	ldr	r3, [pc, #144]	; (8010e20 <__swsetup_r+0xd8>)
 8010d90:	429c      	cmp	r4, r3
 8010d92:	bf08      	it	eq
 8010d94:	68ec      	ldreq	r4, [r5, #12]
 8010d96:	e7e6      	b.n	8010d66 <__swsetup_r+0x1e>
 8010d98:	0758      	lsls	r0, r3, #29
 8010d9a:	d512      	bpl.n	8010dc2 <__swsetup_r+0x7a>
 8010d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d9e:	b141      	cbz	r1, 8010db2 <__swsetup_r+0x6a>
 8010da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010da4:	4299      	cmp	r1, r3
 8010da6:	d002      	beq.n	8010dae <__swsetup_r+0x66>
 8010da8:	4630      	mov	r0, r6
 8010daa:	f7ff fe27 	bl	80109fc <_free_r>
 8010dae:	2300      	movs	r3, #0
 8010db0:	6363      	str	r3, [r4, #52]	; 0x34
 8010db2:	89a3      	ldrh	r3, [r4, #12]
 8010db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010db8:	81a3      	strh	r3, [r4, #12]
 8010dba:	2300      	movs	r3, #0
 8010dbc:	6063      	str	r3, [r4, #4]
 8010dbe:	6923      	ldr	r3, [r4, #16]
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	89a3      	ldrh	r3, [r4, #12]
 8010dc4:	f043 0308 	orr.w	r3, r3, #8
 8010dc8:	81a3      	strh	r3, [r4, #12]
 8010dca:	6923      	ldr	r3, [r4, #16]
 8010dcc:	b94b      	cbnz	r3, 8010de2 <__swsetup_r+0x9a>
 8010dce:	89a3      	ldrh	r3, [r4, #12]
 8010dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010dd8:	d003      	beq.n	8010de2 <__swsetup_r+0x9a>
 8010dda:	4621      	mov	r1, r4
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f000 f9ff 	bl	80111e0 <__smakebuf_r>
 8010de2:	89a0      	ldrh	r0, [r4, #12]
 8010de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010de8:	f010 0301 	ands.w	r3, r0, #1
 8010dec:	d00a      	beq.n	8010e04 <__swsetup_r+0xbc>
 8010dee:	2300      	movs	r3, #0
 8010df0:	60a3      	str	r3, [r4, #8]
 8010df2:	6963      	ldr	r3, [r4, #20]
 8010df4:	425b      	negs	r3, r3
 8010df6:	61a3      	str	r3, [r4, #24]
 8010df8:	6923      	ldr	r3, [r4, #16]
 8010dfa:	b943      	cbnz	r3, 8010e0e <__swsetup_r+0xc6>
 8010dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e00:	d1ba      	bne.n	8010d78 <__swsetup_r+0x30>
 8010e02:	bd70      	pop	{r4, r5, r6, pc}
 8010e04:	0781      	lsls	r1, r0, #30
 8010e06:	bf58      	it	pl
 8010e08:	6963      	ldrpl	r3, [r4, #20]
 8010e0a:	60a3      	str	r3, [r4, #8]
 8010e0c:	e7f4      	b.n	8010df8 <__swsetup_r+0xb0>
 8010e0e:	2000      	movs	r0, #0
 8010e10:	e7f7      	b.n	8010e02 <__swsetup_r+0xba>
 8010e12:	bf00      	nop
 8010e14:	20000024 	.word	0x20000024
 8010e18:	08013a98 	.word	0x08013a98
 8010e1c:	08013ab8 	.word	0x08013ab8
 8010e20:	08013a78 	.word	0x08013a78

08010e24 <__sflush_r>:
 8010e24:	898a      	ldrh	r2, [r1, #12]
 8010e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e2a:	4605      	mov	r5, r0
 8010e2c:	0710      	lsls	r0, r2, #28
 8010e2e:	460c      	mov	r4, r1
 8010e30:	d458      	bmi.n	8010ee4 <__sflush_r+0xc0>
 8010e32:	684b      	ldr	r3, [r1, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	dc05      	bgt.n	8010e44 <__sflush_r+0x20>
 8010e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	dc02      	bgt.n	8010e44 <__sflush_r+0x20>
 8010e3e:	2000      	movs	r0, #0
 8010e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e46:	2e00      	cmp	r6, #0
 8010e48:	d0f9      	beq.n	8010e3e <__sflush_r+0x1a>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e50:	682f      	ldr	r7, [r5, #0]
 8010e52:	602b      	str	r3, [r5, #0]
 8010e54:	d032      	beq.n	8010ebc <__sflush_r+0x98>
 8010e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e58:	89a3      	ldrh	r3, [r4, #12]
 8010e5a:	075a      	lsls	r2, r3, #29
 8010e5c:	d505      	bpl.n	8010e6a <__sflush_r+0x46>
 8010e5e:	6863      	ldr	r3, [r4, #4]
 8010e60:	1ac0      	subs	r0, r0, r3
 8010e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e64:	b10b      	cbz	r3, 8010e6a <__sflush_r+0x46>
 8010e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e68:	1ac0      	subs	r0, r0, r3
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e70:	6a21      	ldr	r1, [r4, #32]
 8010e72:	4628      	mov	r0, r5
 8010e74:	47b0      	blx	r6
 8010e76:	1c43      	adds	r3, r0, #1
 8010e78:	89a3      	ldrh	r3, [r4, #12]
 8010e7a:	d106      	bne.n	8010e8a <__sflush_r+0x66>
 8010e7c:	6829      	ldr	r1, [r5, #0]
 8010e7e:	291d      	cmp	r1, #29
 8010e80:	d82c      	bhi.n	8010edc <__sflush_r+0xb8>
 8010e82:	4a2a      	ldr	r2, [pc, #168]	; (8010f2c <__sflush_r+0x108>)
 8010e84:	40ca      	lsrs	r2, r1
 8010e86:	07d6      	lsls	r6, r2, #31
 8010e88:	d528      	bpl.n	8010edc <__sflush_r+0xb8>
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	6062      	str	r2, [r4, #4]
 8010e8e:	04d9      	lsls	r1, r3, #19
 8010e90:	6922      	ldr	r2, [r4, #16]
 8010e92:	6022      	str	r2, [r4, #0]
 8010e94:	d504      	bpl.n	8010ea0 <__sflush_r+0x7c>
 8010e96:	1c42      	adds	r2, r0, #1
 8010e98:	d101      	bne.n	8010e9e <__sflush_r+0x7a>
 8010e9a:	682b      	ldr	r3, [r5, #0]
 8010e9c:	b903      	cbnz	r3, 8010ea0 <__sflush_r+0x7c>
 8010e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8010ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ea2:	602f      	str	r7, [r5, #0]
 8010ea4:	2900      	cmp	r1, #0
 8010ea6:	d0ca      	beq.n	8010e3e <__sflush_r+0x1a>
 8010ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010eac:	4299      	cmp	r1, r3
 8010eae:	d002      	beq.n	8010eb6 <__sflush_r+0x92>
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	f7ff fda3 	bl	80109fc <_free_r>
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8010eba:	e7c1      	b.n	8010e40 <__sflush_r+0x1c>
 8010ebc:	6a21      	ldr	r1, [r4, #32]
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	47b0      	blx	r6
 8010ec4:	1c41      	adds	r1, r0, #1
 8010ec6:	d1c7      	bne.n	8010e58 <__sflush_r+0x34>
 8010ec8:	682b      	ldr	r3, [r5, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d0c4      	beq.n	8010e58 <__sflush_r+0x34>
 8010ece:	2b1d      	cmp	r3, #29
 8010ed0:	d001      	beq.n	8010ed6 <__sflush_r+0xb2>
 8010ed2:	2b16      	cmp	r3, #22
 8010ed4:	d101      	bne.n	8010eda <__sflush_r+0xb6>
 8010ed6:	602f      	str	r7, [r5, #0]
 8010ed8:	e7b1      	b.n	8010e3e <__sflush_r+0x1a>
 8010eda:	89a3      	ldrh	r3, [r4, #12]
 8010edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ee0:	81a3      	strh	r3, [r4, #12]
 8010ee2:	e7ad      	b.n	8010e40 <__sflush_r+0x1c>
 8010ee4:	690f      	ldr	r7, [r1, #16]
 8010ee6:	2f00      	cmp	r7, #0
 8010ee8:	d0a9      	beq.n	8010e3e <__sflush_r+0x1a>
 8010eea:	0793      	lsls	r3, r2, #30
 8010eec:	680e      	ldr	r6, [r1, #0]
 8010eee:	bf08      	it	eq
 8010ef0:	694b      	ldreq	r3, [r1, #20]
 8010ef2:	600f      	str	r7, [r1, #0]
 8010ef4:	bf18      	it	ne
 8010ef6:	2300      	movne	r3, #0
 8010ef8:	eba6 0807 	sub.w	r8, r6, r7
 8010efc:	608b      	str	r3, [r1, #8]
 8010efe:	f1b8 0f00 	cmp.w	r8, #0
 8010f02:	dd9c      	ble.n	8010e3e <__sflush_r+0x1a>
 8010f04:	6a21      	ldr	r1, [r4, #32]
 8010f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f08:	4643      	mov	r3, r8
 8010f0a:	463a      	mov	r2, r7
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	47b0      	blx	r6
 8010f10:	2800      	cmp	r0, #0
 8010f12:	dc06      	bgt.n	8010f22 <__sflush_r+0xfe>
 8010f14:	89a3      	ldrh	r3, [r4, #12]
 8010f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f1a:	81a3      	strh	r3, [r4, #12]
 8010f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f20:	e78e      	b.n	8010e40 <__sflush_r+0x1c>
 8010f22:	4407      	add	r7, r0
 8010f24:	eba8 0800 	sub.w	r8, r8, r0
 8010f28:	e7e9      	b.n	8010efe <__sflush_r+0xda>
 8010f2a:	bf00      	nop
 8010f2c:	20400001 	.word	0x20400001

08010f30 <_fflush_r>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	690b      	ldr	r3, [r1, #16]
 8010f34:	4605      	mov	r5, r0
 8010f36:	460c      	mov	r4, r1
 8010f38:	b913      	cbnz	r3, 8010f40 <_fflush_r+0x10>
 8010f3a:	2500      	movs	r5, #0
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	bd38      	pop	{r3, r4, r5, pc}
 8010f40:	b118      	cbz	r0, 8010f4a <_fflush_r+0x1a>
 8010f42:	6983      	ldr	r3, [r0, #24]
 8010f44:	b90b      	cbnz	r3, 8010f4a <_fflush_r+0x1a>
 8010f46:	f000 f887 	bl	8011058 <__sinit>
 8010f4a:	4b14      	ldr	r3, [pc, #80]	; (8010f9c <_fflush_r+0x6c>)
 8010f4c:	429c      	cmp	r4, r3
 8010f4e:	d11b      	bne.n	8010f88 <_fflush_r+0x58>
 8010f50:	686c      	ldr	r4, [r5, #4]
 8010f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d0ef      	beq.n	8010f3a <_fflush_r+0xa>
 8010f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f5c:	07d0      	lsls	r0, r2, #31
 8010f5e:	d404      	bmi.n	8010f6a <_fflush_r+0x3a>
 8010f60:	0599      	lsls	r1, r3, #22
 8010f62:	d402      	bmi.n	8010f6a <_fflush_r+0x3a>
 8010f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f66:	f000 f915 	bl	8011194 <__retarget_lock_acquire_recursive>
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	4621      	mov	r1, r4
 8010f6e:	f7ff ff59 	bl	8010e24 <__sflush_r>
 8010f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f74:	07da      	lsls	r2, r3, #31
 8010f76:	4605      	mov	r5, r0
 8010f78:	d4e0      	bmi.n	8010f3c <_fflush_r+0xc>
 8010f7a:	89a3      	ldrh	r3, [r4, #12]
 8010f7c:	059b      	lsls	r3, r3, #22
 8010f7e:	d4dd      	bmi.n	8010f3c <_fflush_r+0xc>
 8010f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f82:	f000 f908 	bl	8011196 <__retarget_lock_release_recursive>
 8010f86:	e7d9      	b.n	8010f3c <_fflush_r+0xc>
 8010f88:	4b05      	ldr	r3, [pc, #20]	; (8010fa0 <_fflush_r+0x70>)
 8010f8a:	429c      	cmp	r4, r3
 8010f8c:	d101      	bne.n	8010f92 <_fflush_r+0x62>
 8010f8e:	68ac      	ldr	r4, [r5, #8]
 8010f90:	e7df      	b.n	8010f52 <_fflush_r+0x22>
 8010f92:	4b04      	ldr	r3, [pc, #16]	; (8010fa4 <_fflush_r+0x74>)
 8010f94:	429c      	cmp	r4, r3
 8010f96:	bf08      	it	eq
 8010f98:	68ec      	ldreq	r4, [r5, #12]
 8010f9a:	e7da      	b.n	8010f52 <_fflush_r+0x22>
 8010f9c:	08013a98 	.word	0x08013a98
 8010fa0:	08013ab8 	.word	0x08013ab8
 8010fa4:	08013a78 	.word	0x08013a78

08010fa8 <std>:
 8010fa8:	2300      	movs	r3, #0
 8010faa:	b510      	push	{r4, lr}
 8010fac:	4604      	mov	r4, r0
 8010fae:	e9c0 3300 	strd	r3, r3, [r0]
 8010fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010fb6:	6083      	str	r3, [r0, #8]
 8010fb8:	8181      	strh	r1, [r0, #12]
 8010fba:	6643      	str	r3, [r0, #100]	; 0x64
 8010fbc:	81c2      	strh	r2, [r0, #14]
 8010fbe:	6183      	str	r3, [r0, #24]
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	2208      	movs	r2, #8
 8010fc4:	305c      	adds	r0, #92	; 0x5c
 8010fc6:	f7ff fd11 	bl	80109ec <memset>
 8010fca:	4b05      	ldr	r3, [pc, #20]	; (8010fe0 <std+0x38>)
 8010fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8010fce:	4b05      	ldr	r3, [pc, #20]	; (8010fe4 <std+0x3c>)
 8010fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010fd2:	4b05      	ldr	r3, [pc, #20]	; (8010fe8 <std+0x40>)
 8010fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010fd6:	4b05      	ldr	r3, [pc, #20]	; (8010fec <std+0x44>)
 8010fd8:	6224      	str	r4, [r4, #32]
 8010fda:	6323      	str	r3, [r4, #48]	; 0x30
 8010fdc:	bd10      	pop	{r4, pc}
 8010fde:	bf00      	nop
 8010fe0:	08011841 	.word	0x08011841
 8010fe4:	08011863 	.word	0x08011863
 8010fe8:	0801189b 	.word	0x0801189b
 8010fec:	080118bf 	.word	0x080118bf

08010ff0 <_cleanup_r>:
 8010ff0:	4901      	ldr	r1, [pc, #4]	; (8010ff8 <_cleanup_r+0x8>)
 8010ff2:	f000 b8af 	b.w	8011154 <_fwalk_reent>
 8010ff6:	bf00      	nop
 8010ff8:	08010f31 	.word	0x08010f31

08010ffc <__sfmoreglue>:
 8010ffc:	b570      	push	{r4, r5, r6, lr}
 8010ffe:	1e4a      	subs	r2, r1, #1
 8011000:	2568      	movs	r5, #104	; 0x68
 8011002:	4355      	muls	r5, r2
 8011004:	460e      	mov	r6, r1
 8011006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801100a:	f7ff fd47 	bl	8010a9c <_malloc_r>
 801100e:	4604      	mov	r4, r0
 8011010:	b140      	cbz	r0, 8011024 <__sfmoreglue+0x28>
 8011012:	2100      	movs	r1, #0
 8011014:	e9c0 1600 	strd	r1, r6, [r0]
 8011018:	300c      	adds	r0, #12
 801101a:	60a0      	str	r0, [r4, #8]
 801101c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011020:	f7ff fce4 	bl	80109ec <memset>
 8011024:	4620      	mov	r0, r4
 8011026:	bd70      	pop	{r4, r5, r6, pc}

08011028 <__sfp_lock_acquire>:
 8011028:	4801      	ldr	r0, [pc, #4]	; (8011030 <__sfp_lock_acquire+0x8>)
 801102a:	f000 b8b3 	b.w	8011194 <__retarget_lock_acquire_recursive>
 801102e:	bf00      	nop
 8011030:	20004d24 	.word	0x20004d24

08011034 <__sfp_lock_release>:
 8011034:	4801      	ldr	r0, [pc, #4]	; (801103c <__sfp_lock_release+0x8>)
 8011036:	f000 b8ae 	b.w	8011196 <__retarget_lock_release_recursive>
 801103a:	bf00      	nop
 801103c:	20004d24 	.word	0x20004d24

08011040 <__sinit_lock_acquire>:
 8011040:	4801      	ldr	r0, [pc, #4]	; (8011048 <__sinit_lock_acquire+0x8>)
 8011042:	f000 b8a7 	b.w	8011194 <__retarget_lock_acquire_recursive>
 8011046:	bf00      	nop
 8011048:	20004d1f 	.word	0x20004d1f

0801104c <__sinit_lock_release>:
 801104c:	4801      	ldr	r0, [pc, #4]	; (8011054 <__sinit_lock_release+0x8>)
 801104e:	f000 b8a2 	b.w	8011196 <__retarget_lock_release_recursive>
 8011052:	bf00      	nop
 8011054:	20004d1f 	.word	0x20004d1f

08011058 <__sinit>:
 8011058:	b510      	push	{r4, lr}
 801105a:	4604      	mov	r4, r0
 801105c:	f7ff fff0 	bl	8011040 <__sinit_lock_acquire>
 8011060:	69a3      	ldr	r3, [r4, #24]
 8011062:	b11b      	cbz	r3, 801106c <__sinit+0x14>
 8011064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011068:	f7ff bff0 	b.w	801104c <__sinit_lock_release>
 801106c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011070:	6523      	str	r3, [r4, #80]	; 0x50
 8011072:	4b13      	ldr	r3, [pc, #76]	; (80110c0 <__sinit+0x68>)
 8011074:	4a13      	ldr	r2, [pc, #76]	; (80110c4 <__sinit+0x6c>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	62a2      	str	r2, [r4, #40]	; 0x28
 801107a:	42a3      	cmp	r3, r4
 801107c:	bf04      	itt	eq
 801107e:	2301      	moveq	r3, #1
 8011080:	61a3      	streq	r3, [r4, #24]
 8011082:	4620      	mov	r0, r4
 8011084:	f000 f820 	bl	80110c8 <__sfp>
 8011088:	6060      	str	r0, [r4, #4]
 801108a:	4620      	mov	r0, r4
 801108c:	f000 f81c 	bl	80110c8 <__sfp>
 8011090:	60a0      	str	r0, [r4, #8]
 8011092:	4620      	mov	r0, r4
 8011094:	f000 f818 	bl	80110c8 <__sfp>
 8011098:	2200      	movs	r2, #0
 801109a:	60e0      	str	r0, [r4, #12]
 801109c:	2104      	movs	r1, #4
 801109e:	6860      	ldr	r0, [r4, #4]
 80110a0:	f7ff ff82 	bl	8010fa8 <std>
 80110a4:	68a0      	ldr	r0, [r4, #8]
 80110a6:	2201      	movs	r2, #1
 80110a8:	2109      	movs	r1, #9
 80110aa:	f7ff ff7d 	bl	8010fa8 <std>
 80110ae:	68e0      	ldr	r0, [r4, #12]
 80110b0:	2202      	movs	r2, #2
 80110b2:	2112      	movs	r1, #18
 80110b4:	f7ff ff78 	bl	8010fa8 <std>
 80110b8:	2301      	movs	r3, #1
 80110ba:	61a3      	str	r3, [r4, #24]
 80110bc:	e7d2      	b.n	8011064 <__sinit+0xc>
 80110be:	bf00      	nop
 80110c0:	08013a74 	.word	0x08013a74
 80110c4:	08010ff1 	.word	0x08010ff1

080110c8 <__sfp>:
 80110c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ca:	4607      	mov	r7, r0
 80110cc:	f7ff ffac 	bl	8011028 <__sfp_lock_acquire>
 80110d0:	4b1e      	ldr	r3, [pc, #120]	; (801114c <__sfp+0x84>)
 80110d2:	681e      	ldr	r6, [r3, #0]
 80110d4:	69b3      	ldr	r3, [r6, #24]
 80110d6:	b913      	cbnz	r3, 80110de <__sfp+0x16>
 80110d8:	4630      	mov	r0, r6
 80110da:	f7ff ffbd 	bl	8011058 <__sinit>
 80110de:	3648      	adds	r6, #72	; 0x48
 80110e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80110e4:	3b01      	subs	r3, #1
 80110e6:	d503      	bpl.n	80110f0 <__sfp+0x28>
 80110e8:	6833      	ldr	r3, [r6, #0]
 80110ea:	b30b      	cbz	r3, 8011130 <__sfp+0x68>
 80110ec:	6836      	ldr	r6, [r6, #0]
 80110ee:	e7f7      	b.n	80110e0 <__sfp+0x18>
 80110f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80110f4:	b9d5      	cbnz	r5, 801112c <__sfp+0x64>
 80110f6:	4b16      	ldr	r3, [pc, #88]	; (8011150 <__sfp+0x88>)
 80110f8:	60e3      	str	r3, [r4, #12]
 80110fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80110fe:	6665      	str	r5, [r4, #100]	; 0x64
 8011100:	f000 f847 	bl	8011192 <__retarget_lock_init_recursive>
 8011104:	f7ff ff96 	bl	8011034 <__sfp_lock_release>
 8011108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801110c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011110:	6025      	str	r5, [r4, #0]
 8011112:	61a5      	str	r5, [r4, #24]
 8011114:	2208      	movs	r2, #8
 8011116:	4629      	mov	r1, r5
 8011118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801111c:	f7ff fc66 	bl	80109ec <memset>
 8011120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011128:	4620      	mov	r0, r4
 801112a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801112c:	3468      	adds	r4, #104	; 0x68
 801112e:	e7d9      	b.n	80110e4 <__sfp+0x1c>
 8011130:	2104      	movs	r1, #4
 8011132:	4638      	mov	r0, r7
 8011134:	f7ff ff62 	bl	8010ffc <__sfmoreglue>
 8011138:	4604      	mov	r4, r0
 801113a:	6030      	str	r0, [r6, #0]
 801113c:	2800      	cmp	r0, #0
 801113e:	d1d5      	bne.n	80110ec <__sfp+0x24>
 8011140:	f7ff ff78 	bl	8011034 <__sfp_lock_release>
 8011144:	230c      	movs	r3, #12
 8011146:	603b      	str	r3, [r7, #0]
 8011148:	e7ee      	b.n	8011128 <__sfp+0x60>
 801114a:	bf00      	nop
 801114c:	08013a74 	.word	0x08013a74
 8011150:	ffff0001 	.word	0xffff0001

08011154 <_fwalk_reent>:
 8011154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011158:	4606      	mov	r6, r0
 801115a:	4688      	mov	r8, r1
 801115c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011160:	2700      	movs	r7, #0
 8011162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011166:	f1b9 0901 	subs.w	r9, r9, #1
 801116a:	d505      	bpl.n	8011178 <_fwalk_reent+0x24>
 801116c:	6824      	ldr	r4, [r4, #0]
 801116e:	2c00      	cmp	r4, #0
 8011170:	d1f7      	bne.n	8011162 <_fwalk_reent+0xe>
 8011172:	4638      	mov	r0, r7
 8011174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011178:	89ab      	ldrh	r3, [r5, #12]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d907      	bls.n	801118e <_fwalk_reent+0x3a>
 801117e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011182:	3301      	adds	r3, #1
 8011184:	d003      	beq.n	801118e <_fwalk_reent+0x3a>
 8011186:	4629      	mov	r1, r5
 8011188:	4630      	mov	r0, r6
 801118a:	47c0      	blx	r8
 801118c:	4307      	orrs	r7, r0
 801118e:	3568      	adds	r5, #104	; 0x68
 8011190:	e7e9      	b.n	8011166 <_fwalk_reent+0x12>

08011192 <__retarget_lock_init_recursive>:
 8011192:	4770      	bx	lr

08011194 <__retarget_lock_acquire_recursive>:
 8011194:	4770      	bx	lr

08011196 <__retarget_lock_release_recursive>:
 8011196:	4770      	bx	lr

08011198 <__swhatbuf_r>:
 8011198:	b570      	push	{r4, r5, r6, lr}
 801119a:	460e      	mov	r6, r1
 801119c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a0:	2900      	cmp	r1, #0
 80111a2:	b096      	sub	sp, #88	; 0x58
 80111a4:	4614      	mov	r4, r2
 80111a6:	461d      	mov	r5, r3
 80111a8:	da07      	bge.n	80111ba <__swhatbuf_r+0x22>
 80111aa:	2300      	movs	r3, #0
 80111ac:	602b      	str	r3, [r5, #0]
 80111ae:	89b3      	ldrh	r3, [r6, #12]
 80111b0:	061a      	lsls	r2, r3, #24
 80111b2:	d410      	bmi.n	80111d6 <__swhatbuf_r+0x3e>
 80111b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111b8:	e00e      	b.n	80111d8 <__swhatbuf_r+0x40>
 80111ba:	466a      	mov	r2, sp
 80111bc:	f000 fba6 	bl	801190c <_fstat_r>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	dbf2      	blt.n	80111aa <__swhatbuf_r+0x12>
 80111c4:	9a01      	ldr	r2, [sp, #4]
 80111c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80111ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80111ce:	425a      	negs	r2, r3
 80111d0:	415a      	adcs	r2, r3
 80111d2:	602a      	str	r2, [r5, #0]
 80111d4:	e7ee      	b.n	80111b4 <__swhatbuf_r+0x1c>
 80111d6:	2340      	movs	r3, #64	; 0x40
 80111d8:	2000      	movs	r0, #0
 80111da:	6023      	str	r3, [r4, #0]
 80111dc:	b016      	add	sp, #88	; 0x58
 80111de:	bd70      	pop	{r4, r5, r6, pc}

080111e0 <__smakebuf_r>:
 80111e0:	898b      	ldrh	r3, [r1, #12]
 80111e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111e4:	079d      	lsls	r5, r3, #30
 80111e6:	4606      	mov	r6, r0
 80111e8:	460c      	mov	r4, r1
 80111ea:	d507      	bpl.n	80111fc <__smakebuf_r+0x1c>
 80111ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80111f0:	6023      	str	r3, [r4, #0]
 80111f2:	6123      	str	r3, [r4, #16]
 80111f4:	2301      	movs	r3, #1
 80111f6:	6163      	str	r3, [r4, #20]
 80111f8:	b002      	add	sp, #8
 80111fa:	bd70      	pop	{r4, r5, r6, pc}
 80111fc:	ab01      	add	r3, sp, #4
 80111fe:	466a      	mov	r2, sp
 8011200:	f7ff ffca 	bl	8011198 <__swhatbuf_r>
 8011204:	9900      	ldr	r1, [sp, #0]
 8011206:	4605      	mov	r5, r0
 8011208:	4630      	mov	r0, r6
 801120a:	f7ff fc47 	bl	8010a9c <_malloc_r>
 801120e:	b948      	cbnz	r0, 8011224 <__smakebuf_r+0x44>
 8011210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011214:	059a      	lsls	r2, r3, #22
 8011216:	d4ef      	bmi.n	80111f8 <__smakebuf_r+0x18>
 8011218:	f023 0303 	bic.w	r3, r3, #3
 801121c:	f043 0302 	orr.w	r3, r3, #2
 8011220:	81a3      	strh	r3, [r4, #12]
 8011222:	e7e3      	b.n	80111ec <__smakebuf_r+0xc>
 8011224:	4b0d      	ldr	r3, [pc, #52]	; (801125c <__smakebuf_r+0x7c>)
 8011226:	62b3      	str	r3, [r6, #40]	; 0x28
 8011228:	89a3      	ldrh	r3, [r4, #12]
 801122a:	6020      	str	r0, [r4, #0]
 801122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011230:	81a3      	strh	r3, [r4, #12]
 8011232:	9b00      	ldr	r3, [sp, #0]
 8011234:	6163      	str	r3, [r4, #20]
 8011236:	9b01      	ldr	r3, [sp, #4]
 8011238:	6120      	str	r0, [r4, #16]
 801123a:	b15b      	cbz	r3, 8011254 <__smakebuf_r+0x74>
 801123c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011240:	4630      	mov	r0, r6
 8011242:	f000 fb75 	bl	8011930 <_isatty_r>
 8011246:	b128      	cbz	r0, 8011254 <__smakebuf_r+0x74>
 8011248:	89a3      	ldrh	r3, [r4, #12]
 801124a:	f023 0303 	bic.w	r3, r3, #3
 801124e:	f043 0301 	orr.w	r3, r3, #1
 8011252:	81a3      	strh	r3, [r4, #12]
 8011254:	89a0      	ldrh	r0, [r4, #12]
 8011256:	4305      	orrs	r5, r0
 8011258:	81a5      	strh	r5, [r4, #12]
 801125a:	e7cd      	b.n	80111f8 <__smakebuf_r+0x18>
 801125c:	08010ff1 	.word	0x08010ff1

08011260 <__ssputs_r>:
 8011260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011264:	688e      	ldr	r6, [r1, #8]
 8011266:	429e      	cmp	r6, r3
 8011268:	4682      	mov	sl, r0
 801126a:	460c      	mov	r4, r1
 801126c:	4690      	mov	r8, r2
 801126e:	461f      	mov	r7, r3
 8011270:	d838      	bhi.n	80112e4 <__ssputs_r+0x84>
 8011272:	898a      	ldrh	r2, [r1, #12]
 8011274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011278:	d032      	beq.n	80112e0 <__ssputs_r+0x80>
 801127a:	6825      	ldr	r5, [r4, #0]
 801127c:	6909      	ldr	r1, [r1, #16]
 801127e:	eba5 0901 	sub.w	r9, r5, r1
 8011282:	6965      	ldr	r5, [r4, #20]
 8011284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801128c:	3301      	adds	r3, #1
 801128e:	444b      	add	r3, r9
 8011290:	106d      	asrs	r5, r5, #1
 8011292:	429d      	cmp	r5, r3
 8011294:	bf38      	it	cc
 8011296:	461d      	movcc	r5, r3
 8011298:	0553      	lsls	r3, r2, #21
 801129a:	d531      	bpl.n	8011300 <__ssputs_r+0xa0>
 801129c:	4629      	mov	r1, r5
 801129e:	f7ff fbfd 	bl	8010a9c <_malloc_r>
 80112a2:	4606      	mov	r6, r0
 80112a4:	b950      	cbnz	r0, 80112bc <__ssputs_r+0x5c>
 80112a6:	230c      	movs	r3, #12
 80112a8:	f8ca 3000 	str.w	r3, [sl]
 80112ac:	89a3      	ldrh	r3, [r4, #12]
 80112ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112b2:	81a3      	strh	r3, [r4, #12]
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295
 80112b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112bc:	6921      	ldr	r1, [r4, #16]
 80112be:	464a      	mov	r2, r9
 80112c0:	f7ff fb86 	bl	80109d0 <memcpy>
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112ce:	81a3      	strh	r3, [r4, #12]
 80112d0:	6126      	str	r6, [r4, #16]
 80112d2:	6165      	str	r5, [r4, #20]
 80112d4:	444e      	add	r6, r9
 80112d6:	eba5 0509 	sub.w	r5, r5, r9
 80112da:	6026      	str	r6, [r4, #0]
 80112dc:	60a5      	str	r5, [r4, #8]
 80112de:	463e      	mov	r6, r7
 80112e0:	42be      	cmp	r6, r7
 80112e2:	d900      	bls.n	80112e6 <__ssputs_r+0x86>
 80112e4:	463e      	mov	r6, r7
 80112e6:	4632      	mov	r2, r6
 80112e8:	6820      	ldr	r0, [r4, #0]
 80112ea:	4641      	mov	r1, r8
 80112ec:	f000 fb42 	bl	8011974 <memmove>
 80112f0:	68a3      	ldr	r3, [r4, #8]
 80112f2:	6822      	ldr	r2, [r4, #0]
 80112f4:	1b9b      	subs	r3, r3, r6
 80112f6:	4432      	add	r2, r6
 80112f8:	60a3      	str	r3, [r4, #8]
 80112fa:	6022      	str	r2, [r4, #0]
 80112fc:	2000      	movs	r0, #0
 80112fe:	e7db      	b.n	80112b8 <__ssputs_r+0x58>
 8011300:	462a      	mov	r2, r5
 8011302:	f000 fb51 	bl	80119a8 <_realloc_r>
 8011306:	4606      	mov	r6, r0
 8011308:	2800      	cmp	r0, #0
 801130a:	d1e1      	bne.n	80112d0 <__ssputs_r+0x70>
 801130c:	6921      	ldr	r1, [r4, #16]
 801130e:	4650      	mov	r0, sl
 8011310:	f7ff fb74 	bl	80109fc <_free_r>
 8011314:	e7c7      	b.n	80112a6 <__ssputs_r+0x46>
	...

08011318 <_svfiprintf_r>:
 8011318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801131c:	4698      	mov	r8, r3
 801131e:	898b      	ldrh	r3, [r1, #12]
 8011320:	061b      	lsls	r3, r3, #24
 8011322:	b09d      	sub	sp, #116	; 0x74
 8011324:	4607      	mov	r7, r0
 8011326:	460d      	mov	r5, r1
 8011328:	4614      	mov	r4, r2
 801132a:	d50e      	bpl.n	801134a <_svfiprintf_r+0x32>
 801132c:	690b      	ldr	r3, [r1, #16]
 801132e:	b963      	cbnz	r3, 801134a <_svfiprintf_r+0x32>
 8011330:	2140      	movs	r1, #64	; 0x40
 8011332:	f7ff fbb3 	bl	8010a9c <_malloc_r>
 8011336:	6028      	str	r0, [r5, #0]
 8011338:	6128      	str	r0, [r5, #16]
 801133a:	b920      	cbnz	r0, 8011346 <_svfiprintf_r+0x2e>
 801133c:	230c      	movs	r3, #12
 801133e:	603b      	str	r3, [r7, #0]
 8011340:	f04f 30ff 	mov.w	r0, #4294967295
 8011344:	e0d1      	b.n	80114ea <_svfiprintf_r+0x1d2>
 8011346:	2340      	movs	r3, #64	; 0x40
 8011348:	616b      	str	r3, [r5, #20]
 801134a:	2300      	movs	r3, #0
 801134c:	9309      	str	r3, [sp, #36]	; 0x24
 801134e:	2320      	movs	r3, #32
 8011350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011354:	f8cd 800c 	str.w	r8, [sp, #12]
 8011358:	2330      	movs	r3, #48	; 0x30
 801135a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011504 <_svfiprintf_r+0x1ec>
 801135e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011362:	f04f 0901 	mov.w	r9, #1
 8011366:	4623      	mov	r3, r4
 8011368:	469a      	mov	sl, r3
 801136a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801136e:	b10a      	cbz	r2, 8011374 <_svfiprintf_r+0x5c>
 8011370:	2a25      	cmp	r2, #37	; 0x25
 8011372:	d1f9      	bne.n	8011368 <_svfiprintf_r+0x50>
 8011374:	ebba 0b04 	subs.w	fp, sl, r4
 8011378:	d00b      	beq.n	8011392 <_svfiprintf_r+0x7a>
 801137a:	465b      	mov	r3, fp
 801137c:	4622      	mov	r2, r4
 801137e:	4629      	mov	r1, r5
 8011380:	4638      	mov	r0, r7
 8011382:	f7ff ff6d 	bl	8011260 <__ssputs_r>
 8011386:	3001      	adds	r0, #1
 8011388:	f000 80aa 	beq.w	80114e0 <_svfiprintf_r+0x1c8>
 801138c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801138e:	445a      	add	r2, fp
 8011390:	9209      	str	r2, [sp, #36]	; 0x24
 8011392:	f89a 3000 	ldrb.w	r3, [sl]
 8011396:	2b00      	cmp	r3, #0
 8011398:	f000 80a2 	beq.w	80114e0 <_svfiprintf_r+0x1c8>
 801139c:	2300      	movs	r3, #0
 801139e:	f04f 32ff 	mov.w	r2, #4294967295
 80113a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113a6:	f10a 0a01 	add.w	sl, sl, #1
 80113aa:	9304      	str	r3, [sp, #16]
 80113ac:	9307      	str	r3, [sp, #28]
 80113ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113b2:	931a      	str	r3, [sp, #104]	; 0x68
 80113b4:	4654      	mov	r4, sl
 80113b6:	2205      	movs	r2, #5
 80113b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113bc:	4851      	ldr	r0, [pc, #324]	; (8011504 <_svfiprintf_r+0x1ec>)
 80113be:	f7ee ff27 	bl	8000210 <memchr>
 80113c2:	9a04      	ldr	r2, [sp, #16]
 80113c4:	b9d8      	cbnz	r0, 80113fe <_svfiprintf_r+0xe6>
 80113c6:	06d0      	lsls	r0, r2, #27
 80113c8:	bf44      	itt	mi
 80113ca:	2320      	movmi	r3, #32
 80113cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113d0:	0711      	lsls	r1, r2, #28
 80113d2:	bf44      	itt	mi
 80113d4:	232b      	movmi	r3, #43	; 0x2b
 80113d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113da:	f89a 3000 	ldrb.w	r3, [sl]
 80113de:	2b2a      	cmp	r3, #42	; 0x2a
 80113e0:	d015      	beq.n	801140e <_svfiprintf_r+0xf6>
 80113e2:	9a07      	ldr	r2, [sp, #28]
 80113e4:	4654      	mov	r4, sl
 80113e6:	2000      	movs	r0, #0
 80113e8:	f04f 0c0a 	mov.w	ip, #10
 80113ec:	4621      	mov	r1, r4
 80113ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113f2:	3b30      	subs	r3, #48	; 0x30
 80113f4:	2b09      	cmp	r3, #9
 80113f6:	d94e      	bls.n	8011496 <_svfiprintf_r+0x17e>
 80113f8:	b1b0      	cbz	r0, 8011428 <_svfiprintf_r+0x110>
 80113fa:	9207      	str	r2, [sp, #28]
 80113fc:	e014      	b.n	8011428 <_svfiprintf_r+0x110>
 80113fe:	eba0 0308 	sub.w	r3, r0, r8
 8011402:	fa09 f303 	lsl.w	r3, r9, r3
 8011406:	4313      	orrs	r3, r2
 8011408:	9304      	str	r3, [sp, #16]
 801140a:	46a2      	mov	sl, r4
 801140c:	e7d2      	b.n	80113b4 <_svfiprintf_r+0x9c>
 801140e:	9b03      	ldr	r3, [sp, #12]
 8011410:	1d19      	adds	r1, r3, #4
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	9103      	str	r1, [sp, #12]
 8011416:	2b00      	cmp	r3, #0
 8011418:	bfbb      	ittet	lt
 801141a:	425b      	neglt	r3, r3
 801141c:	f042 0202 	orrlt.w	r2, r2, #2
 8011420:	9307      	strge	r3, [sp, #28]
 8011422:	9307      	strlt	r3, [sp, #28]
 8011424:	bfb8      	it	lt
 8011426:	9204      	strlt	r2, [sp, #16]
 8011428:	7823      	ldrb	r3, [r4, #0]
 801142a:	2b2e      	cmp	r3, #46	; 0x2e
 801142c:	d10c      	bne.n	8011448 <_svfiprintf_r+0x130>
 801142e:	7863      	ldrb	r3, [r4, #1]
 8011430:	2b2a      	cmp	r3, #42	; 0x2a
 8011432:	d135      	bne.n	80114a0 <_svfiprintf_r+0x188>
 8011434:	9b03      	ldr	r3, [sp, #12]
 8011436:	1d1a      	adds	r2, r3, #4
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	9203      	str	r2, [sp, #12]
 801143c:	2b00      	cmp	r3, #0
 801143e:	bfb8      	it	lt
 8011440:	f04f 33ff 	movlt.w	r3, #4294967295
 8011444:	3402      	adds	r4, #2
 8011446:	9305      	str	r3, [sp, #20]
 8011448:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011514 <_svfiprintf_r+0x1fc>
 801144c:	7821      	ldrb	r1, [r4, #0]
 801144e:	2203      	movs	r2, #3
 8011450:	4650      	mov	r0, sl
 8011452:	f7ee fedd 	bl	8000210 <memchr>
 8011456:	b140      	cbz	r0, 801146a <_svfiprintf_r+0x152>
 8011458:	2340      	movs	r3, #64	; 0x40
 801145a:	eba0 000a 	sub.w	r0, r0, sl
 801145e:	fa03 f000 	lsl.w	r0, r3, r0
 8011462:	9b04      	ldr	r3, [sp, #16]
 8011464:	4303      	orrs	r3, r0
 8011466:	3401      	adds	r4, #1
 8011468:	9304      	str	r3, [sp, #16]
 801146a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801146e:	4826      	ldr	r0, [pc, #152]	; (8011508 <_svfiprintf_r+0x1f0>)
 8011470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011474:	2206      	movs	r2, #6
 8011476:	f7ee fecb 	bl	8000210 <memchr>
 801147a:	2800      	cmp	r0, #0
 801147c:	d038      	beq.n	80114f0 <_svfiprintf_r+0x1d8>
 801147e:	4b23      	ldr	r3, [pc, #140]	; (801150c <_svfiprintf_r+0x1f4>)
 8011480:	bb1b      	cbnz	r3, 80114ca <_svfiprintf_r+0x1b2>
 8011482:	9b03      	ldr	r3, [sp, #12]
 8011484:	3307      	adds	r3, #7
 8011486:	f023 0307 	bic.w	r3, r3, #7
 801148a:	3308      	adds	r3, #8
 801148c:	9303      	str	r3, [sp, #12]
 801148e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011490:	4433      	add	r3, r6
 8011492:	9309      	str	r3, [sp, #36]	; 0x24
 8011494:	e767      	b.n	8011366 <_svfiprintf_r+0x4e>
 8011496:	fb0c 3202 	mla	r2, ip, r2, r3
 801149a:	460c      	mov	r4, r1
 801149c:	2001      	movs	r0, #1
 801149e:	e7a5      	b.n	80113ec <_svfiprintf_r+0xd4>
 80114a0:	2300      	movs	r3, #0
 80114a2:	3401      	adds	r4, #1
 80114a4:	9305      	str	r3, [sp, #20]
 80114a6:	4619      	mov	r1, r3
 80114a8:	f04f 0c0a 	mov.w	ip, #10
 80114ac:	4620      	mov	r0, r4
 80114ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114b2:	3a30      	subs	r2, #48	; 0x30
 80114b4:	2a09      	cmp	r2, #9
 80114b6:	d903      	bls.n	80114c0 <_svfiprintf_r+0x1a8>
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d0c5      	beq.n	8011448 <_svfiprintf_r+0x130>
 80114bc:	9105      	str	r1, [sp, #20]
 80114be:	e7c3      	b.n	8011448 <_svfiprintf_r+0x130>
 80114c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80114c4:	4604      	mov	r4, r0
 80114c6:	2301      	movs	r3, #1
 80114c8:	e7f0      	b.n	80114ac <_svfiprintf_r+0x194>
 80114ca:	ab03      	add	r3, sp, #12
 80114cc:	9300      	str	r3, [sp, #0]
 80114ce:	462a      	mov	r2, r5
 80114d0:	4b0f      	ldr	r3, [pc, #60]	; (8011510 <_svfiprintf_r+0x1f8>)
 80114d2:	a904      	add	r1, sp, #16
 80114d4:	4638      	mov	r0, r7
 80114d6:	f3af 8000 	nop.w
 80114da:	1c42      	adds	r2, r0, #1
 80114dc:	4606      	mov	r6, r0
 80114de:	d1d6      	bne.n	801148e <_svfiprintf_r+0x176>
 80114e0:	89ab      	ldrh	r3, [r5, #12]
 80114e2:	065b      	lsls	r3, r3, #25
 80114e4:	f53f af2c 	bmi.w	8011340 <_svfiprintf_r+0x28>
 80114e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114ea:	b01d      	add	sp, #116	; 0x74
 80114ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114f0:	ab03      	add	r3, sp, #12
 80114f2:	9300      	str	r3, [sp, #0]
 80114f4:	462a      	mov	r2, r5
 80114f6:	4b06      	ldr	r3, [pc, #24]	; (8011510 <_svfiprintf_r+0x1f8>)
 80114f8:	a904      	add	r1, sp, #16
 80114fa:	4638      	mov	r0, r7
 80114fc:	f000 f87a 	bl	80115f4 <_printf_i>
 8011500:	e7eb      	b.n	80114da <_svfiprintf_r+0x1c2>
 8011502:	bf00      	nop
 8011504:	08013ad8 	.word	0x08013ad8
 8011508:	08013ae2 	.word	0x08013ae2
 801150c:	00000000 	.word	0x00000000
 8011510:	08011261 	.word	0x08011261
 8011514:	08013ade 	.word	0x08013ade

08011518 <_printf_common>:
 8011518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801151c:	4616      	mov	r6, r2
 801151e:	4699      	mov	r9, r3
 8011520:	688a      	ldr	r2, [r1, #8]
 8011522:	690b      	ldr	r3, [r1, #16]
 8011524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011528:	4293      	cmp	r3, r2
 801152a:	bfb8      	it	lt
 801152c:	4613      	movlt	r3, r2
 801152e:	6033      	str	r3, [r6, #0]
 8011530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011534:	4607      	mov	r7, r0
 8011536:	460c      	mov	r4, r1
 8011538:	b10a      	cbz	r2, 801153e <_printf_common+0x26>
 801153a:	3301      	adds	r3, #1
 801153c:	6033      	str	r3, [r6, #0]
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	0699      	lsls	r1, r3, #26
 8011542:	bf42      	ittt	mi
 8011544:	6833      	ldrmi	r3, [r6, #0]
 8011546:	3302      	addmi	r3, #2
 8011548:	6033      	strmi	r3, [r6, #0]
 801154a:	6825      	ldr	r5, [r4, #0]
 801154c:	f015 0506 	ands.w	r5, r5, #6
 8011550:	d106      	bne.n	8011560 <_printf_common+0x48>
 8011552:	f104 0a19 	add.w	sl, r4, #25
 8011556:	68e3      	ldr	r3, [r4, #12]
 8011558:	6832      	ldr	r2, [r6, #0]
 801155a:	1a9b      	subs	r3, r3, r2
 801155c:	42ab      	cmp	r3, r5
 801155e:	dc26      	bgt.n	80115ae <_printf_common+0x96>
 8011560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011564:	1e13      	subs	r3, r2, #0
 8011566:	6822      	ldr	r2, [r4, #0]
 8011568:	bf18      	it	ne
 801156a:	2301      	movne	r3, #1
 801156c:	0692      	lsls	r2, r2, #26
 801156e:	d42b      	bmi.n	80115c8 <_printf_common+0xb0>
 8011570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011574:	4649      	mov	r1, r9
 8011576:	4638      	mov	r0, r7
 8011578:	47c0      	blx	r8
 801157a:	3001      	adds	r0, #1
 801157c:	d01e      	beq.n	80115bc <_printf_common+0xa4>
 801157e:	6823      	ldr	r3, [r4, #0]
 8011580:	68e5      	ldr	r5, [r4, #12]
 8011582:	6832      	ldr	r2, [r6, #0]
 8011584:	f003 0306 	and.w	r3, r3, #6
 8011588:	2b04      	cmp	r3, #4
 801158a:	bf08      	it	eq
 801158c:	1aad      	subeq	r5, r5, r2
 801158e:	68a3      	ldr	r3, [r4, #8]
 8011590:	6922      	ldr	r2, [r4, #16]
 8011592:	bf0c      	ite	eq
 8011594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011598:	2500      	movne	r5, #0
 801159a:	4293      	cmp	r3, r2
 801159c:	bfc4      	itt	gt
 801159e:	1a9b      	subgt	r3, r3, r2
 80115a0:	18ed      	addgt	r5, r5, r3
 80115a2:	2600      	movs	r6, #0
 80115a4:	341a      	adds	r4, #26
 80115a6:	42b5      	cmp	r5, r6
 80115a8:	d11a      	bne.n	80115e0 <_printf_common+0xc8>
 80115aa:	2000      	movs	r0, #0
 80115ac:	e008      	b.n	80115c0 <_printf_common+0xa8>
 80115ae:	2301      	movs	r3, #1
 80115b0:	4652      	mov	r2, sl
 80115b2:	4649      	mov	r1, r9
 80115b4:	4638      	mov	r0, r7
 80115b6:	47c0      	blx	r8
 80115b8:	3001      	adds	r0, #1
 80115ba:	d103      	bne.n	80115c4 <_printf_common+0xac>
 80115bc:	f04f 30ff 	mov.w	r0, #4294967295
 80115c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115c4:	3501      	adds	r5, #1
 80115c6:	e7c6      	b.n	8011556 <_printf_common+0x3e>
 80115c8:	18e1      	adds	r1, r4, r3
 80115ca:	1c5a      	adds	r2, r3, #1
 80115cc:	2030      	movs	r0, #48	; 0x30
 80115ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115d2:	4422      	add	r2, r4
 80115d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115dc:	3302      	adds	r3, #2
 80115de:	e7c7      	b.n	8011570 <_printf_common+0x58>
 80115e0:	2301      	movs	r3, #1
 80115e2:	4622      	mov	r2, r4
 80115e4:	4649      	mov	r1, r9
 80115e6:	4638      	mov	r0, r7
 80115e8:	47c0      	blx	r8
 80115ea:	3001      	adds	r0, #1
 80115ec:	d0e6      	beq.n	80115bc <_printf_common+0xa4>
 80115ee:	3601      	adds	r6, #1
 80115f0:	e7d9      	b.n	80115a6 <_printf_common+0x8e>
	...

080115f4 <_printf_i>:
 80115f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115f8:	460c      	mov	r4, r1
 80115fa:	4691      	mov	r9, r2
 80115fc:	7e27      	ldrb	r7, [r4, #24]
 80115fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011600:	2f78      	cmp	r7, #120	; 0x78
 8011602:	4680      	mov	r8, r0
 8011604:	469a      	mov	sl, r3
 8011606:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801160a:	d807      	bhi.n	801161c <_printf_i+0x28>
 801160c:	2f62      	cmp	r7, #98	; 0x62
 801160e:	d80a      	bhi.n	8011626 <_printf_i+0x32>
 8011610:	2f00      	cmp	r7, #0
 8011612:	f000 80d8 	beq.w	80117c6 <_printf_i+0x1d2>
 8011616:	2f58      	cmp	r7, #88	; 0x58
 8011618:	f000 80a3 	beq.w	8011762 <_printf_i+0x16e>
 801161c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011624:	e03a      	b.n	801169c <_printf_i+0xa8>
 8011626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801162a:	2b15      	cmp	r3, #21
 801162c:	d8f6      	bhi.n	801161c <_printf_i+0x28>
 801162e:	a001      	add	r0, pc, #4	; (adr r0, 8011634 <_printf_i+0x40>)
 8011630:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011634:	0801168d 	.word	0x0801168d
 8011638:	080116a1 	.word	0x080116a1
 801163c:	0801161d 	.word	0x0801161d
 8011640:	0801161d 	.word	0x0801161d
 8011644:	0801161d 	.word	0x0801161d
 8011648:	0801161d 	.word	0x0801161d
 801164c:	080116a1 	.word	0x080116a1
 8011650:	0801161d 	.word	0x0801161d
 8011654:	0801161d 	.word	0x0801161d
 8011658:	0801161d 	.word	0x0801161d
 801165c:	0801161d 	.word	0x0801161d
 8011660:	080117ad 	.word	0x080117ad
 8011664:	080116d1 	.word	0x080116d1
 8011668:	0801178f 	.word	0x0801178f
 801166c:	0801161d 	.word	0x0801161d
 8011670:	0801161d 	.word	0x0801161d
 8011674:	080117cf 	.word	0x080117cf
 8011678:	0801161d 	.word	0x0801161d
 801167c:	080116d1 	.word	0x080116d1
 8011680:	0801161d 	.word	0x0801161d
 8011684:	0801161d 	.word	0x0801161d
 8011688:	08011797 	.word	0x08011797
 801168c:	680b      	ldr	r3, [r1, #0]
 801168e:	1d1a      	adds	r2, r3, #4
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	600a      	str	r2, [r1, #0]
 8011694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801169c:	2301      	movs	r3, #1
 801169e:	e0a3      	b.n	80117e8 <_printf_i+0x1f4>
 80116a0:	6825      	ldr	r5, [r4, #0]
 80116a2:	6808      	ldr	r0, [r1, #0]
 80116a4:	062e      	lsls	r6, r5, #24
 80116a6:	f100 0304 	add.w	r3, r0, #4
 80116aa:	d50a      	bpl.n	80116c2 <_printf_i+0xce>
 80116ac:	6805      	ldr	r5, [r0, #0]
 80116ae:	600b      	str	r3, [r1, #0]
 80116b0:	2d00      	cmp	r5, #0
 80116b2:	da03      	bge.n	80116bc <_printf_i+0xc8>
 80116b4:	232d      	movs	r3, #45	; 0x2d
 80116b6:	426d      	negs	r5, r5
 80116b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116bc:	485e      	ldr	r0, [pc, #376]	; (8011838 <_printf_i+0x244>)
 80116be:	230a      	movs	r3, #10
 80116c0:	e019      	b.n	80116f6 <_printf_i+0x102>
 80116c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80116c6:	6805      	ldr	r5, [r0, #0]
 80116c8:	600b      	str	r3, [r1, #0]
 80116ca:	bf18      	it	ne
 80116cc:	b22d      	sxthne	r5, r5
 80116ce:	e7ef      	b.n	80116b0 <_printf_i+0xbc>
 80116d0:	680b      	ldr	r3, [r1, #0]
 80116d2:	6825      	ldr	r5, [r4, #0]
 80116d4:	1d18      	adds	r0, r3, #4
 80116d6:	6008      	str	r0, [r1, #0]
 80116d8:	0628      	lsls	r0, r5, #24
 80116da:	d501      	bpl.n	80116e0 <_printf_i+0xec>
 80116dc:	681d      	ldr	r5, [r3, #0]
 80116de:	e002      	b.n	80116e6 <_printf_i+0xf2>
 80116e0:	0669      	lsls	r1, r5, #25
 80116e2:	d5fb      	bpl.n	80116dc <_printf_i+0xe8>
 80116e4:	881d      	ldrh	r5, [r3, #0]
 80116e6:	4854      	ldr	r0, [pc, #336]	; (8011838 <_printf_i+0x244>)
 80116e8:	2f6f      	cmp	r7, #111	; 0x6f
 80116ea:	bf0c      	ite	eq
 80116ec:	2308      	moveq	r3, #8
 80116ee:	230a      	movne	r3, #10
 80116f0:	2100      	movs	r1, #0
 80116f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116f6:	6866      	ldr	r6, [r4, #4]
 80116f8:	60a6      	str	r6, [r4, #8]
 80116fa:	2e00      	cmp	r6, #0
 80116fc:	bfa2      	ittt	ge
 80116fe:	6821      	ldrge	r1, [r4, #0]
 8011700:	f021 0104 	bicge.w	r1, r1, #4
 8011704:	6021      	strge	r1, [r4, #0]
 8011706:	b90d      	cbnz	r5, 801170c <_printf_i+0x118>
 8011708:	2e00      	cmp	r6, #0
 801170a:	d04d      	beq.n	80117a8 <_printf_i+0x1b4>
 801170c:	4616      	mov	r6, r2
 801170e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011712:	fb03 5711 	mls	r7, r3, r1, r5
 8011716:	5dc7      	ldrb	r7, [r0, r7]
 8011718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801171c:	462f      	mov	r7, r5
 801171e:	42bb      	cmp	r3, r7
 8011720:	460d      	mov	r5, r1
 8011722:	d9f4      	bls.n	801170e <_printf_i+0x11a>
 8011724:	2b08      	cmp	r3, #8
 8011726:	d10b      	bne.n	8011740 <_printf_i+0x14c>
 8011728:	6823      	ldr	r3, [r4, #0]
 801172a:	07df      	lsls	r7, r3, #31
 801172c:	d508      	bpl.n	8011740 <_printf_i+0x14c>
 801172e:	6923      	ldr	r3, [r4, #16]
 8011730:	6861      	ldr	r1, [r4, #4]
 8011732:	4299      	cmp	r1, r3
 8011734:	bfde      	ittt	le
 8011736:	2330      	movle	r3, #48	; 0x30
 8011738:	f806 3c01 	strble.w	r3, [r6, #-1]
 801173c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011740:	1b92      	subs	r2, r2, r6
 8011742:	6122      	str	r2, [r4, #16]
 8011744:	f8cd a000 	str.w	sl, [sp]
 8011748:	464b      	mov	r3, r9
 801174a:	aa03      	add	r2, sp, #12
 801174c:	4621      	mov	r1, r4
 801174e:	4640      	mov	r0, r8
 8011750:	f7ff fee2 	bl	8011518 <_printf_common>
 8011754:	3001      	adds	r0, #1
 8011756:	d14c      	bne.n	80117f2 <_printf_i+0x1fe>
 8011758:	f04f 30ff 	mov.w	r0, #4294967295
 801175c:	b004      	add	sp, #16
 801175e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011762:	4835      	ldr	r0, [pc, #212]	; (8011838 <_printf_i+0x244>)
 8011764:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011768:	6823      	ldr	r3, [r4, #0]
 801176a:	680e      	ldr	r6, [r1, #0]
 801176c:	061f      	lsls	r7, r3, #24
 801176e:	f856 5b04 	ldr.w	r5, [r6], #4
 8011772:	600e      	str	r6, [r1, #0]
 8011774:	d514      	bpl.n	80117a0 <_printf_i+0x1ac>
 8011776:	07d9      	lsls	r1, r3, #31
 8011778:	bf44      	itt	mi
 801177a:	f043 0320 	orrmi.w	r3, r3, #32
 801177e:	6023      	strmi	r3, [r4, #0]
 8011780:	b91d      	cbnz	r5, 801178a <_printf_i+0x196>
 8011782:	6823      	ldr	r3, [r4, #0]
 8011784:	f023 0320 	bic.w	r3, r3, #32
 8011788:	6023      	str	r3, [r4, #0]
 801178a:	2310      	movs	r3, #16
 801178c:	e7b0      	b.n	80116f0 <_printf_i+0xfc>
 801178e:	6823      	ldr	r3, [r4, #0]
 8011790:	f043 0320 	orr.w	r3, r3, #32
 8011794:	6023      	str	r3, [r4, #0]
 8011796:	2378      	movs	r3, #120	; 0x78
 8011798:	4828      	ldr	r0, [pc, #160]	; (801183c <_printf_i+0x248>)
 801179a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801179e:	e7e3      	b.n	8011768 <_printf_i+0x174>
 80117a0:	065e      	lsls	r6, r3, #25
 80117a2:	bf48      	it	mi
 80117a4:	b2ad      	uxthmi	r5, r5
 80117a6:	e7e6      	b.n	8011776 <_printf_i+0x182>
 80117a8:	4616      	mov	r6, r2
 80117aa:	e7bb      	b.n	8011724 <_printf_i+0x130>
 80117ac:	680b      	ldr	r3, [r1, #0]
 80117ae:	6826      	ldr	r6, [r4, #0]
 80117b0:	6960      	ldr	r0, [r4, #20]
 80117b2:	1d1d      	adds	r5, r3, #4
 80117b4:	600d      	str	r5, [r1, #0]
 80117b6:	0635      	lsls	r5, r6, #24
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	d501      	bpl.n	80117c0 <_printf_i+0x1cc>
 80117bc:	6018      	str	r0, [r3, #0]
 80117be:	e002      	b.n	80117c6 <_printf_i+0x1d2>
 80117c0:	0671      	lsls	r1, r6, #25
 80117c2:	d5fb      	bpl.n	80117bc <_printf_i+0x1c8>
 80117c4:	8018      	strh	r0, [r3, #0]
 80117c6:	2300      	movs	r3, #0
 80117c8:	6123      	str	r3, [r4, #16]
 80117ca:	4616      	mov	r6, r2
 80117cc:	e7ba      	b.n	8011744 <_printf_i+0x150>
 80117ce:	680b      	ldr	r3, [r1, #0]
 80117d0:	1d1a      	adds	r2, r3, #4
 80117d2:	600a      	str	r2, [r1, #0]
 80117d4:	681e      	ldr	r6, [r3, #0]
 80117d6:	6862      	ldr	r2, [r4, #4]
 80117d8:	2100      	movs	r1, #0
 80117da:	4630      	mov	r0, r6
 80117dc:	f7ee fd18 	bl	8000210 <memchr>
 80117e0:	b108      	cbz	r0, 80117e6 <_printf_i+0x1f2>
 80117e2:	1b80      	subs	r0, r0, r6
 80117e4:	6060      	str	r0, [r4, #4]
 80117e6:	6863      	ldr	r3, [r4, #4]
 80117e8:	6123      	str	r3, [r4, #16]
 80117ea:	2300      	movs	r3, #0
 80117ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117f0:	e7a8      	b.n	8011744 <_printf_i+0x150>
 80117f2:	6923      	ldr	r3, [r4, #16]
 80117f4:	4632      	mov	r2, r6
 80117f6:	4649      	mov	r1, r9
 80117f8:	4640      	mov	r0, r8
 80117fa:	47d0      	blx	sl
 80117fc:	3001      	adds	r0, #1
 80117fe:	d0ab      	beq.n	8011758 <_printf_i+0x164>
 8011800:	6823      	ldr	r3, [r4, #0]
 8011802:	079b      	lsls	r3, r3, #30
 8011804:	d413      	bmi.n	801182e <_printf_i+0x23a>
 8011806:	68e0      	ldr	r0, [r4, #12]
 8011808:	9b03      	ldr	r3, [sp, #12]
 801180a:	4298      	cmp	r0, r3
 801180c:	bfb8      	it	lt
 801180e:	4618      	movlt	r0, r3
 8011810:	e7a4      	b.n	801175c <_printf_i+0x168>
 8011812:	2301      	movs	r3, #1
 8011814:	4632      	mov	r2, r6
 8011816:	4649      	mov	r1, r9
 8011818:	4640      	mov	r0, r8
 801181a:	47d0      	blx	sl
 801181c:	3001      	adds	r0, #1
 801181e:	d09b      	beq.n	8011758 <_printf_i+0x164>
 8011820:	3501      	adds	r5, #1
 8011822:	68e3      	ldr	r3, [r4, #12]
 8011824:	9903      	ldr	r1, [sp, #12]
 8011826:	1a5b      	subs	r3, r3, r1
 8011828:	42ab      	cmp	r3, r5
 801182a:	dcf2      	bgt.n	8011812 <_printf_i+0x21e>
 801182c:	e7eb      	b.n	8011806 <_printf_i+0x212>
 801182e:	2500      	movs	r5, #0
 8011830:	f104 0619 	add.w	r6, r4, #25
 8011834:	e7f5      	b.n	8011822 <_printf_i+0x22e>
 8011836:	bf00      	nop
 8011838:	08013ae9 	.word	0x08013ae9
 801183c:	08013afa 	.word	0x08013afa

08011840 <__sread>:
 8011840:	b510      	push	{r4, lr}
 8011842:	460c      	mov	r4, r1
 8011844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011848:	f000 f8d4 	bl	80119f4 <_read_r>
 801184c:	2800      	cmp	r0, #0
 801184e:	bfab      	itete	ge
 8011850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011852:	89a3      	ldrhlt	r3, [r4, #12]
 8011854:	181b      	addge	r3, r3, r0
 8011856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801185a:	bfac      	ite	ge
 801185c:	6563      	strge	r3, [r4, #84]	; 0x54
 801185e:	81a3      	strhlt	r3, [r4, #12]
 8011860:	bd10      	pop	{r4, pc}

08011862 <__swrite>:
 8011862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011866:	461f      	mov	r7, r3
 8011868:	898b      	ldrh	r3, [r1, #12]
 801186a:	05db      	lsls	r3, r3, #23
 801186c:	4605      	mov	r5, r0
 801186e:	460c      	mov	r4, r1
 8011870:	4616      	mov	r6, r2
 8011872:	d505      	bpl.n	8011880 <__swrite+0x1e>
 8011874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011878:	2302      	movs	r3, #2
 801187a:	2200      	movs	r2, #0
 801187c:	f000 f868 	bl	8011950 <_lseek_r>
 8011880:	89a3      	ldrh	r3, [r4, #12]
 8011882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801188a:	81a3      	strh	r3, [r4, #12]
 801188c:	4632      	mov	r2, r6
 801188e:	463b      	mov	r3, r7
 8011890:	4628      	mov	r0, r5
 8011892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011896:	f000 b817 	b.w	80118c8 <_write_r>

0801189a <__sseek>:
 801189a:	b510      	push	{r4, lr}
 801189c:	460c      	mov	r4, r1
 801189e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118a2:	f000 f855 	bl	8011950 <_lseek_r>
 80118a6:	1c43      	adds	r3, r0, #1
 80118a8:	89a3      	ldrh	r3, [r4, #12]
 80118aa:	bf15      	itete	ne
 80118ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80118ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118b6:	81a3      	strheq	r3, [r4, #12]
 80118b8:	bf18      	it	ne
 80118ba:	81a3      	strhne	r3, [r4, #12]
 80118bc:	bd10      	pop	{r4, pc}

080118be <__sclose>:
 80118be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118c2:	f000 b813 	b.w	80118ec <_close_r>
	...

080118c8 <_write_r>:
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	4d07      	ldr	r5, [pc, #28]	; (80118e8 <_write_r+0x20>)
 80118cc:	4604      	mov	r4, r0
 80118ce:	4608      	mov	r0, r1
 80118d0:	4611      	mov	r1, r2
 80118d2:	2200      	movs	r2, #0
 80118d4:	602a      	str	r2, [r5, #0]
 80118d6:	461a      	mov	r2, r3
 80118d8:	f7ee fe9a 	bl	8000610 <_write>
 80118dc:	1c43      	adds	r3, r0, #1
 80118de:	d102      	bne.n	80118e6 <_write_r+0x1e>
 80118e0:	682b      	ldr	r3, [r5, #0]
 80118e2:	b103      	cbz	r3, 80118e6 <_write_r+0x1e>
 80118e4:	6023      	str	r3, [r4, #0]
 80118e6:	bd38      	pop	{r3, r4, r5, pc}
 80118e8:	20004d28 	.word	0x20004d28

080118ec <_close_r>:
 80118ec:	b538      	push	{r3, r4, r5, lr}
 80118ee:	4d06      	ldr	r5, [pc, #24]	; (8011908 <_close_r+0x1c>)
 80118f0:	2300      	movs	r3, #0
 80118f2:	4604      	mov	r4, r0
 80118f4:	4608      	mov	r0, r1
 80118f6:	602b      	str	r3, [r5, #0]
 80118f8:	f7f1 f925 	bl	8002b46 <_close>
 80118fc:	1c43      	adds	r3, r0, #1
 80118fe:	d102      	bne.n	8011906 <_close_r+0x1a>
 8011900:	682b      	ldr	r3, [r5, #0]
 8011902:	b103      	cbz	r3, 8011906 <_close_r+0x1a>
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	bd38      	pop	{r3, r4, r5, pc}
 8011908:	20004d28 	.word	0x20004d28

0801190c <_fstat_r>:
 801190c:	b538      	push	{r3, r4, r5, lr}
 801190e:	4d07      	ldr	r5, [pc, #28]	; (801192c <_fstat_r+0x20>)
 8011910:	2300      	movs	r3, #0
 8011912:	4604      	mov	r4, r0
 8011914:	4608      	mov	r0, r1
 8011916:	4611      	mov	r1, r2
 8011918:	602b      	str	r3, [r5, #0]
 801191a:	f7f1 f920 	bl	8002b5e <_fstat>
 801191e:	1c43      	adds	r3, r0, #1
 8011920:	d102      	bne.n	8011928 <_fstat_r+0x1c>
 8011922:	682b      	ldr	r3, [r5, #0]
 8011924:	b103      	cbz	r3, 8011928 <_fstat_r+0x1c>
 8011926:	6023      	str	r3, [r4, #0]
 8011928:	bd38      	pop	{r3, r4, r5, pc}
 801192a:	bf00      	nop
 801192c:	20004d28 	.word	0x20004d28

08011930 <_isatty_r>:
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	4d06      	ldr	r5, [pc, #24]	; (801194c <_isatty_r+0x1c>)
 8011934:	2300      	movs	r3, #0
 8011936:	4604      	mov	r4, r0
 8011938:	4608      	mov	r0, r1
 801193a:	602b      	str	r3, [r5, #0]
 801193c:	f7f1 f91f 	bl	8002b7e <_isatty>
 8011940:	1c43      	adds	r3, r0, #1
 8011942:	d102      	bne.n	801194a <_isatty_r+0x1a>
 8011944:	682b      	ldr	r3, [r5, #0]
 8011946:	b103      	cbz	r3, 801194a <_isatty_r+0x1a>
 8011948:	6023      	str	r3, [r4, #0]
 801194a:	bd38      	pop	{r3, r4, r5, pc}
 801194c:	20004d28 	.word	0x20004d28

08011950 <_lseek_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4d07      	ldr	r5, [pc, #28]	; (8011970 <_lseek_r+0x20>)
 8011954:	4604      	mov	r4, r0
 8011956:	4608      	mov	r0, r1
 8011958:	4611      	mov	r1, r2
 801195a:	2200      	movs	r2, #0
 801195c:	602a      	str	r2, [r5, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	f7f1 f918 	bl	8002b94 <_lseek>
 8011964:	1c43      	adds	r3, r0, #1
 8011966:	d102      	bne.n	801196e <_lseek_r+0x1e>
 8011968:	682b      	ldr	r3, [r5, #0]
 801196a:	b103      	cbz	r3, 801196e <_lseek_r+0x1e>
 801196c:	6023      	str	r3, [r4, #0]
 801196e:	bd38      	pop	{r3, r4, r5, pc}
 8011970:	20004d28 	.word	0x20004d28

08011974 <memmove>:
 8011974:	4288      	cmp	r0, r1
 8011976:	b510      	push	{r4, lr}
 8011978:	eb01 0402 	add.w	r4, r1, r2
 801197c:	d902      	bls.n	8011984 <memmove+0x10>
 801197e:	4284      	cmp	r4, r0
 8011980:	4623      	mov	r3, r4
 8011982:	d807      	bhi.n	8011994 <memmove+0x20>
 8011984:	1e43      	subs	r3, r0, #1
 8011986:	42a1      	cmp	r1, r4
 8011988:	d008      	beq.n	801199c <memmove+0x28>
 801198a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801198e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011992:	e7f8      	b.n	8011986 <memmove+0x12>
 8011994:	4402      	add	r2, r0
 8011996:	4601      	mov	r1, r0
 8011998:	428a      	cmp	r2, r1
 801199a:	d100      	bne.n	801199e <memmove+0x2a>
 801199c:	bd10      	pop	{r4, pc}
 801199e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80119a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80119a6:	e7f7      	b.n	8011998 <memmove+0x24>

080119a8 <_realloc_r>:
 80119a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119aa:	4607      	mov	r7, r0
 80119ac:	4614      	mov	r4, r2
 80119ae:	460e      	mov	r6, r1
 80119b0:	b921      	cbnz	r1, 80119bc <_realloc_r+0x14>
 80119b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80119b6:	4611      	mov	r1, r2
 80119b8:	f7ff b870 	b.w	8010a9c <_malloc_r>
 80119bc:	b922      	cbnz	r2, 80119c8 <_realloc_r+0x20>
 80119be:	f7ff f81d 	bl	80109fc <_free_r>
 80119c2:	4625      	mov	r5, r4
 80119c4:	4628      	mov	r0, r5
 80119c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119c8:	f000 f826 	bl	8011a18 <_malloc_usable_size_r>
 80119cc:	42a0      	cmp	r0, r4
 80119ce:	d20f      	bcs.n	80119f0 <_realloc_r+0x48>
 80119d0:	4621      	mov	r1, r4
 80119d2:	4638      	mov	r0, r7
 80119d4:	f7ff f862 	bl	8010a9c <_malloc_r>
 80119d8:	4605      	mov	r5, r0
 80119da:	2800      	cmp	r0, #0
 80119dc:	d0f2      	beq.n	80119c4 <_realloc_r+0x1c>
 80119de:	4631      	mov	r1, r6
 80119e0:	4622      	mov	r2, r4
 80119e2:	f7fe fff5 	bl	80109d0 <memcpy>
 80119e6:	4631      	mov	r1, r6
 80119e8:	4638      	mov	r0, r7
 80119ea:	f7ff f807 	bl	80109fc <_free_r>
 80119ee:	e7e9      	b.n	80119c4 <_realloc_r+0x1c>
 80119f0:	4635      	mov	r5, r6
 80119f2:	e7e7      	b.n	80119c4 <_realloc_r+0x1c>

080119f4 <_read_r>:
 80119f4:	b538      	push	{r3, r4, r5, lr}
 80119f6:	4d07      	ldr	r5, [pc, #28]	; (8011a14 <_read_r+0x20>)
 80119f8:	4604      	mov	r4, r0
 80119fa:	4608      	mov	r0, r1
 80119fc:	4611      	mov	r1, r2
 80119fe:	2200      	movs	r2, #0
 8011a00:	602a      	str	r2, [r5, #0]
 8011a02:	461a      	mov	r2, r3
 8011a04:	f7f1 f882 	bl	8002b0c <_read>
 8011a08:	1c43      	adds	r3, r0, #1
 8011a0a:	d102      	bne.n	8011a12 <_read_r+0x1e>
 8011a0c:	682b      	ldr	r3, [r5, #0]
 8011a0e:	b103      	cbz	r3, 8011a12 <_read_r+0x1e>
 8011a10:	6023      	str	r3, [r4, #0]
 8011a12:	bd38      	pop	{r3, r4, r5, pc}
 8011a14:	20004d28 	.word	0x20004d28

08011a18 <_malloc_usable_size_r>:
 8011a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a1c:	1f18      	subs	r0, r3, #4
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	bfbc      	itt	lt
 8011a22:	580b      	ldrlt	r3, [r1, r0]
 8011a24:	18c0      	addlt	r0, r0, r3
 8011a26:	4770      	bx	lr

08011a28 <_init>:
 8011a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a2a:	bf00      	nop
 8011a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a2e:	bc08      	pop	{r3}
 8011a30:	469e      	mov	lr, r3
 8011a32:	4770      	bx	lr

08011a34 <_fini>:
 8011a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a36:	bf00      	nop
 8011a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a3a:	bc08      	pop	{r3}
 8011a3c:	469e      	mov	lr, r3
 8011a3e:	4770      	bx	lr
